% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mv_ag.R
\name{mv_ag}
\alias{mv_ag}
\title{Multi Value Trait Aggregation function}
\usage{
mv_ag(
  df,
  group,
  mvCols = "frequencies",
  n_per_group = 1,
  outRows = NULL,
  keep = NULL,
  parallel = getOption("mc.cores", 1),
  traitCol = "trait",
  labelCol = "label",
  valueCol = "value",
  id = "image"
)
}
\arguments{
\item{df}{A dataframe with multi value traits. This can be in wide or long format,
data is assumed to be long if traitCol, valueCol, and labelCol are present.}

\item{group}{Vector of column names for variables which uniquely identify groups
in the data to summarize data over. Typically this would be the design variables
and a time variable.}

\item{mvCols}{Either a vector of column names/positions representing multi value
traits or a character string that identifies the multi value trait columns as a
regex pattern. Defaults to "frequencies".}

\item{n_per_group}{Number of rows to return for each group.}

\item{outRows}{Optionally this is a different way to specify how many rows to return.
This will often not be exact so that groups have the same number of observations each.}

\item{keep}{A vector of single value traits to also average over groups, if there are
a mix of single and multi value traits in your data.}

\item{parallel}{Optionally the groups can be run in parallel with this number of cores,
defaults to 1 if the "mc.cores" option is not set globally.}

\item{traitCol}{Column with phenotype names, defaults to "trait".}

\item{labelCol}{Column with phenotype labels (units), defaults to "label".}

\item{valueCol}{Column with phenotype values, defaults to "value".}

\item{id}{Column that uniquely identifies images if the data is in long format.
This is ignored when data is in wide format.}
}
\value{
Returns a dataframe summarized by the specified groups over the multi-value traits.
}
\description{
EMD can get very heavy with large datasets. For an example
lemnatech dataset filtering for images from every 5th day there are
6332^2 = 40,094,224 pairwise EMD values. In long format that's a 40 million row dataframe,
which is unwieldy. This function is to help reduce the size of datasets before
comparing histograms and moving on with matrix methods or network analysis.
}
\examples{

## Not run:

makeMvData <- function(bins = 180, mu, sigma) {
  setNames(
    data.frame(matrix(hist(rnorm(2000, mu, sigma),
      breaks = seq(1, bins, 1), plot = FALSE
    )$counts, nrow = 1)),
    paste0("b", 1:(bins - 1))
  )
}
set.seed(123)
mv <- rbind(
  do.call(rbind, lapply(1:30, function(i) {
    makeMvData(bins = 180, mu = 50, sigma = 10)
  })),
  do.call(rbind, lapply(1:30, function(i) {
    makeMvData(bins = 180, mu = 60, sigma = 12)
  }))
)
mv$group <- rep(c("a", "b"), each = 30)
dim(mv)
mv_aggregated <- mv_ag(mv, group = "group", n_per_group = 5, mvCols = "b")
dim(mv_aggregated)


if (FALSE) {
  hue_wide <- read.pcv(
    paste0(
      "https://media.githubusercontent.com/media/joshqsumner/",
      "pcvrTestData/main/pcv4-multi-value-traits.csv"
    ),
    mode = "wide", reader = "fread"
  )

  hue_wide$genotype <- substr(hue_wide$barcode, 3, 5)
  hue_wide$genotype <- ifelse(hue_wide$genotype == "002", "B73",
    ifelse(hue_wide$genotype == "003", "W605S",
      ifelse(hue_wide$genotype == "004", "MM", "Mo17")
    )
  )
  hue_wide$fertilizer <- substr(hue_wide$barcode, 8, 8)
  hue_wide$fertilizer <- ifelse(hue_wide$fertilizer == "A", "100",
    ifelse(hue_wide$fertilizer == "B", "50", "0")
  )
  hue_wide <- bw.time(hue_wide, timeCol = "timestamp", group = "barcode")
  phenotypes <- colnames(hue_wide)[grepl("hue_frequencies", colnames(hue_wide))]
  phenoForm <- paste0("cbind(", paste0(phenotypes, collapse = ", "), ")")
  groupForm <- "DAS+barcode+genotype+fertilizer"
  form <- as.formula(paste0(phenoForm, "~", groupForm))
  hue_wide <- aggregate(form, data = hue_wide, mean, na.rm = TRUE)
  dim(hue_wide)
  hue_ag1 <- mv_ag(
    df = hue_wide, group = c("DAS", "genotype", "fertilizer"),
    n_per_group = 2
  )
  dim(hue_ag1)
  hue_ag2 <- mv_ag(hue_wide,
    group = c("DAS", "genotype", "fertilizer"),
    n_per_group = 1
  )
  dim(hue_ag2)

  hue_long <- read.pcv(
    paste0(
      "https://media.githubusercontent.com/media/joshqsumner/",
      "pcvrTestData/main/pcv4-multi-value-traits.csv"
    ),
    reader = "fread"
  )
  hue_long$genotype <- substr(hue_long$barcode, 3, 5)
  hue_long$genotype <- ifelse(hue_long$genotype == "002", "B73",
    ifelse(hue_long$genotype == "003", "W605S",
      ifelse(hue_long$genotype == "004", "MM", "Mo17")
    )
  )
  hue_long$fertilizer <- substr(hue_long$barcode, 8, 8)
  hue_long$fertilizer <- ifelse(hue_long$fertilizer == "A", "100",
    ifelse(hue_long$fertilizer == "B", "50", "0")
  )
  hue_long <- bw.time(hue_long, timeCol = "timestamp", group = "barcode")
  dim(hue_long)
  hue_ag3 <- mv_ag(hue_long,
    group = c("DAS", "genotype", "fertilizer"),
    mvCols = "hue", n_per_group = 2
  )
  dim(hue_ag3)
  head(hue_ag3)
}

## End(Not run)

}
\keyword{distance,}
\keyword{earth}
\keyword{emd,}
\keyword{mover's}
\keyword{multi-value}
\keyword{network}
\keyword{trait,}
