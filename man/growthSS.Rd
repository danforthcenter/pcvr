% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brmSS.R
\name{growthSS}
\alias{growthSS}
\title{Ease of use brms starter function for 6 growth model parameterizations}
\usage{
growthSS(model, form, sigma = NULL, df, priors = NULL)
}
\arguments{
\item{model}{The name of a model as a character string. Supported options are c("logistic", "gompertz", "monomolecular", "exponential", "linear", "power law"). See \code{\link{growthSim}} for examples of each type of growth curve.}

\item{form}{A formula describing the model. The left hand side should only be the outcome variable (phenotype). The right hand side needs at least the x variable (typically time). Grouping is also described in this formula using roughly lme4 style syntax,with formulas like \code{y~time|individual/group} to show that predictors should vary by \code{group} and autocorrelation between \code{individual:group} interactions should be modeled. If group has only one level or is not included then it will be ignored in formulas for growth and variance (this may be the case if you split data before fitting models to be able to run more smaller models each more quickly).}

\item{sigma}{A model for heteroskedasticity from c("homo", "linear", "spline").}

\item{df}{A dataframe to use. Must contain all the variables listed in the formula.}

\item{priors}{A named list of means for prior distributions. Currently this function makes lognormal priors for all growth model parameters. This is done because the values are strictly positive and the lognormal distribution is easily interpreted. If this argument is not provided then priors are not returned and a different set of priors will need to be made for the model using \code{brms::set_prior}. This works similarly to the \code{params} argument in \code{growthSim}. Names should correspond to parameter names from the \code{model} argument. A numeric vector can also be used, but specifying names is best practice for clarity. See details.}
}
\value{
A named list of elements to make it easier to fit common brms models.
\code{formula}: A \code{brms::bf} formula specifying the growth model, autocorrelation, variance submodel,
and models for each variable in the growth model.
\code{prior}: A brmsprior/data.frame object.
\code{initfun}: A function to randomly initialize chains using a random draw from a gamma
distribution (confines initial values to positive and makes correct number
of initial values for chains and groups).
\code{df} The data input, possibly with dummy variables added if needed.
\code{family} The model family, currently this will always be "student".
}
\description{
Ease of use brms starter function for 6 growth model parameterizations
}
\details{
Default priors are not provided, but these can serve as starting points for each distribution. 
You are encouraged to use \code{growthSim} to consider what kind of trendlines result from changes to your prior and for interpretation of each parameter.
You should not looking back and forth at your data trying to match your observed growth exactly with a prior distribution,
rather this should be informed by an understanding of the plants you are using and expectations based on previous research. 

\itemize{
   \item \bold{Logistic}: \code{list(A = 130, B = 12, C = 3)}
    \item \bold{Gompertz}: \code{list(A = 130, B = 12, C = 1.25)}
    \item \bold{Monomolecular}: \code{list(A = 130, B = 2)}
    \item \bold{Exponential}: \code{list(A = 15, B = 0.1)}
    \item \bold{Linear}: \code{list(A = 1)}
    \item \bold{Power Law}: \code{list(A = 13, B = 2)}
}
}
\examples{

## Not run:

simdf<-growthSim("logistic", n=20, t=25,
params = list("A"=c(200,160), "B"=c(13, 11), "C"=c(3, 3.5)))
ss<-growthSS(model = "logistic", form=y~time|id/group,
sigma="spline", df=simdf, priors = list("A"=130, "B"=12, "C"=3))
lapply(ss,class)
ss$initfun()
# fit_test <- brm( # main components of the model
#         ss$formula, prior = ss$prior, data = ss$df, family = ss$family,
#         # parameters controling chain number, chain length, parallelization and starting values
#         iter = 1000, cores = 2, chains = 2, init = ss$initfun, 
#         # options to increase performance
#        control = list(adapt_delta = 0.999, max_treedepth = 20), backend = "cmdstanr")
# or 

# fit_test <- fitGrowth(ss, iter = 1000, cores = 2, chains = 2, backend = "cmdstanr",
#  control = list(adapt_delta = 0.999, max_treedepth = 20))

## End(Not run)              
              
}
\keyword{Bayesian,}
\keyword{brms}
