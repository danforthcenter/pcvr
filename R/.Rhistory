out$summary <- cbind(
out$summary,
data.frame("hyp" = hypothesis, "post.prob" = as.numeric(postProbRes$post.prob))
)
dirSymbol <- postProbRes$direction
} else {
dirSymbol <- NULL
}
#* `parse output and do ROPE`
if (!is.null(rope_range)) {
rope_res <- .conj_rope(sample_results, rope_range, rope_ci, plot, method)
out$summary <- cbind(out$summary, rope_res$summary)
} else {
rope_res <- NULL
}
out$posterior <- lapply(sample_results, function(s) s$posterior)
out$posterior
out$summary
out$summary$post.prob
load_all()
test <- conjugate(s1 = rnorm(10, 20, 5), s2 = rnorm(10, 15, 3),
method = "bivariate_gaussian",
priors = NULL, plot = TRUE, rope_range = NULL,
rope_ci = 0.89, cred.int.level = 0.89, hypothesis = "equal",
support = NULL)
load_all()
test <- conjugate(s1 = rnorm(10, 20, 5), s2 = rnorm(10, 15, 3),
method = "bivariate_gaussian",
priors = NULL, plot = TRUE, rope_range = NULL,
rope_ci = 0.89, cred.int.level = 0.89, hypothesis = "equal",
support = NULL)
test$plot
rm(list = ls())
s1 = rnorm(10, 20, 5); s2 = rnorm(10, 15, 3);
method = "bivariate_gaussian";
priors = NULL; plot = TRUE; rope_range = NULL;
rope_ci = 0.89; cred.int.level = 0.89; hypothesis = "equal";
support = NULL
#* `Handle formula option in s1`
samples <- .formatSamples(s1, s2)
s1 <- samples$s1
s2 <- samples$s2
#* `check length of method, replicate if there is a second sample`
if (length(method) == 1 && !is.null(s2)) {
method <- rep(method, 2)
}
if (!is.null(priors) && !methods::is(priors[[1]], "list")) {
priors <- list(priors, priors)
}
samplesList <- list(s1)
if (!is.null(s2)) {
samplesList[[2]] <- s2
}
if (is.null(support)) {
support <- .getSupport(samplesList, method, priors) # calculate shared support
}
sample_results <- lapply(seq_along(samplesList), function(i) {
sample <- samplesList[[i]]
prior <- priors[[i]]
#* `Check sample class`
if (is.matrix(sample) | is.data.frame(sample)) {
vec <- FALSE
} else if (is.vector(sample)) {
vec <- TRUE
} else {
stop("samples must be a vector, data.frame, or matrix.")
}
matched_arg <- match.arg(method[i], choices = c(
"t", "gaussian", "beta", "binomial",
"lognormal", "lognormal2", "poisson", "negbin",
"vonmises", "vonmises2",
"uniform", "pareto", "gamma", "bernoulli", "exponential",
"bivariate_uniform", "bivariate_gaussian", "bivariate_lognormal"
))
# turning off dirichlet until I decide on a new implementation that I like better
# and a use case that isn't so ripe for abuse.
vec_suffix <- if (vec) {
"sv"
} else {
"mv"
}
matched_fun <- get(paste0(".conj_", matched_arg, "_", vec_suffix))
res <- matched_fun(sample, prior, plot, support, cred.int.level)
return(res)
})
#* `combine results into an object to return`
out <- list()
load_all()
rm(list = ls())
s1 = rnorm(10, 20, 5); s2 = rnorm(10, 15, 3);
method = "bivariate_gaussian";
priors = NULL; plot = TRUE; rope_range = NULL;
rope_ci = 0.89; cred.int.level = 0.89; hypothesis = "equal";
support = NULL
#* `Handle formula option in s1`
samples <- .formatSamples(s1, s2)
s1 <- samples$s1
s2 <- samples$s2
#* `check length of method, replicate if there is a second sample`
if (length(method) == 1 && !is.null(s2)) {
method <- rep(method, 2)
}
if (!is.null(priors) && !methods::is(priors[[1]], "list")) {
priors <- list(priors, priors)
}
samplesList <- list(s1)
if (!is.null(s2)) {
samplesList[[2]] <- s2
}
if (is.null(support)) {
support <- .getSupport(samplesList, method, priors) # calculate shared support
}
sample_results <- lapply(seq_along(samplesList), function(i) {
sample <- samplesList[[i]]
prior <- priors[[i]]
#* `Check sample class`
if (is.matrix(sample) | is.data.frame(sample)) {
vec <- FALSE
} else if (is.vector(sample)) {
vec <- TRUE
} else {
stop("samples must be a vector, data.frame, or matrix.")
}
matched_arg <- match.arg(method[i], choices = c(
"t", "gaussian", "beta", "binomial",
"lognormal", "lognormal2", "poisson", "negbin",
"vonmises", "vonmises2",
"uniform", "pareto", "gamma", "bernoulli", "exponential",
"bivariate_uniform", "bivariate_gaussian", "bivariate_lognormal"
))
# turning off dirichlet until I decide on a new implementation that I like better
# and a use case that isn't so ripe for abuse.
vec_suffix <- if (vec) {
"sv"
} else {
"mv"
}
matched_fun <- get(paste0(".conj_", matched_arg, "_", vec_suffix))
res <- matched_fun(sample, prior, plot, support, cred.int.level)
return(res)
})
#* `combine results into an object to return`
out <- list()
out$summary <- do.call(cbind, lapply(seq_along(sample_results), function(i) {
s <- sample_results[[i]]$summary
if (i == 2) {
s <- s[, -which(grepl("param", colnames(s)))]
colnames(s) <- gsub("1", "2", colnames(s))
}
s
}))
if (!is.null(s2)) {
postProbRes <- .pdf.handling(sample_results[[1]]$pdf, sample_results[[2]]$pdf, hypothesis)
out$summary <- cbind(
out$summary,
data.frame("hyp" = hypothesis, "post.prob" = as.numeric(postProbRes$post.prob))
)
dirSymbol <- postProbRes$direction
} else {
dirSymbol <- NULL
}
#* `parse output and do ROPE`
if (!is.null(rope_range)) {
rope_res <- .conj_rope(sample_results, rope_range, rope_ci, plot, method)
out$summary <- cbind(out$summary, rope_res$summary)
} else {
rope_res <- NULL
}
out$posterior <- lapply(sample_results, function(s) s$posterior)
res = out
TITLE = "Joint Posterior Distribution"
#* `Make plots for sample 2 if it exists`
margin_plot_df <- do.call(rbind, lapply(1:2, function(i) {
md <- sample_results[[i]]$plot_df
md$sample <- paste0("Sample ", i)
md
}))
params <- unique(margin_plot_df$param)
joint_dist <- do.call(rbind, lapply(1:2, function(i) {
pd <- sample_results[[i]]$posteriorDraws
pd$sample <- paste0("Sample ", i)
pd
}))
head(joint_dist)
#* `Define Limits`
limits <- lapply(params, function(p) {
sub <- margin_plot_df[margin_plot_df$param == p, ]
range(sub$range)
})
limits
names(limits) <- params
x_lim <- limits[[1]]
y_lim <- limits[[2]]
#* `Make joint distribution plot`
v_lines <- res$summary[res$summary$param == params[1], ]
h_lines <- res$summary[res$summary$param == params[2], ]
joint_p <- ggplot2::ggplot(joint_dist,
ggplot2::aes(x = .data[[params[1]]], y = .data[[params[2]]],
group = .data[["sample"]])) +
ggplot2::geom_hline(yintercept = h_lines$HDI_1_low, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_hline(yintercept = h_lines$HDI_1_high, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_hline(yintercept = h_lines$HDI_2_low, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_hline(yintercept = h_lines$HDI_2_high, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_vline(xintercept = v_lines$HDI_1_low, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_vline(xintercept = v_lines$HDI_1_high, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_vline(xintercept = v_lines$HDI_2_low, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_vline(xintercept = v_lines$HDI_2_high, color = "gray80", linetype = 5,
linewidth = 0.25) +
geom_density_2d_filled(breaks = ~pretty(., n = 51)[-1], alpha = 0.9)+
ggplot2::scale_fill_viridis_d(option = "plasma")+
ggplot2::xlim(x_lim) +
ggplot2::ylim(y_lim) +
pcv_theme() +
ggplot2::theme(legend.position = "none")
joint_p
#* `Make marginal distribution plot of each parameter (x, y)`
margin_plots <- lapply(params, function(par) {
hdf <- res$summary
hdf <- hdf[hdf$param == par, ]
ggplot2::ggplot() +
ggplot2::geom_area(data = margin_plot_df[margin_plot_df$param == par, ],
alpha = 0.5, ggplot2::aes(x = .data$range, y = .data$prob,
fill = .data$sample),
position = "identity") +
ggplot2::geom_vline(data = data.frame(),
ggplot2::aes(
xintercept = hdf[, "HDI_1_low"]
),
color = "red", linetype = "dashed",
linewidth = 0.5
) +
ggplot2::geom_vline(data = data.frame(),
ggplot2::aes(
xintercept = hdf[, "HDE_1"]
),
color = "red", linewidth = 0.5
) +
ggplot2::geom_vline(data = data.frame(),
ggplot2::aes(
xintercept = hdf[, "HDI_1_high"]
),
color = "red", linetype = "dashed", linewidth = 0.5
) +
ggplot2::geom_vline(data = data.frame(),
ggplot2::aes(
xintercept = hdf[, "HDI_2_low"]
),
color = "blue", linetype = "dashed",
linewidth = 0.5
) +
ggplot2::geom_vline(data = data.frame(),
ggplot2::aes(
xintercept = hdf[, "HDE_2"]
),
color = "blue", linewidth = 0.5
) +
ggplot2::geom_vline(data = data.frame(),
ggplot2::aes(
xintercept = hdf[, "HDI_2_high"]
),
color = "blue", linetype = "dashed", linewidth = 0.5
) +
ggplot2::scale_fill_manual(values = c("red", "blue")) +
ggplot2::xlim(limits[[par]]) +
ggplot2::theme_void() +
ggplot2::theme(
legend.position = "inside",
legend.position.inside = c(0.1, 0.5),
legend.title = ggplot2::element_blank())
})
margin_plots
post.probs <- lapply(params, function(par) {
hdf <- res$summary
hdf <- hdf[hdf$param == par, ]
if (hdf$post.prob < 1e-5) {
post.prob.text <- "<1e-5"
} else {
post.prob.text <- round(hdf$post.prob, 5)
}
return(post.prob.text)
})
post.probs
names(post.probs) <- params
#* `Write title if there are 2 samples`
SUBTITLE <- paste(lapply(params, function(par) {
paste0(par, ": P[s1", dirSymbol, "s2] = ", post.probs[[par]])
}), collapse = "\n")
#* `Assemble Patchwork`
layout <- c(
patchwork::area(2, 1, 3, 2),
patchwork::area(1, 1, 1, 2),
patchwork::area(2, 3, 3, 3)
)
margin_plots[[2]] <- margin_plots[[2]] +
ggplot2::coord_flip() +
ggplot2::theme(legend.position = "none")
p <- joint_p + margin_plots[[1]] + margin_plots[[2]] +
patchwork::plot_layout(design = layout) &
patchwork::plot_annotation(title = TITLE, subtitle = SUBTITLE)
p
post.probs
params
post.probs[[par]]
post.probs[["Mu"]]
dirSymbol
#* `Write title if there are 2 samples`
SUBTITLE <- paste(lapply(params, function(par) {
paste0(par, ": P[s1", dirSymbol[[1]], "s2] = ", post.probs[[par]])
}), collapse = "\n")
if (length(sample_results) == 1) {
margin_plot_df <- sample_results[[1]]$plot_df
params <- unique(margin_plot_df$param)
#* `Make joint distribution plot`
joint_dist_s1 <- sample_results[[1]]$posteriorDraws
limits <- lapply(params, function(p) {
sub <- margin_plot_df[margin_plot_df$param == p, ]
range(sub$range)
})
names(limits) <- params
x_lim <- limits[[1]]
y_lim <- limits[[2]]
v_lines <- res$summary[res$summary$param == params[1], ]
h_lines <- res$summary[res$summary$param == params[2], ]
joint_p <- ggplot2::ggplot(joint_dist_s1,
ggplot2::aes(x = .data[[params[1]]], y = .data[[params[2]]],
group = .data[["sample"]])) +
ggplot2::geom_hline(yintercept = h_lines$HDI_1_low, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_hline(yintercept = h_lines$HDI_1_high, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_vline(xintercept = v_lines$HDI_1_low, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_vline(xintercept = v_lines$HDI_1_high, color = "gray80", linetype = 5,
linewidth = 0.25) +
geom_density_2d_filled(breaks = ~pretty(., n = 51)[-1], alpha = 0.9)+
ggplot2::scale_fill_viridis_d(option = "plasma")+
ggplot2::xlim(x_lim) +
ggplot2::ylim(y_lim) +
pcv_theme() +
ggplot2::theme(legend.position = "none")
#* `Make marginal distribution plot of each parameter (x, y)`
margin_plots <- lapply(params, function(par) {
ggplot2::ggplot(margin_plot_df[margin_plot_df$param == par, ],
ggplot2::aes(x = .data$range, y = .data$prob)) +
ggplot2::geom_area(data = s1_plot_df[margin_plot_df$param == par, ],
alpha = 0.5, ggplot2::aes(fill = "s1")) +
ggplot2::geom_vline(data = data.frame(),
ggplot2::aes(
xintercept = res$summary[res$summary$param == par, "HDI_1_low"]
),
color = "red",
linewidth = 0.5
) +
ggplot2::geom_vline(data = data.frame(),
ggplot2::aes(
xintercept = res$summary[res$summary$param == par, "HDE_1"]
),
color = "red", linetype = "dashed", linewidth = 0.5
) +
ggplot2::geom_vline(data = data.frame(),
ggplot2::aes(
xintercept = res$summary[res$summary$param == par, "HDI_1_high"]
),
color = "red", linetype = "dashed", linewidth = 0.5
) +
ggplot2::scale_fill_manual(values = "red") +
ggplot2::xlim(limits[[par]]) +
ggplot2::theme_void() +
ggplot2::theme(legend.title = ggplot2::element_blank())
})
#* `Write title if there is only 1 sample`
SUBTITLE <- NULL
} else if (length(sample_results) == 2) {
#* `Make plots for sample 2 if it exists`
margin_plot_df <- do.call(rbind, lapply(1:2, function(i) {
md <- sample_results[[i]]$plot_df
md$sample <- paste0("Sample ", i)
md
}))
params <- unique(margin_plot_df$param)
joint_dist <- do.call(rbind, lapply(1:2, function(i) {
pd <- sample_results[[i]]$posteriorDraws
pd$sample <- paste0("Sample ", i)
pd
}))
#* `Define Limits`
limits <- lapply(params, function(p) {
sub <- margin_plot_df[margin_plot_df$param == p, ]
range(sub$range)
})
names(limits) <- params
x_lim <- limits[[1]]
y_lim <- limits[[2]]
#* `Make joint distribution plot`
v_lines <- res$summary[res$summary$param == params[1], ]
h_lines <- res$summary[res$summary$param == params[2], ]
joint_p <- ggplot2::ggplot(joint_dist,
ggplot2::aes(x = .data[[params[1]]], y = .data[[params[2]]],
group = .data[["sample"]])) +
ggplot2::geom_hline(yintercept = h_lines$HDI_1_low, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_hline(yintercept = h_lines$HDI_1_high, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_hline(yintercept = h_lines$HDI_2_low, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_hline(yintercept = h_lines$HDI_2_high, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_vline(xintercept = v_lines$HDI_1_low, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_vline(xintercept = v_lines$HDI_1_high, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_vline(xintercept = v_lines$HDI_2_low, color = "gray80", linetype = 5,
linewidth = 0.25) +
ggplot2::geom_vline(xintercept = v_lines$HDI_2_high, color = "gray80", linetype = 5,
linewidth = 0.25) +
geom_density_2d_filled(breaks = ~pretty(., n = 51)[-1], alpha = 0.9)+
ggplot2::scale_fill_viridis_d(option = "plasma")+
ggplot2::xlim(x_lim) +
ggplot2::ylim(y_lim) +
pcv_theme() +
ggplot2::theme(legend.position = "none")
#* `Make marginal distribution plot of each parameter (x, y)`
margin_plots <- lapply(params, function(par) {
hdf <- res$summary
hdf <- hdf[hdf$param == par, ]
ggplot2::ggplot() +
ggplot2::geom_area(data = margin_plot_df[margin_plot_df$param == par, ],
alpha = 0.5, ggplot2::aes(x = .data$range, y = .data$prob,
fill = .data$sample),
position = "identity") +
ggplot2::geom_vline(data = data.frame(),
ggplot2::aes(
xintercept = hdf[, "HDI_1_low"]
),
color = "red", linetype = "dashed",
linewidth = 0.5
) +
ggplot2::geom_vline(data = data.frame(),
ggplot2::aes(
xintercept = hdf[, "HDE_1"]
),
color = "red", linewidth = 0.5
) +
ggplot2::geom_vline(data = data.frame(),
ggplot2::aes(
xintercept = hdf[, "HDI_1_high"]
),
color = "red", linetype = "dashed", linewidth = 0.5
) +
ggplot2::geom_vline(data = data.frame(),
ggplot2::aes(
xintercept = hdf[, "HDI_2_low"]
),
color = "blue", linetype = "dashed",
linewidth = 0.5
) +
ggplot2::geom_vline(data = data.frame(),
ggplot2::aes(
xintercept = hdf[, "HDE_2"]
),
color = "blue", linewidth = 0.5
) +
ggplot2::geom_vline(data = data.frame(),
ggplot2::aes(
xintercept = hdf[, "HDI_2_high"]
),
color = "blue", linetype = "dashed", linewidth = 0.5
) +
ggplot2::scale_fill_manual(values = c("red", "blue")) +
ggplot2::xlim(limits[[par]]) +
ggplot2::theme_void() +
ggplot2::theme(
legend.position = "inside",
legend.position.inside = c(0.1, 0.5),
legend.title = ggplot2::element_blank())
})
post.probs <- lapply(params, function(par) {
hdf <- res$summary
hdf <- hdf[hdf$param == par, ]
if (hdf$post.prob < 1e-5) {
post.prob.text <- "<1e-5"
} else {
post.prob.text <- round(hdf$post.prob, 5)
}
return(post.prob.text)
})
names(post.probs) <- params
#* `Write title if there are 2 samples`
SUBTITLE <- paste(lapply(params, function(par) {
paste0(par, ": P[s1", dirSymbol[[1]], "s2] = ", post.probs[[par]])
}), collapse = "\n")
}
#* `Assemble Patchwork`
layout <- c(
patchwork::area(2, 1, 3, 2),
patchwork::area(1, 1, 1, 2),
patchwork::area(2, 3, 3, 3)
)
margin_plots[[2]] <- margin_plots[[2]] +
ggplot2::coord_flip() +
ggplot2::theme(legend.position = "none")
p <- joint_p + margin_plots[[1]] + margin_plots[[2]] +
patchwork::plot_layout(design = layout) &
patchwork::plot_annotation(title = TITLE, subtitle = SUBTITLE)
p
