[{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"example-bellwether-lemnatech-workflow","dir":"Articles","previous_headings":"","what":"Example Bellwether (Lemnatech) Workflow","title":"Bellwether","text":"Bellwether phenotyping facility Donald Danforth Plant Science Center allows high throughput image based phenotyping 1140 plants course several weeks. generates massive amount image data typically analysed using plantCV, python based image analysis tool developed maintained Data Science Core Facility DDPSC. plantCV output Bellwether experiment consists numeric phenotypes commonly broken two categories, single value traits multi value traits. Single value traits phenotypes one image yields one value, things like plant height plant area. Multi value traits require multiple numbers describe single image currently limited color histograms various color spaces. focus hue channel HSV color, lots options data. package developed help common analysis tasks arise using plantCV output. goal experiment seems unsupported please consider raising issue github can know directions take development future. Installation pcvr github possible remotes devtools packages. may need restart R installing reinstalling packages. clone repository making edits can easily use local version : devtools::load_all(\"file/path//local/pcvr\") Functions pcvr use colorblind friendly palettes viridis package specify color/fill scales. functions specify color/fill scale use ggplot2 defaults. use functions base work please mindful choices regarding color. final note starting pcvr, vignette laid help guide analyses Bellwether experiments functions tend generalizable can used plantCV data well. code chunks vignette presented demonstrate syntax meant run locally following along. identified style:","code":"devtools::install_github(\"joshqsumner/pcvr\", build_vignettes = TRUE) library(pcvr) complicatedFunction(\"syntax\") # do not run this style 1 + 1 # run this style ## [1] 2 support <- seq(0, 1, 0.0001) # this style is simulated data plot(support, dbeta(support, 5, 5), type = \"l\", main = \"simulated example\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"load-data","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow","what":"Load Data","title":"Bellwether","text":"vignette use simulated data examples github using PlantCV output read online run metadata handling problems. simulated data picks roughly Reading pcv data article ends.","code":"set.seed(123) d <- growthSim(\"logistic\",   n = 30, t = 25,   params = list(     \"A\" = c(140, 155, 150, 165, 180, 190, 175, 185, 200, 220, 210, 205),     \"B\" = c(13, 11, 12, 11, 10, 11, 12, 13, 14, 12, 12, 13),     \"C\" = c(3, 3.25, 3.5, 3.1, 2.9, 3.4, 3.75, 2.9, 3, 3.1, 3.25, 3.3)   ) ) d$genotype <- ifelse(d$group %in% letters[1:3], \"MM\",   ifelse(d$group %in% letters[4:6], \"B73\",     ifelse(d$group %in% letters[7:9], \"Mo17\", \"W605S\")   ) ) d$fertilizer <- ifelse(d$group %in% letters[seq(1, 12, 3)], 0,   ifelse(d$group %in% letters[seq(2, 12, 3)], 50, 100) ) colnames(d)[c(1, 3, 4)] <- c(\"barcode\", \"DAS\", \"area_cm2\") d$height_cm <- growthSim(\"monomolecular\",   n = 30, t = 25,   params = list(     \"A\" = c(       25, 30, 35, 32, 34, 30,       37, 36, 34, 33, 35, 38     ),     \"B\" = c(       0.12, 0.08, 0.1, 0.11, 0.1,       0.12, 0.07, 0.12, 0.11, 0.09, 0.08, 0.09     )   ) )$y d$width_cm <- growthSim(\"power law\",   n = 30, t = 25,   params = list(     \"A\" = c(       10, 14, 13, 11, 12, 13,       10, 13, 14, 11, 14, 14     ),     \"B\" = c(       1.05, 1.13, 1.17, 1.01, 1.2,       1, 1.04, 1.07, 1.17, 1.04, 1.16, 1.17     )   ) )$y d$hue_circular_mean_degrees <- growthSim(\"linear\",   n = 30, t = 25,   params = list(\"A\" = c(runif(12, 1, 3))) )$y +   round(runif(nrow(d), 50, 60)) sv_ag <- d"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"frem","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow","what":"FREM","title":"Bellwether","text":"Now data read undergone basic quality control want know phenotypes best explained design variables. frem function partitions variance using fully random effects model (frem). provide dataframe, design variables, phenotypes, column representing time. default frem use last timepoint, controlled time argument. first example mark singular model fits (markSingular=TRUE) indicate places lme4::lmer convergence issues. Generally issues minor cause problems interpreting models, can pass additional arguments lme4::lmer additional arguments desired.   look much variance phenotype explained course experiment. also specify set times (time = c(10:14) example) interested particular timeframe.  informs next steps. Hue size based phenotypes well explained design variables might decide focus complex analyses . experiment mini maize one genotypes fertilizer treatment option nitrogen, intuitively makes sense passes eye check.","code":"frem(sv_ag,   des = c(\"genotype\", \"fertilizer\"),   phenotypes = c(\"area_cm2\", \"height_cm\", \"width_cm\", \"hue_circular_mean_degrees\"),   timeCol = \"DAS\", cor = TRUE, returnData = FALSE, combine = FALSE, markSingular = TRUE, time = NULL ) ## [[1]] ##  ## [[2]] frem(sv_ag,   des = c(\"genotype\", \"fertilizer\"),   phenotypes = c(\"area_cm2\", \"height_cm\", \"width_cm\"),   timeCol = \"DAS\", cor = FALSE, returnData = FALSE, combine = FALSE, markSingular = FALSE, time = \"all\" )"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"single-value-traits","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow","what":"Single Value Traits","title":"Bellwether","text":"analysis focus single value traits, phenotypes one object image returns numeric value area height. can compared longitudinally respect individual days. Note recommend using PCA single value traits look differences treatment groups, traits interpretable interdependent enough PCA appropriate.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"growth-trendlines","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Single Value Traits","what":"Growth Trendlines","title":"Bellwether","text":"Trendlines help us decide next steps make sense give general impression conditions yielded healthier plants.","code":"ggplot(sv_ag, aes(   x = DAS, y = area_cm2, group = interaction(genotype, fertilizer, lex.order = TRUE),   color = genotype )) +   facet_wrap(~ factor(fertilizer, levels = c(\"0\", \"50\", \"100\"))) +   geom_line(aes(group = interaction(barcode, genotype)), linewidth = 0.1) +   geom_smooth(method = \"loess\", se = TRUE, fill = \"gray90\", linewidth = 1, linetype = 5) +   labs(     y = expression(\"Area\" ~ \"(cm\"^2 ~ \")\"),     color = \"Genotype\"   ) +   guides(color = guide_legend(override.aes = list(linewidth = 5))) +   pcv_theme() +   theme(axis.text.x.bottom = element_text(angle = 0)) ## `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"single-day-comparisons","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Single Value Traits","what":"Single day comparisons","title":"Bellwether","text":"Non-longitudinal data (single day data larger longitudinal data) can compared using conjugate function. conjugate uses conjugate priors make simple Bayesian comparisons several types data. Optionally, region practical equivalence (ROPE) testing also supported. distributions supported function can used either wide long single value data wide multi-value data. See ?pcvr::conjugate conjugate tutorial details usage available options.  can see dramatic difference posterior distributions genotypes distribution differences samples entirely outside ROPE range.","code":"mo17_area <- sv_ag[sv_ag$genotype == \"Mo17\" & sv_ag$DAS > 18 & sv_ag$fertilizer == 100, \"area_cm2\"] b73_area <- sv_ag[sv_ag$genotype == \"B73\" & sv_ag$DAS > 18 & sv_ag$fertilizer == 100, \"area_cm2\"]  area_res_t <- conjugate(s1 = mo17_area, s2 = b73_area, method = \"t\", rope_range = c(-5, 5)) area_res_t ## Normal distributed Mu parameter of T distributed data. ##  ## Sample 1 Prior Normal(mu = 0, sd = 10) ##  Posterior Normal(mu = 180.856, sd = 1.38) ## Sample 2 Prior Normal(mu = 0, sd = 10) ##  Posterior Normal(mu = 179.441, sd = 1.095) ##  ## Posterior probability that S1 is equal to S2 = 56.001% ##  ## Probability of the difference between Mu parameters being within [-5:5] using a % Credible Interval is 100% with an average difference of 1.44 ##  ##  ##      HDE_1 HDI_1_low HDI_1_high    HDE_2 HDI_2_low HDI_2_high   hyp post.prob ## 1 180.8557    178.65   183.0614 179.4407  177.6901   181.1914 equal 0.5600134 ##   HDE_rope HDI_rope_low HDI_rope_high rope_prob ## 1 1.440218    -1.437485      4.270525         1 plot(area_res_t)"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"relative-tolerance","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Single Value Traits","what":"Relative Tolerance","title":"Bellwether","text":"Often bellwether experiments involve comparing stress tolerance groups. example dataset might want know genotype shows resilience reduced fertilizer. easily check can change data relativeTolerance. Details function can read ?pcvr::relativeTolerance. Note going making longitudinal model anyway makes sense use model assess relative tolerance rather transforming data different unit.  Looking entire data area phenotype busy might subset look something specific, see odd products plants germinating bellwether system.","code":"rt <- relativeTolerance(sv_ag,   phenotypes = c(\"area_cm2\", \"height_cm\"),   grouping = c(\"fertilizer\", \"genotype\", \"DAS\"), control = \"fertilizer\", controlGroup = \"100\" )  ggplot(   rt[rt$phenotype == \"area_cm2\" & rt$DAS %in% c(10:12), ],   aes(x = DAS, y = mu_rel, fill = interaction(fertilizer, genotype)) ) +   geom_col(position = \"dodge\") +   geom_errorbar(aes(ymin = mu_rel - 1.96 * se_rel, ymax = mu_rel + 1.96 * se_rel),     position = position_dodge(width = 0.9), width = 0.3   ) +   pcv_theme() +   labs(y = \"Relative Tolerance\", fill = \"Fertilizer\\nand Genotype\") pd <- rt[rt$phenotype == \"area_cm2\" & rt$DAS %in% c(5:19) & rt$fertilizer == \"0\", ] pd$upper_2se <- pd$mu_rel + 2 * pd$se_rel pd$lower_2se <- pd$mu_rel - 2 * pd$se_rel  ggplot(pd, aes(x = DAS, y = mu_rel, fill = genotype)) +   geom_col(position = \"dodge\") +   geom_errorbar(aes(     ymin = lower_2se, ymax = upper_2se,     group = genotype   ), position = \"dodge\") +   pcv_theme() +   labs(y = \"Relative Tolerance\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"cumulative-phenotypes","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Single Value Traits","what":"Cumulative Phenotypes","title":"Bellwether","text":"Sometimes might want use cumulative difference time. can check worked correctly trend lines:  Note wide data just wrapper around cumsum, useful function using PlantCV datasets wide long want keep R code standard.","code":"cp <- cumulativePheno(sv_ag, phenotypes = c(\"area_cm2\", \"height_cm\"),                       group = c(\"genotype\", \"fertilizer\", \"barcode\"), timeCol = \"DAS\") ggplot(cp, aes(x = DAS, y = area_cm2_csum, color = genotype,                group = interaction(genotype, barcode))) +   facet_wrap(~ factor(fertilizer, levels = c(\"0\", \"50\", \"100\"))) +   geom_line() +   pcv_theme() +   labs(     y = expression(\"Cumulative Sum of Area\" ~ \"(cm\"^2 ~ \")\"),     color = \"Genotype\"   )"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"longitudinal-modeling","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Single Value Traits","what":"Longitudinal Modeling","title":"Bellwether","text":"Longitudinal modeling comprehensive way use single value traits bellwether experiment. Longitudinal modeling can also complicated compared single timepoint analyses. Statistical complications including changes variance, non-linearity, autocorrelation present potential problems analyses. address recommend using hierarchical models. pcvr attempts lower barrier entry models helper functions use brms, nlme, nlrq, mgcv, nls. focus brms models, tutorials cover options.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"growth-model-forms","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Single Value Traits > Longitudinal Modeling","what":"Growth Model Forms","title":"Bellwether","text":"Based literature observed trends 13 growth models pcvr supports. six common shown using growthSim function remaining options visualized way.  Typically least one models good fit bellwether data, gompertz models broadly useful far. experiment plants germinated added machine, might see asymptotic size. Still, conceptually know plants stop growing near future might use gompertz model place exponential model looks like loess trendlines.","code":"simdf <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) l <- ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Logistic\") +   theme_minimal() +   theme(legend.position = \"none\")  simdf <- growthSim(\"gompertz\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(0.2, 0.25)) ) g <- ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Gompertz\") +   theme_minimal() +   theme(legend.position = \"none\")  simdf <- growthSim(\"monomolecular\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(0.08, 0.1)) ) m <- ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Monomolecular\") +   theme_minimal() +   theme(legend.position = \"none\")  simdf <- growthSim(\"exponential\",   n = 20, t = 25,   params = list(\"A\" = c(15, 20), \"B\" = c(0.095, 0.095)) ) e <- ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Exponential\") +   theme_minimal() +   theme(legend.position = \"none\")  simdf <- growthSim(\"linear\", n = 20, t = 25, params = list(\"A\" = c(1.1, 0.95))) ln <- ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Linear\") +   theme_minimal() +   theme(legend.position = \"none\")  simdf <- growthSim(\"power law\", n = 20, t = 25, params = list(\"A\" = c(16, 11), \"B\" = c(0.75, 0.7))) pl <- ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Power Law\") +   theme_minimal() +   theme(legend.position = \"none\")  (l + g + m) / (e + ln + pl)"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"model-setup","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Single Value Traits > Longitudinal Modeling","what":"Model setup","title":"Bellwether","text":"Coding multilevel Bayesian model can difficult time consuming process. Even greatly simplified syntax used brms can present barrier entry people benefit using robust models. help get around potential issue specific case measuring growth time pcvr includes several functions work brms, first growthSS, self-starter helper function use brms::brm.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"submodel-options","dir":"Articles","previous_headings":"","what":"Bellwether","title":"Bellwether","text":"purposes vignette consider default Student T model family, examples model families (useful count circular data especially) see Advanced Growth Modeling tutorial github longitudinal growth vignette. several ways consider variance time. default almost modeling assumes homoscedasticity, constant variance across predictor variables (time ). assumption unrealistic biological settings since seeds/seedlings start low area grow differently experiment. growthSS function can use main growth model options model distributional parameters (sigma). Splines asymptotic models often yield best fit data’s variance.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"prior-distributions","dir":"Articles","previous_headings":"","what":"Bellwether","title":"Bellwether","text":"important part Bayesian statistics setting appropriate prior. represent knowledge field used along collected data yield results. Priors generally weak relative data, meaning prior belief wrong experiment can move posterior distribution away prior meaningful way. growthSS priors can specified brmsprior object (case used ), named list (names representing parameters), numeric vector, values used generate lognormal priors long right tail. Lognormal priors long right tails used values growth curves strictly positive lognormal distribution easily interpreted. tail product variance, assumed 0.25 simplicity ensure priors wide. means location parameter needs provided. list used element list can length 1 case group use prior can vector length unique(data$group) group grouping variable form argument growthSS. vector used warning printed check assumed order groups correct. growthSim function can useful thinking reasonable prior distribution might , although priors picked trying get great fit eye collected data. can check priors made growthSS plotPrior function, can take list priors growthSS output.  Looking prior distributions way useful, still familiarizing given growth model parameter values may intuitive. help picking reasonable priors familiarizing meaning model parameters plotPrior function can also simulate growth curves making draws specified prior distributions. example using plotPrior way pick possible sets prior distributions gompertz model. asymptotic distributions prior “” added y margin. distributions inflection point prior “B” shown x margin. Arbitrary numbers priors can compared manner, two three can cluttered iterative process recommended learning growth model.","code":"priors <- list(\"A\" = 130, \"B\" = 10, \"C\" = 0.2) priorPlots <- plotPrior(priors) priorPlots[[1]] / priorPlots[[2]] / priorPlots[[3]] twoPriors <- list(\"A\" = c(100, 130), \"B\" = c(6, 12), \"C\" = c(0.5, 0.25)) plotPrior(twoPriors, \"gompertz\", n = 100)[[1]]"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"using-growthss","dir":"Articles","previous_headings":"","what":"Bellwether","title":"Bellwether","text":"Now ’re ready define necessary variables data use growthSS function. brms package always imported pcvr (since dependencies NA default installing github), fitting models may need install package. details installing brms either rstan cmdstanr (cmdstanr recommended), see packages linked documentation. Note install pcvr github dependencies=T cmdstanr brms installed ready use. priors informed general understanding expect see plant bellwether system. general example priors Now model components ss object. Since specified gompertz model three parameters, asymptote (), inflection point (B), growth rate (C). model options see ?pcvr::growthSim details parameters. trying fit model generally good idea check one last plot data make sure everything defined correctly.  looks okay, strange jumps data glaring problems.","code":"sv_ag$group <- interaction(sv_ag$fertilizer, sv_ag$genotype) library(brms) library(cmdstanr) cmdstanr::install_cmdstan() ss <- growthSS(   model = \"gompertz\", form = area_cm2 ~ DAS | barcode / group, sigma = \"spline\", df = sv_ag,   start = list(\"A\" = 130, \"B\" = 10, \"C\" = 0.5), type = \"brms\" ) ggplot(sv_ag, aes(x = DAS, y = area_cm2, group = interaction(group, barcode),                   color = group)) +   geom_line() +   theme_minimal() +   labs(     y = expression(\"Area\" ~ \"(cm\"^2 ~ \")\"),     color = \"Genotype\\nand Soil\"   )"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"running-models","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Single Value Traits > Longitudinal Modeling","what":"Running Models","title":"Bellwether","text":"fitGrowth function case call brms::brm automatically uses output growthSS. additional arguments brms::brm can still specified, examples shown .","code":"fit <- fitGrowth(ss,   iter = 1000, cores = 2, chains = 2, backend = \"cmdstanr\",   control = list(adapt_delta = 0.999, max_treedepth = 20) ) # options to increase performance"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"check-model-fit","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Single Value Traits > Longitudinal Modeling","what":"Check Model Fit","title":"Bellwether","text":"can visualize credible intervals brms model compare growth trendlines get intuitive understanding well model fit. Note since vignette load brms picture output growthPlot. code present run locally brms installed choose .","code":"growthPlot(fit, form = area_cm2 ~ DAS | barcode / group, df = ss$df) +   labs(y = expression(\"Area\" ~ \"(cm\"^2 ~ \")\"))"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"test-hypotheses","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Single Value Traits > Longitudinal Modeling","what":"Test Hypotheses","title":"Bellwether","text":"Now probably ideas want test data. brms::hypothesis function offers incredible flexibility test kinds hypotheses. consistency backends testGrowth function calls brms::hypothesis evaluate hypotheses. comparisons pcvr helper function called brmViolin visualize posterior distributions posterior probability hypotheses associated . shows posterior probability greater 99 percent asymptotic size least 5 percent higher 100 type soil compared 0 type soil. Note data plants reached asymptotic size, model uses incomplete data estimate asymptote . normal experiment plants mature asymptote parameter artificially inflated 100 soil treatment group due slower growth rate. lot options use function even ways use brms::hypothesis, example seen way compare models.","code":"brmViolin(fit, ss, \".../A_group0.B73 > 1.05\") +   ggplot2::theme(axis.text.x.bottom = ggplot2::element_text(angle = 90))"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"multi-value-traits","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow","what":"Multi Value Traits","title":"Bellwether","text":"Working multi value traits leads different statistical challenges single value traits. Generally reading data wide format makes significantly smaller object memory terms since lots duplicated metadata (identifiers row every image hundreds rows potentially). Note many questions even color necessary use entire color histograms. Make sure good reason use complete color data going particular path long. example, simple comparison circular mean Hue show treatment effect data.","code":"ggplot(sv_ag[sv_ag$DAS == 18, ], aes(   x = fertilizer, y = hue_circular_mean_degrees,   fill = as.character(fertilizer) )) +   geom_boxplot(outlier.shape = NA) +   geom_jitter(width = 0.05, size = 0.5) +   scale_fill_manual(values = c(viridis::viridis(3, 1, 0.1)), breaks = c(\"0\", \"50\", \"100\")) +   pcv_theme() +   theme(legend.position = \"none\") +   facet_wrap(~genotype, scales = \"free_x\") +   scale_x_discrete(limits = c(\"0\", \"50\", \"100\")) +   labs(y = \"Hue Circular Mean (degrees)\", x = \"Soil and Genotype\") set.seed(123) dists <- stats::setNames(lapply(runif(12, 50, 60), function(i) {   return(list(mean = i, sd = 15)) }), rep(\"rnorm\", 12)) d <- mvSim(dists,   wide = TRUE, n_samples = 5,   t = 25, model = \"linear\",   params = list(\"A\" = runif(12, 1, 3)) ) d$group <- sapply(sub(\".*_\", \"\", d$group), function(x) {   return(letters[as.numeric(x)]) }) d$genotype <- ifelse(d$group %in% letters[1:3], \"MM\",   ifelse(d$group %in% letters[4:6], \"B73\",     ifelse(d$group %in% letters[7:9], \"Mo17\", \"W605S\")   ) ) d$fertilizer <- ifelse(d$group %in% letters[seq(1, 12, 3)], 0,   ifelse(d$group %in% letters[seq(2, 12, 3)], 50, 100) ) colnames(d)[1] <- \"DAS\" colnames(d) <- gsub(\"sim_\", \"hue_frequencies_\", colnames(d)) hue_wide <- d"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"joyplots","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Multi Value Traits","what":"Joyplots","title":"Bellwether","text":"Joyplots common way look lots distributions. check hue histograms joyplots using three days add new fill hue colorspace. Joyplots can made long wide multi-value traits.  mentioned previously conjugate function can used wide multi-value data. use multi value data samples data frames matrices representing color histograms. compare color histograms assuming lognormal distribution find similar parameterization.","code":"p <- pcv.joyplot(hue_wide[hue_wide$DAS %in% c(5, 10, 15), ],   index = \"hue_frequencies\", group = c(\"fertilizer\", \"genotype\"),   y = \"DAS\", id = NULL ) p + scale_fill_gradientn(colors = scales::hue_pal(l = 65)(360)) +   scale_y_discrete(limits = c(\"5\", \"10\", \"15\")) mo17_sample <- hue_wide[   hue_wide$genotype == \"Mo17\" & hue_wide$DAS > 18 & hue_wide$fertilizer == 100,   grepl(\"hue_freq\", colnames(hue_wide)) ] b73_sample <- hue_wide[   hue_wide$genotype == \"B73\" & hue_wide$DAS > 18 & hue_wide$fertilizer == 100,   grepl(\"hue_freq\", colnames(hue_wide)) ]  hue_res_ln <- conjugate(   s1 = mo17_sample, s2 = b73_sample, method = \"lognormal\",   rope_range = c(-10, 10), hypothesis = \"equal\" ) hue_res_ln ## Normal distributed Mu parameter of Lognormal distributed data. ##  ## Sample 1 Prior Normal(mu = 0, sd = 10) ##  Posterior Normal(mu = 4.578, sd = 0.474, lognormal_sigma = 0.135) ## Sample 2 Prior Normal(mu = 0, sd = 10) ##  Posterior Normal(mu = 3.952, sd = 0.473, lognormal_sigma = 0.23) ##  ## Posterior probability that S1 is equal to S2 = 50.847% ##  ## Probability of the difference between Mu parameters being within [-10:10] using a % Credible Interval is 100% with an average difference of 0.628 ##  ##  ##      HDE_1 HDI_1_low HDI_1_high    HDE_2 HDI_2_low HDI_2_high   hyp post.prob ## 1 4.578306  3.820063   5.336548 3.951622  3.195338   4.707906 equal 0.5084671 ##   HDE_rope HDI_rope_low HDI_rope_high rope_prob ## 1 0.627561   -0.4515416      1.688398         1 plot(hue_res_ln)"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"ordination","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Multi Value Traits","what":"Ordination","title":"Bellwether","text":"Ordinations another common way look multi value traits. pcadf function runs ordinations optionally returns PCs metadata. simulated data deterministic pattern due.","code":"pcadf(hue_wide, cols = \"hue_frequencies\", color = \"genotype\", returnData = FALSE) +   facet_wrap(~ factor(fertilizer, levels = c(\"0\", \"50\", \"100\")))"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"earth-movers-distance","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Multi Value Traits","what":"Earth Mover’s Distance","title":"Bellwether","text":"Since color data exported plantCV histogram data can also use Earth Mover’s Distance (EMD) compare images. Conceptually EMD distance quantifies much work take turn one histogram another. pairwise comparisons rows return long dataframe distances. Note even running several cores parallel can take lot time larger datasets since number comparisons quickly can become unwieldy. output also require work keep analyzing, make sure want using EMD compare color histograms. interested change mean probably best way use data. fast example place EMD makes lot sense. simulated data five generating distributions. Normal, Log Normal, Bimodal, Trimodal, Uniform. use gaussian mixtures characterize multi-modal histograms get clunky comparing unimodal uniform distributions. conjugate function work since distributions share common parameterization. Instead, can use EMD.  plots show different distributions, get EMD images see trends shown resulting heatmap.  Now can filter edge strength network building step EMD > 0.5, plot network.  distributions separate well , don’t actually see uniform distribution . uniform distribution self-similar replicates also similar distributions. change filtering can even see generating distributions similar . pass 0.5 string, tells pcv.net use top 50 percent EMD values instead EMD values > 0.5.  Just ’d expect, uniform distribution shows now different. Now changing edgeFilter net.plot function let us fine tune plot show finer distinctions four generating distributions. example might use hue data. EMD can get heavy large datasets. recent lemnatech dataset using images every 5th day 633226332^2 = 40,094,224 pairwise EMD values. long format ’s 40 million row dataframe, unwieldy. get around problem might decide use hue circular mean single value trait aggregate data mv_ag function. Starting complete hue data 1500 image histograms. mv_ag function take group argument randomly pick members group histograms combined. Note histograms scaled sum 1 sampled. return one example 2 histograms kept per group one example groups summarized 1 histogram. equal fewer images n_per_group argument aggregation done group data rescaled.","code":"set.seed(123)  simFreqs <- function(vec, group) {   s1 <- hist(vec, breaks = seq(1, 181, 1), plot = FALSE)$counts   s1d <- as.data.frame(cbind(data.frame(group), matrix(s1, nrow = 1)))   colnames(s1d) <- c(\"group\", paste0(\"sim_\", 1:180))   return(s1d) }  sim_df <- rbind(   do.call(rbind, lapply(1:10, function(i) {     sf <- simFreqs(rnorm(200, 50, 10), group = \"normal\")     return(sf)   })),   do.call(rbind, lapply(1:10, function(i) {     sf <- simFreqs(rlnorm(200, log(30), 0.25), group = \"lognormal\")     return(sf)   })),   do.call(rbind, lapply(1:10, function(i) {     sf <- simFreqs(c(rlnorm(125, log(15), 0.25), rnorm(75, 75, 5)), group = \"bimodal\")     return(sf)   })),   do.call(rbind, lapply(1:10, function(i) {     sf <- simFreqs(c(rlnorm(100, log(15), 0.25), rnorm(50, 50, 5),                      rnorm(50, 90, 5)), group = \"trimodal\")     return(sf)   })),   do.call(rbind, lapply(1:10, function(i) {     sf <- simFreqs(runif(200, 1, 180), group = \"uniform\")     return(sf)   })) )  sim_df_long <- as.data.frame(data.table::melt(data.table::as.data.table(sim_df), id.vars = \"group\")) sim_df_long$bin <- as.numeric(sub(\"sim_\", \"\", sim_df_long$variable))  ggplot(sim_df_long, aes(x = bin, y = value, fill = group), alpha = 0.25) +   geom_col(position = \"identity\", show.legend = FALSE) +   pcv_theme() +   facet_wrap(~group) sim_emd <- pcv.emd(   df = sim_df, cols = \"sim_\", reorder = c(\"group\"),   mat = FALSE, plot = TRUE, parallel = 1, raiseError = TRUE ) ## Estimated time of calculation is roughly 3.1 seconds using 1 cores in parallel. sim_emd$plot n <- pcv.net(sim_emd$data, filter = 0.5) net.plot(n, fill = \"group\") n <- pcv.net(sim_emd$data, filter = \"0.5\") net.plot(n, fill = \"group\") EMD <- pcv.emd(   df = hue_wide[hue_wide$DAS %in% c(5, 12, 19), ], cols = \"hue_frequencies\",   reorder = c(\"fertilizer\", \"genotype\", \"DAS\"),   mat = FALSE, plot = TRUE, parallel = 12, raiseError = TRUE ) hue_ag1 <- mv_ag(df = hue_wide, group = c(\"DAS\", \"genotype\", \"fertilizer\"), n_per_group = 2) dim(hue_ag1) ## [1] 600 183 hue_ag2 <- mv_ag(hue_wide, group = c(\"DAS\", \"genotype\", \"fertilizer\"), n_per_group = 1) dim(hue_ag2) ## [1] 300 183"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"network-analysis","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Multi Value Traits","what":"Network Analysis","title":"Bellwether","text":"stands EMD data potentially difficult use unfamiliar distance matrix based analysis. represent distances network help use results. example network shows clustering real data’s patterns likely complex: much complicated network! Parsing biological meaning require work first example 5 different distributions, pretty strong cluster upper right corner plants low fertilizer end experiment. general pick use EMD without networks start small consider step mean conceptually experiment.","code":"set.seed(456) net <- pcv.net(EMD$data, meta = c(\"fertilizer\", \"genotype\", \"DAS\"), filter = 0.5) net.plot(net, fill = \"DAS\", shape = \"fertilizer\", size = 2)"},{"path":"https://danforthcenter.github.io/pcvr/articles/bellwether.html","id":"conclusion","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow","what":"Conclusion","title":"Bellwether","text":"vignette periodically updated pcvr changes. Generally tutorials updated frequently can good resource. goal experiment set questions needs met far please consider making issue github help Data Science Core continue work project ways help plantCV community.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/directional.html","id":"what-are-directional-statistics","dir":"Articles","previous_headings":"","what":"What are directional statistics?","title":"Directional Statistics in PCVR","text":"Directional (circular/spherical) statistics subset statistics focuses directions rotations. reason directional statistics separated general statistics normally think numbers line mean 4 356 180, degrees circle mean 0 (360) degrees. distributions talk statistics defined line. Beta distribution defined interval [0,1], normal can exist line [-Inf, Inf], gamma [0, Inf], etc. Directional statistics allows us wrap distributions around circle can sometimes add difficulty interpretation extra error prone steps. Currently, pcvr support “wrapping” distributions way instead uses Von-Mises distribution handle circular data. Von-Mises distribution mathematically tractable circular distribution can range circular uniform roughly circular normal depending precision parameter κ\\kappa, uniform corresponding κ=0\\kappa = 0.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/directional.html","id":"why-are-they-in-pcvr","dir":"Articles","previous_headings":"","what":"Why are they in pcvr?","title":"Directional Statistics in PCVR","text":"relevant pcvr mainly color use case. PlantCV returns single multi value traits circular, hue_circular_mean/median hue_frequencies. Luckily simplified plant phenotyping, Hue circle red 0/360 degrees (0/2π2\\pi radians) much time worry circular nature data since values confined green part hue circle. Still, cases color wrap around circle may important research take account. special cases Von-Mises distribution can help .","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/directional.html","id":"conjugate","dir":"Articles","previous_headings":"","what":"conjugate","title":"Directional Statistics in PCVR","text":"simplest way use Von-Mises distribution pcvr conjugate function, “vonmises” “vonmises2” valid methods. conjugate methods implemented single multi value traits, unlike methods necessarily supported comparing samples distribution. distributions become tenable add circular wrapped functions may revisted.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/directional.html","id":"vonmises-method","dir":"Articles","previous_headings":"conjugate","what":"“vonmises” method","title":"Directional Statistics in PCVR","text":"“vonmises” method uses fact conjugate prior direction parameter (μ\\mu) Von-Mises distribution. Utilizing conjugacy requires assume known κ\\kappa complete distribution updating μ\\mu parameter straightforward. Conceptually may helpful consider similarly “T” method comparing means guassians. Priors method specify list containing “mu”, “kappa”, “boundary”, “known_kappa”, “n” elements. prior “mu” direction circular distribution, “kappa” precision mean, “boundary” vector including two values circular data “wraps” around circle, “known_kappa” fixed value precision total distribution, “n” number prior observations. prior specified default list(mu = 0, kappa = 1, boundary = c(-pi, pi), known_kappa = 1, n = 1). per methods conjugate function, “posterior” part output form prior.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/directional.html","id":"example","dir":"Articles","previous_headings":"conjugate > “vonmises” method","what":"Example","title":"Directional Statistics in PCVR","text":"First ’ll simulate multi value data Next ’ll run conjugate specifying data circle defined [0, 180] expected direction around 45 (90 degrees full [0,360] π/2\\pi/2 radians) low precision. summary shows normal conjugate output, showing posterior probability ~91% samples equal means (remember difference simulated data now circle). Displaying plots data can slower conjugate methods due density support. explain, Von-Mises distribution defined unit circle [−π-\\pi, π\\pi] order support works project data whatever space boundary prior specifies support dense. Note also rope_range specified boundary units space, necessarily unit circle. get similar results using roughly analogous single value traits. Single value traits work way. Note omit parts prior filled default prior values. check summary see around 75% chance equal plot much faster make since support roughly thirtieth size previous example. Sometimes may helpful use polar coordinates consider data, although limitations plotting area style geometries polar coordinates.","code":"mv_gauss <- mvSim(   dists = list(     rnorm = list(mean = 50, sd = 10),     rnorm = list(mean = 60, sd = 12)   ),   n_samples = c(30, 40) ) vm_ex1 <- conjugate(   s1 = mv_gauss[1:30, -1],   s2 = mv_gauss[31:70, -1],   method = \"vonmises\",   priors = list(mu = 45, kappa = 1, boundary = c(0, 180), known_kappa = 1, n = 1),   rope_range = c(-5, 5), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\" ) vm_ex1$summary ##      HDE_1 HDI_1_low HDI_1_high    HDE_2 HDI_2_low HDI_2_high   hyp post.prob ## 1 49.41914  33.04564   64.95365 59.49722  39.77791   78.23893 equal 0.6345453 ##   HDE_rope HDI_rope_low HDI_rope_high rope_prob ## 1 -10.0732    -35.07407       14.2142 0.2389619 plot(vm_ex1) vm_ex1_1 <- conjugate(   s1 = rnorm(30, 50, 10),   s2 = rnorm(40, 60, 12),   method = \"vonmises\",   priors = list(mu = 0, kappa = 1, known_kappa = 1, boundary = c(0, 180), n = 1),   rope_range = c(-0.1, 0.1), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\" ) do.call(rbind, vm_ex1_1$posterior) ##      mu       kappa    known_kappa n  boundary  ## [1,] 48.13198 7.279068 1           31 numeric,2 ## [2,] 59.27214 6.098488 1           41 numeric,2 set.seed(42) vm_ex2 <- conjugate(   s1 = brms::rvon_mises(100, -3.1, 2),   s2 = brms::rvon_mises(100, 3.1, 2),   method = \"vonmises\",   priors = list(mu = 0, kappa = 1, known_kappa = 2),   rope_range = c(-0.1, 0.1), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\" ) vm_ex2$summary ##       HDE_1 HDI_1_low HDI_1_high    HDE_2 HDI_2_low HDI_2_high   hyp post.prob ## 1 -3.071143  2.393966  -2.224163 3.140433  2.381274  -2.297627 equal  0.940651 ##     HDE_rope HDI_rope_low HDI_rope_high rope_prob ## 1 0.07243397    -1.081833      1.232842 0.1241434 do.call(rbind, vm_ex2$posterior) ##      mu        kappa    known_kappa n   boundary  ## [1,] -3.071143 4.204577 2           101 numeric,2 ## [2,] 3.140433  4.499838 2           101 numeric,2 plot(vm_ex2) # not printed due to being a very dense ggplot p <- plot(vm_ex2) p[[1]] <- p[[1]] +   ggplot2::coord_polar() +   ggplot2::scale_y_continuous(limits = c(-pi, pi))"},{"path":"https://danforthcenter.github.io/pcvr/articles/directional.html","id":"vonmises2-method","dir":"Articles","previous_headings":"conjugate","what":"“vonmises2” method","title":"Directional Statistics in PCVR","text":"“vonmises2” method updates μ\\mu κ\\kappa complete Von-Mises distribution. done first taking weighted average prior κ\\kappa MLE κ\\kappa based sample data updating μ\\mu . Priors method specify “mu”, “kappa”, “boundary”, “n”. “mu” still mean direction, “kappa” precision, boundary/n .","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/directional.html","id":"example-1","dir":"Articles","previous_headings":"conjugate > “vonmises2” method","what":"Example","title":"Directional Statistics in PCVR","text":"Using test data can run “vonmises2” method.","code":"vm2_ex1 <- conjugate(   s1 = mv_gauss[1:30, -1],   s2 = mv_gauss[31:70, -1],   method = \"vonmises2\",   priors = list(mu = 45, kappa = 1, boundary = c(0, 180), n = 1),   rope_range = c(-5, 5), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\" ) do.call(rbind, vm2_ex1$posterior) ##      mu       kappa    n  boundary  ## [1,] 49.41914 8.518119 31 numeric,2 ## [2,] 59.49722 6.128526 41 numeric,2 set.seed(42) vm2_ex2 <- conjugate(   s1 = brms::rvon_mises(100, -3.1, 2),   s2 = brms::rvon_mises(100, 3.1, 2),   method = \"vonmises2\",   priors = list(mu = 0, kappa = 1),   rope_range = c(-0.75, 0.75), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\" ) plot(vm2_ex2) do.call(rbind, vm2_ex2$posterior) ##      mu        kappa    n   boundary  ## [1,] -3.071143 2.091375 101 numeric,2 ## [2,] 3.140433  2.237544 101 numeric,2"},{"path":"https://danforthcenter.github.io/pcvr/articles/directional.html","id":"growthss-and-brms","dir":"Articles","previous_headings":"","what":"growthSS and brms","title":"Directional Statistics in PCVR","text":"“von_mises” family option brms::brm() can used via growthSS specifying model using form model = \"von_mises: linear\". let specify Von-Mises model necessarily mean model ready go default student_t models gaussian count models. Von-Mises family can difficult fit, particularly non-linear models. Von-Mises mixture models (may useful modeling color changes due disease abiotic stress affects part plant time) difficult fit can least hypothetically useful.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/directional.html","id":"example-of-specifying-a-circular-model-in-growthss","dir":"Articles","previous_headings":"growthSS and brms","what":"Example of specifying a circular model in growthSS","title":"Directional Statistics in PCVR","text":"set model growthSS example purposes","code":"nReps <- 25 time <- 1:20 muTrend1 <- -2 + (0.25 * time) muTrend2 <- -1 + (0.2 * time) kappaTrend1 <- (0.5 * time) kappaTrend2 <- (0.3 * time) set.seed(123) vm2 <- do.call(rbind, lapply(1:nReps, function(rep) {   rep_df <- do.call(rbind, lapply(time, function(ti) {     v1 <- brms::rvon_mises(1, muTrend1[ti], kappaTrend1[ti])     v2 <- brms::rvon_mises(1, muTrend2[ti], kappaTrend2[ti])     return(data.frame(y = c(v1, v2), x = ti, group = c(\"a\", \"b\"), rep = rep))   }))   return(rep_df) }))  ss <- growthSS(   model = \"von_mises: int_linear\", form = y ~ x | rep / group, sigma = \"int\", df = vm2,   start = NULL, type = \"brms\" ) ss$prior # default priors ##   prior class   coef group resp  dpar nlpar lb ub       source ##  (flat)     b                             A            default ##  (flat)     b groupa                      A       (vectorized) ##  (flat)     b groupb                      A       (vectorized) ##  (flat)     b                             I            default ##  (flat)     b groupa                      I       (vectorized) ##  (flat)     b groupb                      I       (vectorized) ##  (flat)     b                   kappa                  default ##  (flat)     b groupa            kappa             (vectorized) ##  (flat)     b groupb            kappa             (vectorized) ss$formula # formula specifies kappa based on sigma argument ## y ~ I + A * x  ## autocor ~ tructure(list(), class = \"formula\", .Environment = <environment>) ## kappa ~ 0 + group ## I ~ 0 + group ## A ~ 0 + group"},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/articles/directional.html","id":"single-timepoint-model","dir":"Articles","previous_headings":"growthSS and brms > Example using brms directly","what":"Single Timepoint Model","title":"Directional Statistics in PCVR","text":"","code":"set.seed(123) n <- 1000 vm1 <- data.frame(   x = c(brms::rvon_mises(n, 1.5, 3), brms::rvon_mises(n, 3, 2)),   y = rep(c(\"a\", \"b\"), each = n) )  basePlot <- ggplot(vm1, aes(x = x, fill = y)) +   geom_histogram(binwidth = 0.1, alpha = 0.75, position = \"identity\") +   labs(fill = \"Group\") +   guides(fill = guide_legend(override.aes = list(alpha = 1))) +   scale_fill_viridis_d() +   theme_minimal() +   theme(legend.position = \"bottom\")  basePlot +   coord_polar() +   scale_x_continuous(breaks = c(-2, -1, 0, 1, 2, 3.1415), labels = c(-2, -1, 0, 1, 2, \"Pi\")) basePlot + scale_x_continuous(breaks = c(-round(pi, 2), -1.5, 0, 1.5, round(pi, 2)))  prior1 <- set_prior(\"student_t(3,0,2.5)\", coef = \"ya\") +   set_prior(\"student_t(3,0,2.5)\", coef = \"yb\") +   set_prior(\"normal(5.0, 0.8)\", coef = \"ya\", dpar = \"kappa\") +   set_prior(\"normal(5.0, 0.8)\", coef = \"yb\", dpar = \"kappa\")  fit1 <- brm(bf(x ~ 0 + y, kappa ~ 0 + y),   family = von_mises,   prior = prior1,   data = vm1,   iter = 1000, cores = 2, chains = 2, backend = \"cmdstanr\", silent = 0, init = 0,   control = list(adapt_delta = 0.999, max_treedepth = 20) ) fit1  x <- brmsfamily(\"von_mises\") pars <- colMeans(as.data.frame(fit)) mus <- pars[grepl(\"b_y\", names(pars))] x$linkinv(mus) # inverse half tangent function # should be around 1.5, 3 kappas <- pars[grepl(\"kappa\", names(pars))] exp(kappas) # kappa is log linked # should be around 3, 2 pred_draws <- as.data.frame(predict(fit1, newdata = data.frame(y = c(\"a\", \"b\")), summary = FALSE)) preds <- data.frame(   draw = c(pred_draws[, 1], pred_draws[, 2]),   y = rep(c(\"a\", \"b\"), each = nrow(pred_draws)) ) predPlot <- ggplot(preds, aes(x = draw, fill = y)) +   geom_histogram(binwidth = 0.1, alpha = 0.75, position = \"identity\") +   labs(fill = \"Group\", y = \"Predicted Draws\") +   guides(fill = guide_legend(override.aes = list(alpha = 1))) +   scale_fill_viridis_d() +   theme_minimal() +   theme(legend.position = \"bottom\") predPlot + scale_x_continuous(breaks = c(-round(pi, 2), -1.5, 0, 1.5, round(pi, 2))) predPlot +   coord_polar() +   scale_x_continuous(breaks = c(-2, -1, 0, 1, 2, 3.1415), labels = c(-2, -1, 0, 1, 2, \"Pi\"))"},{"path":"https://danforthcenter.github.io/pcvr/articles/directional.html","id":"longitudinal-model","dir":"Articles","previous_headings":"growthSS and brms > Example using brms directly","what":"Longitudinal Model","title":"Directional Statistics in PCVR","text":"models can difficult fit may useful situation case stan forums pcvr github issues reasonable places get help.","code":"nReps <- 25 time <- 1:20 muTrend1 <- -2 + (0.25 * time) muTrend2 <- -1 + (0.2 * time) kappaTrend1 <- (0.5 * time) kappaTrend2 <- (0.3 * time) set.seed(123) vm2 <- do.call(rbind, lapply(1:nReps, function(rep) {   rep_df <- do.call(rbind, lapply(time, function(ti) {     v1 <- rvon_mises(1, muTrend1[ti], kappaTrend1[ti])     v2 <- rvon_mises(1, muTrend2[ti], kappaTrend2[ti])     return(data.frame(y = c(v1, v2), x = ti, group = c(\"a\", \"b\"), rep = rep))   }))   return(rep_df) }))  ggplot(vm2, aes(x = x, y = y, color = group, group = interaction(group, rep))) +   geom_line() +   labs(y = \"Y (Von Mises)\") +   theme_minimal()  ggplot(vm2, aes(y = x, x = y, color = group, group = interaction(group, rep), alpha = x)) +   geom_line() +   labs(y = \"Time\", x = \"Von Mises\") +   theme_minimal() +   guides(alpha = \"none\") +   coord_polar() +   scale_x_continuous(     breaks = c(-2, -1, 0, 1, 2, 3.1415),     limits = c(-pi, pi),     labels = c(-2, -1, 0, 1, 2, \"Pi\")   )  prior2 <- set_prior(\"normal(5,0.8)\", nlpar = \"K\") +   set_prior(\"student_t(3, 0, 2.5)\", nlpar = \"I\") +   set_prior(\"student_t(3, 0, 2.5)\", nlpar = \"M\")  fit2 <- brm(   bf(y ~ I + M * x,     nlf(kappa ~ K * x),     I + M ~ 0 + group,     K ~ 0 + group,     autocor = ~ arma(x | rep:group, 1, 1),     nl = TRUE   ),   family = von_mises,   prior = prior2,   data = vm2,   iter = 2000, cores = 4, chains = 4, backend = \"cmdstanr\", silent = 0, init = 0,   control = list(adapt_delta = 0.999, max_treedepth = 20) ) fit2 pars <- colMeans(as.data.frame(fit2)) pars[grepl(\"^b_\", names(pars))]  outline <- data.frame(   group = rep(c(\"a\", \"b\"), each = 20),   x = rep(1:20, 2) ) probs <- seq(0.01, 0.99, 0.02) preds <- cbind(outline, predict(fit2, newdata = outline, probs = probs))  pal <- viridis::plasma(n = length(probs)) p2 <- ggplot(preds, aes(y = x)) +   facet_wrap(~group) +   lapply(seq(1, 49, 2), function(lower) {     ribbon_layer <- geom_ribbon(       aes(xmin = .data[[paste0(\"Q\", lower)]],           xmax = .data[[paste0(\"Q\", 100 - lower)]]),       fill = pal[lower]     )     return(ribbon_layer)   }) +   theme_minimal() +   coord_polar() +   scale_x_continuous(     breaks = c(-2, -1, 0, 1, 2, 3.1415),     limits = c(-pi, pi),     labels = c(-2, -1, 0, 1, 2, \"Pi\")   )"},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"outline","dir":"Articles","previous_headings":"","what":"Outline","title":"Water data","text":"water use data important plant science. Overview WUE vs pWUE Relevant equations. Reading water data Annotating water diagnostic plots rate abs normalized_daily_transpiration make hierarchical models","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"why-water-data","dir":"Articles","previous_headings":"","what":"Why water data?","title":"Water data","text":"Water fundamental plant life. Plants need water survive. Water critical farming resource. Climate change affects water supply.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"how-does-a-plant-use-water","dir":"Articles","previous_headings":"","what":"How does a plant use water?","title":"Water data","text":"Plant water use controlled complex combination physics, plant physiology, anatomy, morphology. ’s brief overview “pull theory” plants uptake water soil: 1: Differences pressure driving force water movement (lower pressure leaf surface higher pressure soil). 2: Water enters plant roots (note many root traits affect happens). 3: Water travels xylem (channels along plant tissue) due capillary action (hydrogen bonds). 4: Water Transpires (aka evaporates) plant leaves stomata (stomata small pores mostly along underside leaves). process similar us sweating. – rate transpiration depends Boundary Layer Conductance. — Boundary Layer Conductance (BLC) measure easily gas exchange happens small “boundary layer” around plant. — BLC changed qualities leaf shape angle (think facing sun standing angle) well trichome (small hairs leaf surface) length density (think trapping humidity hair). – Transpiration also depends stomatal conductance, combination many stomata open . – Transpiration also dependent environmental conditions ambient temperature, wind speed, atmospheric pressure, light intensity, soil type, soil moisture content, etc. — Vapor Pressure Deficit (VPD) another important variable transpiration, related air temperature humidity. VPD difference amount water air vs amount water air can hold given temperature. Since warmer air can hold water VPD higher hot day even relative humidity held constant, important consideration experimental design particularly growth chambers. Transpiration balanced carefully plant since plant using water build new biomass cool ; 1:1 trade-, dependent variables described . can secondary consequences increased transpiration depending experimental design measuring, instance: - Higher transpiration means higher transport nutrients plant soil. - Higher transpiration means transport xylem-mobile metabolites plant. - Higher transpiration reduces leaf temperature. - Open stomata (transpiration) may provide avenue pathogen infection. - Water pH salt content affect uptake plant health.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"what-is-field-capacity","dir":"Articles","previous_headings":"Field Capacity","what":"What is field capacity","title":"Water data","text":"Field capacity amount water held soil excess water able drain rate macropore drainage (water seeping deeper ground) approaches 0. Field capacity depends numerous factors dependent soil type. useful measure soil water capacity.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"why-do-we-care-about-field-capacity","dir":"Articles","previous_headings":"Field Capacity","what":"Why do we care about field capacity","title":"Water data","text":"Field capacity matters many types phenotyping experiments ’s used set target weights watering. Many systems use target field capacity select target pot weight, determines much water weight added reach target field capacity. Knowing field capacity can also let us evaluate whether plants actually reaching landmarks care drought stress measured soil water content.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"field-capacity-equations","dir":"Articles","previous_headings":"Field Capacity","what":"Field capacity equations","title":"Water data","text":"Constants experiment: Reminder: 1 g water = 1 mL water CSW: Weight carriage + saucer = 345 g DW: Weight dry pot (pot + dry soil) = varies experiment, provided Core Facility (one number whole experiment, average sample pots) SW: Weight saturated pot (pot + soaked soil) = varies experiment, provided Core Facility (one number whole experiment, average sample pots) Saturated Water Volume: SW - DW Target field capacity (%) = water content / saturated water volume x 100 = varies experiment, timepoint, treatment, provided Core Facility (number provided per pot) Measured daily (frequently) experiment: Current water content = current weight - CSW - DW Current field capacity (%) = current water content / saturated water volume x 100","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"measuring-water-use","dir":"Articles","previous_headings":"","what":"Measuring water use","title":"Water data","text":"Measuring water use can difficult. Broadly, can either measure water vapor released plant measure amount water removed soil. focus weight changes pot. Measuring water use via weight changes pot caveats. Assumptions: - Sometimes assume negligible transpiration night (lights , stomata closed); used DiTech calculations, Bellwether. - assume way water lost pot via transpiration plant, via evaporation soil. - Sometimes ignore plant growth calculating amount water used day change weight time; used Bellwether, DiTech. can make adjustments assumption based previous experiments know much biomass plants gain day, adjust target weights accordingly. following plot look simulated plant’s watering data. plant weighed 5 days, water added middle night. Plants weighed shortly watering. weight watering used calculate current water content current field capacity. target field capacity used determine much water add. difference weight “watering” weight following day’s “watering” weight use calculate transpiration water use efficiency (WUE).","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"calculating-transpiration","dir":"Articles","previous_headings":"","what":"Calculating Transpiration","title":"Water data","text":"Transpiration calculated difference weight two timepoints. , use weight watering, subtract weight watering following night determine total water transpired (g) time period (, 1 day). Note: values positive framing question “amount water transpired”, despite slope line (showing mass pot) going positive numbers.  absolute amount water transpired interesting, important normalize value plant biomass. generally expect larger plants transpire water; may get excited genotype transpires water another, really jut bigger plant! need look transpiration relative plant biomass. two measurements: Normalized Transpiration Water Use Efficiency. normalize transpiration, need know total plant biomass, proxy measurement. example know plant biomass day, divide daily transpiration plant biomass day get Normalized Transpiration.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"wue","dir":"Articles","previous_headings":"","what":"WUE","title":"Water data","text":"Another important water metric water use efficiency. Water use efficiency generally calculated rate biomass gained per unit water. words, much biomass added plant amount water used time period? good analogy miles per gallon fuel car may get; WUE dependent genotype environment, just like car’s MPG dependent type car road driving (freeway vs. city roads). Δ(Biomass)tWater Transpiredt\\frac{\\Delta(\\text{Biomass})_t}{\\text{Water Transpired}_t} WUE might also considered amount water used sustain given biomass, referred “absolute WUE”. BiomasstWater Transpiredt\\frac{\\text{Biomass}_t}{\\text{Water Transpired}_t} calculations WUE include replacements biomass, grain yield, net carbon dioxide uptake, , covered .","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"pwue","dir":"Articles","previous_headings":"WUE","what":"PWUE","title":"Water data","text":"may always daily measurements plant biomass, since mean killing plant destructive measurement. high-throughput plant phenotyping use proxy biomass, leaf area (number pixels labelled plant) captured via plant images. using proxy biomass call image-based WUE Pseudo-Water Use Efficiency (pWUE). pcvr pwue function calculates normalized transpiration, rate based pWUE, absolute pWUE.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"reading-in-water-data","dir":"Articles","previous_headings":"","what":"Reading in water data","title":"Water data","text":"article ’ll use simulated data, bw.water function may helpful reading JSON Lemnatech metadata. control ’ll use simulated data:","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"simulated-data","dir":"Articles","previous_headings":"Reading in water data","what":"Simulated Data","title":"Water data","text":"’ll simulate groups data distinct watering growth trends.","code":"set.seed(123) days <- 25 n_plants <- 10 phenotype_conditions <- list(   \"death\" = list(\"model\" = \"monomolecular\", params = list(A = 50, B = 0.03)),   \"sigmoid\" = list(\"model\" = \"logistic\", params = list(A = 200, B = 12, C = 3.5)),   \"abrupt\" = list(\"model\" = \"logistic\", params = list(A = 200, B = 12, C = 1)),   \"exponential\" = list(\"model\" = \"exponential\", params = list(A = 1, B = 0.2)),   \"slowing\" = list(\"model\" = \"power law\", params = list(A = 15, B = 0.6)),   \"linear\" = list(\"model\" = \"linear\", params = list(A = 8)) )  watering_conditions <- list(   \"constant\" = list(     \"before\" = NA,     \"after\" = rep(25, days)   ),   \"target weight\" = list(     \"before\" = round(90 * exp(-0.1 * seq_len(days))),     \"after\" = rep(100, days)   ),   \"increasing cont\" = list(     \"before\" = NA,     \"after\" = (seq_len(days) * 4) + 10   ),   \"decreasing cont\" = list(     \"before\" = NA,     \"after\" = (days * 4) + 10 - (4 * seq_len(days))   ),   \"increasing step\" = list(     \"before\" = NA,     \"after\" = c(rep(20, floor(days / 2)), rep(75, ceiling(days / 2)))   ),   \"decreasing step\" = list(     \"before\" = NA,     \"after\" = c(rep(75, floor(days / 2)), rep(20, ceiling(days / 2)))   ) )  ex <- do.call(rbind, lapply(names(phenotype_conditions), function(pc) {   p_cond <- phenotype_conditions[[pc]]   df <- pcvr::growthSim(p_cond$model,     n = n_plants, t = days,     params = p_cond$params   )   df$group <- pc   colnames(df)[c(2, 4)] <- c(\"pc\", \"area\")   #* for this phenotype data make a copy for each watering condition set   pc_df <- do.call(rbind, lapply(names(watering_conditions), function(wc) {     w_cond <- watering_conditions[[wc]]     #* per each individual make weight_before and weight_after columns     wcdf <- do.call(rbind, lapply(unique(df$id), function(i) {       # subset data       sub <- df[df$id == i, ]       # define vectors for each       b <- sort(w_cond$before + rpois(days, 1), decreasing = TRUE)       w <- w_cond$after       if (all(is.na(w_cond$before))) {         b <- 10 + (sub$area * rbeta(days, 200, 200))         w <- b + w_cond$after       }       # add columns       sub$weight_before <- b       sub$weight_after <- w       return(sub)     }))     wcdf$wc <- wc     return(wcdf)   }))   return(pc_df) }))  key <- expand.grid(pc = names(phenotype_conditions), wc = names(watering_conditions)) key$group <- as.character(seq_len(nrow(key))) ex <- plyr::join(ex, key) ## Joining by: pc, wc ex$pc <- factor(ex$pc,   levels = c(     \"sigmoid\", \"abrupt\", \"exponential\",     \"slowing\", \"linear\", \"death\"   ),   ordered = TRUE ) ex$wc <- factor(ex$wc,   levels = c(     \"constant\", \"target weight\",     \"increasing cont\", \"decreasing cont\",     \"increasing step\", \"decreasing step\"   ),   ordered = TRUE )"},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"traits-of-the-simulated-data","dir":"Articles","previous_headings":"Reading in water data","what":"Traits of the simulated data","title":"Water data","text":"simulated data 6 phenotype trends. ’re using simulated leaf area hypothetical 2D image, phenotype true plant biomass, another measurement. sigmoid: typical logistic growth. abrupt: Logistic growth abrupt growth period. exponential: Exponential growth, non-asymptotic speeding time. slowing: Non-asymptotic growth, slower linear. linear: Non-asymptotic linear growth. death: Slow asymptotic growth low asymptote.  also 6 watering data options simulated data. constant: Pre-watering weight increases phenotype (area), constant, specific amount water added pre-watered weight. Field capacity considered. target weight: assume weight plant negligible (generally assume Bellwether-style high-throughput phenotyping experiments). Every day plant uses amount water plant grows time amount increases, driving pre-watering weight time. watering pot filled hits target weight (100g , just use nice round number) calculated based target field capacity. increasing cont.: Pre-watering weight increases phenotype (area), every day larger, specific amount water added pre-watered weight. Field capacity considered target weight used. decreasing cont.: Pre-watering weight increases phenotype (area), every day smaller, specific amount water added pre-watered weight. Field capacity considered target weight used. increasing step: Pre-watering weight increases phenotype (area), constant, specific amount water added pre-watered weight every day, half way experiment amount water increases 20g 75g. Field capacity considered target weight used. decreasing step: Pre-watering weight increases phenotype (area), constant amount water added pre-watered weight every day, half way experiment amount water decreases 75g 20g. Field capacity considered target weight used.  ’ve taken roundabout way simulate amount water used simulated pre-watering weight post-watering weight since ’ll get plant weight data time. water use important thing plot red blue points , length line important since represents amount water used. mind ’ll look plot different way, focusing length black lines.  Looking data way helps drive home point water use can increase, decrease, remain constant. different ways increase decrease, ’ll focus overall trend now limit simulated data constant, increasing continuous, decreasing continuous watering categories. Combining everything sets conditions can look pre vs post watering weights 36 options. Phenotype (, leaf area, plant biomass used) shown light gray, pot weight watering shown blue.","code":"ggplot(ex[ex$wc == \"constant\", ], aes(time, area, group = id)) +   facet_wrap(~pc) +   geom_line() +   labs(     y = expression(\"Leaf Area (cm\"^2 * \")\"),     x = \"Time\",     title = \"Treatments with several different growth trends\"   ) +   pcv_theme() +   theme(legend.position = \"none\") l <- reshape2::melt(ex[ex$pc == \"sigmoid\", ],   id.vars = c(\"id\", \"group\", \"time\", \"wc\"),   measure.vars = c(\"weight_before\", \"weight_after\") )  ggplot(   l[l$id %in% paste0(\"id_\", 1), ],   aes(x = time + ifelse(variable == \"weight_before\", -0.25, 0.25), y = value, color = variable) ) +   facet_wrap(~wc) +   geom_line(color = \"black\") +   geom_point() +   labs(     y = \"Weight\", x = \"Time\",     title = \"Different watering schemes with sigmoid growth\"   ) +   pcv_theme() ggplot(ex[ex$id == \"id_1\", ], aes(x = time, y = weight_after - weight_before, group = id)) +   facet_wrap(~wc) +   geom_line() +   labs(y = \"Water Added\",        x = \"Time\",        title = \"Water added for all watering schemes shown\") +   pcv_theme() +   theme(legend.position = \"none\",         strip.text.x.top = element_text(size = 10),         strip.text.y.right = element_text(size = 10)) ex <- ex[ex$wc %in% c(\"constant\", \"increasing cont\", \"decreasing cont\"), ] ggplot(ex, aes(time, area, group = id)) +   facet_grid(wc ~ pc) +   geom_line(color = \"gray70\", linewidth = 0.1) +   geom_line(aes(y = weight_after), color = \"blue\") +   labs(     y = \"Weight After Watering\",     x = \"Time\",     title = \"Weight After Watering For all combinations of conditions\"   ) +   pcv_theme() +   theme(     legend.position = \"none\",     strip.text.x.top = element_text(size = 10),     strip.text.y.right = element_text(size = 10)   )"},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"water-data-quality-control-plots","dir":"Articles","previous_headings":"Reading in water data","what":"Water data quality control plots","title":"Water data","text":"working water derived metrics ’s generally good get feeling raw watering data similar plots used early . ’re checking : - reasonable looking differences subsequent weights - treatment groups expected watering pattern - weight watering lower previous post-watering weight (indicating transpiration happened). length black lines weights shows water added.  don’t see anything raises red flags, ’ll move . water added spike incredibly high, different water added intended design, sign issue equipment.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"pwue-1","dir":"Articles","previous_headings":"","what":"pwue","title":"Water data","text":"pwue function takes one two dataframes input. one dataframe given include phenotype(s) (leaf area plant biomass) watering data (pre- post-watering weights), expected wide format. two dataframes given one contain phenotypes contain watering data. pheno, time, id arguments control variables used normalize plant size (pheno), subset data given time (time) identify plant time (id). offset argument optionally controls long phenotype’s measurement water added count towards phenotype, normally left 0. pre_watering post_watering name columns dataframe containing water data corresponding pre-watering weight post-watering weight. Finally, method argument controls values calculated. Currently accepts “rate”, “abs”, “ndt” rate based pWUE, absolute value pWUE, Normalized Daily Transpiration. Note using coarse measurements time experiments granular time data essential.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"rate-based","dir":"Articles","previous_headings":"pwue","what":"Rate Based","title":"Water data","text":"’ll look example replicate group get started. Using grid faceting can’t free scales, ’ll go watering condition turn.","code":"rb <- pwue(   df = ex, w = NULL, pheno = \"area\", time = \"time\", id = c(\"id\", \"group\"),   pre_watering = \"weight_before\",   post_watering = \"weight_after\", method = \"rate\" )"},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"constant-watering","dir":"Articles","previous_headings":"pwue > Rate Based","what":"Constant Watering","title":"Water data","text":"constant: Pre-watering weight increases phenotype (area), constant, specific amount water added pre-watered weight. Field capacity considered. Remember rate-based pWUE formula using Δ(Biomass)tWater Transpiredt\\frac{\\Delta(\\text{Biomass})_t}{\\text{Water Transpired}_t}. watering condition denominator constant. Since numerator measurement--measurement change essentially derivative (slope) original phenotype. mind can start thinking ’d expect see. example, death group always going small values pWUE compared groups since change size two measurements always small. zoom downward trend driven phenotype increasing smaller smaller amounts towards asymptotic limit. death shows slow monomolecular growth low asymptote compared groups. Similarly, sigmoid group start look like bell curve, since derivative sigmoid bell shaped (CDF normal distribution logistic curve, etc).  follow general trends ’d expect, things look strange looks noisy.","code":"rbc <- rb[rb$wc == \"constant\", ] ggplot(rbc, aes(x = time, y = pWUE, group = id)) +   facet_wrap(~pc, scales = \"free_y\") +   geom_line() +   labs(title = \"Zooming in on the constant watering condition\") +   pcv_theme() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"sigmoid","dir":"Articles","previous_headings":"pwue > Rate Based > Constant Watering","what":"Sigmoid","title":"Water data","text":"mentioned , expect roughly bell shaped plot rate pWUE time data constant watering logistic growth.  overall trend makes sense, data spikey? can sometimes get easier grasp pWUE plot component parts, returned pwue.  Now can see “spikey-ness” product water data lot noise, likely case real data simulation just byproduct ’re making pre-watering weights.","code":"ggplot(   rbc[rbc$pc == \"sigmoid\", ],   aes(x = time, y = pWUE, group = id) ) +   geom_line() +   labs(     title = \"Constant Watering with Logistic Growth\",     y = \"(Rate based) pWUE\"   ) +   pcv_theme() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ggplot(   rbc[rbc$pc == \"sigmoid\", ],   aes(x = time, group = id) ) +   facet_wrap(~group) +   geom_line(aes(y = total_water, color = \"Water (denominator)\")) +   geom_line(aes(y = pheno_diff, color = \"Phenotype (numerator)\")) +   labs(     title = \"Components of Rate pWUE\",     subtitle = \"constant watering, logistic growth\",     y = \"Pheno Diff and Water Diff\", x = \"Time\"   ) +   pcv_theme() +   theme(legend.position = \"bottom\") ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ## Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"abrupt","dir":"Articles","previous_headings":"pwue > Rate Based > Constant Watering","what":"Abrupt","title":"Water data","text":"typical sigmoid data pretty simple, happens different kind sigmoid shape? First looks pWUE “abrupt” logistic growth way less friendly.  ’re going zoom understand general trend, can look replicate see going large spike.  doesn’t clear much, basically kind shape logistic phenotype yielded bell curve. first big problem see pWUE negative cases. Normally ’d say add constant amount water “” weight “” weight larger, difference must positive. true, phenotype fast enough changes measurement--measurement days 10 14 see couple times previous weight_after_watering lower current weight_before_watering. case product simulation simple rules sort discrepancy comes lot water data since many possible sources error noise. Generally remove negative values total_water. pWUE can also flipped negative numerator (change biomass) becomes negative. experiments indicative shortcoming images proxy biomass image analysis problem. ’s good idea figure negative values since might indicate interesting stress response, problem equipment problem upstream analysis. reality sort thing shows time due sorts noise, measurement error, image analysis problems. Now ’ve removed negative values can think components rate pWUE little clearly.  Notice dips amount water used coincide peaks measurement--measurement phenotype change. ’s combination make high pWUE peaks plenty noise. peaks measurement--measurement phenotype change happen fast changes. troughs amount water used may seen system weight pot changes noticeably measured phenotype (plant non-negligible amount total weight whatever pot/cart weighed), depend equipment. trend dramatic, likely experiments soil pot weigh plant several orders magnitude make less steep pWUE curves.","code":"ggplot(   rbc[rbc$pc == \"abrupt\", ],   aes(x = time, y = pWUE, group = id) ) +   geom_line() +   labs(     title = \"Constant Watering with Abrupt Growth\",     y = \"(Rate based) pWUE\"   ) +   pcv_theme() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ggplot(   rbc[rbc$pc == \"abrupt\", ],   aes(x = time, y = pWUE, group = id) ) +   geom_line() +   labs(     title = \"Constant Watering with Abrupt Growth\",     y = \"(Rate based) pWUE\"   ) +   pcv_theme() +   coord_cartesian(ylim = c(-3, 50)) ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). rbcp <- rbc[rbc$pc == \"abrupt\", ] summary(rbcp$total_water) ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  ##  -13.07   17.33   24.30   20.83   25.00   38.68      10 rbcp <- rbcp[which(rbcp$total_water > 0), ] ggplot(   rbcp,   aes(x = time, group = id) ) +   facet_wrap(~id) +   geom_line(aes(y = total_water, color = \"Water (denominator)\")) +   geom_line(aes(y = pheno_diff, color = \"Phenotype (numerator)\")) +   labs(     title = \"Components of Rate pWUE\",     subtitle = \"constant watering, abrupt growth\",     y = \"Pheno Diff and Water Diff\", x = \"Time\"   ) +   pcv_theme() +   theme(legend.position = \"bottom\") ggplot(   rbcp,   aes(x = time, y = pWUE, group = id) ) +   facet_wrap(~id, scales = \"free_y\") +   geom_line() +   labs(     title = \"Constant Watering with Abrupt Growth\",     y = \"(Rate based) pWUE\"   ) +   pcv_theme()"},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"exponential","dir":"Articles","previous_headings":"pwue > Rate Based > Constant Watering","what":"Exponential","title":"Water data","text":"previous two phenotype options asymptotic. happens non-asymptotic growth?  ’ll remove negative values total_water. come place since phenotype changing quickly.  negative values removed trend looks lot like raw phenotype data.  feature exponential growth, since measurement--measurement difference increases exponentially roughly constant water use pWUE trend look exponential.","code":"ggplot(   rbc[rbc$pc == \"exponential\", ],   aes(x = time, y = pWUE, group = id) ) +   geom_line() +   labs(     title = \"Constant Watering with Exponential Growth\",     y = \"(Rate based) pWUE\"   ) +   pcv_theme() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). rbce <- rbc[which(rbc$pc == \"exponential\" & rbc$total_water > 0), ]  ggplot(   rbce,   aes(x = time, y = pWUE, group = id) ) +   geom_line() +   labs(     title = \"Constant Watering with Exponential Growth\",     y = \"(Rate based) pWUE\"   ) +   pcv_theme() ggplot(   ex[ex$pc == \"exponential\" & ex$wc == \"constant\", ],   aes(time, area, group = id) ) +   facet_grid(wc ~ pc) +   geom_line() +   labs(     y = \"Area\",     x = \"Time\",     title = \"Exponential Phenotype\"   ) +   pcv_theme() +   theme(     legend.position = \"none\",     strip.text.x.top = element_text(size = 10),     strip.text.y.right = element_text(size = 10)   ) ggplot(   rbce,   aes(x = time, group = id) ) +   facet_wrap(~id) +   geom_line(aes(y = total_water, color = \"Water (denominator)\")) +   geom_line(aes(y = pheno_diff, color = \"Phenotype (numerator)\")) +   labs(     title = \"Components of Rate pWUE\",     subtitle = \"constant watering, abrupt growth\",     y = \"Pheno Diff and Water Diff\", x = \"Time\"   ) +   pcv_theme() +   theme(legend.position = \"bottom\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"slowing","dir":"Articles","previous_headings":"pwue > Rate Based > Constant Watering","what":"Slowing","title":"Water data","text":"non-asymptotic growth slowing (exponent 1) expect see decreasing pWUE given constant watering.  growth non-asymptotic pWUE asymptotic since numerator monotone increasing slowing denominator roughly constant.","code":"ggplot(   rbc[rbc$pc == \"slowing\", ],   aes(x = time, y = pWUE, group = id) ) +   geom_line() +   labs(     title = \"Constant Watering with Power law (B<1) Growth\",     y = \"(Rate based) pWUE\"   ) +   pcv_theme() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"linear","dir":"Articles","previous_headings":"pwue > Rate Based > Constant Watering","what":"Linear","title":"Water data","text":"measurement--measurement change linear data two subsequent times. Since water data roughly constant (least 0 slope) expect see flat noisy pWUE .","code":"ggplot(   rbc[rbc$pc == \"linear\", ],   aes(x = time, y = pWUE, group = id) ) +   geom_line() +   labs(     title = \"Constant Watering with Linear Growth\",     y = \"(Rate based) pWUE\"   ) +   pcv_theme() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"death","dir":"Articles","previous_headings":"pwue > Rate Based > Constant Watering","what":"Death","title":"Water data","text":"Now can look death group, taken separately looks like totally normal growth curve.  measurement--measurement change asymptotic phenotype approaches 0 rate phenotype approaches asymptote. measurement--measurement change returned pwue pheno_diff column, plotted .","code":"ggplot(   rbc[rbc$pc == \"death\", ],   aes(time, area, group = interaction(group, id)) ) +   facet_wrap(~group) +   geom_line(aes(color = group)) +   geom_point(aes(color = group), size = 0.7) +   labs(     y = expression(\"Area (cm\"^2 * \")\"),     x = \"Time\",     title = \"Zooming in on the phenotype data for death\"   ) +   pcv_theme() +   theme(legend.position = \"none\") pheno_diff_ag <- aggregate(cbind(area, pheno_diff) ~ time + group,   rbc[rbc$time %% 2 == 0 & rbc$pc == \"death\", ],   mean,   na.rm = TRUE )  ggplot(   rbc[rbc$pc == \"death\", ],   aes(time, area) ) +   facet_wrap(~group) +   geom_line(aes(color = group, group = interaction(group, id))) +   geom_point(aes(color = group), size = 0.7) +   geom_label(     data = pheno_diff_ag,     aes(label = round(pheno_diff, 1))   ) +   labs(     y = expression(\"Area (cm\"^2 * \")\"),     x = \"Time\",     title = \"Labeling the average pheno_diff ever other day\"   ) +   pcv_theme() +   theme(legend.position = \"none\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"increasing-continuous","dir":"Articles","previous_headings":"pwue > Rate Based","what":"Increasing Continuous","title":"Water data","text":"increasing cont.: Pre-watering weight increases phenotype (area), every day larger amount water added pre-watered weight.  Luckily, compared constant watering can see aren’t crazy peaks negative values .","code":"rbic <- rb[rb$wc == \"increasing cont\", ] ggplot(rbic, aes(x = time, y = pWUE, group = id)) +   facet_wrap(~pc, scales = \"free_y\") +   geom_line() +   labs(title = \"Continuously Increasing Watering\") +   pcv_theme() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"sigmoid-1","dir":"Articles","previous_headings":"pwue > Rate Based > Increasing Continuous","what":"Sigmoid","title":"Water data","text":"looking numerator expect bell curve. Since denominator now increases time (water added reach target weight since plant transpires day grows larger), see bell curves starts high, center “lump”, end low.  ’s exactly see. make reason clear can plot numerator denominator separately.  lots ways increase watering course experiment, constant, related plant size (target weight watering tends ), step function, generally follow similar pattern example. approaches aren’t different used make pWUE change denominator much. Essentially, pWUE trend see several ways generated terms experimental design values put ratio (10/5 = 2/1).","code":"rbics <- rbic[rbic$pc == \"sigmoid\", ] ggplot(rbics, aes(x = time, y = pWUE, group = id)) +   geom_line() +   labs(title = \"Sigmoid growth and increasing water use\") +   pcv_theme() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ggplot(rbics,        aes(x = time, group = id)) +   geom_line(aes(y = total_water, color = \"Water (denominator)\")) +   geom_line(aes(y = pheno_diff, color = \"Phenotype (numerator)\")) +   labs(title = \"Components of Rate pWUE\",        subtitle = \"Increasing Water Use, logistic growth\",        y = \"Pheno Diff and Water Diff\", x = \"Time\") +   pcv_theme() +   theme(legend.position = \"bottom\") ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ## Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"aburpt","dir":"Articles","previous_headings":"pwue > Rate Based > Increasing Continuous","what":"Aburpt","title":"Water data","text":"Sharper logistic growth yield sharper bell curve since phenotype changing start reaches asymptotic size quickly, pWUE 0 either side “spike”.","code":"rbica <- rbic[rbic$pc == \"abrupt\", ] ggplot(rbica, aes(x = time, y = pWUE, group = id)) +   geom_line() +   labs(title = \"Fast Sigmoid growth and increasing water use\") +   pcv_theme() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ggplot(rbica,        aes(x = time, group = id)) +   geom_line(aes(y = total_water, color = \"Water (denominator)\")) +   geom_line(aes(y = pheno_diff, color = \"Phenotype (numerator)\")) +   labs(title = \"Components of Rate pWUE\",        subtitle = \"Increasing Water Use, abrupt growth\",        y = \"Pheno Diff and Water Diff\", x = \"Time\") +   pcv_theme() +   theme(legend.position = \"bottom\") ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ## Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"exponential-1","dir":"Articles","previous_headings":"pwue > Rate Based > Increasing Continuous","what":"Exponential","title":"Water data","text":"numerator increases exponentially denominator increases asymptotically. result expect exponential growth.  ’s get. increase measurement--measurement phenotype outpaces increase transpiration.","code":"rbice <- rbic[rbic$pc == \"exponential\", ] ggplot(rbice, aes(x = time, y = pWUE, group = id)) +   geom_line() +   labs(title = \"Exponential growth and increasing water use\") +   pcv_theme() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ggplot(rbice,        aes(x = time, group = id)) +   geom_line(aes(y = total_water, color = \"Water (denominator)\")) +   geom_line(aes(y = pheno_diff, color = \"Phenotype (numerator)\")) +   labs(title = \"Components of Rate pWUE\",        subtitle = \"Increasing Water Use, expoenential growth\",        y = \"Pheno Diff and Water Diff\", x = \"Time\") +   pcv_theme() +   theme(legend.position = \"bottom\") ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ## Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"slowing-1","dir":"Articles","previous_headings":"pwue > Rate Based > Increasing Continuous","what":"Slowing","title":"Water data","text":"derivative non-asymptotic slowing growth rate phenotype asymptotic 0. numerator decreasing denominator increasing see pWUE start high approach 0 quickly.  ’s get. increase measurement--measurement phenotype outpaces increase transpiration.","code":"rbics <- rbic[rbic$pc == \"slowing\", ] ggplot(rbics, aes(x = time, y = pWUE, group = id)) +   geom_line() +   labs(title = \"Slowing growth and increasing water use\") +   pcv_theme() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ggplot(rbics,        aes(x = time, group = id)) +   geom_line(aes(y = total_water, color = \"Water (denominator)\")) +   geom_line(aes(y = pheno_diff, color = \"Phenotype (numerator)\")) +   labs(title = \"Components of Rate pWUE\",        subtitle = \"Increasing Water Use, slowing growth\",        y = \"Pheno Diff and Water Diff\", x = \"Time\") +   pcv_theme() +   theme(legend.position = \"bottom\") ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ## Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"linear-1","dir":"Articles","previous_headings":"pwue > Rate Based > Increasing Continuous","what":"Linear","title":"Water data","text":"numerator constant denominator (transpiration) increasing, see pWUE decrease time, never getting 0.  look component pieces check intuition.","code":"rbicl <- rbic[rbic$pc == \"linear\", ] ggplot(rbicl, aes(x = time, y = pWUE, group = id)) +   geom_line() +   labs(title = \"Linear growth and increasing water use\") +   pcv_theme() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ggplot(rbicl,        aes(x = time, group = id)) +   geom_line(aes(y = total_water, color = \"Water (denominator)\")) +   geom_line(aes(y = pheno_diff, color = \"Phenotype (numerator)\")) +   labs(title = \"Components of Rate pWUE\",        subtitle = \"Increasing Water Use, linear growth\",        y = \"Pheno Diff and Water Diff\", x = \"Time\") +   pcv_theme() +   theme(legend.position = \"bottom\") ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ## Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"death-1","dir":"Articles","previous_headings":"pwue > Rate Based > Increasing Continuous","what":"Death","title":"Water data","text":"see similar trend saw non-asymptotic growth slowing . growth asymptotic effect numerator .  look component pieces check intuition.","code":"rbicd <- rbic[rbic$pc == \"death\", ] ggplot(rbicd, aes(x = time, y = pWUE, group = id)) +   geom_line() +   labs(title = \"Very little growth and increasing water use\") +   pcv_theme() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ggplot(rbicl,        aes(x = time, group = id)) +   geom_line(aes(y = total_water, color = \"Water (denominator)\")) +   geom_line(aes(y = pheno_diff, color = \"Phenotype (numerator)\")) +   labs(title = \"Components of Rate pWUE\",        subtitle = \"Increasing Water Use, almost no growth\",        y = \"Pheno Diff and Water Diff\", x = \"Time\") +   pcv_theme() +   theme(legend.position = \"bottom\") ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ## Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"decreasing-continuous","dir":"Articles","previous_headings":"pwue > Rate Based","what":"Decreasing Continuous","title":"Water data","text":"decreasing cont.: Pre-watering weight increases phenotype (area), every day smaller amount water added pre-watered weight. Now inverting trend denominator see real differences.","code":"rbdc <- rb[rb$wc == \"decreasing cont\", ] ggplot(rbdc, aes(x = time, y = pWUE, group = id)) +   facet_wrap(~pc, scales = \"free_y\") +   geom_line() +   labs(title = \"Continuously Decreasing Watering\") +   pcv_theme() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"sigmoid-2","dir":"Articles","previous_headings":"pwue > Rate Based > Decreasing Continuous","what":"Sigmoid","title":"Water data","text":"continuously decreasing watering scheme see roughly mirrored version saw increasing watering. pWUE starts low, goes “bell” shape, ends higher since denominator ’s smallest end experiment measurement--measurement phenotype change back beginning.  one strong spike end can try understand better looking component pWUE.  Now can see cause spike just watering amount last day 4th plant almost nothing.","code":"rbdcs <- rbdc[rbdc$pc == \"sigmoid\", ] ggplot(rbdcs, aes(x = time, y = pWUE, group = id)) +   geom_line() +   labs(title = \"Logistic growth and target weight watering\") +   pcv_theme() ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ggplot(   rbdcs,   aes(x = time, group = id) ) +   facet_wrap(~id) +   geom_line(aes(y = total_water, color = \"Water (denominator)\")) +   geom_line(aes(y = pheno_diff, color = \"Phenotype (numerator)\")) +   labs(     title = \"Components of Rate pWUE\",     subtitle = \"Decreasing watering, logistic growth\",     y = \"Pheno Diff and Water Diff\", x = \"Time\"   ) +   pcv_theme() +   theme(legend.position = \"bottom\") ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ## Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"abrupt-1","dir":"Articles","previous_headings":"pwue > Rate Based > Decreasing Continuous","what":"Abrupt","title":"Water data","text":"abrupt logistic phenotype looks essentially waterings since numerator non-zero middle experiment, trend denominator makes relatively minor changes overall trend. theme growth curve gets close asymptote.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"exponential-2","dir":"Articles","previous_headings":"pwue > Rate Based > Decreasing Continuous","what":"Exponential","title":"Water data","text":"remove negative values, caused normally measurement error.  remove negative values see basic trend (stronger time denominator gets smaller exponential growth progresses) exponentially increasing phenotype. hard design watering protocol short complete drought curb trend phenotype.","code":"rbdce <- rbdc[which(rbdc$pc == \"exponential\" & rbdc$pWUE > 0), ] ggplot(rbdce, aes(x = time, y = pWUE, group = id)) +   geom_line() +   facet_wrap(~id, scales = \"free_y\") +   labs(title = \"Exponential growth and target weight watering\") +   pcv_theme()"},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"slowing-2","dir":"Articles","previous_headings":"pwue > Rate Based > Decreasing Continuous","what":"Slowing","title":"Water data","text":"slowing, linear, death groups show similar trends . Since numerators constant slightly decreasing (change slope) denominator can push pWUE trend dramatically.","code":"ggplot(   rbdc[rbdc$pc %in% c(\"slowing\", \"linear\", \"death\"), ],   aes(x = time, group = id) ) +   facet_wrap(~pc) +   geom_line(aes(y = total_water, color = \"Water (denominator)\")) +   geom_line(aes(y = pheno_diff, color = \"Phenotype (numerator)\")) +   labs(     title = \"The differences in phenotype trend are overpowered\",     subtitle = \"Decreasing watering, any slow growth\",     y = \"Pheno Diff and Water Diff\", x = \"Time\"   ) +   pcv_theme() +   theme(legend.position = \"bottom\") ## Warning: Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`). ## Removed 10 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"absolute-value-based","dir":"Articles","previous_headings":"pwue","what":"Absolute Value Based","title":"Water data","text":"Since went possible combinations rate based pWUE move faster absolute value based version pWUE establish difference pWUE formula. reminder, definition pWUE means considering absolute size plant timepoint formula now : BiomasstWater Transpiredt\\frac{\\text{Biomass}_t}{\\text{Water Transpired}_t} type pWUE useful thinking much biomass can maintained per unit water. numerator , can check problems already know . time ’ll plot scales freed Y-axis values 0 already removed.  pWUE data look lot like original phenotype data, exception abrupt growth ’ll get . general similarity phenotype data used -numerator, part don’t drastic changes water transpiration (weight changes) time. Everything except abrupt logistic phenotype basically just looks like phenotype represents. abrupt group looks strange though, going ?","code":"a <- pwue(   df = ex, w = NULL, pheno = \"area\", time = \"time\", id = c(\"id\", \"group\"),   pre_watering = \"weight_before\",   post_watering = \"weight_after\", method = \"abs\" ) colSums(table(a$group, ifelse(a$pWUE < 0, \"negative\", \"positive\"))) ## negative positive  ##       18     4302 apos <- a[which(a$pWUE > 0), ] ggplot(   apos[apos$id %in% paste0(\"id_\", 1:3), ],   aes(x = time, y = pWUE, group = id) ) +   facet_grid(wc ~ pc, scales = \"free_y\") +   geom_line() +   pcv_theme() +   theme(     strip.text.x.top = element_text(size = 10),     strip.text.y.right = element_text(size = 10)   )"},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"abrupt-logistic-growth","dir":"Articles","previous_headings":"pwue > Absolute Value Based","what":"Abrupt Logistic Growth","title":"Water data","text":"happening since phenotype changes quickly measurements 10 14 (roughly) “lag” look difference weights becomes important. Looking pre/post watering weights first 3 plants watering condition given abrupt logistic growth problem obvious.  days 10 14 line weights much shorter. data difference smaller ’s relatively low effort simulation. wild can see trends like image based phenotype changes rapidly underlying “true quantity”. keep area example, plant’s leaf presentation 2 dimensions changes way different biomass actually changes can see . sort differences highlight say using Pseudo-WUE. similar idea corn heat-stressed leaves furl helical shape viewed 2D don’t really think corn plant lost biomass, just rearranged way image fewer plant pixels. zoom pWUE trends can tell despite noisy middle experiment discrepancy area proxy biomass true biomass (rapid artificial weight gain excess watering amount) overall trend look like phenotype.","code":"ggplot(   apos[apos$pc == \"abrupt\", ],   aes(x = time, y = pWUE, group = id) ) +   facet_wrap(~wc, scales = \"free_y\") +   geom_line() +   pcv_theme() +   labs(     title = \"Why doesn't this look more like the raw phenotype?\",     y = \"Abs pWUE\", x = \"Time\"   ) +   theme(     strip.text.x.top = element_text(size = 10),     strip.text.y.right = element_text(size = 10)   ) ggplot(   apos[apos$pc == \"abrupt\", ],   aes(x = time, group = id) ) +   facet_wrap(~wc) +   geom_line(aes(y = total_water, color = \"Water (denominator)\")) +   geom_line(aes(y = pheno_iter, color = \"Phenotype (numerator)\")) +   labs(     title = \"This view kind of helps, but it still doesn't explain our trend clearly\",     y = \"Pheno Diff and Water Diff\", x = \"Time\"   ) +   pcv_theme() +   theme(legend.position = \"bottom\") l2 <- reshape2::melt(ex[ex$pc == \"abrupt\", ],   id.vars = c(\"id\", \"group\", \"time\", \"wc\"),   measure.vars = c(\"weight_before\", \"weight_after\") ) ggplot(   l2[l2$id %in% paste0(\"id_\", 1:3), ],   aes(     x = time + ifelse(variable == \"weight_before\", -0.25, 0.25),     y = value, color = variable, group = id   ) ) +   facet_grid(id ~ wc) +   geom_line(color = \"black\", linewidth = 0.1) +   geom_point(size = 0.5) +   labs(     y = \"Weight\", x = \"Time\",     title = \"Sharp phenotype changes drive small denominators\"   ) +   pcv_theme() +   theme(     legend.position = \"none\",     strip.text.x.top = element_text(size = 10),     strip.text.y.right = element_text(size = 10)   ) ggplot(   apos[apos$pc == \"abrupt\", ],   aes(x = time, y = pWUE, group = id) ) +   facet_wrap(~wc, scales = \"free_y\") +   geom_line() +   pcv_theme() +   labs(     title = \"Why doesn't this look more like the raw phenotype?\",     y = \"Abs pWUE\", x = \"Time\"   ) +   theme(     strip.text.x.top = element_text(size = 10),     strip.text.y.right = element_text(size = 10)   ) +   coord_cartesian(ylim = c(0, 10))"},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"normalized-daily-transpiration","dir":"Articles","previous_headings":"pwue","what":"Normalized Daily Transpiration","title":"Water data","text":"last phenotypes calculated pwue normalized daily transpiration (NDT). Normalized transpiration reciprocal “abs” style pWUE just looked , answers related question. NDT helpful want investigate much water used (transpired) given amount biomass. abrupt group misbehaves relative options. Suffice say, time looks like obvious reciprocal previous pWUE implementation. simulated data see plants smaller apparently using amount water (see top row constant watering) NDT high. obvious exponential phenotype. Remember well able use NDT (water use phenotype) depend entirely accurately can measure transpiration.  abrupt phenotype much higher values transpiration since dividing close 0 long time (beginning experiment plants barely detectable). another caveat real data, plants fail thrive can end dramatic outliers water use phenotypes.","code":"ndt <- pwue(   df = ex, w = NULL, pheno = \"area\", time = \"time\", id = c(\"id\", \"group\"),   pre_watering = \"weight_before\",   post_watering = \"weight_after\", method = \"ndt\" ) ndt <- ndt[which(ndt$pWUE > 0), ] ggplot(   ndt[ndt$id %in% paste0(\"id_\", 1:3) & ndt$pc != \"abrupt\", ],   aes(x = time, y = normalized_daily_transpiration, group = id) ) +   facet_grid(wc ~ pc, scales = \"free_y\") +   geom_line() +   pcv_theme() +   theme(     strip.text.x.top = element_text(size = 10),     strip.text.y.right = element_text(size = 10)   ) ggplot(   ndt[ndt$id %in% paste0(\"id_\", 1:3) & ndt$pc == \"abrupt\", ],   aes(x = time, y = normalized_daily_transpiration, group = id) ) +   facet_grid(wc ~ pc, scales = \"free_y\") +   geom_line() +   pcv_theme() +   theme(     strip.text.x.top = element_text(size = 10),     strip.text.y.right = element_text(size = 10)   )"},{"path":"https://danforthcenter.github.io/pcvr/articles/field_capacity.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Water data","text":"Hopefully helps working whatever kind water usage phenotype experiment requires. phenotypes often noisy difficult measure, looking component pieces separately WUE pWUE type phenotype collect helpful. may also take extra care looking outliers water use metrics core part analysis. Additionally, popular systems unfortunate tendency return negative masses plants. obviously problem, ground truth data near middle end experiment can helpful. Whatever setup use, try understand component calculated water use metrics interpreting .","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/installation.html","id":"installing-r","dir":"Articles","previous_headings":"","what":"Installing R","title":"Installation","text":"already R installed local computer please install R comprehensive R archive network (CRAN).","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/installation.html","id":"installing-rstudio","dir":"Articles","previous_headings":"","what":"Installing Rstudio","title":"Installation","text":"Rstudio IDE like work installed please install Rstudio using instructions .","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/articles/installation.html","id":"stable-release","dir":"Articles","previous_headings":"Installing pcvr","what":"Stable Release","title":"Installation","text":"stable version pcvr can installed CRAN using:","code":"install.packages(\"pcvr\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/installation.html","id":"development-version","dir":"Articles","previous_headings":"Installing pcvr","what":"Development version","title":"Installation","text":"Alternatively development version can installed github using devtools remotes R. First install either devtools remotes CRAN: devtools package makes developing R packages straightforward lets easily install packages places CRAN. devtools installed can use install_github install frequently updated version pcvr Danforth center github account. default install package dependencies build bellwether vignette. See sections document examples different installation options.","code":"install.packages(\"devtools\") library(devtools) devtools::install_github(\"danforthcenter/pcvr\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/installation.html","id":"test-installation","dir":"Articles","previous_headings":"Installing pcvr","what":"Test installation","title":"Installation","text":"Just check pcvr installed R session knows find try running 3 lines load package generate plot simulated data.","code":"library(pcvr) priors <- list(\"A\" = c(100, 130), \"B\" = c(10, 8), \"C\" = c(0.2, 0.1)) plotPrior(priors, \"gompertz\")[[1]]"},{"path":"https://danforthcenter.github.io/pcvr/articles/installation.html","id":"optional-extras","dir":"Articles","previous_headings":"","what":"Optional Extras","title":"Installation","text":"default install_github install dependencies pcvr, handful packages true dependencies helpful certain tasks. Currently brms, cmdstanr caret packages fall category, brms (Bayesian Regression Modeling using Stan) cmdstanr used Bayesian growth modeling caret begin used partial least squares regression (PLSR). can install “Suggested” packages well using: Alternatively can just install brms cmdstanr using instructions . brms specifies models Stan “transpiled” executed using C++, need interface make R communicate Stan/C++, rstan cmdstanr good options cmdstanr generally better features time.","code":"devtools::install_github(\"danforthcenter/pcvr\", dependencies = TRUE) install.packages(\"brms\") install.packages(\"cmdstanr\", repos = c(\"https://mc-stan.org/r-packages/\", getOption(\"repos\"))) cmdstanr::install_cmdstan()"},{"path":"https://danforthcenter.github.io/pcvr/articles/installation.html","id":"test-cmdstanr","dir":"Articles","previous_headings":"Optional Extras","what":"Test cmdstanr","title":"Installation","text":"simple model can used test cmdstanr installation:","code":"?cmdstanr::cmdstanr_example cmdstanr::cmdstanr_example()"},{"path":"https://danforthcenter.github.io/pcvr/articles/installation.html","id":"test-brms","dir":"Articles","previous_headings":"Optional Extras","what":"Test brms","title":"Installation","text":"now can test brms installation. use toy model mtcars dataset pcvr example.","code":"library(brms) data(mtcars) m <- brm(mpg ~ gear + hp, iter = 500, data = mtcars, backend = \"cmdstanr\") simdf <- growthSim(\"linear\",   n = 20, t = 25,   params = list(\"A\" = c(1.1, 0.95)) ) ss <- growthSS(   model = \"linear\", form = y ~ time | id / group,   sigma = \"linear\", df = simdf, priors = list(\"A\" = 1) ) fit_test <- fitGrowth(ss,   iter = 1000, cores = 2, chains = 2,   backend = \"cmdstanr\" )"},{"path":"https://danforthcenter.github.io/pcvr/articles/installation.html","id":"bellwether-vignette","dir":"Articles","previous_headings":"","what":"Bellwether Vignette","title":"Installation","text":"Bellwether Vignette shows example workflow analyze single multi value traits plantCV output. example data comes longitudinal experiment, shown applicable designs well. vignette automatically built, can built installation: Now check available vignettes browser browseVignettes","code":"devtools::install_github(\"danforthcenter/pcvr\", build_vignettes = TRUE) browseVignettes(\"pcvr\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"why-longitudinal-modeling","dir":"Articles","previous_headings":"","what":"Why Longitudinal Modeling?","title":"Longitudinal Growth Modeling Options","text":"Longitudinal modeling allows users take full advantage accurate non-destructive data collection possible high throughput image based phenotyping. Using longitudinal data accurately requires understanding statistical challenges associated . Statistical complications including changes variance (heteroskedasticity), non-linearity, autocorrelation (plant’s day day self similarity) present potential problems analyses. address kind data several functions provided make fitting appropriate growth models straightforward.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"installation-for-advanced-models","dir":"Articles","previous_headings":"","what":"Installation for Advanced Models","title":"Longitudinal Growth Modeling Options","text":"brms package automatically imported pcvr, fitting brms models need load package. details installing brms either rstan cmdstanr (cmdstanr recommended), see linked documentation. Note install pcvr github dependencies=T cmdstanr brms installed. cmdstanr installed also need set cmdstan path link cmdstan R, done easily cmdstanr. example, packages can installed prepped using code.","code":"if (!\"cmdstanr\" %in% installed.packages()) {   install.packages(\"cmdstanr\", repos = c(\"https://mc-stan.org/r-packages/\", getOption(\"repos\"))) } if (!\"brms\" %in% installed.packages()) {   install.packages(\"brms\") } library(brms) library(cmdstanr) cmdstanr::install_cmdstan()"},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"available-growth-models","dir":"Articles","previous_headings":"","what":"Available Growth Models","title":"Longitudinal Growth Modeling Options","text":"Based literature experience six common plant growth models make “main” models growthSS, although 13 supported. main six growth models supported pcvr across four available backend functions (nls, nlrq, nlme, brms). mgcv backend can also used fit generalized additive models (GAMS) growth curves well. addition six main models GAMs, double logistic, double gompertz models supported across four available parameter based backends. parameterizations models explained .","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"logistic","dir":"Articles","previous_headings":"Available Growth Models","what":"Logistic","title":"Longitudinal Growth Modeling Options","text":"logistic function implemented 3 parameter sigmoidal growth curve: /(1+e(B−x)/C)/ (1 + e^{(B-x)/C} ) model asymptote, B inflection point, C growth rate.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"gompertz","dir":"Articles","previous_headings":"Available Growth Models","what":"Gompertz","title":"Longitudinal Growth Modeling Options","text":"gompertz function also 3 parameter sigmoidal growth curve: *e(−B*e(−C*x))* e^{(-B * e^{(-C*x)})} model asymptote, B inflection point, C growth rate. gompertz formula complex logistic formula, tends make model slightly harder fit terms time computation. benefit extra effort gompertz curve flexible logistic curve stop growing rate initially started growing. author’s experience gompertz growth models provided best fit sigmoidal data, sometimes speed familiarity logistic function may compelling.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"monomolecular","dir":"Articles","previous_headings":"Available Growth Models","what":"Monomolecular","title":"Longitudinal Growth Modeling Options","text":"monomolecular function 2 parameter asymptotic growth curve: −*e(−B*x)-* e^{(-B * x)} , asymptote now B growth rate. model often fit well height width phenotypes, make model choices based data/expectations.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"exponential","dir":"Articles","previous_headings":"Available Growth Models","what":"Exponential","title":"Longitudinal Growth Modeling Options","text":"exponential function 2 parameter non-asymptotic growth curve bearing strong similarity monomolecular formula: *e(B*x)* e^{(B * x)} scale parameter B growth rate. plants grow indefinitely, although many may grow exponentially course experiment (think first half logistic gompertz curve). cases may wish use exponential model using brms backend may wish rely prior information asymptote eventually achieved use sigmoidal model.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"power-law","dir":"Articles","previous_headings":"Available Growth Models","what":"Power Law","title":"Longitudinal Growth Modeling Options","text":"power law function 2 parameter non-asymptotic growth curve: *xBA * x^B scale parameter B growth rate. formula becomes linear B 1, shows slowing growth time 0 < B < 1 shows growth speed increasing time (exponential) B > 1. models can allow slowing growth time without expectation growth ever truly stops.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"linear","dir":"Articles","previous_headings":"Available Growth Models","what":"Linear","title":"Longitudinal Growth Modeling Options","text":"linear function simply: *xA * x growth rate intercept assumed 0.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"double-logistic","dir":"Articles","previous_headings":"Available Growth Models","what":"Double Logistic","title":"Longitudinal Growth Modeling Options","text":"double logistic function just two combined logistic functions: /(1+e((B−x)/C))+((A2−)/(1+e((B2−x)/C2)))/ (1+e^{((B-x)/C)}) + ((A2-) /(1+e^{((B2-x)/C2)})) parameters interpretation logistic curve, first second component separately. intended use recover experiments, data minor hiccups overall trend. Additionally, brms backend segmented models allow flexible implementation logistic+logistic, although implementation values B relative.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"double-gompertz","dir":"Articles","previous_headings":"Available Growth Models","what":"Double Gompertz","title":"Longitudinal Growth Modeling Options","text":"double logistic function just two combined gompertz functions: *e(−B*e(−C*x))+((A2−)*e(−B2*e(−C2*(x−B))))* e^{(-B * e^{(-C*x)})} + ((A2-) * e^{(-B2 * e^{(-C2*(x-B))})}) parameters interpretation gompertz curve, first second component separately. points double logistic curve apply well.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"weibull","dir":"Articles","previous_headings":"Available Growth Models","what":"Weibull","title":"Longitudinal Growth Modeling Options","text":"weibull growth curve derived generalized extreme value distribution comparable gompertz growth model option, may slightly easier fit/faster moving cases.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"gumbel","dir":"Articles","previous_headings":"Available Growth Models","what":"Gumbel","title":"Longitudinal Growth Modeling Options","text":"gumbel growth curve also derived generalized EVD used similar contexts weibull gompertz model options. choice use left individual users conventions field.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"frechet","dir":"Articles","previous_headings":"Available Growth Models","what":"Frechet","title":"Longitudinal Growth Modeling Options","text":"final option derived generalized EVD. Note 3 parameter version used location (m) set 0 default.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"bragg","dir":"Articles","previous_headings":"Available Growth Models","what":"Bragg","title":"Longitudinal Growth Modeling Options","text":"Bragg model dose-response curve models minima maxima using 3 parameters.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"lorentz","dir":"Articles","previous_headings":"Available Growth Models","what":"Lorentz","title":"Longitudinal Growth Modeling Options","text":"Lorentz model dose-response curve models minima maxima using 3 parameters. parameterization may slightly intuitive formula Bragg people worse statistical qualities.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"beta","dir":"Articles","previous_headings":"Available Growth Models","what":"Beta","title":"Longitudinal Growth Modeling Options","text":"Beta model based PDF beta distribution models minima/maxima dose-response curve using 5 parameters. can difficult model fit can describe non-symmetric dose-response relationships well.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"gam","dir":"Articles","previous_headings":"Available Growth Models","what":"GAM","title":"Longitudinal Growth Modeling Options","text":"Finally, backends can fit GAMs. unparameterized functions use series splines fit variety trends. general less useful since give directly interpretable parameters, flexibility can valuable data fit standard model well.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"simulating-data","dir":"Articles","previous_headings":"Available Growth Models","what":"Simulating data","title":"Longitudinal Growth Modeling Options","text":"Data parameterized model can simulated using growthSim. vignette use data created way show modeling options.","code":"simdf <- growthSim(\"logistic\", n = 20, t = 25, params = list(   \"A\" = c(200, 160),   \"B\" = c(13, 11),   \"C\" = c(3, 3.5) )) l <- ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Logistic\") +   theme_minimal() +   theme(legend.position = \"none\")  simdf <- growthSim(\"gompertz\", n = 20, t = 25, params = list(   \"A\" = c(200, 160),   \"B\" = c(13, 11),   \"C\" = c(0.2, 0.25) )) g <- ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Gompertz\") +   theme_minimal() +   theme(legend.position = \"none\")  simdf <- growthSim(\"monomolecular\", n = 20, t = 25, params = list(\"A\" = c(200, 160), \"B\" = c(0.08, 0.1))) m <- ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Monomolecular\") +   theme_minimal() +   theme(legend.position = \"none\")  simdf <- growthSim(\"exponential\", n = 20, t = 25, params = list(\"A\" = c(15, 20), \"B\" = c(0.095, 0.095))) e <- ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Exponential\") +   theme_minimal() +   theme(legend.position = \"none\")  simdf <- growthSim(\"linear\", n = 20, t = 25, params = list(\"A\" = c(1.1, 0.95))) ln <- ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Linear\") +   theme_minimal() +   theme(legend.position = \"none\")  simdf <- growthSim(\"power law\", n = 20, t = 25, params = list(\"A\" = c(16, 11), \"B\" = c(0.75, 0.7))) pl <- ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Power Law\") +   theme_minimal() +   theme(legend.position = \"none\")  patch <- (l + g + m) / (e + ln + pl) patch"},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"available-model-backends","dir":"Articles","previous_headings":"","what":"Available Model Backends","title":"Longitudinal Growth Modeling Options","text":"previously mentioned five backends supported pcvr. go backends detail. backends selected using one nls, nlrq, nlme, mgcv, brms correspond functions shown table.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"nls","dir":"Articles","previous_headings":"Available Model Backends","what":"nls","title":"Longitudinal Growth Modeling Options","text":"nls backend simplest option. models account non-linearity using aforementioned model types fit quickly ways take autocorrelation heteroskedasticity account.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"nlrq","dir":"Articles","previous_headings":"Available Model Backends","what":"nlrq","title":"Longitudinal Growth Modeling Options","text":"nlrq backend fits non-linear quantile models specified quantiles data. models account non-linearity account heteroskedasticity non-parametric quantile based way (fitting 2.5% 97.5% models provide something like 95% confidence interval changes width across time data ).","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"nlme","dir":"Articles","previous_headings":"Available Model Backends","what":"nlme","title":"Longitudinal Growth Modeling Options","text":"nlme backend fits non-linear mixed effect models. models account non-linearity, autocorrelation, options model heteroskedasticity.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"mgcv","dir":"Articles","previous_headings":"Available Model Backends","what":"mgcv","title":"Longitudinal Growth Modeling Options","text":"mgcv backend fits GAMs, account non-linearity account heteroskedasticity autocorrelation return interpretable parameters.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"brms","dir":"Articles","previous_headings":"Available Model Backends","what":"brms","title":"Longitudinal Growth Modeling Options","text":"brms backend fits hierarchical Bayesian models account non-linearity, autocorrelation heteroskedasticity. models flexible options focus Advanced Growth Modeling Tutorial.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"making-models-in-pcvr","dir":"Articles","previous_headings":"","what":"Making models in pcvr","title":"Longitudinal Growth Modeling Options","text":"high level relevant functions pcvr growthSS, fitGrowth, growthPlot, testGrowth. growthSS specifies self starting growth models returns list used fitGrowth fitGrowth fits growth model specified growthSS returns model list model options. growthPlot visualizes model fit. particularly helpful brms models check heteroskedastic sub models. testGrowth tests model parameters nested versions models allow straightforward hypothesis testing frequentist (non-brms) models. brms models brms::hypothesis function used.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"using-growthss","dir":"Articles","previous_headings":"Making models in pcvr","what":"Using growthSS","title":"Longitudinal Growth Modeling Options","text":"growthSS first pcvr helper function setting longitudinal models. growthSS return list elements used fit longitudinal model including formula, starting values (priors brms values), data use, several elements used internally functions. growthSS takes five arguments specify model use, simplified formula specifying columns data use, sigma option, data use, starting values/priors. model data use relatively straightforward, compare plot data general shapes model parameterizations shown pick model type pass dataframe df argument. remaining arguments explained .","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"growthss----form----","dir":"Articles","previous_headings":"Making models in pcvr > Using growthSS","what":"growthSS(..., form, ...)","title":"Longitudinal Growth Modeling Options","text":"form argument growthSS needs specify outcome variable, time variable, identifier individuals, grouping structure. passed formula object, using similar syntax lme4 brms, outcome ~ time|individual_id/group_id. Verbally read “outcome modeled time accounting correlation individual_id’s fixed effects specified per group_id”. Note formula change different growth models, specify structure data. simplification requires parts formula must single column dataframe. Note group data set parameters estimated. lots groups data may make sense fit models groups time. models can still compared extracting MCMC draws, combining dataframe, using brms::hypothesis per normal. model backends account autocorrelation individual used can omitted leaving outcome ~ time|group_id, harm including individual_id component.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"growthss----sigma----","dir":"Articles","previous_headings":"Making models in pcvr > Using growthSS","what":"growthSS(..., sigma, ...)","title":"Longitudinal Growth Modeling Options","text":"sigma argument controls distributional sub models. used nlme brms backends support different options. nlme models models sigma can “int”, “power”, “exp” correspond using nlme::varIdent (constant variance within groups), nlme::varPower (variance changing power function), nlme::varExp (variance changing exponential function). brms models can specified way general growth model can used model distributional parameter model family use. default model family Student T, sigma nu parameters. distributions can specified main growth model model = \"family_name: model_name\" (model = \"poisson: linear\" example). details available families see ?brms::brmsfamily. also “int” model type fits 0 slope intercept model. “int” can used brms model option meant used specifying homoskedastic sub model, period noise main growth trend begins (terms growth variance). Distributional parameters specified modeled constant groups. high level can think models fitting curve lines.  Several options shown , ignoring grouping since data already aggregated.  “int” specify homoskedastic model, one constant variance time per group. default almost every kind statistical modeling unrealistic assumption setting often follow growth small seedlings potentially fully grown plants. Even start larger plants homoskedastic assumption almost never holds longitudinal modeling. can fit example model see issue homoskedastic assumption model’s credible intervals, far wide beginning experiment even include negative values plant area. can relax assumption model sigma separately main growth trend. show example options pcvr, repeat example using linear submodel. Note add extra controls model fitting algorithm help model fit well added complexity cost slower. model also poor fit, different problem. accurately models low variability beginning experiment, linear model flexible enough adapt changes variance even simulated data. can also use spline sub models. spline model good job fitting data due natural flexibility polynomial functions. added accuracy comes cost taking longer model fit. can specify “gam” “spline” backwards compatibility. try applying gompertz function variance submodel. much less flexible splines tends describe variance sigmoid growth model quite well allows easier hypothesis testing groups. fringe benefit can also predictability gompertz formula extrapolating future data. Splines can unexpected behavior trying predict timepoints outside initial data, gompertz formula predictable. Additionally, since spline sub model fit many basis functions generally significantly faster since needs find 3 parameters complete sub model, can mildly informative prior. single reference point, model fit 6 minutes spline model took slightly hour fit. example models three groups model gompertz sub model contains 21 total parameters spline sub model version contains 43 total parameters. setting priors gompertz sub-model generally reasonable expect similar growth rate inflection point main model (assuming main model gompertz well). options shown examples. many ways model variance model growth using brms backend, options limited.  considering several sub models (growth models) can compare brms models using Leave-One-Information Criterion (LOO IC). frequentist models familiar metric like BIC AIC might used. spline sub-model tends best LOO IC, comparing credible intervals taking speed interpretability account may change model best option situation. particular data gompertz submodel seem perform well despite LOO IC difference using splines.","code":"set.seed(345) gomp <- growthSim(\"gompertz\", n = 20, t = 35, params = list(   \"A\" = c(200, 180, 160),   \"B\" = c(20, 22, 18),   \"C\" = c(0.15, 0.2, 0.1) ))   sigma_df <- aggregate(y ~ group + time, data = gomp, FUN = sd)  ggplot(sigma_df, aes(x = time, y = y, group = group)) +   geom_line(color = \"gray60\") +   pcv_theme() +   labs(y = \"SD of y\", title = \"Gompertz Sigma\") draw_gomp_sigma <- function(x) {   return(23 * exp(-21 * exp(-0.22 * x))) } ggplot(sigma_df, aes(x = time, y = y)) +   geom_line(aes(group = group), color = \"gray60\") +   geom_hline(aes(yintercept = 12, color = \"Homoskedastic\"),     linetype = 5,     key_glyph = draw_key_path   ) +   geom_abline(aes(slope = 0.8, intercept = 0, color = \"Linear\"),     linetype = 5,     key_glyph = draw_key_path   ) +   geom_smooth(     method = \"gam\", aes(color = \"Spline\"), linetype = 5, se = FALSE,     key_glyph = draw_key_path   ) +   geom_function(fun = draw_gomp_sigma, aes(color = \"Gompertz\"), linetype = 5) +   scale_color_viridis_d(option = \"plasma\", begin = 0.1, end = 0.9) +   guides(color = guide_legend(override.aes = list(linewidth = 1, linetype = 1))) +   pcv_theme() +   theme(legend.position = \"bottom\") +   labs(y = \"SD of y\", title = \"Gompertz Sigma\", color = \"\") ss <- growthSS(   model = \"gompertz\", form = y ~ time | id / group, sigma = \"int\",   df = gomp, start = list(\"A\" = 130, \"B\" = 15, \"C\" = 0.25) )  ss ## gompertz brms student model: ##  ## pcvr formula variables: ## Outcome: y ## X: time ## Individual: id ## Group: group ##  ## Model Formula: ## y ~ A * exp(-B * exp(-C * time))  ## autocor ~ tructure(list(), class = \"formula\", .Environment = <environment>) ## sigma ~ 0 + group ## nu ~ 1 ## A ~ 0 + group ## B ~ 0 + group ## C ~ 0 + group ##  ## Data: ##     id group time            y ## 1 id_1     a    1 9.650345e-06 ## 2 id_1     a    2 9.639086e-05 ## 3 id_1     a    3 7.020911e-04 ## ... ## (2100 rows) fit_h <- fitGrowth(ss, iter = 1000, cores = 4, chains = 4, silent = 0)  brmPlot(fit_h, form = ss$pcvrForm, df = ss$df) ss <- growthSS(   model = \"gompertz\", form = y ~ time | id / group, sigma = \"linear\",   df = gomp, start = list(\"A\" = 130, \"B\" = 15, \"C\" = 0.25) )  ss ## gompertz brms student model: ##  ## pcvr formula variables: ## Outcome: y ## X: time ## Individual: id ## Group: group ##  ## Model Formula: ## y ~ A * exp(-B * exp(-C * time))  ## autocor ~ tructure(list(), class = \"formula\", .Environment = <environment>) ## sigma ~ time + time:group ## nu ~ 1 ## A ~ 0 + group ## B ~ 0 + group ## C ~ 0 + group ##  ## Data: ##     id group time            y ## 1 id_1     a    1 9.650345e-06 ## 2 id_1     a    2 9.639086e-05 ## 3 id_1     a    3 7.020911e-04 ## ... ## (2100 rows) fit_l <- fitGrowth(ss,   iter = 1000, cores = 4, chains = 4, silent = 0,   control = list(adapt_delta = 0.999, max_treedepth = 20) )  p1 <- brmPlot(fit_l, form = ss$pcvrForm, df = ss$df) p2 <- p1 + coord_cartesian(ylim = c(0, 300)) p <- p1 / p2 p ss <- growthSS(   model = \"gompertz\", form = y ~ time | id / group, sigma = \"spline\",   df = gomp, start = list(\"A\" = 130, \"B\" = 15, \"C\" = 0.25) )  ss ## gompertz brms student model: ##  ## pcvr formula variables: ## Outcome: y ## X: time ## Individual: id ## Group: group ##  ## Model Formula: ## y ~ A * exp(-B * exp(-C * time))  ## autocor ~ tructure(list(), class = \"formula\", .Environment = <environment>) ## sigma ~ s(time, by = group) ## nu ~ 1 ## A ~ 0 + group ## B ~ 0 + group ## C ~ 0 + group ##  ## Data: ##     id group time            y ## 1 id_1     a    1 9.650345e-06 ## 2 id_1     a    2 9.639086e-05 ## 3 id_1     a    3 7.020911e-04 ## ... ## (2100 rows) fit_s <- fitGrowth(ss,   iter = 2000, cores = 4, chains = 4, silent = 0,   control = list(adapt_delta = 0.999, max_treedepth = 20) )  brmPlot(fit_s, form = ss$pcvrForm, df = ss$df) ss <- growthSS(   model = \"gompertz\", form = y ~ time | id / group, sigma = \"gompertz\",   df = gomp, start = list(     \"A\" = 130, \"B\" = 15, \"C\" = 0.25,     \"sigmaA\" = 15, \"sigmaB\" = 15, \"sigmaC\" = 0.25   ),   type = \"brms\" )  ss ## gompertz brms student model: ##  ## pcvr formula variables: ## Outcome: y ## X: time ## Individual: id ## Group: group ##  ## Model Formula: ## y ~ A * exp(-B * exp(-C * time))  ## autocor ~ tructure(list(), class = \"formula\", .Environment = <environment>) ## sigma ~ sigmaA * exp(-sigmaB * exp(-sigmaC * time)) ## nu ~ 1 ## A ~ 0 + group ## B ~ 0 + group ## C ~ 0 + group ## sigmaA ~ 0 + group ## sigmaB ~ 0 + group ## sigmaC ~ 0 + group ##  ## Data: ##     id group time            y ## 1 id_1     a    1 9.650345e-06 ## 2 id_1     a    2 9.639086e-05 ## 3 id_1     a    3 7.020911e-04 ## ... ## (2100 rows) fit_g <- fitGrowth(ss,   iter = 2000, cores = 4, chains = 4, silent = 0,   control = list(adapt_delta = 0.999, max_treedepth = 20) )  brmPlot(fit_g, form = ss$pcvrForm, df = ss$df) draw_gomp_sigma <- function(x) {   return(23 * exp(-21 * exp(-0.22 * x))) } draw_logistic_sigma <- function(x) {   return(20 / (1 + exp((15 - x) / 2))) } draw_logistic_exp <- function(x) {   return(2.5 * exp(0.08 * x)) } draw_logistic_quad <- function(x) {   return((0.3 * x) + (0.02 * x^2)) }  ggplot(sigma_df, aes(x = time, y = y)) +   geom_line(aes(group = group), color = \"gray60\", linetype = 5) +   geom_hline(aes(yintercept = 12, color = \"Homoskedastic\"), linetype = 1) +   geom_abline(aes(slope = 0.8, intercept = 0, color = \"Linear\"),     linetype = 1,     key_glyph = draw_key_path   ) +   geom_smooth(     method = \"gam\", aes(color = \"Spline\"), linetype = 1, se = FALSE,     key_glyph = draw_key_path   ) +   geom_function(fun = draw_gomp_sigma, aes(color = \"Gompertz\"), linetype = 1) +   geom_function(fun = draw_logistic_sigma, aes(color = \"Logistic\"), linetype = 1) +   geom_function(fun = draw_logistic_exp, aes(color = \"Exponential\"), linetype = 1) +   geom_function(fun = draw_logistic_quad, aes(color = \"Quadratic\"), linetype = 1) +   scale_color_viridis_d(option = \"plasma\", begin = 0.1, end = 0.9) +   guides(color = guide_legend(override.aes = list(linewidth = 1, linetype = 1))) +   pcv_theme() +   theme(legend.position = \"bottom\") +   labs(y = \"SD of y\", title = \"Gompertz Sigma\", color = \"\") loo_spline <- add_criterion(fit_s, \"loo\") loo_homo <- add_criterion(fit_h, \"loo\") loo_linear <- add_criterion(fit_l, \"loo\") loo_gomp <- add_criterion(fit_g, \"loo\")  h <- loo_homo$criteria$loo$estimates[3, 1] s <- loo_spline$criteria$loo$estimates[3, 1] l <- loo_linear$criteria$loo$estimates[3, 1] g <- loo_gomp$criteria$loo$estimates[3, 1]  loodf <- data.frame(loo = c(h, s, l, g), model = c(\"Homosked\", \"Spline\", \"Linear\", \"Gompertz\")) loodf$model <- factor(loodf$model, levels = unique(loodf$model[order(loodf$loo)]), ordered = TRUE)  ggplot(   loodf,   aes(x = model, y = loo, fill = model) ) +   geom_col() +   scale_fill_viridis_d() +   labs(y = \"LOO Information Criteria\", x = \"Sub Model of Sigma\") +   theme_minimal() +   theme(legend.position = \"none\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"growthss----start----","dir":"Articles","previous_headings":"Making models in pcvr > Using growthSS","what":"growthSS(..., start, ...)","title":"Longitudinal Growth Modeling Options","text":"One main difficulties non-linear modeling getting models fit without convergence errors. Using growthSS six main model options (GAMs, although different way) self-starting require starting values. double sigmoid options starting values required though. Additionally, using brms backend argument used specify prior distributions. Setting appropriate prior distributions important part often criticized part Bayesian statistics. Prior distributions often talked language “prior beliefs”, can somewhat misleading. Instead can helpful think prior distributions hard-headed prior evidence. broad sense, priors can “strong” “weak”.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"strong-priors","dir":"Articles","previous_headings":"Making models in pcvr > Using growthSS > growthSS(..., start, ...)","what":"Strong Priors","title":"Longitudinal Growth Modeling Options","text":"strong prior generally thought prior low variance. Almost probability tight space observed data hard time shifting distribution meaningfully. example strong prior hurting model. example clearly dramatic, less absurd strong priors still impact results. Setting prior narrow N(10, 0.05) intuitively feel strong, though sure already can’t expect learn much , another way prior can strong providing much unrealistic information. Specifically flat prior can also thought strong given weigh numbers equally, almost never reasonable assumption. growth model examples probability given negative growth rates plants start seed. Even flat prior constricted positive parameterization parameter value thousands millions makes sense biologically plausible. Finally, setting priors separately groups consider evidence toward eventual hypotheses contained priors. mean effect size hypothesis interest far away 0 based solely prior distributions probably strong. , remember focus evidence instead hopes beliefs. default pcvr make biologically plausible individually weak priors parameter growth model using growthSS check prior evidence common hypotheses strong, stop going forward strong priors specify .","code":"set.seed(345) ln <- growthSim(\"linear\", n = 5, t = 10, params = list(\"A\" = c(2, 3, 10)))  strongPrior <- prior(student_t(3, 0, 5), dpar = \"sigma\", class = \"b\") +   prior(gamma(2, 0.1), class = \"nu\", lb = 0.001) +   prior(normal(10, .05), nlpar = \"A\", lb = 0)  ss <- growthSS(   model = \"linear\", form = y ~ time | id / group, sigma = \"homo\",   df = ln, priors = strongPrior )  fit <- fitGrowth(ss, iter = 1000, cores = 2, chains = 2, silent = 0)  brmPlot(fit, form = ss$pcvrForm, df = ss$df) +   coord_cartesian(ylim = c(0, 100))"},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"weak-prior","dir":"Articles","previous_headings":"Making models in pcvr > Using growthSS > growthSS(..., start, ...)","what":"Weak Prior","title":"Longitudinal Growth Modeling Options","text":"Generally aim “weak” “mildly informative” priors. goal constrict sampler possible values moves faster introduce evidence driven domain expertise. can see weak priors moved meet data now usable posterior distributions. variance large natural 5 reps per condition looking 99% credible intervals.","code":"weakPrior <- prior(student_t(3, 0, 5), dpar = \"sigma\", class = \"b\") +   prior(gamma(2, 0.1), class = \"nu\", lb = 0.001) +   prior(lognormal(log(10), 0.25), nlpar = \"A\", lb = 0)  ss <- growthSS(   model = \"linear\", form = y ~ time | id / group, sigma = \"homo\",   df = ln, priors = weakPrior )  fit <- fitGrowth(ss, iter = 1000, cores = 2, chains = 2, silent = 0)  brmPlot(fit, form = ss$pcvrForm, df = ss$df) +   coord_cartesian(ylim = c(0, 100))"},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"priors-in-growthss","dir":"Articles","previous_headings":"Making models in pcvr > Using growthSS > growthSS(..., start, ...)","what":"Priors in growthSS","title":"Longitudinal Growth Modeling Options","text":"growthSS priors can specified brmsprior object (case used , like strong/weak examples ), named list (names representing parameters), numeric vector, values used generate lognormal priors long right tail. Lognormal priors long right tails used values growth curves strictly positive lognormal distribution easily interpreted. tail product variance, assumed 0.25 simplicity ensure priors wide. means location parameter needs provided. list used element list can length 1 case group use prior can vector length unique(data$group) group grouping variable form argument growthSS. vector used warning printed check assumed order groups correct. growthSim function can useful thinking reasonable prior distribution might , although priors picked trying get great fit eye collected data. can check priors made growthSS plotPrior function.  Looking prior distributions way useful, parameter values can degree removed really wanting check. help picking reasonable priors based growth curves ’d represent plotPrior function can also simulate growth curves making draws specified prior distributions. example using plotPrior way pick possible sets prior distributions gompertz model. asymptotic distributions prior “” added y margin. distributions inflection point prior “B” shown x margin. Arbitrary numbers priors can compared manner, two three can cluttered iterative process recommended learning growth model.","code":"priors <- list(\"A\" = 130, \"B\" = 10, \"C\" = 0.2) priorPlots <- plotPrior(priors) priorPlots[[1]] / priorPlots[[2]] / priorPlots[[3]] twoPriors <- list(\"A\" = c(100, 130), \"B\" = c(6, 12), \"C\" = c(0.5, 0.25)) plotPrior(twoPriors, \"gompertz\", n = 100)[[1]]"},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"growthss----tau----","dir":"Articles","previous_headings":"Making models in pcvr > Using growthSS","what":"growthSS(..., tau, ...)","title":"Longitudinal Growth Modeling Options","text":"nlrq models “tau” argument determines quantiles fit. default uses median (0.5), can quantile vector quantiles 0 1. next section fit nlrq model many quantiles shown.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"growthss----hierarchy----","dir":"Articles","previous_headings":"Making models in pcvr > Using growthSS","what":"growthSS(..., hierarchy, ...)","title":"Longitudinal Growth Modeling Options","text":"Hierarchical models can specified adding covariates model formula specifying models covariates hierarchy argument. hierarchical formula written y ~ time + covar | id / group specify model parameter modeled covar adding hierarchy = list(\"\" = \"int_linear\"). change logistic model something like: $$ Y \\sim \\frac{}{(1 + \\text{e}^{( (B-x)/C)})}\\\\ \\sim 0 + \\text{group}\\\\ B \\sim 0 + \\text{group}\\\\ C \\sim 0 + \\text{group} $$ something like: $$ Y \\sim \\frac{}{(1 + \\text{e}^{( (B-x)/C)})}\\\\ \\sim AI + AA \\cdot \\text{covariate}\\\\ B \\sim 0 + \\text{group}\\\\ C \\sim 0 + \\text{group}\\\\ AI \\sim 0 + \\text{group}\\\\ AA \\sim 0 + \\text{group} $$ can helpful modeling effect time one phenotype given another including watering data, etc.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"multi-value-traits","dir":"Articles","previous_headings":"Making models in pcvr > Using growthSS","what":"Multi Value Traits","title":"Longitudinal Growth Modeling Options","text":"Multi value traits can modeled ways using mvSS function. part mvSS arguments growthSS addition spectral_index argument, can “none” indices listed PlantCV docs. spectral index specified truncation response variable handled model family changed skew_normal (using brms backend). Additionally, since generally fewer options working multi value traits mvSS function can use non-longitudinal data, example , formula specifies bins given value per bin predicted group.","code":"set.seed(123) mv_df <- mvSim(dists = list(rnorm = list(mean = 100, sd = 30)), wide = FALSE) mv_df$group <- rep(c(\"a\", \"b\"), times = 900) mv_df <- mv_df[mv_df$value > 0, ] mv_df$label <- as.numeric(gsub(\"sim_\", \"\", mv_df$variable))  ss1 <- mvSS(   model = \"linear\", form = label | value ~ group, df = mv_df,   start = list(\"A\" = 5), type = \"brms\", spectral_index = \"ci_rededge\" )  ss1 ## linear brms skew_normal model: ##  ## pcvr formula variables: ## Outcome: label | resp_weights(value) + trunc(lb = -1, ub = Inf) ## Group: group ##  ## Model Formula: ## label | resp_weights(value) + trunc(lb = -1, ub = Inf) ~ A  ## A ~ 0 + group ##  ## Data: ##   id group variable value label ## 7  7     a    sim_1     2     1 ## 8  8     b    sim_1     1     1 ## 9  9     a    sim_1     1     1 ## ... ## (1454 rows)"},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"using-fitgrowth","dir":"Articles","previous_headings":"Making models in pcvr","what":"Using fitGrowth","title":"Longitudinal Growth Modeling Options","text":"output growthSS passed fitGrowth fits growth model using specified backend. fit model using backend simulated data. Now essential model components ..._ss objects. Since specified logistic model three parameters, asymptote (), inflection point (B), growth rate (C). brms option sub model uses GAM add parameters. Note practice gompertz models tend fit real data better logistic models, can difficult fit using frequentist backends. trying fit model generally good idea check one last plot data make sure everything defined correctly.  looks okay, strange jumps data glaring problems, group id variables seem uniquely identify lines models fit well. Now use fitGrowth fit models. Additional arguments can passed fitGrowth (see ?fitGrowth details), use specify details brms model. Note 500 iterations brms model run quick example, generally 2000 used 1 chain.","code":"set.seed(123) simdf <- growthSim(\"logistic\", n = 20, t = 25, params = list(   \"A\" = c(200, 160),   \"B\" = c(13, 11),   \"C\" = c(3, 3.5) )) nls_ss <- growthSS(   model = \"logistic\", form = y ~ time | id / group,   df = simdf, type = \"nls\" ) ## Individual is not used with type = 'nls'. nlrq_ss <- growthSS(   model = \"logistic\", form = y ~ time | id / group,   df = simdf, type = \"nlrq\",   tau = seq(0.01, 0.99, 0.04) ) ## Individual is not used with type = 'nlrq'. nlme_ss <- growthSS(   model = \"logistic\", form = y ~ time | id / group,   df = simdf, sigma = \"power\", type = \"nlme\" ) mgcv_ss <- growthSS(   model = \"gam\", form = y ~ time | id / group,   df = simdf, type = \"mgcv\" ) ## Individual is not used with type = 'gam'. brms_ss <- growthSS(   model = \"logistic\", form = y ~ time | id / group,   sigma = \"spline\", df = simdf,   start = list(\"A\" = 130, \"B\" = 10, \"C\" = 1) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) nls_fit <- fitGrowth(nls_ss) nlrq_fit <- fitGrowth(nlrq_ss) nlme_fit <- fitGrowth(nlme_ss) mgcv_fit <- fitGrowth(mgcv_ss) brms_fit <- fitGrowth(brms_ss,   iter = 500, cores = 1, chains = 1,   control = list(adapt_delta = 0.999, max_treedepth = 20) )"},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"check-model-fit","dir":"Articles","previous_headings":"Making models in pcvr > Using fitGrowth","what":"Check Model Fit","title":"Longitudinal Growth Modeling Options","text":"can check model fits using growthPlot.","code":"growthPlot(nls_fit, form = nls_ss$pcvrForm, df = nls_ss$df) growthPlot(nlrq_fit, form = nlrq_ss$pcvrForm, df = nlrq_ss$df) growthPlot(nlme_fit, form = nlme_ss$pcvrForm, df = nlme_ss$df) growthPlot(mgcv_fit, form = mgcv_ss$pcvrForm, df = mgcv_ss$df) growthPlot(brms_fit, form = brms_ss$pcvrForm, df = brms_ss$df)"},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"hypothesis-testing","dir":"Articles","previous_headings":"Making models in pcvr","what":"Hypothesis testing","title":"Longitudinal Growth Modeling Options","text":"linear regression default null hypothesis (β=0\\beta = 0) can useful beta past intercept directly measures effect one variable. non-linear regression generally complicated model parameters meaningful testing can little involved, typically requiring contrast statements nested models. pcvr testGrowth function allows hypothesis testing model parameters frequentist models. Bayesian models brms::hypothesis function recommended.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"testgrowth","dir":"Articles","previous_headings":"Making models in pcvr > Hypothesis testing","what":"testGrowth","title":"Longitudinal Growth Modeling Options","text":"testGrowth takes three arguments, growthSS output used fit model, model , list parameters test. Broadly, two kinds tests supported. First, test argument parameter name vector parameter names version model fit parameters test varying group models compared anova. case resulting p-value broadly testing null hypothesis groups value parameter. see nls model statistically significantly improved varying asymptote group. Likewise 49th percentile nlrq model shown nlme model. test parameters GAM course still see grouping improves model fit. relatively basic options testing hypotheses non-linear growth models serve good starting point frequentist model analysis. second kind hypothesis test testGrowth used test argument hypothesis list hypotheses similar used brms::hypothesis syntax. can test complex non-linear hypotheses using car::deltaMethod calculate standard errors model parameters. Note kind testing supported nls nlme model backends. much flexible testing option. test several hypotheses nls nlme models show versatility option. practice use hypotheses giving thought express stated hypothesis terms model parameters.","code":"testGrowth(nls_ss, nls_fit, test = \"A\")$anova ## Analysis of Variance Table ##  ## Model 1: y ~ A/(1 + exp((B[group] - time)/C[group])) ## Model 2: y ~ A[group]/(1 + exp((B[group] - time)/C[group])) ##   Res.Df Res.Sum Sq Df Sum Sq F value    Pr(>F)     ## 1    995     204775                                 ## 2    994     171686  1  33089  191.57 < 2.2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 testGrowth(nlrq_ss, nlrq_fit, test = \"A\")[[\"0.49\"]] ## Model 1: y ~ A[group]/(1 + exp((B[group] - time)/C[group])) ## Model 2: y ~ A/(1 + exp((B[group] - time)/C[group])) ##   #Df  LogLik Df  Chisq Pr(>Chisq)     ## 1   6 -3901.2                          ## 2   5 -4029.8 -1 257.27  < 2.2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 testGrowth(nlme_ss, nlme_fit, test = \"A\")$anova ##         Model df      AIC      BIC    logLik   Test  L.Ratio p-value ## nullMod     1 13 4923.097 4986.898 -2448.549                         ## fit         2 16 4913.518 4992.042 -2440.759 1 vs 2 15.57969  0.0014 testGrowth(mgcv_ss, mgcv_fit)$anova ## Analysis of Deviance Table ##  ## Model 1: y ~ s(time) ## Model 2: y ~ 0 + group + s(time, by = group) ##   Resid. Df Resid. Dev     Df Deviance     F    Pr(>F)     ## 1    992.43     271044                                     ## 2    985.06     172134 7.3716    98909 76.96 < 2.2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 testGrowth(fit = nls_fit, test = list(   \"A1 - A2 *1.1\",   \"(B1+1) - B2\",   \"C1 - (C2-0.5)\",   \"A1/B1 - (1.1 * A2/B2)\" )) ##                    Form   Estimate        SE   t-value      p-value ## 1          A1 - A2 *1.1 19.9337491 2.5232917  7.899899 7.368006e-15 ## 2           (B1+1) - B2  3.1348883 0.1624348 19.299359 9.834927e-71 ## 3         C1 - (C2-0.5)  0.1517508 0.1292836  1.173782 2.407636e-01 ## 4 A1/B1 - (1.1 * A2/B2) -1.2329672 0.1538017  8.016603 3.036364e-15 testGrowth(fit = nlme_fit, test = list(   \"(A.groupa / A.groupb) - 0.9\",   \"1 + (B.groupa - B.groupb)\",   \"C.groupa/C.groupb - 1\" )) ##                          Form   Estimate         SE   Z-value      p-value ## 1 (A.groupa / A.groupb) - 0.9  0.3122201 0.03541827  8.815227 1.194428e-18 ## 2   1 + (B.groupa - B.groupb)  3.1217631 0.16951043 18.416348 9.714055e-76 ## 3       C.groupa/C.groupb - 1 -0.1002474 0.03665858  2.734623 6.245172e-03"},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"brmshypothesis","dir":"Articles","previous_headings":"Making models in pcvr > Hypothesis testing","what":"brms::hypothesis","title":"Longitudinal Growth Modeling Options","text":"brms backend options expand dramatically. can write arbitrarily complex hypotheses models test posterior probability using brms::hypothesis. keep simple test group asymptote 10% larger group B’s asymptote. complicated dataset reason expand hypothesis instead something like ((A_genotype1_treatment1/A_genotype1_treatment2))-(1.1*(A_genotype2_treatment1/A_genotype2_treatment2)) > 0 test relative tolerance different treatments genotypes. scope go potentially interesting hypotheses since depend experimental design questions, hopefully communicates flexibility using models fit. Access brms::hypothesis function generally compelling reason use brms backend questions beyond “groups different?”","code":"(hyp <- brms::hypothesis(brms_fit, \"(A_groupa) > 1.1 * (A_groupb)\")) ##                          Hypothesis Estimate Est.Error CI.Lower CI.Upper ## 1 ((A_groupa))-(1.1*(A_groupb)) > 0 16.78802  3.135185 12.01271  21.9525 ##   Evid.Ratio Post.Prob Star ## 1        Inf         1    *"},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"threshold-models","dir":"Articles","previous_headings":"Making models in pcvr","what":"Threshold Models","title":"Longitudinal Growth Modeling Options","text":"alluded previously, using brms backend segmented models possible can specified using “model1 + model2” syntax, “+” specifies changepoint process shifts model1 model2. many models need combine can combined way, 2 segments likely slow can become difficult fit well. add many segments together consider editing growthSS output set stronger priors changepoints vicinity. Since changepoints parameterized require priors can included hypothesis tests model. briefly show several threshold model options. First look “linear + linear” model using gam submodel. make parameters distinct segmented models slightly different parameter names. section model parameters named model ’s parameters, “linear1A”, “changePoint1”, “linear2A”. Similar standard models, changepoint model variance name distributional parameter modeling appended parameter name. look “linear + logistic” model using gam submodel. fit “linear + gam” model homoskedastic sub model. fit three part linear model gam model variance. case used 500 iterations one chain model still fits reasonably well. can also fit thresholded models variance. fit two part intercept models data variance. growth model exactly, shows available options well. fit int + linear models overall trend variance Finally fit model “int + logistic” main growth trend “int + gam” variance. benefit pure “gam” model variance can test intercept changepoint parameters variance now.","code":"simdf <- growthSim(   model = \"linear + linear\",   n = 20, t = 25,   params = list(\"linear1A\" = c(15, 12), \"changePoint1\" = c(8, 6), \"linear2A\" = c(3, 5)) )  ss <- growthSS(   model = \"linear + linear\", form = y ~ time | id / group, sigma = \"spline\",   start = list(\"linear1A\" = 10, \"changePoint1\" = 5, \"linear2A\" = 2),   df = simdf, type = \"brms\" )  fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1) simdf <- growthSim(\"linear + logistic\",   n = 20, t = 25,   params = list(     \"linear1A\" = c(15, 12), \"changePoint1\" = c(8, 6),     \"logistic2A\" = c(100, 150), \"logistic2B\" = c(10, 8),     \"logistic2C\" = c(3, 2.5)   ) )  ss <- growthSS(   model = \"linear + logistic\", form = y ~ time | id / group, sigma = \"spline\",   list(     \"linear1A\" = 10, \"changePoint1\" = 5,     \"logistic2A\" = 100, \"logistic2B\" = 10, \"logistic2C\" = 3   ),   df = simdf, type = \"brms\" )  fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1) ss <- growthSS(   model = \"linear + gam\", form = y ~ time | id / group, sigma = \"int\",   list(\"linear1A\" = 10, \"changePoint1\" = 5),   df = simdf, type = \"brms\" )  fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1) simdf <- growthSim(\"linear + linear + linear\",   n = 25, t = 50,   params = list(     \"linear1A\" = c(10, 12), \"changePoint1\" = c(8, 6),     \"linear2A\" = c(1, 2), \"changePoint2\" = c(25, 30), \"linear3A\" = c(20, 24)   ) )  ss <- growthSS(   model = \"linear + linear + linear\", form = y ~ time | id / group, sigma = \"spline\",   list(     \"linear1A\" = 10, \"changePoint1\" = 5,     \"linear2A\" = 2, \"changePoint2\" = 15,     \"linear3A\" = 5   ), df = simdf, type = \"brms\" )  fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1) ss <- growthSS(   model = \"int + int\", form = y ~ time | id / group, sigma = \"int + int\",   list(     \"int1\" = 10, \"changePoint1\" = 10, \"int2\" = 20, # main model     \"sigmaint1\" = 10, \"sigmachangePoint1\" = 10, \"sigmaint2\" = 10   ), # sub model   df = simdf, type = \"brms\" )  fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1) ss <- growthSS(   model = \"int + linear\", form = y ~ time | id / group, sigma = \"int + linear\",   list(     \"int1\" = 10, \"changePoint1\" = 10, \"linear2A\" = 20,     \"sigmaint1\" = 10, \"sigmachangePoint1\" = 10, \"sigmalinear2A\" = 10   ),   df = simdf, type = \"brms\" ) fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1) ss <- growthSS(   model = \"int+logistic\", form = y ~ time | id / group, sigma = \"int + spline\",   list(     \"int1\" = 5, \"changePoint1\" = 10,     \"logistic2A\" = 130, \"logistic2B\" = 10, \"logistic2C\" = 3,     \"sigmaint1\" = 5, \"sigmachangePoint1\" = 15   ),   df = simdf, type = \"brms\" ) fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1)"},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"bayesian-analysis-and-reporting-guidelines","dir":"Articles","previous_headings":"","what":"Bayesian Analysis and Reporting Guidelines","title":"Longitudinal Growth Modeling Options","text":"Bayesian modeling offers lot flexibility less common use frequentist statistics can difficult explain collaborators reviewers. Additionally, guaranteeing reproducibility transparency requires different steps. help () potential issues John Kruschke wrote paper Bayesian Analysis Reporting Guidelines (BARG). information required fully explain Bayesian model returned Stan brms, ease use pcvr barg function takes fit model object growthSS output return several components BARG useful checking one models. See documentation (?barg) details.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"comparing-models-over-time","dir":"Articles","previous_headings":"","what":"Comparing Models Over Time","title":"Longitudinal Growth Modeling Options","text":"final note brms models, possiblity making interesting early stopping rules Bayesian framework. models fit subsets data distPlot function show changes posterior distribution parameters time another subset variable. growth trend plots also legend time posterior distribution.","code":"print(load(url(\"https://raw.githubusercontent.com/joshqsumner/pcvrTestData/main/brmsFits.rdata\"))) from3to25 <- list(   fit_3, fit_5, fit_7, fit_9, fit_11, fit_13,   fit_15, fit_17, fit_19, fit_21, fit_23, fit_25 )  distributionPlot(fits = from3to25, form = y ~ time | id / group, params = c(\"A\", \"B\", \"C\"), d = simdf)"},{"path":"https://danforthcenter.github.io/pcvr/articles/longitudinal.html","id":"other-resources","dir":"Articles","previous_headings":"","what":"Other Resources","title":"Longitudinal Growth Modeling Options","text":"supported models pcvr meant lower barrier entry complex models using brms Stan. lots options using growth models many many options using brms directly still possible programming directly Stan. take interest developing nuanced models please see brms documentation, Stan documentation, stan forums. models think may broader appeal high throughput plant phenotyping please raise issue github help DDPSC data science team understand desired model /existing options fall short needs.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"outline","dir":"Articles","previous_headings":"","what":"Outline","title":"Advanced Growth Modeling with `pcvr`","text":"pcvr Goals Load Package Longitudinal Modeling? Bayesian Modeling? Supported Curves growthSS fitGrowth growthPlot/Model Visualization Hypothesis testing Threshold models Using brms directly Resources","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"pcvr-goals","dir":"Articles","previous_headings":"","what":"pcvr Goals","title":"Advanced Growth Modeling with `pcvr`","text":"Currently pcvr aims : Make common tasks easier consistent Make select Bayesian statistics easier room goals evolve based feedback scientific needs.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"load-package","dir":"Articles","previous_headings":"","what":"Load package","title":"Advanced Growth Modeling with `pcvr`","text":"Pre-work install R, Rstudio, pcvr dependencies.","code":"library(pcvr) # or devtools::load_all() if you are editing library(brms) # for bayesian models ## Loading required package: Rcpp ## Loading 'brms' package (version 2.22.0). Useful instructions ## can be found by typing help('brms'). A more detailed introduction ## to the package is available through vignette('brms_overview'). ##  ## Attaching package: 'brms' ## The following object is masked from 'package:stats': ##  ##     ar library(data.table) # for fread library(ggplot2) # for plotting library(patchwork) # to arrange ggplots"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"why-longitudinal-modeling","dir":"Articles","previous_headings":"","what":"Why Longitudinal Modeling?","title":"Advanced Growth Modeling with `pcvr`","text":"plantCV allows user friendly high throughput image based phenotyping. Resulting data follows individuals time, changes statistical needs. Longitudinal Data : Autocorrelated Often non-linear Heteroskedastic","code":"r1 <- range(simdf[simdf$time == 1, \"y\"]) r2 <- range(simdf[simdf$time == 5, \"y\"]) r3 <- range(simdf[simdf$time == 10, \"y\"]) r4 <- range(simdf[simdf$time == 20, \"y\"])  main <- ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line() +   annotate(\"segment\", x = 1, xend = 1, y = r1[1], yend = r1[2], color = \"blue\", linewidth = 2) +   annotate(\"segment\", x = 5, xend = 5, y = r2[1], yend = r2[2], color = \"blue\", linewidth = 2) +   annotate(\"segment\", x = 10, xend = 10, y = r3[1], yend = r3[2], color = \"blue\", linewidth = 2) +   annotate(\"segment\", x = 20, xend = 20, y = r4[1], yend = r4[2], color = \"blue\", linewidth = 2) +   labs(title = \"Heteroskedasticity\") +   pcv_theme() +   theme(axis.title.x = element_blank(), axis.text.x = element_blank())  sigma_df <- aggregate(y ~ group + time, data = simdf, FUN = sd)  sigmaPlot <- ggplot(sigma_df, aes(x = time, y = y, group = group)) +   geom_line(color = \"blue\") +   pcv_theme() +   labs(y = \"SD of y\") +   theme(plot.title = element_blank())   design <- c(   area(1, 1, 4, 4),   area(5, 1, 6, 4) ) hetPatch <- main / sigmaPlot + plot_layout(design = design) hetPatch"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"why-bayesian-modeling","dir":"Articles","previous_headings":"","what":"Why Bayesian Modeling?","title":"Advanced Growth Modeling with `pcvr`","text":"Bayesian modeling allows us account problems via flexible interface frequentist methods. Bayesian modeling also allows non-linear, probability driven hypothesis testing. Bayesian context flip “random” “fixed” elements. moving note group data parameters fit . many groups fitting models groups time likely make life easier. Larger models fit, can take long time. ’s generally easier authors fit 50 models 4 groups compare across models fit 1 model 200 groups .","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"supported-growth-models","dir":"Articles","previous_headings":"","what":"Supported Growth Models","title":"Advanced Growth Modeling with `pcvr`","text":"13 main growth models supported pcvr. Several shown next, including asymptotic non-asymptotic options.  additional 3 sigmoidal models based Extreme Value Distribution. Weibull, Frechet, Gumbel. authors generally prefer Gompertz options data possible better fit.  also two double sigmoid curves intended use recovery experiments.  Generalized Additive Models (GAMs) supported discouraged due poor interpretability.  Intercept models supported, although intended use segmented models represent homoskedasticity sub-model.  Segmented growth models also supported using “model1 + model2” syntax growthSim growthSS. now focus single models examples segmented models later . “decay” keyword can used specify decay model instead. now focus growth models constitute large majority models used plant phenotyping. Hierarchical models can specified adding covariates model formula specifying models covariates hierarchy argument. hierarchical formula written y ~ time + covar | id / group specify model parameter modeled covar adding hierarchy = list(\"\" = \"int_linear\").","code":"## Warning: Removed 1 row containing missing values or values outside the scale range ## (`geom_line()`). set.seed(123) ggplot(   data.frame(     yint = c(rnorm(20, 8, 1), rnorm(20, 9, 1)),     group = c(rep(\"a\", 10), rep(\"b\", 10))   ),   aes(x = 1:25) ) +   geom_hline(aes(yintercept = yint, color = group)) +   scale_y_continuous(limits = c(0, 20)) +   pcv_theme() +   labs(y = \"y\", x = \"x\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"survival-models","dir":"Articles","previous_headings":"","what":"Survival Models","title":"Advanced Growth Modeling with `pcvr`","text":"Survival models can also specified using “survival” keyword. Using brms backend models use weibull distribution default “binomial” family can also specified model = \"survival binomial\". details please see growthSS documentation.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"maximaminima-models","dir":"Articles","previous_headings":"","what":"Maxima/Minima Models","title":"Advanced Growth Modeling with `pcvr`","text":"bragg, lorentz, beta Maxima/Minima models available growthSS, used biologically appropriate settings. general trends data may increase decrease consider changepoint models splines using .","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss","dir":"Articles","previous_headings":"","what":"growthSS","title":"Advanced Growth Modeling with `pcvr`","text":"aforementioned models can specified easily using growthSS.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---form","dir":"Articles","previous_headings":"growthSS","what":"growthSS - form","title":"Advanced Growth Modeling with `pcvr`","text":"model specified rough formula required parse data fit model. layout formula : outcome ~ time|individual/group","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---form-2","dir":"Articles","previous_headings":"growthSS","what":"growthSS - form 2","title":"Advanced Growth Modeling with `pcvr`","text":"use y~time|id/group","code":"simdf <- growthSim(\"gompertz\",   n = 20, t = 25,   params = list(     \"A\" = c(200, 160),     \"B\" = c(13, 11),     \"C\" = c(0.2, 0.25)   ) ) head(simdf) ##     id group time           y ## 1 id_1     a    1 0.004058413 ## 2 id_1     a    2 0.022060411 ## 3 id_1     a    3 0.091828381 ## 4 id_1     a    4 0.305290892 ## 5 id_1     a    5 0.839871042 ## 6 id_1     a    6 1.969862435"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---form-3","dir":"Articles","previous_headings":"growthSS","what":"growthSS - form 3","title":"Advanced Growth Modeling with `pcvr`","text":"Generally makes sense visually check formula covers experimental design. Note fine id duplicated groups, within groups","code":"ggplot(simdf, aes(time, y,   group = paste(group, id) )) + # group on id   geom_line(aes(color = group)) + # color by group   labs(title = \"Testing Formula\") +   theme_minimal()"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---sigma","dir":"Articles","previous_headings":"growthSS","what":"growthSS - sigma","title":"Advanced Growth Modeling with `pcvr`","text":"Recall heteroskedasticity problem, shown simulated data:","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---sigma-1","dir":"Articles","previous_headings":"growthSS","what":"growthSS - sigma","title":"Advanced Growth Modeling with `pcvr`","text":"lots ways model trend like see sigma. pcvr allows model options growthSS also applied model variance.","code":"draw_gomp_sigma <- function(x) {   return(23 * exp(-21 * exp(-0.22 * x))) }  ggplot(sigma_df, aes(x = time, y = y)) +   geom_line(aes(group = group), color = \"gray60\") +   geom_hline(aes(yintercept = 12, color = \"Homoskedastic\"),     linetype = 5, key_glyph = draw_key_path   ) +   geom_abline(aes(slope = 0.8, intercept = 0, color = \"Linear\"),     linetype = 5, key_glyph = draw_key_path   ) +   geom_smooth(     method = \"gam\", aes(color = \"Spline\"), linetype = 5,     se = FALSE, key_glyph = draw_key_path   ) +   geom_function(fun = draw_gomp_sigma, aes(color = \"Gompertz\"), linetype = 5) +   scale_color_viridis_d(option = \"plasma\", begin = 0.1, end = 0.9) +   guides(color = guide_legend(override.aes = list(linewidth = 1, linetype = 1))) +   pcv_theme() +   theme(legend.position = \"bottom\") +   labs(y = \"SD of y\", title = \"Several sigma options\", color = \"\") ## `geom_smooth()` using formula = 'y ~ s(x, bs = \"cs\")'"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---intercept-sigma","dir":"Articles","previous_headings":"growthSS","what":"growthSS - Intercept sigma","title":"Advanced Growth Modeling with `pcvr`","text":"","code":"ggplot(sigma_df, aes(x = time, y = y, group = group)) +   geom_hline(aes(yintercept = 13.8, color = \"Homoskedastic\"), linetype = 5, key_glyph = draw_key_path) +   geom_line(aes(color = group)) +   scale_color_manual(values = c(scales::hue_pal()(2), \"gray40\")) +   pcv_theme() +   labs(y = \"SD of y\", color = \"Sigma\") +   theme(plot.title = element_blank(), legend.position = \"bottom\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---linear-sigma","dir":"Articles","previous_headings":"growthSS","what":"growthSS - Linear sigma","title":"Advanced Growth Modeling with `pcvr`","text":"","code":"p <- ggplot(sigma_df, aes(x = time, y = y, group = group)) +   geom_smooth(aes(group = \"linear\", color = \"Linear\"),     linetype = 5,     method = \"lm\", se = FALSE, formula = y ~ x   ) +   geom_line(aes(color = group)) +   scale_color_manual(values = c(scales::hue_pal()(2), \"gray40\")) +   pcv_theme() +   labs(y = \"SD of y\", color = \"Sigma\") +   theme(plot.title = element_blank(), legend.position = \"bottom\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---linear-sigma-1","dir":"Articles","previous_headings":"growthSS","what":"growthSS - Linear sigma","title":"Advanced Growth Modeling with `pcvr`","text":"","code":"p"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---gompertz-sigma","dir":"Articles","previous_headings":"growthSS","what":"growthSS - Gompertz sigma","title":"Advanced Growth Modeling with `pcvr`","text":"Note traits broadly true logistic monomolecular sub models well.","code":"draw_gomp_sigma <- function(x) {   return(22 * exp(-9 * exp(-0.27 * x))) } # guesses at parameters  p <- ggplot(sigma_df, aes(x = time, y = y, group = group)) +   geom_function(fun = draw_gomp_sigma, aes(group = 1, color = \"Gompertz\"), linetype = 5) +   geom_line(aes(color = group)) +   scale_color_manual(values = c(scales::hue_pal()(2), \"gray40\")) +   pcv_theme() +   labs(y = \"SD of y\", color = \"Sigma\") +   theme(plot.title = element_blank(), legend.position = \"bottom\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---gompertz-sigma-1","dir":"Articles","previous_headings":"growthSS","what":"growthSS - Gompertz sigma","title":"Advanced Growth Modeling with `pcvr`","text":"","code":"p"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---spline-sigma","dir":"Articles","previous_headings":"growthSS","what":"growthSS - Spline sigma","title":"Advanced Growth Modeling with `pcvr`","text":"","code":"p <- ggplot(sigma_df, aes(x = time, y = y, group = group)) +   geom_smooth(     method = \"gam\", aes(group = \"Spline\", color = \"Spline\"),     linetype = 5, se = FALSE, formula = y ~ s(x, bs = \"cs\")   ) +   geom_line(aes(color = group)) +   scale_color_manual(values = c(scales::hue_pal()(2), \"gray40\")) +   pcv_theme() +   labs(y = \"SD of y\", color = \"Sigma\") +   theme(plot.title = element_blank(), legend.position = \"bottom\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---spline-sigma-1","dir":"Articles","previous_headings":"growthSS","what":"growthSS - Spline sigma","title":"Advanced Growth Modeling with `pcvr`","text":"","code":"p"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---other-sigma-models","dir":"Articles","previous_headings":"growthSS","what":"growthSS - other sigma models","title":"Advanced Growth Modeling with `pcvr`","text":"can always add new sigma formula something else fits needs better.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---distributional-models","dir":"Articles","previous_headings":"growthSS","what":"growthSS - Distributional Models","title":"Advanced Growth Modeling with `pcvr`","text":"limited examples talk sigma, parameter Student T distribution model belongs . Written another way might say previous methods modeling: Y ~ T(mu ~ main growth formula, sigma ~ sigma formula, nu ~ 1)","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---distributional-models-2","dir":"Articles","previous_headings":"growthSS","what":"growthSS - Distributional Models 2","title":"Advanced Growth Modeling with `pcvr`","text":"pcvr Student T family default models, distributions supported \"distribution: model\" syntax. general special cases Gaussian/T capture important quality data. obvious example leaf counts, might modeled \"poisson: monomolecular\", instance.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---distributional-models-3","dir":"Articles","previous_headings":"growthSS","what":"growthSS - Distributional Models 3","title":"Advanced Growth Modeling with `pcvr`","text":"can specify sigma list formulas model different distributional parameters separately. time overkill adds unnecessary complexity, option exists certain cases ZINB modeling mean, shape, zero inflation per group may make sense. details supported families parameterization try running growthSS(..., sigma=NULL,...) examining priors, checking ?brmfamily.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---priors","dir":"Articles","previous_headings":"growthSS","what":"growthSS - priors","title":"Advanced Growth Modeling with `pcvr`","text":"Bayesian statistics combine prior distributions collected data form posterior distribution. Luckily, growth model context pretty easy set “good priors”.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---priors-1","dir":"Articles","previous_headings":"growthSS","what":"growthSS - priors","title":"Advanced Growth Modeling with `pcvr`","text":"“Good priors” generally mildly informative, strong. provide well vetted evidence, overpower data.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---priors-2","dir":"Articles","previous_headings":"growthSS","what":"growthSS - priors","title":"Advanced Growth Modeling with `pcvr`","text":"setting know growth positive basic impressions sizes possible. “weakest” side priors least know growth positive camera can measure finite space.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---priors-2-1","dir":"Articles","previous_headings":"growthSS","what":"growthSS - priors 2","title":"Advanced Growth Modeling with `pcvr`","text":"Default priors growthSS log-normal logN(μ,0.25)\\text{log}~N(\\mu, 0.25) benefit giving long right tail strictly positive values requiring us provide μ\\mu.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---priors-3","dir":"Articles","previous_headings":"growthSS","what":"growthSS - priors 3","title":"Advanced Growth Modeling with `pcvr`","text":"can see log-normal distributions look like plotPrior.","code":"priors <- list(\"A\" = 130, \"B\" = 10, \"C\" = 0.2) priorPlots <- plotPrior(priors) priorPlots[[1]] / priorPlots[[2]] / priorPlots[[3]]"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---priors-4","dir":"Articles","previous_headings":"growthSS","what":"growthSS - priors 4","title":"Advanced Growth Modeling with `pcvr`","text":"distributions can still somewhat abstract, can simulate draws priors see values yield growth model.","code":"twoPriors <- list(\"A\" = c(100, 130), \"B\" = c(6, 12), \"C\" = c(0.5, 0.25)) plotPrior(twoPriors, \"gompertz\", n = 100)[[1]]"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthss---priors-5","dir":"Articles","previous_headings":"growthSS","what":"growthSS - priors 5","title":"Advanced Growth Modeling with `pcvr`","text":"final call growthSS look like sample data.","code":"ss <- growthSS(   model = \"gompertz\", form = y ~ time | id / group,   sigma = \"gompertz\", df = simdf,   start = list(     \"A\" = 130, \"B\" = 10, \"C\" = 0.5,     \"sigmaA\" = 20, \"sigmaB\" = 10, \"sigmaC\" = 0.25   ) )"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"fitgrowth","dir":"Articles","previous_headings":"","what":"fitGrowth","title":"Advanced Growth Modeling with `pcvr`","text":"Now components model growthSS can fit model fitGrowth. call Stan outside R run Markov Chain Monte Carlo (MCMC) get draws posterior distributions. can control Stan runs additional arguments fitGrowth, although required argument output growthSS. specify ss argument output growthSS tell model use 4 cores chains run entirely parallel, rest model using defaults. Note lots arguments can passed brms::brm via fitGrowth. One can helpful fitting complex models control argument, can control sampler’s behavior. adapt_delta tree_depth used reduce number “divergent transitions” times sampler departure True path can compromise results. fitGrowth returns brmsfit object, see ?brmsfit methods(class=\"brmsfit\") general information. Within pcvr several functions visualizing objects.","code":"fit <- fitGrowth(   ss = ss, cores = 4,   iter = 2000, chains = 4, backend = \"cmdstanr\" ) fit <- fitGrowth(ss,   cores = 4,   iter = 2000, chains = 4, backend = \"cmdstanr\",   control = list(adapt_delta = 0.999, max_treedepth = 20) )"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"growthplot","dir":"Articles","previous_headings":"","what":"growthPlot","title":"Advanced Growth Modeling with `pcvr`","text":"growthPlot can used plot credible intervals model. plots can show one benefits asymptotic sub model well. check model predictions 35 days. now check predictions spline model, basis functions suited data past day 25. can also plot posterior distributions test hypotheses brmViolin. hypotheses tested brms::hypothesis.","code":"growthPlot(fit, form = ss$pcvrForm, df = ss$df) growthPlot(fit, form = ss$pcvrForm, df = ss$df, timeRange = 1:35) growthPlot(fit_spline, form = ss_spline$pcvrForm, df = ss_spline$df, timeRange = 1:35) brmViolin(fit, ss, hypothesis = \".../A_groupa > 1.05\") ## Loading required namespace: rstan"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"hypothesis-testing","dir":"Articles","previous_headings":"","what":"Hypothesis Testing","title":"Advanced Growth Modeling with `pcvr`","text":"brms::hypothesis allows incredibly flexible hypothesis testing. test asymptote group least 20% larger group B.","code":"brms::hypothesis(fit, \"A_groupa > 1.2 * A_groupb\")$hyp ##                      Hypothesis Estimate Est.Error CI.Lower CI.Upper Evid.Ratio ## 1 (A_groupa)-(1.2*A_groupb) > 0 6.290106  4.925797 -1.74309 14.41414    8.90099 ##   Post.Prob Star ## 1     0.899"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"threshold-models","dir":"Articles","previous_headings":"","what":"Threshold models","title":"Advanced Growth Modeling with `pcvr`","text":"Segmented Models specified using “model1 + model2” syntax, “+” representing change point. Currently two phases (one changepoint) recommended. work slow MCMC may require fine tuning. segmented models can also used specify sub-models distributional parameters.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"linear-linear","dir":"Articles","previous_headings":"Threshold models","what":"linear + linear","title":"Advanced Growth Modeling with `pcvr`","text":"","code":"simdf <- growthSim(   model = \"linear + linear\",   n = 20, t = 25,   params = list(\"linear1A\" = c(15, 12), \"changePoint1\" = c(8, 6), \"linear2A\" = c(3, 5)) )  ss <- growthSS(   model = \"linear + linear\", form = y ~ time | id / group, sigma = \"spline\",   start = list(\"linear1A\" = 10, \"changePoint1\" = 5, \"linear2A\" = 2),   df = simdf, type = \"brms\" )  fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1) growthPlot(fit = fit, form = ss$pcvrForm, df = ss$df)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"linear-logistic","dir":"Articles","previous_headings":"Threshold models","what":"linear + logistic","title":"Advanced Growth Modeling with `pcvr`","text":"","code":"simdf <- growthSim(\"linear + logistic\",   n = 20, t = 25,   params = list(     \"linear1A\" = c(15, 12), \"changePoint1\" = c(8, 6),     \"logistic2A\" = c(100, 150), \"logistic2B\" = c(10, 8),     \"logistic2C\" = c(3, 2.5)   ) )  ss <- growthSS(   model = \"linear + logistic\", form = y ~ time | id / group, sigma = \"spline\",   list(     \"linear1A\" = 10, \"changePoint1\" = 5,     \"logistic2A\" = 100, \"logistic2B\" = 10, \"logistic2C\" = 3   ),   df = simdf, type = \"brms\" )  fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1) growthPlot(fit = fit, form = ss$pcvrForm, df = ss$df)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"linear-gam","dir":"Articles","previous_headings":"Threshold models","what":"linear + gam","title":"Advanced Growth Modeling with `pcvr`","text":"","code":"ss <- growthSS(   model = \"linear + gam\", form = y ~ time | id / group, sigma = \"int\",   list(\"linear1A\" = 10, \"changePoint1\" = 5),   df = simdf, type = \"brms\" )  fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1) growthPlot(fit = fit, form = ss$pcvrForm, df = ss$df)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"linear-linear-linear","dir":"Articles","previous_headings":"Threshold models","what":"linear + linear + linear","title":"Advanced Growth Modeling with `pcvr`","text":"","code":"simdf <- growthSim(\"linear + linear + linear\",   n = 25, t = 50,   params = list(     \"linear1A\" = c(10, 12), \"changePoint1\" = c(8, 6),     \"linear2A\" = c(1, 2), \"changePoint2\" = c(25, 30), \"linear3A\" = c(20, 24)   ) )  ss <- growthSS(   model = \"linear + linear + linear\", form = y ~ time | id / group, sigma = \"spline\",   list(     \"linear1A\" = 10, \"changePoint1\" = 5,     \"linear2A\" = 2, \"changePoint2\" = 15,     \"linear3A\" = 5   ), df = simdf, type = \"brms\" )  fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1)  plot <- growthPlot(fit = fit, form = ss$pcvrForm, df = ss$df)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"int-int-with-segmented-sigma","dir":"Articles","previous_headings":"Threshold models","what":"int + int with segmented sigma","title":"Advanced Growth Modeling with `pcvr`","text":"","code":"ss <- growthSS(   model = \"int + int\", form = y ~ time | id / group, sigma = \"int + int\",   list(     \"int1\" = 10, \"changePoint1\" = 10, \"int2\" = 20, # main model     \"sigmaint1\" = 10, \"sigmachangePoint1\" = 10, \"sigmaint2\" = 10   ), # sub model   df = simdf, type = \"brms\" )  fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1)  plot <- growthPlot(fit = fit, form = ss$pcvrForm, df = ss$df)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"int-linear-model-and-submodel","dir":"Articles","previous_headings":"Threshold models","what":"int + linear model and submodel","title":"Advanced Growth Modeling with `pcvr`","text":"","code":"ss <- growthSS(   model = \"int + linear\", form = y ~ time | id / group, sigma = \"int + linear\",   list(     \"int1\" = 10, \"changePoint1\" = 10, \"linear2A\" = 20,     \"sigmaint1\" = 10, \"sigmachangePoint1\" = 10, \"sigmalinear2A\" = 10   ),   df = simdf, type = \"brms\" ) fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1) plot <- growthPlot(fit = fit, form = ss$pcvrForm, df = ss$df, timeRange = 1:40)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"intlogistic-with-intgam-sub-model","dir":"Articles","previous_headings":"Threshold models","what":"int+logistic with int+gam sub model","title":"Advanced Growth Modeling with `pcvr`","text":"","code":"ss <- growthSS(   model = \"int+logistic\", form = y ~ time | id / group, sigma = \"int + spline\",   list(     \"int1\" = 5, \"changePoint1\" = 10,     \"logistic2A\" = 130, \"logistic2B\" = 10, \"logistic2C\" = 3,     \"sigmaint1\" = 5, \"sigmachangePoint1\" = 15   ),   df = simdf, type = \"brms\" ) fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1) plot <- growthPlot(fit = fit, form = ss$pcvrForm, df = ss$df)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"example-survival-model","dir":"Articles","previous_headings":"","what":"Example survival model","title":"Advanced Growth Modeling with `pcvr`","text":"input data standard phenotype data cutoff represent event (germination instance) left hand side formula.","code":"df <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ss <- growthSS(   model = \"survival weibull\", type = \"brms\",   form = y > 100 ~ time | id / group,   df = df, start = c(0, 5) ) fit <- fitGrowth(ss, iter = 600, cores = 2, chains = 2, backend = \"cmdstanr\") plot <- growthPlot(fit = fit, form = ss$pcvrForm, df = ss$df)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"example-count-model","dir":"Articles","previous_headings":"","what":"Example count model","title":"Advanced Growth Modeling with `pcvr`","text":"","code":"df <- growthSim(\"count: logistic\",   n = 20, t = 25,   params = list(\"A\" = c(10, 12), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ss <- growthSS(   model = \"poisson: logistic\", # specify poisson family   form = y ~ time | id / group,   sigma = NULL, # poisson only has one parameter   df = df, start = list(\"A\" = 8, \"B\" = 10, \"C\" = 3) ) fit <- fitGrowth(ss, iter = 2000, cores = 4, chains = 4) plot <- growthPlot(fit = fit, form = ss$pcvrForm, df = ss$df)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"example-hierarchical-model","dir":"Articles","previous_headings":"","what":"Example hierarchical model","title":"Advanced Growth Modeling with `pcvr`","text":"Note plotting hierarchical models hierarchy_value can specified defaults mean covar case.","code":"simdf <- growthSim(   \"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) simdf$covar <- stats::rnorm(nrow(simdf), 10, 1) ss <- growthSS(   model = \"logistic\",   form = y ~ time + covar | id / group,   sigma = \"logistic\",   list(     \"AI\" = 100, \"AA\" = 5,     \"B\" = 10, \"C\" = 3,     \"sigmaA\" = 10, \"sigmaB\" = 10, \"sigmaC\" = 3   ),   df = simdf, type = \"brms\",   hierarchy = list(\"A\" = \"int_linear\") ) fit <- fitGrowth(ss, iter = 1000, cores = 4, chains = 4) plot <- growthPlot(fit = fit, form = ss$pcvrForm, df = ss$df)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"evaluating-your-models","dir":"Articles","previous_headings":"","what":"Evaluating your models","title":"Advanced Growth Modeling with `pcvr`","text":"John Kruschke wrote paper Bayesian Analysis Reporting Guidelines (BARG) aid transparency reproducibility using Bayesian methods. pcvr Kruschke recommends can accessed model/list models using barg function, see ?barg details entails. brms::add_criterion function can used add LOO IC WAIC values models, can easily compared using brms::loo_compare. best fitting model displayed first, others ranked relative model. Differences elpd least 5 times standard error generally considered meaningful. information criteria unlikely help make decisions small changes model may useful considering whether changepoint improves model fit , example.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"using-brms-directly","dir":"Articles","previous_headings":"","what":"Using brms directly","title":"Advanced Growth Modeling with `pcvr`","text":"functions help use common growth models easily. choices pcvr small subset possible brms, limited Stan.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"using-brms-directly-1","dir":"Articles","previous_headings":"","what":"Using brms directly","title":"Advanced Growth Modeling with `pcvr`","text":"gompertz sigma model looks like brms:","code":"prior1 <- prior(gamma(2, 0.1), class = \"nu\", lb = 0.001) +   prior(lognormal(log(130), .25), nlpar = \"A\", lb = 0) +   prior(lognormal(log(12), .25), nlpar = \"B\", lb = 0) +   prior(lognormal(log(1.2), .25), nlpar = \"C\", lb = 0) +   prior(lognormal(log(25), .25), nlpar = \"subA\", lb = 0) +   prior(lognormal(log(20), .25), nlpar = \"subB\", lb = 0) +   prior(lognormal(log(1.2), .25), nlpar = \"subC\", lb = 0)  form_b <- bf(y ~ A * exp(-B * exp(-C * time)),   nlf(sigma ~ subA * exp(-subB * exp(-subC * time))),   A + B + C + subA + subB + subC ~ 0 + group,   autocor = ~ arma(~ time | sample:group, 1, 1),   nl = TRUE )  fit_g2 <- brm(form_b,   family = student, prior = prior1, data = simdf,   iter = 1000, cores = 4, chains = 4, backend = \"cmdstanr\", silent = 0,   control = list(adapt_delta = 0.999, max_treedepth = 20),   init = 0 ) # chain initialization at 0 for simplicity"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"using-brms-directly-2","dir":"Articles","previous_headings":"","what":"Using brms directly","title":"Advanced Growth Modeling with `pcvr`","text":"can work try new options brms Stan, situation well represented existing models may necessary.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_agm.html","id":"resources","dir":"Articles","previous_headings":"","what":"Resources","title":"Advanced Growth Modeling with `pcvr`","text":"run novel situation please reach try come solution add pcvr possible. Good ways reach help-datascience slack channel pcvr github repository.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"outline","dir":"Articles","previous_headings":"","what":"Outline","title":"Bayesian Conjugacy","text":"pcvr Goals Load Package Bayesian Statistics Intro Bayesian Conjugacy Theory Bayesian Conjugacy Example pcvr::conjugate Supported Distributions pcvr::conjugate arguments Reading conjugate output","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"pcvr-goals","dir":"Articles","previous_headings":"","what":"pcvr Goals","title":"Bayesian Conjugacy","text":"Currently pcvr aims : Make common tasks easier consistent Make select Bayesian statistics easier room goals evolve based feedback scientific needs.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"load-package","dir":"Articles","previous_headings":"","what":"Load package","title":"Bayesian Conjugacy","text":"","code":"library(pcvr) library(ggplot2) library(patchwork) library(extraDistr)"},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"bayesian-conjugacy-theory","dir":"Articles","previous_headings":"","what":"Bayesian Conjugacy Theory","title":"Bayesian Conjugacy","text":"P(θ|(x1,…,xi))=π(θ)⋅L(θ|(x1,…,xi))∫π(θ)⋅L(θ|(x1,…,xi))dθ\\begin{equation} P(\\theta|(x_1, \\ldots, x_i)) = \\frac{\\pi(\\theta) \\cdot L(\\theta|(x_1, \\ldots, x_i))}{\\int \\pi(\\theta) \\cdot L(\\theta|(x_1, \\ldots, x_i))~d\\theta} \\end{equation} P(θ|(x1,…,xi))P(\\theta|(x_1, \\ldots, x_i)) = Posterior Distribution (Conclusion PDf) π(θ)\\pi(\\theta) = Prior Distribution (Knowledge PDF) L(θ|(x1,…,xi))L(\\theta|(x_1, \\ldots, x_i)) = Likelihood (Data collected) ∫π(θ)⋅L(θ|(x1,…,xi))dθ\\int \\pi(\\theta) \\cdot L(\\theta|(x_1, \\ldots, x_i))~d\\theta = Marginal Distribution (problem area)","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"int-pitheta-cdot-lthetax_1-ldots-x_idtheta","dir":"Articles","previous_headings":"","what":"∫π(θ)⋅L(θ|(x1,…,xi))dθ\\int \\pi(\\theta) \\cdot L(\\theta|(x_1, \\ldots, x_i))~d\\theta","title":"Bayesian Conjugacy","text":"Solving integral potentially difficult problem. Historically two answers: Find pairs likelihood functions Priors integrate easily (conjugate priors) Numerical Methods (Powerful computers making numeric approximations via MCMC similar methods, see advanced growth modeling tutorial)","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"verb-conjugation","dir":"Articles","previous_headings":"","what":"Verb Conjugation","title":"Bayesian Conjugacy","text":"may still seem abstract, ’ll try clear two examples. take foundational verb like “” can conjugate depending context. Now add information meaning gets specific describe information. can thing easily probability distributions. Similar language get specific context better described (add data).","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"bayesian-beta-binomial-conjugacy","dir":"Articles","previous_headings":"","what":"Bayesian Beta-Binomial Conjugacy","title":"Bayesian Conjugacy","text":"previous example updated fundamental verb context. ’ll update probability distribution data. P parameter Binomial distribution Beta conjugate prior. $$\\begin{equation} x_1, \\ldots, x_n \\sim Binomial(N, P) \\\\ P \\sim Beta(\\alpha, \\beta)  \\\\ Beta(\\alpha', \\beta' |(x_1, \\ldots, x_n)) = Beta(\\alpha, \\beta) \\cdot L(\\alpha, \\beta|(x_1, \\ldots, x_n)) \\\\ \\alpha` = \\alpha + \\Sigma(\\text{Successes} \\x) \\\\ \\beta` = \\beta + \\Sigma(\\text{Failures} \\x) \\end{equation}$$  simplistically can think conjugacy know distribution parameter another distribution.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"pcvrconjugate","dir":"Articles","previous_headings":"","what":"pcvr::conjugate","title":"Bayesian Conjugacy","text":"pcvr 18 distributions supported conjugate function. ’ll go distributions, tend represent, updated, common alternative tests kind data.","code":"## Warning: Removed 2 rows containing missing values or values outside the scale range ## (`geom_bar()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"pcvrconjugate-arguments","dir":"Articles","previous_headings":"","what":"pcvr::conjugate arguments","title":"Bayesian Conjugacy","text":"conjugate takes one two sets SV (numeric) MV (matrix/df) data. Alternatively can formula dataframe, similar stats::t.test. method argument specifies distribution used. See ?conjugate details. priors argument allows specify prior distribution. left NULL default priors used. plot argument controls whether ggplot made results. See later examples. rope_range rope_ci arguments allow region--practical-equivalence (ROPE) testing using difference posterior distributions two samples given. cred.int.level controls credible intervals calculated posterior distributions. default 89% arbitrary. hypothesis argument sets hypothesis tested “greater”, “lesser”, “equal” “unequal”. read “s1 equal s2”, etc. bayes_factor argument optionally lets calculate Bayes factors within sample comparing prior posterior odds.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"pcvrconjugate-default-priors","dir":"Articles","previous_headings":"pcvr::conjugate arguments","what":"pcvr::conjugate default priors","title":"Bayesian Conjugacy","text":"","code":"## Warning: Removed 2 rows containing missing values or values outside the scale range ## (`geom_bar()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"using-rope-tests","dir":"Articles","previous_headings":"pcvr::conjugate arguments","what":"Using ROPE tests","title":"Bayesian Conjugacy","text":"ROPE (Region Practical Equivalence) tests can used variety purposes conjugate. Two main uses (1) evaluate whether difference two groups biologically meaningful (2) compare sample’s parameter existing expectation. first case pass 2 samples conjugate evaluate difference posteriors. use two sets random exponential data check difference within 0.5 0.  get probability 0.34 highest density interval difference falls interval [-0.5, 0.5], median difference 0.75. second case might want compare mean data accepted interval mean:  see 1 percent chance mean data [11, 13] interval listed range similar alternative hypothesis T-test.","code":"set.seed(123) s1 <- rexp(10, 1.2) s2 <- rexp(10, 1) out <- conjugate(   s1 = s1, s2 = s2, method = \"exponential\",   priors = NULL,   rope_range = c(-0.5, 0.5), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\" ) plot(out) set.seed(123) s1 <- rnorm(20, 10, 2) out <- conjugate(   s1 = s1, method = \"t\",   priors = list(mu = 12, sd = 3),   rope_range = c(11, 13),   hypothesis = \"unequal\" ) plot(out)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"using-bayes-factors","dir":"Articles","previous_headings":"pcvr::conjugate arguments","what":"Using Bayes Factors","title":"Bayesian Conjugacy","text":"Bayes factors compare Bayesian models can useful model selection parameter estimation. conjugate Bayes factors compare prior vs posterior distributions either points ranges. P[H1|Data]P[H0|Data]=P[H1]P[H0]⋅P[Data|H1]P[Data|H0]\\frac{P[H_1|\\text{Data}]}{P[H_0|\\text{Data}]} = \\frac{P[H_1]}{P[H_0]} \\cdot \\frac{P[\\text{Data}|H_1]}{P[\\text{Data}|H_0]} equation relate posterior odds prior odds multiplied “Bayes Factor”, P[Data|H1]P[Data|H0]\\frac{P[\\text{Data}|H_1]}{P[\\text{Data}|H_0]}. Within conjugate H1H_1 H2H_2 either point range support given parameter. can work simple example compare output conjugate.  Now update prior data:  Bayes Factor ratio posterior prior odds: Bayes factor shows interval [0.4, 0.6] 2.2 times less likely updating prior new data. thing conjugate pass bayes_factor argument range check bf_1 column summary results sample 1. interested point hypothesis enter one value, say 0.5. Note many distributions conjugate default uninformative priors specify prior distribution. likely Bayes factor essentially meaningless cases. Put another way, factor relating posterior vs prior odds meaningful information prior odds.","code":"null <- c(0.4, 0.6) x_vals <- seq(0, 1, length.out = 500) d_vals <- dbeta(x_vals, shape1 = 2, shape2 = 2) # density from the prior Beta(2, 2) in_null <- null[1] < x_vals & x_vals < null[2] label <- rep(\"Null\", length(x_vals)) label[!in_null & x_vals < 0.4] <- \"lower\" label[!in_null & x_vals > 0.6] <- \"upper\"  lower_tail <- pbeta(null[1], 2, 2, lower.tail = TRUE) upper_tail <- pbeta(null[2], 2, 2, lower.tail = FALSE) null_region <- 1 - lower_tail - upper_tail prior_odds <- (lower_tail + upper_tail) / null_region  p1 <- ggplot(mapping = aes(x_vals, d_vals, fill = in_null, group = label)) +   geom_area(color = \"black\", linewidth = 0.5, alpha = 0.5) +   scale_fill_manual(values = c(\"red\", \"blue\"), labels = c(\"Alternative\", \"Null\")) +   annotate(\"text\", x = 0.5, y = 1, label = round(null_region, 3)) +   annotate(\"text\", x = 0.3, y = 1, label = round(lower_tail, 3)) +   annotate(\"text\", x = 0.7, y = 1, label = round(upper_tail, 3)) +   annotate(\"text\", x = 0.8, y = 2, label = paste0(\"Prior Odds = \", round(prior_odds, 3),                                                   \"\\n= (\", round(lower_tail, 3), \" + \",                                                   round(upper_tail, 3), \") / \",                                                   round(null_region, 3))) +   labs(x = \"Percentage\", y = \"Density\", title = \"Prior\") +   scale_x_continuous(labels = scales::percent_format()) +   coord_cartesian(ylim = c(0, 4)) +   pcv_theme() +   theme(legend.position.inside = c(0.2, 0.8), legend.title = element_blank(),         legend.position = \"inside\") p1 successes <- 8 failures <- 2  post_dvals <- dbeta(x_vals, 2 + successes, 2 + failures) in_null <- null[1] < x_vals & x_vals < null[2] label <- rep(\"Null\", length(x_vals)) label[!in_null & x_vals < 0.4] <- \"lower\" label[!in_null & x_vals > 0.6] <- \"upper\"  lower_post <- pbeta(0.4, 2 + successes, 2 + failures) upper_post <- pbeta(0.6, 2 + successes, 2 + failures, lower.tail = FALSE) null_post <- 1 - lower_post - upper_post post_odds <- (lower_post + upper_post) / null_post  p2 <- ggplot(mapping = aes(x_vals, post_dvals, fill = in_null, group = label)) +   geom_area(color = \"black\", linewidth = 0.5, alpha = 0.5) +   scale_fill_manual(values = c(\"red\", \"blue\"), labels = c(\"Alternative\", \"Null\")) +   annotate(\"text\", x = 0.5, y = 2, label = round(null_post, 3)) +   annotate(\"text\", x = 0.3, y = 2, label = round(lower_post, 3)) +   annotate(\"text\", x = 0.7, y = 2, label = round(upper_post, 3)) +   annotate(\"text\", x = 0.2, y = 3, label = paste0(\"Posterior Odds = \", round(post_odds, 3),                                                   \"\\n= (\", round(lower_post, 3), \" + \",                                                   round(upper_post, 3), \") / \",                                                   round(null_post, 3))) +   labs(x = \"Percentage\", y = \"Density\", title = \"Posterior\") +   scale_x_continuous(labels = scales::percent_format()) +   coord_cartesian(ylim = c(0, 4)) +   pcv_theme() +   theme(legend.position = \"none\") p2 (b_factor <- post_odds / prior_odds) ## [1] 2.194529 conj <- conjugate(s1 = list(\"successes\" = 8, \"trials\" = 10),                   method = \"binomial\",                   priors = list(a = 2, b = 2),                   bayes_factor = c(0.4, 0.6)) conj ## Beta distributed Rate parameter of Binomial distributed data. ##  ## Sample 1 Prior Beta(a = 2, b = 2) ##  Posterior Beta(a = 10, b = 4) ## Sample 1 Bayes Factor in 0.4 to 0.6 = 2.195 ##  ##   HDE_1 HDI_1_low HDI_1_high     bf_1 ## 1  0.75 0.5118205  0.8838498 2.194529"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"point-hypothesis-bayes-factors","dir":"Articles","previous_headings":"pcvr::conjugate arguments > Using Bayes Factors","what":"Point Hypothesis Bayes Factors","title":"Bayesian Conjugacy","text":"Using point hypothesis thing, now “odds” density single point PDF instead sum region.   Identically conjugate:","code":"null <- 0.5 xrange <- c(0, 1) x_vals <- seq(0, 1, length.out = 500) d_vals <- dbeta(x_vals, shape1 = 2, shape2 = 2) d_null <- d_vals[which.min(abs(x_vals - null))]  p1 <- ggplot(mapping = aes(x_vals, d_vals, fill = \"Alternative\")) +   geom_area(color = \"black\", linewidth = 0.5, alpha = 0.5) +   geom_segment(aes(x = 0.5, y = 0, yend = d_null), color = \"blue\", linetype = 5) +   geom_point(aes(fill = \"Null\"), x = null, y = d_null, shape = 21, size = 3,              key_glyph = \"rect\", color = \"black\", alpha = 0.75) +   scale_fill_manual(values = c(\"red\", \"blue\"), labels = c(\"Alternative\", \"Null\")) +   labs(x = \"Percentage\", y = \"Density\", title = \"Prior\") +   scale_x_continuous(labels = scales::percent_format()) +   coord_cartesian(ylim = c(0, 4)) +   pcv_theme() +   theme(legend.position.inside = c(0.2, 0.8), legend.title = element_blank(),         legend.position = \"inside\") p1 # prior density at null prior_null_analytic <- dbeta(0.5, shape1 = 2, shape2 = 2)  d_vals2 <- dbeta(x_vals, 2 + successes, 2 + failures) d_vals2_null <- d_vals2[which.min(abs(x_vals - null))]  # posterior density at null post_null_analytic <- dbeta(0.5, 2 + successes, 2 + failures)  p2 <- ggplot(mapping = aes(x_vals, d_vals2, fill = \"Alternative\")) +   geom_area(aes(x_vals, d_vals, fill = \"Alternative\"), alpha = 0.1) +   geom_segment(aes(x = 0.5, y = 0, yend = d_null), color = \"blue\", linetype = 5) +   geom_point(aes(fill = \"Null\"), x = null, y = d_null, shape = 21, size = 3,              key_glyph = \"rect\", color = \"black\", alpha = 0.25) +   geom_area(color = \"black\", linewidth = 0.5, alpha = 0.5) +   geom_segment(aes(x = 0.5, y = 0, yend = d_vals2_null), color = \"blue\", linetype = 5) +   geom_point(aes(fill = \"Null\"), x = null, y = d_vals2_null, shape = 21, size = 3,              key_glyph = \"rect\", color = \"black\", alpha = 0.75) +   scale_fill_manual(values = c(\"red\", \"blue\"), labels = c(\"Alternative\", \"Null\")) +   labs(x = \"Percentage\", y = \"Density\", title = \"Updated Posterior\") +   scale_x_continuous(labels = scales::percent_format()) +   coord_cartesian(ylim = c(0, 4)) +   pcv_theme() +   theme(legend.position = \"none\") +   annotate(\"text\", x = 0.4, y = d_null, label = round(prior_null_analytic, 3)) +   annotate(\"text\", x = 0.4, y = d_vals2_null, label = round(post_null_analytic, 3)) +   annotate(\"text\", x = 0.4, y = 2.5,            label = paste0(\"BF = \", round(post_null_analytic / prior_null_analytic, 3))) p2 (b_factor_point <- post_null_analytic / prior_null_analytic) ## [1] 0.4654948 conj <- conjugate(s1 = list(\"successes\" = 8, \"trials\" = 10),                   method = \"binomial\",                   priors = list(a = 2, b = 2),                   bayes_factor = 0.5) conj ## Beta distributed Rate parameter of Binomial distributed data. ##  ## Sample 1 Prior Beta(a = 2, b = 2) ##  Posterior Beta(a = 10, b = 4) ## Sample 1 Bayes Factor at 0.5 = 0.465 ##  ##   HDE_1 HDI_1_low HDI_1_high      bf_1 ## 1  0.75 0.5118205  0.8838498 0.4654948"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"reading-conjugate-output","dir":"Articles","previous_headings":"","what":"Reading conjugate output","title":"Bayesian Conjugacy","text":"conjugate function outputs conjugate class object. just print object show main results easily human-readable format. Lastly ’ll show interpretations conjugate output plant phenotyping context. Germination Rates Area Leaf Counts Hue barg function can also use conjugate class run prior sensitivity analysis show posterior predictive distribution.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"germination-rates","dir":"Articles","previous_headings":"","what":"Germination Rates","title":"Bayesian Conjugacy","text":"Germination Rates (binary outocmes like flowering death) can make good sense Beta-Binomial data.   ’d simply conclude 19% chance germination rate two genotypes 1 week. ROPE testing, ’ll next example. can also look printed output shows human-readable interpretations hypothesis tests, ROPE tests, Bayes Factors applicable.","code":"res <- conjugate(   s1 = list(successes = df[df$geno == \"A\", \"y\"], trials = 10),   s2 = list(successes = df[df$geno == \"B\", \"y\"], trials = 10),   method = \"binomial\" ) res ## Beta distributed Rate parameter of Binomial distributed data. ##  ## Sample 1 Prior Beta(a = 0.5, b = 0.5) ##  Posterior Beta(a = 50.5, b = 50.5) ## Sample 2 Prior Beta(a = 0.5, b = 0.5) ##  Posterior Beta(a = 63.5, b = 37.5) ##  ## Posterior probability that S1 is equal to S2 = 18.951% ##  ##   HDE_1 HDI_1_low HDI_1_high     HDE_2 HDI_2_low HDI_2_high   hyp post.prob ## 1   0.5 0.4207941  0.5792059 0.6313131 0.5508745  0.7038946 equal 0.1895143"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"area","dir":"Articles","previous_headings":"","what":"Area","title":"Bayesian Conjugacy","text":"Lots phenotypes gaussian conjugate can used similarly T-test “t” method. Consider area data looks like example.  include ROPE test corresponding belief difference Area ±2cm2\\pm2 cm^2 biologically insignificant. also show formula syntax use non-default priors (since default priors include negative values can’t happen area).  plot shows 83% chance distributions unequal 24% chance difference means within ±2cm2\\pm2 cm^2. aspects output summary prior/posterior parameters well several things used internally. summary data.frame summary information plot. printed end object. posterior prior list updated given data, allows Bayesian updating situation supplying data piecemeal makes sense. prior format.","code":"res <- conjugate(   s1 = y ~ geno, s2 = df,   method = \"t\",   rope_range = c(-2, 2),   priors = list(mu = 10, sd = 2),   hypothesis = \"unequal\" ) lapply(res, class) ## $summary ## [1] \"data.frame\" ##  ## $rope_df ## [1] \"data.frame\" ##  ## $posterior ## [1] \"list\" ##  ## $prior ## [1] \"list\" ##  ## $plot_parameters ## [1] \"list\" ##  ## $data ## [1] \"list\" ##  ## $call ## [1] \"call\" res ## Normal distributed Mu parameter of T distributed data. ##  ## Sample 1 Prior Normal(mu = 10, sd = 2) ##  Posterior Normal(mu = 14.682, sd = 0.774) ## Sample 2 Prior Normal(mu = 10, sd = 2) ##  Posterior Normal(mu = 11.51, sd = 1.077) ##  ## Posterior probability that S1 is not equal to S2 = 91.466% ##  ## Probability of the difference between Mu parameters being within [-2:2] using a % Credible Interval is 15.335% with an average difference of 3.177 ##  ##  ##      HDE_1 HDI_1_low HDI_1_high    HDE_2 HDI_2_low HDI_2_high     hyp post.prob ## 1 14.68175  13.44396   15.91955 11.50985  9.787879   13.23182 unequal 0.9146565 ##   HDE_rope HDI_rope_low HDI_rope_high rope_prob ## 1   3.1772     1.013366      5.223168 0.1533536 do.call(rbind, res$posterior) ##      mu       sd        ## [1,] 14.68175 0.7744957 ## [2,] 11.50985 1.077449"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"leaf-counts","dir":"Articles","previous_headings":"","what":"Leaf Counts","title":"Bayesian Conjugacy","text":"also several phenotypes counts. Numbers vertices, leaves, flowers, etc used one count distributions. consider Poisson distributed leaf counts two genotypes.  model $X \\sim Poisson(\\lambda)\\\\ \\lambda \\sim \\Gamma(, B)$  can comfortably say difference posteriors [-1, 1] 91% chance Gamma distributions λ\\lambda different.","code":"res <- conjugate(   s1 = y ~ geno, s2 = df,   method = \"poisson\",   rope_range = c(-1, 1),   priors = list(a = 1, b = 1),   hypothesis = \"unequal\" ) res ## Gamma distributed Lambda parameter of Poisson distributed data. ##  ## Sample 1 Prior Gamma(a = 1, b = 1) ##  Posterior Gamma(a = 67, b = 11) ## Sample 2 Prior Gamma(a = 1, b = 1) ##  Posterior Gamma(a = 98, b = 11) ##  ## Posterior probability that S1 is not equal to S2 = 91.398% ##  ## Probability of the difference between Lambda parameters being within [-1:1] using a % Credible Interval is 0% with an average difference of -2.782 ##  ##  ##   HDE_1 HDI_1_low HDI_1_high    HDE_2 HDI_2_low HDI_2_high     hyp post.prob ## 1     6  4.950908   7.325033 8.818182  7.519675   10.39265 unequal 0.9139806 ##    HDE_rope HDI_rope_low HDI_rope_high rope_prob ## 1 -2.781883    -4.754465     -1.020078         0"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"hue","dir":"Articles","previous_headings":"","what":"Hue","title":"Bayesian Conjugacy","text":"Finally, ’ll show example using likely least-familiar distribution conjugate, Von-Mises distribution. Von-Mises distribution symmetric circular distribution defined [−π,π][-\\pi, \\pi]. use Von-Mises data intervals boundary element prior used rescale data radians updating rescaling back parameter space. See ?conjugate examples boundary.  Note exaggerated example plant phenotyping setting since green happens middle hue circle, wraps red colors. wrapped circular data looking non-circular space like problem. values normally get plants continuous methods can generally useful.   distributions similar 79% chance parameters given data (wide) priors. Note use data different boundary space radians rope_range given observed parameter space, radians.","code":"## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ggplot(df, aes(x = geno, y = y, fill = geno)) +   geom_boxplot(outlier.shape = NA) +   geom_jitter(height = 0, width = 0.05) +   pcv_theme() +   labs(y = \"Hue (radians)\") +   scale_y_continuous(limits = c(-pi, pi), breaks = round(c(-pi, -pi / 2, 0, pi / 2, pi), 2)) +   theme(legend.position = \"none\") res <- conjugate(   s1 = y ~ geno, s2 = df,   method = \"vonmises2\",   priors = list(mu = 0, kappa = 0.5, boundary = c(-pi, pi), n = 1) ) res ## Von Mises distributed Direction parameter of Von Mises distributed data. ##  ## Sample 1 Prior Von Mises(mu = 0, kappa = 0.5, boundary = -3.142, n = 3.142, mu = 1) ##  Posterior Von Mises(mu = 3.094, kappa = 1.817, n = 11, boundary = -3.142, mu = 3.142) ## Sample 2 Prior Von Mises(mu = 0, kappa = 0.5, boundary = -3.142, n = 3.142, mu = 1) ##  Posterior Von Mises(mu = 2.727, kappa = 2.509, n = 11, boundary = -3.142, mu = 3.142) ##  ## Posterior probability that S1 is equal to S2 = 79.05% ##  ##      HDE_1 HDI_1_low HDI_1_high    HDE_2 HDI_2_low HDI_2_high   hyp post.prob ## 1 3.093691  1.668768  -1.717893 2.727366  1.497517   -2.43441 equal 0.7904981 plot(res)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_conjugate.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Bayesian Conjugacy","text":"Hopefully useful introduction Bayesian conjugacy. Please direct questions/issues pcvr::conjugate pcvr github issues help-datascience slack channel DDPSC users.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"outline","dir":"Articles","previous_headings":"","what":"Outline","title":"Intermediate Growth Modeling with `pcvr`","text":"pcvr Goals Load Package Longitudinal Modeling? Supported Model Builders Supported Curves growthSS fitGrowth growthPlot testGrowth Resources","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"pcvr-goals","dir":"Articles","previous_headings":"","what":"pcvr Goals","title":"Intermediate Growth Modeling with `pcvr`","text":"Currently pcvr aims : Make common tasks easier consistent Make select Bayesian statistics easier room goals evolve based feedback scientific needs.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"load-package","dir":"Articles","previous_headings":"","what":"Load package","title":"Intermediate Growth Modeling with `pcvr`","text":"Pre-work install R, Rstudio, pcvr dependencies.","code":"library(pcvr) # or devtools::load_all() if you are editing library(ggplot2) library(patchwork)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"why-longitudinal-modeling","dir":"Articles","previous_headings":"","what":"Why Longitudinal Modeling?","title":"Intermediate Growth Modeling with `pcvr`","text":"plantCV allows user friendly high throughput image based phenotyping Resulting data follows individuals time, changes statistical needs. Longitudinal Data : Autocorrelated Often non-linear Heteroskedastic","code":"r1 <- range(simdf[simdf$time == 1, \"y\"]) r2 <- range(simdf[simdf$time == 5, \"y\"]) r3 <- range(simdf[simdf$time == 10, \"y\"]) r4 <- range(simdf[simdf$time == 20, \"y\"])  main <- ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line() +   annotate(\"segment\", x = 1, xend = 1, y = r1[1], yend = r1[2], color = \"blue\", linewidth = 2) +   annotate(\"segment\", x = 5, xend = 5, y = r2[1], yend = r2[2], color = \"blue\", linewidth = 2) +   annotate(\"segment\", x = 10, xend = 10, y = r3[1], yend = r3[2], color = \"blue\", linewidth = 2) +   annotate(\"segment\", x = 20, xend = 20, y = r4[1], yend = r4[2], color = \"blue\", linewidth = 2) +   labs(title = \"Heteroskedasticity\") +   pcv_theme() +   theme(axis.title.x = element_blank(), axis.text.x = element_blank())  sigma_df <- aggregate(y ~ group + time, data = simdf, FUN = sd)  sigmaPlot <- ggplot(sigma_df, aes(x = time, y = y, group = group)) +   geom_line(color = \"blue\") +   pcv_theme() +   labs(y = \"SD of y\") +   theme(plot.title = element_blank())   design <- c(   area(1, 1, 4, 4),   area(5, 1, 6, 4) ) hetPatch <- main / sigmaPlot + plot_layout(design = design) hetPatch"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"supported-model-builders","dir":"Articles","previous_headings":"","what":"Supported Model Builders","title":"Intermediate Growth Modeling with `pcvr`","text":"Five model building options supported type argument growthSS: nls, nlrq, nlme, mgcv, brms mgcv model builders can fit 9 types growth models.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"type-nls","dir":"Articles","previous_headings":"","what":"type = “nls”","title":"Intermediate Growth Modeling with `pcvr`","text":"Non-linear least squares regression.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"type-nlrq-1","dir":"Articles","previous_headings":"","what":"type = “nlrq”","title":"Intermediate Growth Modeling with `pcvr`","text":"Non-linear quantile regression.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"type-nlme","dir":"Articles","previous_headings":"","what":"type = “nlme”","title":"Intermediate Growth Modeling with `pcvr`","text":"Non-linear Mixed Effect Models","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"type-mgcv","dir":"Articles","previous_headings":"","what":"type = “mgcv”","title":"Intermediate Growth Modeling with `pcvr`","text":"General Additive Models ","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"type-brms","dir":"Articles","previous_headings":"","what":"type = “brms”","title":"Intermediate Growth Modeling with `pcvr`","text":"Bayesian hierarchical Models","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"supported-growth-models","dir":"Articles","previous_headings":"","what":"Supported Growth Models","title":"Intermediate Growth Modeling with `pcvr`","text":"6 main growth models supported pcvr, although several options well changepoint models made combinations . general 6 looking , 3 asymptotic, 3 non-asympototic.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"supported-growth-models-1","dir":"Articles","previous_headings":"","what":"Supported Growth Models","title":"Intermediate Growth Modeling with `pcvr`","text":"additional 3 sigmoidal models based Extreme Value Distribution. Weibull, Frechet, Gumbel. authors generally prefer Gompertz options data possible better fit.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"supported-growth-models-2","dir":"Articles","previous_headings":"","what":"Supported Growth Models 2","title":"Intermediate Growth Modeling with `pcvr`","text":"also two double sigmoid curves intended use recovery experiments.","code":"## Warning: Removed 1 row containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"supported-growth-models-3","dir":"Articles","previous_headings":"","what":"Supported Growth Models 3","title":"Intermediate Growth Modeling with `pcvr`","text":"Generalized Additive Models (GAMs) also supported.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"survival-models","dir":"Articles","previous_headings":"","what":"Survival Models","title":"Intermediate Growth Modeling with `pcvr`","text":"Survival models can also specified using “survival” keyword. models can use “survival” “flexsurv” backends distributions can specified model = \"survival {distribution}\". details please see growthSS documentation.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"gams","dir":"Articles","previous_headings":"","what":"GAMs","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"m <- mgcv::gam(y ~ group + s(time, by = factor(group)), data = simdf) start <- min(simdf$time) end <- max(simdf$time) support <- expand.grid(   time = seq(start, end, length = 400),   group = factor(unique(simdf$group)) )  out <- gam_diff(   model = m, newdata = support, g1 = \"a\", g2 = \"b\",   byVar = \"group\", smoothVar = \"time\", plot = TRUE )"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"gam_diff-predictions","dir":"Articles","previous_headings":"","what":"gam_diff predictions","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"out$plot[[1]] +   geom_line(     data = simdf,     aes(       x = time, y = y, color = factor(group, levels = c(\"b\", \"a\")),       group = paste0(group, id)     ),     linewidth = 0.1, show.legend = FALSE   )"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"gam_diff-differences","dir":"Articles","previous_headings":"","what":"gam_diff differences","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"gam_diff(   model = m, newdata = support, g1 = \"a\", g2 = \"b\",   byVar = \"group\", smoothVar = \"time\", plot = TRUE )$plot"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss","dir":"Articles","previous_headings":"","what":"growthSS","title":"Intermediate Growth Modeling with `pcvr`","text":"models shown can specified easily using growthSS.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---form","dir":"Articles","previous_headings":"","what":"growthSS - form","title":"Intermediate Growth Modeling with `pcvr`","text":"model specified rough formula required parse data fit model. layout formula : outcome ~ time|individual/group","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---form-2","dir":"Articles","previous_headings":"","what":"growthSS - form 2","title":"Intermediate Growth Modeling with `pcvr`","text":"use y~time|id/group","code":"head(simdf) ##     id group time         y ## 1 id_1     a    1  6.539088 ## 2 id_1     a    2  8.973278 ## 3 id_1     a    3 12.263465 ## 4 id_1     a    4 16.668316 ## 5 id_1     a    5 22.490524 ## 6 id_1     a    6 30.057423"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---form-3","dir":"Articles","previous_headings":"","what":"growthSS - form 3","title":"Intermediate Growth Modeling with `pcvr`","text":"can check grouping formula correct plot.","code":"ggplot(simdf, aes(   x = time, y = y,   group = paste(group, id) )) +   geom_line(aes(color = group)) +   labs(     title = \"Testing Formula\",     subtitle = \"y ~ time | id/group\"   ) +   pcv_theme()"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---sigma","dir":"Articles","previous_headings":"","what":"growthSS - sigma","title":"Intermediate Growth Modeling with `pcvr`","text":"“nlme” “brms” models accept sigma argument. look nlme models brms models subject Advanced Growth Modeling tutorial.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---sigma-1","dir":"Articles","previous_headings":"","what":"growthSS - sigma","title":"Intermediate Growth Modeling with `pcvr`","text":"Recall heteroskedasticity problem, shown simulated data:","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---sigma-2","dir":"Articles","previous_headings":"","what":"growthSS - sigma","title":"Intermediate Growth Modeling with `pcvr`","text":"lots ways model trend like see sigma. pcvr offers three options growthSS nlme models.","code":"draw_power_sigma <- function(x) {   return(12 + (x * 0.75)^(2 * 0.26)) } # difficult to recapitulate from nlme draw_exp_sigma <- function(x) {   return(12 + exp(2 * x * 0.75 * 0.05)) }  ggplot(sigma_df, aes(x = time, y = y)) +   geom_line(aes(group = group), color = \"gray60\") +   geom_hline(aes(yintercept = 15, color = \"Homoskedastic\"), linetype = 5, key_glyph = draw_key_path) +   geom_function(fun = draw_power_sigma, aes(color = \"Power\"), linetype = 5) +   geom_function(fun = draw_exp_sigma, aes(color = \"Exp\"), linetype = 5) +   scale_color_viridis_d(option = \"plasma\", begin = 0.1, end = 0.9) +   guides(color = guide_legend(override.aes = list(linewidth = 1, linetype = 1))) +   pcv_theme() +   theme(legend.position = \"bottom\") +   labs(     y = \"SD of y\", title = \"growthSS nlme sigma options\", color = \"\",     subtitle = \"note: variance fits here are rough approximations\"   )"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---none-sigma","dir":"Articles","previous_headings":"","what":"growthSS - “none” sigma","title":"Intermediate Growth Modeling with `pcvr`","text":"Variance can modeled homoskedastic group.","code":"ggplot(sigma_df, aes(x = time, y = y, group = group)) +   geom_hline(aes(yintercept = 13.8, color = \"Homoskedastic\"), linetype = 5, key_glyph = draw_key_path) +   geom_line(aes(color = group)) +   scale_color_manual(values = c(scales::hue_pal()(2), \"gray40\")) +   pcv_theme() +   labs(y = \"SD of y\", color = \"Sigma\") +   theme(plot.title = element_blank(), legend.position = \"bottom\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---power-sigma","dir":"Articles","previous_headings":"","what":"growthSS - “power” sigma","title":"Intermediate Growth Modeling with `pcvr`","text":"Variance can modeled using power x term. <img src=“/home/runner/work/pcvr/pcvr/docs/articles/pcvrTutorial_igm_files/figure-html/unnamed-chunk-20-1.png” alt=“Showing ”power” option sigma.” width=“700” />","code":"ggplot(sigma_df, aes(x = time, y = y, group = group)) +   geom_function(fun = draw_power_sigma, aes(color = \"Power\"), linetype = 5) +   geom_line(aes(color = group)) +   scale_color_manual(values = c(scales::hue_pal()(2), \"gray40\")) +   pcv_theme() +   labs(y = \"SD of y\", color = \"Sigma\") +   theme(plot.title = element_blank(), legend.position = \"bottom\") ## Warning: Multiple drawing groups in `geom_function()` ## ℹ Did you use the correct group, colour, or fill aesthetics?"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---exp-sigma","dir":"Articles","previous_headings":"","what":"growthSS - “exp” sigma","title":"Intermediate Growth Modeling with `pcvr`","text":"Variance can modeled using exponent x term. <img src=“/home/runner/work/pcvr/pcvr/docs/articles/pcvrTutorial_igm_files/figure-html/unnamed-chunk-21-1.png” alt=“Showing ”exp” option sigma.” width=“700” />","code":"ggplot(sigma_df, aes(x = time, y = y, group = group)) +   geom_function(fun = draw_exp_sigma, aes(color = \"Exp\"), linetype = 5) +   geom_line(aes(color = group)) +   scale_color_manual(values = c(scales::hue_pal()(2), \"gray40\")) +   pcv_theme() +   labs(y = \"SD of y\", color = \"Sigma\") +   theme(plot.title = element_blank(), legend.position = \"bottom\") ## Warning: Multiple drawing groups in `geom_function()` ## ℹ Did you use the correct group, colour, or fill aesthetics?"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---varfunc-options","dir":"Articles","previous_headings":"","what":"growthSS - varFunc Options","title":"Intermediate Growth Modeling with `pcvr`","text":"nlme varFunc objects can also passed sigma argument growthSS. See ?nlme::varClasses details.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---start","dir":"Articles","previous_headings":"","what":"growthSS - start","title":"Intermediate Growth Modeling with `pcvr`","text":"One useful features growthSS need specify starting values supported non-linear models (double sigmoid options notwithstanding).","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---tau","dir":"Articles","previous_headings":"","what":"growthSS - tau","title":"Intermediate Growth Modeling with `pcvr`","text":"Finally, mode=“nlrq” tau argument takes one quantiles fit model . default 0.5, corresponding median.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---nls","dir":"Articles","previous_headings":"","what":"growthSS - nls","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"nls_ss <- growthSS(   model = \"logistic\", form = y ~ time | id / group,   df = simdf, type = \"nls\" ) ## Individual is not used with type = 'nls'. lapply(nls_ss, class) ## $formula ## [1] \"formula\" ##  ## $start ## [1] \"list\" ##  ## $df ## [1] \"data.frame\" ##  ## $pcvrForm ## [1] \"formula\" ##  ## $type ## [1] \"character\" ##  ## $model ## [1] \"character\" ##  ## $call ## [1] \"call\""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---nlrq","dir":"Articles","previous_headings":"","what":"growthSS - nlrq","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"nlrq_ss <- growthSS(   model = \"logistic\", form = y ~ time | id / group,   df = simdf, type = \"nlrq\",   tau = seq(0.01, 0.99, 0.04) ) ## Individual is not used with type = 'nlrq'. lapply(nls_ss, class) ## $formula ## [1] \"formula\" ##  ## $start ## [1] \"list\" ##  ## $df ## [1] \"data.frame\" ##  ## $pcvrForm ## [1] \"formula\" ##  ## $type ## [1] \"character\" ##  ## $model ## [1] \"character\" ##  ## $call ## [1] \"call\""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---nlme","dir":"Articles","previous_headings":"","what":"growthSS - nlme","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"nlme_ss <- growthSS(   model = \"logistic\", form = y ~ time | id / group,   df = simdf, sigma = \"power\", type = \"nlme\" ) names(nlme_ss) ## [1] \"formula\"  \"start\"    \"df\"       \"pcvrForm\" \"type\"     \"model\"    \"call\" names(nlme_ss$formula) ## [1] \"model\"    \"random\"   \"fixed\"    \"groups\"   \"weights\"  \"cor_form\""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---mgcv","dir":"Articles","previous_headings":"","what":"growthSS - mgcv","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"mgcv_ss <- growthSS(   model = \"gam\", form = y ~ time | id / group,   df = simdf, type = \"mgcv\" ) ## Individual is not used with type = 'gam'. lapply(mgcv_ss, class) ## $formula ## [1] \"formula\" ##  ## $df ## [1] \"data.frame\" ##  ## $pcvrForm ## [1] \"formula\" ##  ## $type ## [1] \"character\" ##  ## $model ## [1] \"character\" ##  ## $call ## [1] \"call\""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---survival-models","dir":"Articles","previous_headings":"","what":"growthSS - survival models","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"surv_ss <- growthSS(   model = \"survival weibull\",   form = y > 100 ~ time | id / group,   df = simdf, type = \"survreg\" ) # type = \"flexsurv\" has more distribution options lapply(surv_ss, class) ## $df ## [1] \"data.frame\" ##  ## $formula ## [1] \"formula\" ##  ## $pcvrForm ## [1] \"formula\" ##  ## $distribution ## [1] \"character\" ##  ## $type ## [1] \"character\" ##  ## $model ## [1] \"character\" ##  ## $call ## [1] \"call\""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthss---survival-models-1","dir":"Articles","previous_headings":"","what":"growthSS - survival models","title":"Intermediate Growth Modeling with `pcvr`","text":"Note still supply standard phenotype data give cutoff left hand side formula. cutoff represents “event”. example, given area pixels germination might area_px>10 ~ time|id/group.","code":"surv_ss <- growthSS(   model = \"survival weibull\",   form = y > 100 ~ time | id / group,   df = simdf, type = \"survreg\" ) # type = \"flexsurv\" has more distribution options lapply(surv_ss, class) ## $df ## [1] \"data.frame\" ##  ## $formula ## [1] \"formula\" ##  ## $pcvrForm ## [1] \"formula\" ##  ## $distribution ## [1] \"character\" ##  ## $type ## [1] \"character\" ##  ## $model ## [1] \"character\" ##  ## $call ## [1] \"call\""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"fitgrowth","dir":"Articles","previous_headings":"","what":"fitGrowth","title":"Intermediate Growth Modeling with `pcvr`","text":"Now components model growthSS can fit model fitGrowth.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"fitgrowth-2","dir":"Articles","previous_headings":"","what":"fitGrowth 2","title":"Intermediate Growth Modeling with `pcvr`","text":"non-brms models steps fit model specified growthSS simple can left fitGrowth.","code":"nls_fit <- fitGrowth(nls_ss) nlrq_fit <- fitGrowth(nlrq_ss, cores = 4) nlme_fit <- fitGrowth(nlme_ss) mgcv_fit <- fitGrowth(mgcv_ss) surv_fit <- fitGrowth(surv_ss)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"fitgrowth-3","dir":"Articles","previous_headings":"","what":"fitGrowth 3","title":"Intermediate Growth Modeling with `pcvr`","text":"Additional arguments can passed fitGrowth used follows:","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthplot","dir":"Articles","previous_headings":"","what":"growthPlot","title":"Intermediate Growth Modeling with `pcvr`","text":"Models fit fitGrowth can visualized using growthPlot.","code":"p_nls <- growthPlot(nls_fit, form = nls_ss$pcvrForm, df = nls_ss$df) p_nlrq <- growthPlot(nlrq_fit, form = nlrq_ss$pcvrForm, df = nlrq_ss$df) p_nlme <- growthPlot(nlme_fit, form = nlme_ss$pcvrForm, df = nlme_ss$df) p_mgcv <- growthPlot(mgcv_fit, form = mgcv_ss$pcvrForm, df = mgcv_ss$df) p_surv <- growthPlot(surv_fit, form = surv_ss$pcvrForm, df = surv_ss$df)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthplot---nls","dir":"Articles","previous_headings":"","what":"growthPlot - nls","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"p_nls"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthplot---nlrq","dir":"Articles","previous_headings":"","what":"growthPlot - nlrq","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"p_nlrq"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthplot---nlme","dir":"Articles","previous_headings":"","what":"growthPlot - nlme","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"p_nlme"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthplot---mgcv","dir":"Articles","previous_headings":"","what":"growthPlot - mgcv","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"p_mgcv"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"growthplot---surv","dir":"Articles","previous_headings":"","what":"growthPlot - surv","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"p_surv"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"hypothesis-testing","dir":"Articles","previous_headings":"","what":"Hypothesis Testing","title":"Intermediate Growth Modeling with `pcvr`","text":"Hypothesis testing frequentist non-linear growth models can somewhat limited. Broadly, testing implemented backends comparing models nested null models select backends non-linear testing available using testGrowth.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"testgrowth---nls","dir":"Articles","previous_headings":"","what":"testGrowth - nls","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"testGrowth(nls_ss, nls_fit, test = \"A\")$anova ## Analysis of Variance Table ##  ## Model 1: y ~ A/(1 + exp((B[group] - time)/C[group])) ## Model 2: y ~ A[group]/(1 + exp((B[group] - time)/C[group])) ##   Res.Df Res.Sum Sq Df Sum Sq F value    Pr(>F)     ## 1    995     259482                                 ## 2    994     235430  1  24052  101.55 < 2.2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"testgrowth---nls-2","dir":"Articles","previous_headings":"","what":"testGrowth - nls 2","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"testGrowth(nls_ss, nls_fit, test = list(   \"A1 - A2\",   \"B1 - (B2*1.25)\",   \"(C1+1) - C2\" )) ##             Form   Estimate        SE   t-value      p-value ## 1        A1 - A2 30.9620463 2.8416998 10.895608 3.418664e-26 ## 2 B1 - (B2*1.25) -1.1834444 0.2181014  5.426121 7.235593e-08 ## 3    (C1+1) - C2  0.5657608 0.1487875  3.802476 1.519847e-04"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"testgrowth---nlrq","dir":"Articles","previous_headings":"","what":"testGrowth - nlrq","title":"Intermediate Growth Modeling with `pcvr`","text":"print comparison model 49th percentile, taus returned.","code":"testGrowth(nlrq_ss, nlrq_fit, test = \"A\")[[13]] ## Model 1: y ~ A[group]/(1 + exp((B[group] - time)/C[group])) ## Model 2: y ~ A/(1 + exp((B[group] - time)/C[group])) ##   #Df  LogLik Df  Chisq Pr(>Chisq)     ## 1   6 -4177.2                          ## 2   5 -4228.7 -1 103.02  < 2.2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"testgrowth---nlme","dir":"Articles","previous_headings":"","what":"testGrowth - nlme","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"testGrowth(nlme_ss, nlme_fit, test = \"A\")$anova ##         Model df      AIC      BIC    logLik   Test  L.Ratio p-value ## nullMod     1 13 5345.185 5408.986 -2659.593                         ## fit         2 16 5336.665 5415.189 -2652.333 1 vs 2 14.52005  0.0023"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"testgrowth---nlme-2","dir":"Articles","previous_headings":"","what":"testGrowth - nlme 2","title":"Intermediate Growth Modeling with `pcvr`","text":"","code":"testGrowth(nls_ss, nlme_fit, test = list(   \"A.groupa - A.groupb\",   \"B.groupa - (B.groupb*1.25)\",   \"(C.groupa+1) - C.groupa\" )) ##                         Form  Estimate        SE  Z-value      p-value ## 1        A.groupa - A.groupb 31.406942 4.3866581 7.159651 8.088266e-13 ## 2 B.groupa - (B.groupb*1.25) -1.143088 0.2559811 4.465516 7.987592e-06 ## 3    (C.groupa+1) - C.groupa  1.000000 0.0000000      Inf 0.000000e+00"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"testgrowth---mgcv","dir":"Articles","previous_headings":"","what":"testGrowth - mgcv","title":"Intermediate Growth Modeling with `pcvr`","text":"Due GAMs nature test parameters individually.","code":"testGrowth(mgcv_ss, mgcv_fit)$anova ## Analysis of Deviance Table ##  ## Model 1: y ~ s(time) ## Model 2: y ~ 0 + group + s(time, by = group) ##   Resid. Df Resid. Dev     Df Deviance      F    Pr(>F)     ## 1    992.49     315705                                      ## 2    985.48     236017 7.0101    79688 47.572 < 2.2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"testgrowth---surv","dir":"Articles","previous_headings":"","what":"testGrowth - surv","title":"Intermediate Growth Modeling with `pcvr`","text":"flexsurv backend provides flexibility, standard survreg models tested using survival::survdiff","code":"testGrowth(surv_ss, surv_fit) ## Call: ## survival::survdiff(formula = ss$formula, data = ss$df) ##  ##          N Observed Expected (O-E)^2/E (O-E)^2/V ## group=a 20       20     20.7    0.0270    0.0939 ## group=b 20       20     19.3    0.0291    0.0939 ##  ##  Chisq= 0.1  on 1 degrees of freedom, p= 0.8"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"final-considerations","dir":"Articles","previous_headings":"","what":"Final Considerations","title":"Intermediate Growth Modeling with `pcvr`","text":"Pick model builders parameterizations based needs Use GAMs sparingly, present interpretability problems compared parameterized models. Consider biology behind observed data picking growth model.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_igm.html","id":"resources","dir":"Articles","previous_headings":"","what":"Resources","title":"Intermediate Growth Modeling with `pcvr`","text":"run novel situation please reach try come solution add pcvr possible. Good ways reach help-datascience slack channel pcvr github repository.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"outline","dir":"Articles","previous_headings":"","what":"Outline","title":"Multi Value Trait Analysis with `pcvr`","text":"pcvr Goals Load Package multi value traits? Multi value trait format Functions multi-value trait analysis pcv.joyplot pcv.emd pcv.net conjugate Resources","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"pcvr-goals","dir":"Articles","previous_headings":"","what":"pcvr Goals","title":"Multi Value Trait Analysis with `pcvr`","text":"Currently pcvr aims : Make common tasks easier consistent Make select Bayesian statistics easier room goals evolve based feedback scientific needs.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"load-package","dir":"Articles","previous_headings":"","what":"Load package","title":"Multi Value Trait Analysis with `pcvr`","text":"Pre-work install R, Rstudio, pcvr dependencies.","code":"library(pcvr) library(ggplot2) library(patchwork)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"what-are-multi-value-traits","dir":"Articles","previous_headings":"","what":"What are multi-value traits?","title":"Multi Value Trait Analysis with `pcvr`","text":"Sometimes single value describe phenotype adequately. segmentation easily shows area, height, numeric phenotypes. describe color plant need complex phenotype. many ways describe color, many wavelengths measure color , many indices can calculated wavelengths. Since pixel color describe entire image using histogram values","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"multi-value-trait-format","dir":"Articles","previous_headings":"","what":"Multi value trait format","title":"Multi Value Trait Analysis with `pcvr`","text":"PlantCV returns multi-value traits histograms long format pcvr can choose read multi value traits wide format mode=\"wide\" read.pcv. Note output older versions PlantCV sort functionality may helpful, versions PlantCV 4 make obsolescent. Either option work pcvr functions.","code":"structure(list(sample = c(   \"default\", \"default\", \"default\", \"default\",   \"default\", \"default\", \"default\", \"default\", \"default\", \"default\",   \"default\", \"default\", \"default\", \"default\", \"default\" ), trait = c(   \"hue_frequencies\",   \"hue_frequencies\", \"hue_frequencies\", \"hue_frequencies\", \"hue_frequencies\",   \"hue_frequencies\", \"hue_frequencies\", \"hue_frequencies\", \"hue_frequencies\",   \"hue_frequencies\", \"hue_frequencies\", \"hue_frequencies\", \"hue_frequencies\",   \"hue_frequencies\", \"hue_frequencies\" ), value = c(   0.805186656906828,   1.04569695702186, 1.19906584405173, 1.76025654432012, 2.43647390986092,   3.29220258635714, 4.97926034368573, 6.07201366377357, 8.33071909094078,   8.61131444107498, 8.26100596047266, 7.65624455366168, 6.45543588134825,   5.53347973090732, 5.05245913067726 ), label = c(   81L, 83L, 85L,   87L, 89L, 91L, 93L, 95L, 97L, 99L, 101L, 103L, 105L, 107L, 109L )), row.names = 3641:3655, class = \"data.frame\") ##       sample           trait     value label ## 3641 default hue_frequencies 0.8051867    81 ## 3642 default hue_frequencies 1.0456970    83 ## 3643 default hue_frequencies 1.1990658    85 ## 3644 default hue_frequencies 1.7602565    87 ## 3645 default hue_frequencies 2.4364739    89 ## 3646 default hue_frequencies 3.2922026    91 ## 3647 default hue_frequencies 4.9792603    93 ## 3648 default hue_frequencies 6.0720137    95 ## 3649 default hue_frequencies 8.3307191    97 ## 3650 default hue_frequencies 8.6113144    99 ## 3651 default hue_frequencies 8.2610060   101 ## 3652 default hue_frequencies 7.6562446   103 ## 3653 default hue_frequencies 6.4554359   105 ## 3654 default hue_frequencies 5.5334797   107 ## 3655 default hue_frequencies 5.0524591   109 structure(list(hue_frequencies.45 = c(   0.0154487872701993, 0,   0, 0, 0 ), hue_frequencies.47 = c(   0, 0, 0, 0.0749063670411985,   0 ), hue_frequencies.49 = c(   0.0308975745403986, 0.37593984962406,   0.0774593338497289, 0, 0 ), hue_frequencies.51 = c(   0, 0, 0, 0,   0.0657894736842105 )), row.names = 100:104, class = \"data.frame\") ##     hue_frequencies.45 hue_frequencies.47 hue_frequencies.49 hue_frequencies.51 ## 100         0.01544879         0.00000000         0.03089757         0.00000000 ## 101         0.00000000         0.00000000         0.37593985         0.00000000 ## 102         0.00000000         0.00000000         0.07745933         0.00000000 ## 103         0.00000000         0.07490637         0.00000000         0.00000000 ## 104         0.00000000         0.00000000         0.00000000         0.06578947"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"functions-for-multi-value-trait-analysis","dir":"Articles","previous_headings":"","what":"Functions for multi-value trait analysis","title":"Multi Value Trait Analysis with `pcvr`","text":"pcv.joyplot pcv.emd pcv.net conjugate","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"simulated-data","dir":"Articles","previous_headings":"","what":"Simulated data","title":"Multi Value Trait Analysis with `pcvr`","text":"simulate wide data, lengthen plotting.","code":"set.seed(123) simFreqs <- function(vec, group) {   s1 <- hist(vec, breaks = seq(1, 181, 1), plot = FALSE)$counts   s1d <- as.data.frame(cbind(data.frame(group), matrix(s1, nrow = 1)))   colnames(s1d) <- c(\"group\", paste0(\"sim_\", 1:180))   return(s1d) } sim_df <- rbind(   do.call(rbind, lapply(1:10, function(i) {     sf <- simFreqs(rnorm(200, 70, 10), group = \"normal\")     return(sf)   })),   do.call(rbind, lapply(1:10, function(i) {     sf <- simFreqs(rlnorm(200, log(30), 0.35), group = \"lognormal\")     return(sf)   })),   do.call(rbind, lapply(1:10, function(i) {     sf <- simFreqs(c(rlnorm(125, log(15), 0.25), rnorm(75, 75, 5)), group = \"bimodal\")     return(sf)   })),   do.call(rbind, lapply(1:10, function(i) {     sf <- simFreqs(c(rlnorm(80, log(20), 0.3), rnorm(70, 70, 10),                      rnorm(50, 120, 5)), group = \"trimodal\")     return(sf)   })),   do.call(rbind, lapply(1:10, function(i) {     sf <- simFreqs(runif(200, 1, 180), group = \"uniform\")     return(sf)   })) ) sim_df_long <- as.data.frame(data.table::melt(data.table::as.data.table(sim_df), id.vars = \"group\")) sim_df_long$bin <- as.numeric(sub(\"sim_\", \"\", sim_df_long$variable))  sim_plot <- ggplot(sim_df_long, aes(x = bin, y = value, fill = group), alpha = 0.25) +   geom_col(position = \"identity\", show.legend = FALSE) +   pcv_theme() +   labs(x = \"Color Histogram Bin\") +   theme(axis.title.y = element_blank()) +   facet_wrap(~group) sim_plot"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"pcv-joyplot","dir":"Articles","previous_headings":"","what":"pcv.joyplot","title":"Multi Value Trait Analysis with `pcvr`","text":"can make joyplots using pcv.joyplot  plot output ggplot object can change match needs. show distributions hues.","code":"(p <- pcv.joyplot(sim_df, index = \"sim\", group = c(\"group\"))) p + scale_fill_gradientn(colors = scales::hue_pal(l = 55)(360)) ## Scale for fill is already present. ## Adding another scale for fill, which will replace the existing scale."},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"pcv-emd","dir":"Articles","previous_headings":"","what":"pcv.emd","title":"Multi Value Trait Analysis with `pcvr`","text":"Sometimes multi-value trait histograms follow unimodal distribution, aspects kind test use unclear. situations one option use earth mover’s distance.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"earth-movers-distance","dir":"Articles","previous_headings":"","what":"Earth Mover’s Distance","title":"Multi Value Trait Analysis with `pcvr`","text":"EMD measures amount work needed change one histogram another. EMD can used quantify difference color histograms. EMD 0.01 since 1 count move 1 space 100 total observations:  use wide data (although long can also used). “reorder” argument specifies groups arrange together resulting plot plot=TRUE. mat=TRUE distance matrix returned, otherwise long dataframe returned. details see ?pcv.emd","code":"set.seed(123) df <- data.frame(x = round(runif(101, 1, 10)), y = c(rep(\"original\", 99), \"old\", \"new\")) df[100:101, \"x\"] <- c(5, 6) p1 <- ggplot(df[df$y != \"new\", ], aes(x = x)) +   geom_histogram(binwidth = 1, color = \"white\") +   scale_x_continuous(breaks = c(1:10)) +   scale_y_continuous(limits = c(0, 15)) +   labs(title = \"Sample 1\", y = \"Counts\", x = \"Bin\") +   pcv_theme()  p2 <- ggplot(df[df$y == \"original\", ], aes(x = x)) +   geom_histogram(binwidth = 1, color = \"white\") +   scale_x_continuous(breaks = c(1:10)) +   scale_y_continuous(limits = c(0, 15)) +   geom_rect(     data = data.frame(x = 1), aes(xmin = 4.5, xmax = 5.5, ymin = 14, ymax = 15),     fill = \"blue\", color = \"white\", alpha = 0.25   ) +   geom_rect(     data = data.frame(x = 1), aes(xmin = 5.5, xmax = 6.5, ymin = 6, ymax = 7),     fill = \"red\", color = \"white\", alpha = 1   ) +   labs(title = \"Sample 2\") +   labs(x = \"Bin\") +   pcv_theme() +   theme(     axis.line.y.left = element_blank(),     axis.title.y = element_blank(),     axis.text.y = element_blank()   )  p1 + p2 sim_emd <- pcv.emd(   df = sim_df, cols = \"sim_\", reorder = c(\"group\"),   mat = FALSE, plot = TRUE, parallel = 1, raiseError = FALSE )"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"pcv-emd-1","dir":"Articles","previous_headings":"","what":"pcv.emd","title":"Multi Value Trait Analysis with `pcvr`","text":"Looking plot can see obvious differences groups data.","code":"sim_emd$plot"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"pcv-net","dir":"Articles","previous_headings":"","what":"pcv.net","title":"Multi Value Trait Analysis with `pcvr`","text":"non-matrix pcv.emd output can make network better understand color similarities data. include numeric filter removes edges EMD value. Note default behavior changes EMD distance dissimilarity.","code":"set.seed(123) n <- pcv.net(sim_emd$data, filter = 0.5) lapply(n, class) ## $nodes ## [1] \"data.frame\" ##  ## $edges ## [1] \"data.frame\" ##  ## $graph ## [1] \"igraph\""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"net-plot","dir":"Articles","previous_headings":"","what":"net.plot","title":"Multi Value Trait Analysis with `pcvr`","text":"Now can visualize network using net.plot. results show clear clustering highlight uniform distribution dissimilar others since excluded entirely. can make another network include .  specify filter character, interpreted quantile keeping edges median strength. Now can see full layout five distributions.","code":"net1 <- net.plot(n, fill = \"group\") +   labs(color = \"\", title = \"Network 1\") +   theme(plot.title = element_text(hjust = 0.5)) +   scale_color_discrete(limits = c(     \"bimodal\", \"lognormal\", \"normal\",     \"trimodal\", \"uniform\"   )) net1 set.seed(123) n <- pcv.net(sim_emd$data, filter = \"0.5\") net2 <- net.plot(n, fill = \"group\") +   labs(color = \"\", title = \"Network 2\") +   theme(     plot.title = element_text(hjust = 0.5),     legend.position = \"bottom\"   ) net2"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"conjugate","dir":"Articles","previous_headings":"","what":"conjugate","title":"Multi Value Trait Analysis with `pcvr`","text":"Sometimes distributions follow parameterized distribution case robust comparisons possible. conjugate function can compare “t” (gaussian means), “gaussian”, “beta”, “lognormal”, “dirichlet”, “dirichlet2” distributions multi-value traits.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"conjugate-1","dir":"Articles","previous_headings":"","what":"conjugate","title":"Multi Value Trait Analysis with `pcvr`","text":"Multi-value traits can provided conjugate matrices. subset data two samples.","code":"s1 <- sim_df[sim_df$group == \"normal\", grepl(\"sim\", colnames(sim_df))] s2 <- sim_df[sim_df$group == \"lognormal\", grepl(\"sim\", colnames(sim_df))]"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"conjugate-2","dir":"Articles","previous_headings":"","what":"conjugate","title":"Multi Value Trait Analysis with `pcvr`","text":"Now can run conjugate samples. use assume lognormal distribution.  can also perform region practical equivalence tests specifying rope_range.","code":"res <- conjugate(s1, s2,   method = \"lognormal\",   priors = list(mu = 10, sd = 5),   rope_range = NULL, rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\" ) res ## Normal distributed Mu parameter of Lognormal distributed data. ##  ## Sample 1 Prior Normal(mu = 10, sd = 5) ##  Posterior Normal(mu = 4.141, sd = 0.701, lognormal_sigma = 0.143) ## Sample 2 Prior Normal(mu = 10, sd = 5) ##  Posterior Normal(mu = 3.168, sd = 0.778, lognormal_sigma = 0.346) ##  ## Posterior probability that S1 is equal to S2 = 50.909% ##  ##      HDE_1 HDI_1_low HDI_1_high   HDE_2 HDI_2_low HDI_2_high   hyp post.prob ## 1 4.140941  3.021195   5.260687 3.16762  1.924214   4.411025 equal 0.5090941 plot(res) res <- conjugate(s1, s2,   method = \"lognormal\",   priors = list(mu = 10, sd = 5),   rope_range = c(-10, 10), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\" ) res ## Normal distributed Mu parameter of Lognormal distributed data. ##  ## Sample 1 Prior Normal(mu = 10, sd = 5) ##  Posterior Normal(mu = 4.141, sd = 0.701, lognormal_sigma = 0.143) ## Sample 2 Prior Normal(mu = 10, sd = 5) ##  Posterior Normal(mu = 3.168, sd = 0.778, lognormal_sigma = 0.346) ##  ## Posterior probability that S1 is equal to S2 = 50.909% ##  ## Probability of the difference between Mu parameters being within [-10:10] using a 89% Credible Interval is 100% with an average difference of 0.974 ##  ##  ##      HDE_1 HDI_1_low HDI_1_high   HDE_2 HDI_2_low HDI_2_high   hyp post.prob ## 1 4.140941  3.021195   5.260687 3.16762  1.924214   4.411025 equal 0.5090941 ##    HDE_rope HDI_rope_low HDI_rope_high rope_prob ## 1 0.9738328   -0.6765613      2.694569         1 plot(res)"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"conjugate-3","dir":"Articles","previous_headings":"","what":"conjugate","title":"Multi Value Trait Analysis with `pcvr`","text":"results also returned summary data.frame.","code":"res$summary[, -c(1:6)] ##     hyp post.prob  HDE_rope HDI_rope_low HDI_rope_high rope_prob ## 1 equal 0.5090941 0.9738328   -0.6765613      2.694569         1"},{"path":"https://danforthcenter.github.io/pcvr/articles/pcvrTutorial_mvt.html","id":"resources","dir":"Articles","previous_headings":"","what":"Resources","title":"Multi Value Trait Analysis with `pcvr`","text":"run novel situation please reach try come solution add pcvr possible. Good ways reach help-datascience slack channel pcvr github repository.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/reading_pcv_data.html","id":"example-bellwether-lemnatech-workflow","dir":"Articles","previous_headings":"","what":"Example Bellwether (Lemnatech) Workflow","title":"Considerations when using `PlantCV` data in `pcvr`","text":"Bellwether phenotyping facility Donald Danforth Plant Science Center allows high throughput image based phenotyping 1140 plants course several weeks. generates massive amount image data typically analysed using plantCV, python based image analysis tool developed maintained Data Science Core Facility DDPSC. plantCV output Bellwether experiment consists numeric phenotypes commonly broken two categories, single value traits multi value traits. Single value traits phenotypes one image yields one value, things like plant height plant area. Multi value traits require multiple numbers describe single image currently limited color histograms various color spaces. focus hue channel HSV color, lots options data. package developed help common analysis tasks arise using plantCV output. goal experiment seems unsupported please consider raising issue github can know directions take development future.","code":"library(pcvr) library(ggplot2) library(data.table)"},{"path":"https://danforthcenter.github.io/pcvr/articles/reading_pcv_data.html","id":"read-in-data","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow","what":"Read In Data","title":"Considerations when using `PlantCV` data in `pcvr`","text":"tutorial just shows common things check reading PlantCV output, particularly lemnatech style phenotyping experiments.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/reading_pcv_data.html","id":"read-pcv","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Read In Data","what":"read.pcv","title":"Considerations when using `PlantCV` data in `pcvr`","text":"Bellwether data can large vignette use small bellwether dataset already subset remove multi-value traits (color histograms). single value data multi value data available github. single value traits read wide format compelling reason use read.pcv place directly calling fread read.csv. benefits read.pcv shown need filter data outside R want use data different format stored (wide going long vice versa). single value traits can read read.pcv, using data.table::fread speed. generally want join metadata phenotypes parse metadata barcodes. Metadata key files generally look used like : key file parse barcodes something like : ’ll also convert phenotypes pixel units meaningful units. know chips color card 1.2cm side, can use following conversion. can convert phenotypes whatever units like, need know size color card chips real unit color correct plantCV color chip measurements returned.","code":"base_url <- \"https://raw.githubusercontent.com/joshqsumner/pcvrTestData/main/\" base_url2 <- \"https://media.githubusercontent.com/media/joshqsumner/pcvrTestData/main/\" sv <- read.pcv(   filepath = paste0(base_url, \"pcv4-single-value-traits.csv\"),   reader = \"fread\" ) key <- read.csv(paste0(base_url, \"smallPhenotyperRun_key.csv\")) head(key) ##          barcode genotype fertilizer ## 1 Em004ZDB130826       MM         50 ## 2 Em002ZDC130783      B73          0 ## 3 Em002ZDC130771      B73          0 ## 4 Em005ZDC130867     Mo17          0 ## 5 Em005ZDA130872     Mo17        100 ## 6 Em005ZDC130864     Mo17          0 sv <- merge(sv, key, by = \"barcode\") table(sv$genotype, sv$fertilizer) ##         ##           0  50 100 ##   B73   193 133 241 ##   MM    255 208 292 ##   Mo17  364 221 304 ##   W605S 182 168 263 genotype <- substr(sv$barcode, 3, 5) genotype <- ifelse(genotype == \"002\", \"B73\",   ifelse(genotype == \"003\", \"W605S\",     ifelse(genotype == \"004\", \"MM\", \"Mo17\")   ) ) fertilizer <- substr(sv$barcode, 8, 8) fertilizer <- ifelse(fertilizer == \"A\", 100,   ifelse(fertilizer == \"B\", 50, 0) ) table(genotype, fertilizer) ##         fertilizer ## genotype   0  50 100 ##    B73   193 133 241 ##    MM    255 208 292 ##    Mo17  364 221 304 ##    W605S 182 168 263 chip_size_px <- mean(c(sv$median_color_chip_height_median, sv$median_color_chip_width_median)) # ~52  px_per_cm <- chip_size_px / 1.2 # ~ 43.5 pixels_per_cmsq <- px_per_cm^2 # ~ 1890  sv$area_cm2 <- sv$area_pixels / pixels_per_cmsq sv$height_cm <- sv$height_pixels / px_per_cm"},{"path":"https://danforthcenter.github.io/pcvr/articles/reading_pcv_data.html","id":"very-large-datasets","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Read In Data","what":"Very large datasets","title":"Considerations when using `PlantCV` data in `pcvr`","text":"Sometimes large plantCV output may large read memory R. case read.pcv filter argument filter rows using awk linux/unix outside R. feature work shown read single value traits memory. can take minutes allows entirely workflow documented one R file.","code":"example <- read.pcv(\"prohibitivelyLargeFile.csv\",   filters = list(     \"trait in area_pixels, area_above_reference_pixels, area_below_reference_pixels\",     \"sample in default\"   ) )"},{"path":"https://danforthcenter.github.io/pcvr/articles/reading_pcv_data.html","id":"read-pcv-4-x","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Read In Data","what":"read.pcv.4.x","title":"Considerations when using `PlantCV` data in `pcvr`","text":"release PlantCV version 4 several widely used branches PlantCV output results single long format csv file. original goal read.pcv make easier work files. Now default output changed read.pcv function somewhat simplified can still used “PlantCV 4.x” legacy style data.","code":"sv <- read.pcv(paste0(base_url2, \"smallPhenotyperRun.csv\"),   mode = \"wide\",   reader = \"fread\" )  if (TRUE) { # we can parse barcodes for the metadata that we need   sv$genotype <- substr(sv$barcode, 3, 5)   sv$genotype <- ifelse(sv$genotype == \"002\", \"B73\",     ifelse(sv$genotype == \"003\", \"W605S\",       ifelse(sv$genotype == \"004\", \"MM\", \"Mo17\")     )   )   sv$fertilizer <- substr(sv$barcode, 8, 8)   sv$fertilizer <- ifelse(sv$fertilizer == \"A\", \"100\",     ifelse(sv$fertilizer == \"B\", \"50\", \"0\")   ) } else { # or we might use a key file and join it to our data   key <- read.csv(paste0(base_url, \"smallPhenotyperRun_key.csv\"))   sv <- merge(sv, key, by = \"barcode\") }"},{"path":"https://danforthcenter.github.io/pcvr/articles/reading_pcv_data.html","id":"read-pcv-3","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Read In Data","what":"read.pcv.3","title":"Considerations when using `PlantCV` data in `pcvr`","text":"Legacy Bellwether data (plantCV version 3 output) can also read read.pcv.3 wrapper around read.pcv attempts several common tasks related bellwether data joining internally. considered experimental based plantCV version 3 earlier outputs/bellwether experiments can take many formats considered datasets. older plantCV output data already wider format default mode “long”. Note read.pcv works fine older data still added benefits reasons use place data.table::fread base::read.csv less compelling. examples reading various amounts plantCV 3 bellwether data. final example also list conversion take area pixels cm2\\text{cm}^2 5MP camera used prior 2023. Note conversion change different camera current 18MP camera. good idea check color chip sizes sure appropriate conversion.","code":"onlyPhenos <- read.pcv.3(file = paste0(base_url, \"pcv3Phenos.csv\"), metaCol = NULL) colnames(onlyPhenos)  phenosAndMeta <- read.pcv.3(   file = paste0(base_url, \"pcv3Phenos.csv\"), metaCol = \"meta\",   metaForm = \"vis_view_angle_zoom_horizontal_gain_exposure_v_new_n_rep\",   joinSnapshot = \"id\" ) colnames(phenosAndMeta)  all <- read.pcv.3(   file = paste0(base_url, \"pcv3Phenos.csv\"),   snapshotFile = paste0(base_url, \"pcv3Snapshot.csv\"),   designFile = paste0(base_url, \"pcv3Design.csv\"),   metaCol = \"meta\", metaForm = \"vis_view_angle_zoom_horizontal_gain_exposure_v_new_n_rep\",   joinSnapshot = \"id\", conversions = list(area = 13.2 * 3.7 / 46856) ) colnames(all)"},{"path":"https://danforthcenter.github.io/pcvr/articles/reading_pcv_data.html","id":"other-metadata","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Read In Data","what":"Other metadata","title":"Considerations when using `PlantCV` data in `pcvr`","text":"Often want convert timestamp data lemnatech either days start (DAS), days planting (DAP), days emergence (DAE). default bw.time function add columns called DAS, DAP, DAE data. Days emergence requires using phenotype value classify emergence. area greater 10 pixels considered emerged plant. example planting delay 0 DAP DAE , still created purpose example.    Note plots, particularly clearly DAE plot, lots plants show vertical line last day, indicating grouping might incorrect. data due imaging schedule changing getting 2 separate images rotation last day. moving ’ll also check grouping data. see lots plants one image per day. can combine images taken different angles plant given day aggregate, also remove columns aren’t using. case use mean observations, people prefer sum. Either way fine. also remove DAE DAP columns since using .","code":"out <- bw.time(sv,   plantingDelay = 0, phenotype = \"area_pixels\", cutoff = 10,   timeCol = \"timestamp\", group = c(\"barcode\", \"rotation\"), plot = TRUE ) out$plot ## [[1]] ##  ## [[2]] ##  ## [[3]] sv <- out$data dim(sv) ## [1] 2824   52 checkGroups(sv, c(\"DAS\", \"barcode\", \"rotation\", \"genotype\", \"fertilizer\")) ## Grouping is unique phenotypes <- colnames(sv)[c(19:35, 43:45, 48:49)] phenoForm <- paste0(\"cbind(\", paste0(phenotypes, collapse = \", \"), \")\") groupForm <- \"DAS+timestamp+barcode+genotype+fertilizer\" form <- as.formula(paste0(phenoForm, \"~\", groupForm)) sv_ag_with_outliers <- aggregate(form, data = sv, mean, na.rm = TRUE) dim(sv_ag_with_outliers) ## [1] 1450   27"},{"path":"https://danforthcenter.github.io/pcvr/articles/reading_pcv_data.html","id":"outlier-removal","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Read In Data","what":"Outlier Removal","title":"Considerations when using `PlantCV` data in `pcvr`","text":"bw.outliers function can used remove outliers relative phenotype using cook’s distance. due experimental design plants germinate machine around 1 percent data removed outliers. plot shows removed data points red, although hard see.  also useful check grouping assumptions , see plants multiple images single day.","code":"out <- bw.outliers(   df = sv_ag_with_outliers, phenotype = \"area_pixels\",   group = c(\"DAS\", \"genotype\", \"fertilizer\"), plotgroup = c(\"barcode\") ) ## Warning in bw.outliers(df = sv_ag_with_outliers, phenotype = \"area_pixels\", : ## 16 groupings had all observations removed sv_ag <- out$data out$plot dim(sv_ag) ## [1] 1327   27 checkGroups(sv_ag, c(\"DAS\", \"barcode\", \"genotype\", \"fertilizer\")) ## Grouping is unique"},{"path":"https://danforthcenter.github.io/pcvr/articles/reading_pcv_data.html","id":"watering-data","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow > Read In Data","what":"Watering Data","title":"Considerations when using `PlantCV` data in `pcvr`","text":"might also want check watering data, can read easily json bw.water.  common use watering data look water use efficiency (WUE). can calculate approximation WUE based change phenotype (area) change weight waterings. Note plants example young data example dominated noise.","code":"water <- bw.water(paste0(base_url, \"metadata.json\")) ## Using the first watering time, 2023-04-13 23:28:17.58, as beginning of experiment to assign DAS water$genotype <- substr(water$barcode, 3, 5) water$genotype <- ifelse(water$genotype == \"002\", \"B73\",   ifelse(water$genotype == \"003\", \"W605S\",     ifelse(water$genotype == \"004\", \"MM\", \"Mo17\")   ) ) water$fertilizer <- substr(water$barcode, 8, 8) water$fertilizer <- ifelse(water$fertilizer == \"A\", \"100\",   ifelse(water$fertilizer == \"B\", \"50\", \"0\") )  ggplot(water[water$weight_after != -1, ], aes(   x = DAS,   y = water_amount, group = barcode, color = genotype )) +   facet_wrap(~ factor(fertilizer, levels = c(\"0\", \"50\", \"100\"))) +   geom_line() +   pcv_theme() +   guides(color = guide_legend(title = \"Condition\", override.aes = list(linewidth = 5))) +   labs(y = \"Watering Amount (g)\") +   theme(legend.position = \"bottom\") test <- pwue(df = sv_ag, w = water, pheno = \"area_pixels\", time = \"timestamp\", id = \"barcode\")  ggplot(test, aes(x = DAS, y = pWUE, color = genotype, group = barcode)) +   geom_line() +   guides(color = guide_legend(override.aes = list(linewidth = 5))) +   labs(y = expression(\"Pseudo WUE (\" ~ frac(     Delta ~ textstyle(\"Area\")[\" pixels\"],     Delta ~ textstyle(\"Weight\")[\" g\"]   ) ~ \")\")) +   pcv_theme() ## Warning: Removed 86 rows containing missing values or values outside the scale range ## (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/articles/reading_pcv_data.html","id":"multi-value-traits","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow","what":"Multi Value Traits","title":"Considerations when using `PlantCV` data in `pcvr`","text":"take similar steps working multi-value trait data.","code":"hue_wide <- read.pcv(paste0(base_url2, \"pcv4-multi-value-traits.csv\"),   mode = \"wide\", reader = \"fread\" ) hue_wide$genotype <- substr(hue_wide$barcode, 3, 5) hue_wide$genotype <- ifelse(hue_wide$genotype == \"002\", \"B73\",   ifelse(hue_wide$genotype == \"003\", \"W605S\",     ifelse(hue_wide$genotype == \"004\", \"MM\", \"Mo17\")   ) ) hue_wide$fertilizer <- substr(hue_wide$barcode, 8, 8) hue_wide$fertilizer <- ifelse(hue_wide$fertilizer == \"A\", \"100\",   ifelse(hue_wide$fertilizer == \"B\", \"50\", \"0\") ) hue_wide <- bw.time(hue_wide, timeCol = \"timestamp\", group = \"barcode\", plot = FALSE)  phenotypes <- colnames(hue_wide)[grepl(\"hue_frequencies\", colnames(hue_wide))] phenoForm <- paste0(\"cbind(\", paste0(phenotypes, collapse = \", \"), \")\") groupForm <- \"DAS+barcode+genotype+fertilizer\" form <- as.formula(paste0(phenoForm, \"~\", groupForm)) hue_wide <- aggregate(form, data = hue_wide, mean, na.rm = TRUE)"},{"path":"https://danforthcenter.github.io/pcvr/articles/reading_pcv_data.html","id":"conclusion","dir":"Articles","previous_headings":"Example Bellwether (Lemnatech) Workflow","what":"Conclusion","title":"Considerations when using `PlantCV` data in `pcvr`","text":"data can used way simulated data Bellwether vignette. Bellwether vignette originally used data, combatibility CRAN standards now uses lighter simulated data rather data hosted online. See vignettes/articles notes analysis.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/roots.html","id":"root-imaging-data","dir":"Articles","previous_headings":"","what":"Root imaging data","title":"Root Traits","text":"Root imaging emerging application PlantCV. Due nature available technologies root imaging output tends noisy different set phenotypes may interesting researchers. Fundamentally analysis similar phenotypes, interest providing example root-focused researchers go options root data output PlantCV. vignette work simulated data based mini rhyzotron data collected Fischer farms Fall 2023.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/roots.html","id":"simulating-minirhyzotron-data","dir":"Articles","previous_headings":"","what":"Simulating Minirhyzotron data","title":"Root Traits","text":"data simulated mixture Uniform background distribution N gaussian distributions N follows uniform distribution gaussian parameterized mu sigma. Mu also follows uniform distribution sigma follows half-normal distribution. Pixels assigned background gaussian mixture component according theta. Pixels assigned gaussian mixture randomly assigned N gaussian distributions. See rRhyzoDist function . also define functions generate single value traits MV frequencies. simulated data looks realistic based limited test data available time writing.  rest vignette use simulated data. first simulated data df assumes roots can appear disappear minirhyzotron images time. second simulated data assumes root seen along minirhyzotron stay visible.","code":"rRhyzoDist <- function(n, theta = 0.3, u1_max = 20, u2_max = 5500, sd = 200, abs_max = 5500) {   #* split n_pixels based on theta into background and gaussians   n_unif_pixels <- ceiling(n * theta)   n_gauss_pixels <- floor(n * (1 - theta))   #* background is uniform   background <- runif(n_unif_pixels, 0, u2_max)   #* simulate a number of gaussians randomly between 1 and u1_max   n_gaussians <- runif(1, 1, u1_max)   #* each gaussian has a mean that is uniform between 1 and u2_max   mu_is <- lapply(seq_len(n_gaussians), function(i) {     return(runif(1, 1, u2_max))   })   #* each gaussian has a sigma that is half-normal based on sd   sd_is <- lapply(seq_len(n_gaussians), function(i) {     return(extraDistr::rhnorm(1, sd))   })   #* assign pixels randomly to gaussians   index <- sample(seq_len(n_gaussians), size = n_gauss_pixels, replace = TRUE)   px_is <- lapply(seq_len(n_gaussians), function(i) {     return(sum(index == i))   })   #* draws n_pixels time from each gaussian   d <- unlist(lapply(seq_len(n_gaussians), function(i) {     return(rnorm(px_is[[i]], mu_is[[i]], sd_is[[i]]))   }))   #* combine data   d <- c(d, background)   #* make sure no gaussians return data out of bounds   d[d < 0] <- runif(sum(d < 0), 0, abs_max)   d[d >= abs_max] <- runif(sum(d >= abs_max), 0, abs_max)   return(d) } lastNonZeroBin <- function(d) {   return(max(d[d$value > 0, \"label\"])) } tubeAngleToDepth <- function(x, theta) {   return(sin(theta) * x) } mv_mean <- function(d) {   return(weighted.mean(d$label, d$value)) } mv_median <- function(d) {   return(median(rep(d$label, d$value))) } mv_std <- function(d) {   return(sd(rep(d$label, d$value))) } sv_from_mv <- function(df, theta) { # note this should also return mean/median/std   metaCols <- colnames(df)[-which(grepl(\"value|label|trait\", colnames(df)))]   out <- aggregate(     as.formula(paste0(       \"value ~ \",       paste(metaCols, collapse = \"+\")     )),     data = df, sum, na.rm = TRUE   )   colnames(out)[ncol(out)] <- \"area\"   out$max_pixel <- unlist(lapply(split(df, interaction(df[, metaCols])), lastNonZeroBin))   out$height <- tubeAngleToDepth(out$max_pixel, 0.35)   out$mean_x_frequencies <- unlist(lapply(split(df, interaction(df[, metaCols])), mv_mean))   out$median_x_frequencies <- unlist(lapply(split(df, interaction(df[, metaCols])), mv_median))   out$std_x_frequencies <- unlist(lapply(split(df, interaction(df[, metaCols])), mv_std))   return(out) } set.seed(123) ex <- do.call(rbind, lapply(1:20, function(rep) {   n_total_pixels <- runif(1, 100, 3000)   x <- rRhyzoDist(n = n_total_pixels)   h <- hist(x, plot = FALSE, breaks = seq(0, 5500, 20))   breaks <- h$breaks[-1]   counts <- h$counts   rep_df <- data.frame(     rep = as.character(rep),     value = counts, label = breaks,     trait = \"x_frequencies\"   )   return(rep_df) })) pcv.joyplot(ex, \"x_frequencies\", group = c(\"rep\")) n_times <- 5 parameters <- data.frame(   time = c(1:n_times),   n_min = rep(0, n_times),   n_max = seq(2000, 5500, length.out = n_times),   theta = rep(0.3, n_times),   u1_max = seq(10, 20, length.out = n_times),   u2_max = seq(2000, 5500, length.out = n_times),   u2_max_noise = seq(400, 200, length.out = n_times),   sd = seq(150, 250, length.out = n_times) ) set.seed(123) df <- do.call(rbind, lapply(seq_len(nrow(parameters)), function(time) {   pars <- parameters[parameters$time == time, ]   time_df <- do.call(rbind, lapply(1:10, function(rep) {     n_total_pixels <- runif(1, pars$n_min, pars$n_max)     u2_max_iter <- ceiling(rnorm(1, pars$u2_max, pars$u2_max_noise))     x <- rRhyzoDist(       n = n_total_pixels, theta = pars$theta,       u1_max = pars$u1_max,       u2_max = u2_max_iter, sd = pars$sd     )     h <- hist(x, plot = FALSE, breaks = seq(0, 5500, 20))     breaks <- h$breaks[-1]     counts <- h$counts     rep_df <- data.frame(       rep = as.character(rep),       time = as.character(time),       value = counts, label = breaks,       trait = \"x_frequencies\"     )     return(rep_df)   }))   return(time_df) })) df$rep <- factor(df$rep, levels = seq_along(unique(df$rep)), ordered = TRUE) sv <- sv_from_mv(df) n_times <- 5 parameters <- data.frame(   time = c(1:n_times),   n_min_new_px = rep(50, n_times),   n_max_new_px = seq(1000, 2500, length.out = n_times),   theta = rep(0.3, n_times),   u1_max = seq(10, 20, length.out = n_times),   mean_added_depth = seq(log(200), log(1200), length.out = n_times),   added_depth_noise = rep(0.1, n_times),   sd = seq(150, 250, length.out = n_times) ) set.seed(567) df2 <- do.call(rbind, lapply(1:10, function(rep) {   dList <- list()   add_area <- 2000   previous_max_depth <- 2000   d <- numeric(0)   for (time in seq_len(nrow(parameters))) {     pars <- parameters[parameters$time == time, ]     n_total_pixels <- add_area + runif(1, pars$n_min_new_px, pars$n_max_new_px)     max_depth <- ceiling(previous_max_depth + rlnorm(1, pars$mean_added_depth, pars$added_depth_noise))     x <- rRhyzoDist(       n = n_total_pixels, theta = pars$theta,       u1_max = pars$u1_max,       u2_max = max_depth, sd = pars$sd     )     d <- append(d, x)     h <- hist(d, plot = FALSE, breaks = seq(0, 5500, 20))     breaks <- h$breaks[-1]     counts <- h$counts     dList[[time]] <- data.frame(       rep = as.character(rep),       time = as.character(time),       value = counts, label = breaks,       trait = \"x_frequencies\"     )     add_area <- 0     previous_max_depth <- max_depth   }   return(do.call(rbind, dList)) })) df2$rep <- factor(df2$rep, levels = seq_along(unique(df2$rep)), ordered = TRUE) sv2 <- sv_from_mv(df2)"},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/articles/roots.html","id":"single-value-traits","dir":"Articles","previous_headings":"","what":"Single Value Traits","title":"Root Traits","text":"assume roots can enter minirhyzotron images expect positive trend time total root area.   also make sense mean distribution move deeper time roots time grow. likely true regardless whether roots can leave image.   true median, although robust outliers may move slowly.   Finally, depth (height returned PlantCV) increase datasets time strictly monotone roots can enter images.","code":"ggplot(sv, aes(x = time, y = area, group = rep)) +   geom_point() +   geom_line() +   labs(x = \"Sampling Time\", y = \"Area (px)\", title = \"Assuming roots can leave the image\") ggplot(sv2, aes(x = time, y = area, group = rep)) +   geom_point() +   geom_line() +   labs(x = \"Sampling Time\", y = \"Area (px)\", title = \"Assuming roots can only enter the image\") ggplot(sv, aes(x = time, y = mean_x_frequencies, group = rep)) +   geom_point() +   geom_line() +   labs(x = \"Sampling Time\", y = \"Mean Depth\", title = \"Assuming roots can leave the image\") ggplot(sv2, aes(x = time, y = mean_x_frequencies, group = rep)) +   geom_point() +   geom_line() +   labs(x = \"Sampling Time\", y = \"Mean Depth\", title = \"Assuming roots can only enter the image\") ggplot(sv, aes(x = time, y = median_x_frequencies, group = rep)) +   geom_point() +   geom_line() +   labs(x = \"Sampling Time\", y = \"Median Depth\", title = \"Assuming roots can leave the image\") ggplot(sv2, aes(x = time, y = median_x_frequencies, group = rep)) +   geom_point() +   geom_line() +   labs(x = \"Sampling Time\", y = \"Median Depth\", title = \"Assuming roots can only enter the image\") ggplot(sv, aes(x = time, y = height, group = rep)) +   geom_point() +   geom_line() +   labs(x = \"Sampling Time\", y = \"Max Depth\", title = \"Assuming roots can leave the image\") ggplot(sv2, aes(x = time, y = height, group = rep)) +   geom_point() +   geom_line() +   labs(x = \"Sampling Time\", y = \"Max Depth\", title = \"Assuming roots can only enter the image\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/roots.html","id":"statistical-analysis","dir":"Articles","previous_headings":"Single Value Traits","what":"Statistical Analysis","title":"Root Traits","text":"data likely noisier ground phenotypes general methods applicable. show simple example longitudinal modeling using growthSS pairwise comparison via conjugate methods vignettes may broadly reasonable.","code":""},{"path":"https://danforthcenter.github.io/pcvr/articles/roots.html","id":"longitudinal-modeling","dir":"Articles","previous_headings":"Single Value Traits > Statistical Analysis","what":"Longitudinal Modeling","title":"Root Traits","text":"purposes example combine two datasets though one genotype roots exhibit different behavior able leave image vs able leave image model root area time. fit (perhaps overly) simple linear model data using nls backend. options include quantile modeling (type = \"nlrq\"), frequentist mixed effect modeling (type = \"nlme\"), General Additive modeling (type = \"mgcv\"), Bayesian hierarchical modeling (type = \"brms\"). models fit fitGrowth can visualized using growthPlot.  non-brms models can tested using testGrowth. Note brms::hypothesis flexible version third example testGrowth . might test intercept (amount roots visible first timepoint) different: effect time different: specific hypotheses coefficients slope first group 10% higher second group (clarify groups can always check data returned growthSS): nuanced hypothesis want model heteroskedasticity autocorrelation backends detailed intermediate growth modeling advanced growth modeling tutorials may use.","code":"sv$geno <- \"a\" sv2$geno <- \"b\" ex <- rbind(sv, sv2) ex$time <- as.numeric(ex$time) ss <- growthSS(\"int_linear\", area ~ time | rep / geno, df = ex, type = \"nls\") ## Individual is not used with type = 'nls'. m1 <- fitGrowth(ss) growthPlot(m1, form = ss$pcvrForm, df = ss$df) testGrowth(ss, m1, test = \"I\")$anova ## Analysis of Variance Table ##  ## Model 1: area ~ I + A[geno] * time ## Model 2: area ~ I[geno] + A[geno] * time ##   Res.Df Res.Sum Sq Df  Sum Sq F value   Pr(>F)    ## 1     97   81858044                                ## 2     96   76177689  1 5680355  7.1584 0.008773 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 testGrowth(ss, m1, test = \"A\")$anova ## Analysis of Variance Table ##  ## Model 1: area ~ I[geno] + A * time ## Model 2: area ~ I[geno] + A[geno] * time ##   Res.Df Res.Sum Sq Df  Sum Sq F value  Pr(>F)    ## 1     97   83399590                               ## 2     96   76177689  1 7221900  9.1011 0.00327 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 table(ss$df$geno, ss$df$geno_numericLabel) ##     ##      1  2 ##   a 50  0 ##   b  0 50 testGrowth(ss, m1, test = \"A1*1.1 - A2\") ##          Form Estimate       SE  t-value    p-value ## 1 A1*1.1 - A2 -318.448 132.4264 2.404718 0.01810283"},{"path":"https://danforthcenter.github.io/pcvr/articles/roots.html","id":"pairwise-comparisons","dir":"Articles","previous_headings":"Single Value Traits > Statistical Analysis","what":"Pairwise Comparisons","title":"Root Traits","text":"non-longitudinal data/hypotheses standard tests may useful. ’ll show conjugate since departure norm. conjugate function makes pairwise Bayesian comparisons using distributions conjugate prior distributions can easily updated observed data. allows direct hypothesis testing Region Practical Equivalence (ROPE) testing. might use conjugate compare compare area last day two “genotypes”. example ’ll use “T” distribution run Bayesian analog T-test. conjugate output includes summary, posterior distributions format priors supplied, optionally plot. Print object view summary contains HDE (highest density estimate) group’s posterior distribution, HDI (highest density interval) group’s posterior distribution, hypothesis tested, posterior probability hypothesis, HDE/HDI mean difference (rope_range specified), probability mean difference within rope_range. posterior returned list elements prior. allows Bayesian updating wish . plot includes information summary graphically patchwork 2 ggplots rope_range specified single ggplot otherwise.  conclude distributions different since probability roughly 1% mean difference biologically meaningful since HDI mean difference falls entirely outside rope_range.","code":"s1 <- ex[ex$geno == \"a\" & ex$time == max(ex$time), \"area\"] s2 <- ex[ex$geno == \"b\" & ex$time == max(ex$time), \"area\"]  conj_ex <- conjugate(   s1, s2, # specify data, here two samples   method = \"t\", # use the \"T\" distribution   priors = list(mu = 3000, sd = 50), # prior distribution, here it is the same for both samples   rope_range = c(-500, 500), # differences of <500 pixels deemed not meaningful   rope_ci = 0.89, cred.int.level = 0.89, # default credible interval lengths   hypothesis = \"equal\" # hypothesis to test ) conj_ex ## Normal distributed Mu parameter of T distributed data. ##  ## Sample 1 Prior Normal(mu = 3000, sd = 50) ##  Posterior Normal(mu = 3010, sd = 49.629) ## Sample 2 Prior Normal(mu = 3000, sd = 50) ##  Posterior Normal(mu = 3082.806, sd = 49.4) ##  ## Posterior probability that S1 is equal to S2 = 46.226% ##  ## Probability of the difference between Mu parameters being within [-500:500] using a 89% Credible Interval is 100% with an average difference of -71.101 ##  ##  ##   HDE_1 HDI_1_low HDI_1_high    HDE_2 HDI_2_low HDI_2_high   hyp post.prob ## 1  3010  2930.683   3089.316 3082.806  3003.856   3161.756 equal 0.4622612 ##    HDE_rope HDI_rope_low HDI_rope_high rope_prob ## 1 -71.10135    -182.7525      40.26259         1 do.call(rbind, conj_ex$posterior) ##      mu       sd       ## [1,] 3010     49.62892 ## [2,] 3082.806 49.39955 plot(conj_ex)"},{"path":"https://danforthcenter.github.io/pcvr/articles/roots.html","id":"multi-value-traits","dir":"Articles","previous_headings":"","what":"Multi Value Traits","title":"Root Traits","text":"multi value traits returned analyze_distribution often difficult analyze standard multi value traits describe spectral wavelengths indices. conjugate function can use MV traits specifying matrices/data.frames s1 s2, rare minirhyzotron image’s distribution follow easily parameterized pdf.  Theoretically consider mixture uniform gaussian distributions. mixture conjugate priors yields mixture conjugate posteriors, current scope conjugate. Likewise, complexity non-conjugate mixture model applied data seem warranted. general option pcvr analyze multi-value traits Earth-Mover’s Distance (EMD), distance metric classify much “work” take turn one histogram another. may useful minirhyzotron data depending hypothesis. show ad-hoc option compare number “peaks” data example using EMD.","code":"pcv.joyplot(df, \"x_frequencies\", group = c(\"rep\", \"time\"))"},{"path":"https://danforthcenter.github.io/pcvr/articles/roots.html","id":"numbers-of-peaks","dir":"Articles","previous_headings":"Multi Value Traits","what":"Numbers of Peaks","title":"Root Traits","text":"compare number peaks need way identify peak. quick function finds intervals counts cutoff least duration.","code":"getPeaks <- function(d = NULL, intensity = 20, duration = 3) {   binwidth <- as.numeric(unique(diff(d$label)))   if (length(binwidth) > 1) {     stop(\"label column should have constant bin size\")   }   labels <- sort(d[d$value >= intensity, \"label\"])   r <- rle(diff(labels))   peaks <- sum(r$lengths[r$values == binwidth] >= duration)   return(peaks) } d <- split(df, interaction(df[, c(\"rep\", \"time\")])) peak_df <- data.frame(peaks = unlist(lapply(d, getPeaks))) rownames(peak_df) <- NULL peak_df$rep <- unlist(lapply(names(d), function(nm) {   return(strsplit(nm, \"[.]\")[[1]][[1]]) })) peak_df$time <- unlist(lapply(names(d), function(nm) {   return(strsplit(nm, \"[.]\")[[1]][[2]]) })) s1 <- peak_df[peak_df$time == min(peak_df$time), \"peaks\"] s2 <- peak_df[peak_df$time == max(peak_df$time), \"peaks\"]  conj_ex2 <- conjugate(   s1, s2, # specify data, here two samples   method = \"poisson\", # use the Poisson distribution   priors = list(a = c(0.5, 0.5), b = c(0.5, 0.5)), # prior distributions for gamma on lambda   rope_range = c(-1, 1), # differences of <500 pixels deemed not meaningful   rope_ci = 0.89, cred.int.level = 0.89, # default credible interval lengths   hypothesis = \"equal\" # hypothesis to test ) conj_ex2 ## Gamma distributed Lambda parameter of Poisson distributed data. ##  ## Sample 1 Prior Gamma(a = 0.5, b = 0.5, a = 0.5, b = 0.5) ##  Posterior Gamma(a = 16.5, b = 10.5) ## Sample 2 Prior Gamma(a = 0.5, b = 0.5, a = 0.5, b = 0.5) ##  Posterior Gamma(a = 31.5, b = 10.5) ##  ## Posterior probability that S1 is equal to S2 = 11.874% ##  ## Probability of the difference between Lambda parameters being within [-1:1] using a 89% Credible Interval is 23.896% with an average difference of -1.409 ##  ##  ##     HDE_1 HDI_1_low HDI_1_high    HDE_2 HDI_2_low HDI_2_high   hyp post.prob ## 1 1.47619  1.006947   2.234277 2.904762  2.198332   3.900187 equal 0.1187409 ##    HDE_rope HDI_rope_low HDI_rope_high rope_prob ## 1 -1.409191    -2.492106    -0.3709298 0.2389619 do.call(rbind, conj_ex2$posterior) ##      a    b    ## [1,] 16.5 10.5 ## [2,] 31.5 10.5 plot(conj_ex2)"},{"path":"https://danforthcenter.github.io/pcvr/articles/roots.html","id":"emd","dir":"Articles","previous_headings":"Multi Value Traits","what":"EMD","title":"Root Traits","text":"Earth Mover’s Distance measures much work takes turn one histogram another. Since multi- value traits exported PlantCV histograms can useful color distribution analysis. following examples make pairwise comparisons rows return long dataframe distances. EMD can computationally heavy large datasets since pairwise distances calculated. mvAg function may useful need summarize data make EMD faster. interested change mean probably best way use data, reasonable option comparing whether groups less self-similar groups. fast example EMD. simulated data five generating distributions. Normal, Log Normal, Bimodal, Trimodal, Uniform. use gaussian mixtures characterize multi-modal histograms get clunky comparing unimodal uniform distributions. conjugate function work since distributions share common parameterization. Instead, can use EMD.  plots show different distributions, get EMD images see trends shown resulting heatmap.  Arranging distances network dissimilarities shows different distributions clustering well.  Using simulated mini-rhyzotron data can go steps. show simulated datasets (roots leaving image roots stuck image observed). First check distributions via joyplot.  calculate EMD observations. Note long input data opposed wide previous example. arrange distances network dissimilarities. filtering edges 75th percentile strength see pretty clear temporal clustering.  dataset assumes roots leave image observed get similar results.","code":"set.seed(123)  simFreqs <- function(vec, group) {   s1 <- hist(vec, breaks = seq(1, 181, 1), plot = FALSE)$counts   s1d <- as.data.frame(cbind(data.frame(group), matrix(s1, nrow = 1)))   colnames(s1d) <- c(\"group\", paste0(\"sim_\", 1:180))   return(s1d) }  sim_df <- rbind(   do.call(rbind, lapply(1:10, function(i) {     sf <- simFreqs(rnorm(200, 50, 10), group = \"normal\")     return(sf)   })),   do.call(rbind, lapply(1:10, function(i) {     sf <- simFreqs(rlnorm(200, log(30), 0.25), group = \"lognormal\")     return(sf)   })),   do.call(rbind, lapply(1:10, function(i) {     sf <- simFreqs(c(rlnorm(125, log(15), 0.25), rnorm(75, 75, 5)), group = \"bimodal\")     return(sf)   })),   do.call(rbind, lapply(1:10, function(i) {     sf <- simFreqs(c(rlnorm(100, log(15), 0.25), rnorm(50, 50, 5),                      rnorm(50, 90, 5)), group = \"trimodal\")     return(sf)   })),   do.call(rbind, lapply(1:10, function(i) {     sf <- simFreqs(runif(200, 1, 180), group = \"uniform\")     return(sf)   })) )  sim_df_long <- as.data.frame(data.table::melt(data.table::as.data.table(sim_df), id.vars = \"group\")) sim_df_long$bin <- as.numeric(sub(\"sim_\", \"\", sim_df_long$variable))  ggplot(sim_df_long, aes(x = bin, y = value, fill = group), alpha = 0.25) +   geom_col(position = \"identity\", show.legend = FALSE) +   pcv_theme() +   facet_wrap(~group) sim_emd <- pcv.emd(   df = sim_df, cols = \"sim_\", reorder = c(\"group\"),   mat = FALSE, plot = TRUE, parallel = 1, raiseError = TRUE ) ## Estimated time of calculation is roughly 3.1 seconds using 1 cores in parallel. sim_emd$plot n <- pcv.net(sim_emd$data, filter = \"0.5\") net.plot(n, fill = \"group\") pcv.joyplot(df, \"x_frequencies\", group = c(\"rep\", \"time\")) df1_emd <- pcv.emd(   df = df, cols = \"x_frequencies\", reorder = c(\"rep\", \"time\"),   id = c(\"rep\", \"time\"),   mat = FALSE, plot = TRUE, parallel = 1, raiseError = FALSE ) n <- pcv.net(df1_emd$data, filter = \"0.75\") net.plot(n, fill = \"time\") pcv.joyplot(df2, \"x_frequencies\", group = c(\"rep\", \"time\")) df2_emd <- pcv.emd(   df = df2, cols = \"x_frequencies\", reorder = c(\"rep\", \"time\"),   id = c(\"rep\", \"time\"),   mat = FALSE, plot = TRUE, parallel = 1, raiseError = FALSE ) n2 <- pcv.net(df2_emd$data, filter = \"0.75\") net.plot(n2, fill = \"time\")"},{"path":"https://danforthcenter.github.io/pcvr/articles/roots.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Root Traits","text":"Root imaging raises several potentially interesting problems around new phenotypes consider noisy data segmentation. always important consider generating process data may especially true comes minirhyzotron image data. Hopefully vignette helps provide examples data can used, ideas questions please raise pcvr github issues help-datascience slack channel Danforth Center users.","code":""},{"path":"https://danforthcenter.github.io/pcvr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josh Sumner. Author, maintainer. Jeffrey Berry. Author. Noah Fahlgren. Reviewer. Donald Danforth Plant Science Center. Copyright holder.","code":""},{"path":"https://danforthcenter.github.io/pcvr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sumner J, Berry J (2025). pcvr: Plant Phenotyping Bayesian Statistics. R package version 1.2.0.0, https://github.com/danforthcenter/pcvr.","code":"@Manual{,   title = {pcvr: Plant Phenotyping and Bayesian Statistics},   author = {Josh Sumner and Jeffrey Berry},   year = {2025},   note = {R package version 1.2.0.0},   url = {https://github.com/danforthcenter/pcvr}, }"},{"path":"https://danforthcenter.github.io/pcvr/index.html","id":"pcvr-an-r-package-for-plant-phenotyping-statistics-","dir":"","previous_headings":"","what":"Plant Phenotyping and Bayesian Statistics","title":"Plant Phenotyping and Bayesian Statistics","text":"pcvr provides R functions use PlantCV output phenotype data goal lowering barrier entry Bayesian statistics non-linear modeling.","code":""},{"path":"https://danforthcenter.github.io/pcvr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Plant Phenotyping and Bayesian Statistics","text":"release version pcvr can installed CRAN Alternatively development version pcvr can installed using remotes/devtools install_github shown . Note default behavior devtools/remotes install true dependencies. functions pcvr use specific packages otherwise needed work, notably brms modeling functions. install suggested packages (see DESCRIPTION file) add dependencies=T install_github function call.","code":"install.packages(\"pcvr\") library(pcvr) devtools::install_github(\"danforthcenter/pcvr\") library(pcvr)"},{"path":"https://danforthcenter.github.io/pcvr/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Plant Phenotyping and Bayesian Statistics","text":"See Vignettes tab several example workflows common plant phenotyping tasks.","code":""},{"path":"https://danforthcenter.github.io/pcvr/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"Plant Phenotyping and Bayesian Statistics","text":"See Quarto Tutorials tab links Quarto presentations github go depth rationale behind several pcvr functions/options.","code":""},{"path":"https://danforthcenter.github.io/pcvr/index.html","id":"function-reference","dir":"","previous_headings":"","what":"Function Reference","title":"Plant Phenotyping and Bayesian Statistics","text":"Functions separated broad goal/type data use Functions tab .","code":""},{"path":"https://danforthcenter.github.io/pcvr/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Plant Phenotyping and Bayesian Statistics","text":"Please see bellwether vignette (named high throughput phenotyping facility Donald Danforth Plant Science Center) general introduction pcvr.","code":"vignette(\"bellwether\", package=\"pcvr\") # or  browseVignettes(\"pcvr\")"},{"path":"https://danforthcenter.github.io/pcvr/index.html","id":"feedback","dir":"","previous_headings":"","what":"Feedback","title":"Plant Phenotyping and Bayesian Statistics","text":"Please report bugs make feature requests issues github page.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/awkHelper.html","id":null,"dir":"Reference","previous_headings":"","what":"subset helper function for use reading in large data, called in pcv.sub.read — awkHelper","title":"subset helper function for use reading in large data, called in pcv.sub.read — awkHelper","text":"subset helper function use reading large data, called pcv.sub.read","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/awkHelper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"subset helper function for use reading in large data, called in pcv.sub.read — awkHelper","text":"","code":"awkHelper(inputFile, filters, awk = NULL)"},{"path":"https://danforthcenter.github.io/pcvr/reference/awkHelper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"subset helper function for use reading in large data, called in pcv.sub.read — awkHelper","text":"inputFile Path csv file plantCV output, provided internally read.pcv filters filtering conditions, see read.pcv details. Format list(\"trait area, perimeter\", \"contains stringToMatch\") awk Optional awk command use instead.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/awkHelper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"subset helper function for use reading in large data, called in pcv.sub.read — awkHelper","text":"Returns character string representing unix style awk statement   typically passed pipe used connection data.table::fread.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/awkHelper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"subset helper function for use reading in large data, called in pcv.sub.read — awkHelper","text":"awkHelper attempts make awk commands human readable input. Currently filters supplied input file quotes removed `sed` piped awk, equivalent command line statement may : sed 's/\\\"//g' pcvrTest2.csv | awk -F ','  '{ (NR==1 || $18==\"area\") { print } }'","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/awkHelper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"subset helper function for use reading in large data, called in pcv.sub.read — awkHelper","text":"","code":"tryCatch(   { # in case offline     link1 <- \"https://gist.githubusercontent.com/seankross/\"     link2 <- \"a412dfbd88b3db70b74b/raw/5f23f993cd87c283ce766e7ac6b329ee7cc2e1d1/mtcars.csv\"     file <- paste0(link1, link2)     awkHelper(file, list(\"gear in 4, 3\"), awk = NULL)     awkHelper(file, \"gear contains 3\", awk = NULL)     # note that to be filtered the file has to exist on your local system, this example only shows     # the output of awkHelper, which would then be executed by read.pcv on a unix system     awkHelper(file, list(\"gear in 4, 3\"), awk = \"existing_command\")   },   error = function(e) {     message(e)   } ) #> [1] \"existing_command\""},{"path":"https://danforthcenter.github.io/pcvr/reference/barg.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to help fulfill elements of the Bayesian Analysis Reporting Guidelines. — barg","title":"Function to help fulfill elements of the Bayesian Analysis Reporting Guidelines. — barg","text":"Bayesian Analysis Reporting Guidelines put forward Kruschke (https://www.nature.com/articles/s41562-021-01177-7) aide reproducibility documentation Bayesian statistical analyses sometimes unfamiliar reviewers scientists. purpose function summarize goodness fit metrics one Bayesian models made growthSS fitGrowth. See details explanations metrics output.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/barg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to help fulfill elements of the Bayesian Analysis Reporting Guidelines. — barg","text":"","code":"barg(fit, ss = NULL, priors = NULL)"},{"path":"https://danforthcenter.github.io/pcvr/reference/barg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to help fulfill elements of the Bayesian Analysis Reporting Guidelines. — barg","text":"fit conjugate object, brmsfit object, list brmsfit objects case split models run subsets data computational simplicity. ss growthSS output used specify model. fit list can either one growthSS list case priors assumed model can list length fit. Note parts used call$start expected call, pcvrForm, df list elements, list brmsfit objects ss object can specify stand-list. can also left NULL (default) posterior predictive plots prior predictive plots made. priors list priors similar specified conjugate named distribution plan use, see details examples.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/barg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to help fulfill elements of the Bayesian Analysis Reporting Guidelines. — barg","text":"named list containing Rhat, ESS, NEFF, Trace/Prior/Posterior Predictive plots. See details interpretation.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/barg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to help fulfill elements of the Bayesian Analysis Reporting Guidelines. — barg","text":"majority Bayesian Analysis Reporting Guidelines geared towards statistical methods use MCMC numeric approximations. cases (meaning brms models fit fitGrowth growthSS) output contain: General: includes chain number, length, total divergent transitions per     model. Divergent transitions marker MCMC something go wrong.     Conceptually may helpful think rolling marble 3D curve     marble suddenly jolt unexpected direction, something happened suggests     problem/misunderstood surface. practice want extremely (ideally ) divergences.     divergences consider specifying control parameters     (see brms::brm examples fitGrowth). problem persists model may need     simplified. information MCMC divergence see stan     manual (https://mc-stan.org/docs/2_19/reference-manual/divergent-transitions). ESS: ESS stands Effective Sample Size goodness fit metric     approximates number independent replicates equate amount     information (autocorrelated) MCMC iterations. ESS 1000+ often considered pretty     stable value, better. Still, 100 per chain may plenty depending     applications inference wish . One benefits using lots chains /    longer chains get complete information benefit shown     larger ESS. separated \"bulk\" \"tail\" represent middle tails     posterior distribution, since can sometimes different sampling behavior.     summary total values returned, summary useful several models     included list fit argument Rhat: Rhat measure \"chain mixture\". compares vs within chain     values assess well chains mixed. chains mix well Rhat greater     1, 1.05 broadly     agreed upon cutoff signify problem. Running longer chains result lower Rhat     values. default brms run 4 chains, partially ensure good chance     check chains mixed well via Rhat. summary total values returned,     summary useful several models included list fit argument NEFF: NEFF NEFF ratio (Effective Sample Size Total MCMC Sample Size).     Values greater 0.5 generally considered good, consensus lower can     fine 0.1. summary total values returned, summary     useful several models included list fit argument mcmcTrace: plot model's MCMC traces. Ideally mixed     stationary. options visualizing MCMC diagnostics see     bayesplot::mcmc_trace. priorPredictive: plot data simulated prior using plotPrior.     generate data biologically plausible situation,     probably much variable data. effect mildly informative thick     tailed lognormal priors. specified non-default style priors currently     work. posteriorPredictive: plot model's posterior predictive interval time.     plots returned growthPlot shows 1-99     coming mean yellow trend line. encompass overwhelming majority data     ideally match variance pattern see data. parts predicted     interval biologically impossible (area 0, percentage 100     model reconsidered. analytic solutions (ie, conjugate class) fewer elements. priorSensitivity: Patchwork prior sensitivity plots showing distribution     posterior probabilities, interpretation changes tests, random priors     used. returned priors argument specified (see ). posteriorPredictive: Plot posterior predictive distributions similar     non-longitudinal fitGrowth model fit brms. Summary: summary conjugate object. Priors specified using named list. instance, use 100 normal priors means 5 20 standard deviations 5 10 prior argument list(\"rnorm\" = list(\"mean\" = c(5, 20), \"sd\" = c(5, 10), \"n\" = 100))). priors used sensitivity analysis drawn randomly within ranges specified provided list. unsure random-generation function use check conjugate docs distributions listed method details section.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/reference/barg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to help fulfill elements of the Bayesian Analysis Reporting Guidelines. — barg","text":"","code":"# \\donttest{ simdf <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ss <- growthSS(   model = \"logistic\", form = y ~ time | id / group, sigma = \"logistic\",   df = simdf, start = list(     \"A\" = 130, \"B\" = 12, \"C\" = 3,     \"sigmaA\" = 20, \"sigmaB\" = 10, \"sigmaC\" = 2   ), type = \"brms\" ) fit_test <- fitGrowth(ss,   iter = 600, cores = 1, chains = 1, backend = \"cmdstanr\",   sample_prior = \"only\" # only sampling from prior for speed ) #> Start sampling #> Init values were only set for a subset of parameters.  #> Missing init values for the following parameters: #> Intercept_nu #>  #> To disable this message use options(cmdstanr_warn_inits = FALSE). #> Running MCMC with 1 chain... #>  #> Chain 1 Iteration:   1 / 600 [  0%]  (Warmup)  #> Chain 1 Iteration: 100 / 600 [ 16%]  (Warmup)  #> Chain 1 Iteration: 200 / 600 [ 33%]  (Warmup)  #> Chain 1 Iteration: 300 / 600 [ 50%]  (Warmup)  #> Chain 1 Iteration: 301 / 600 [ 50%]  (Sampling)  #> Chain 1 Iteration: 400 / 600 [ 66%]  (Sampling)  #> Chain 1 Iteration: 500 / 600 [ 83%]  (Sampling)  #> Chain 1 Iteration: 600 / 600 [100%]  (Sampling)  #> Chain 1 finished in 0.0 seconds. #> Loading required namespace: rstan barg(fit_test, ss) #> Warning: The ESS has been capped to avoid unstable estimates. #> Warning: The ESS has been capped to avoid unstable estimates. #> Warning: The ESS has been capped to avoid unstable estimates. #> $General #>   chains iter num.divergent model #> 1      1  600             0     1 #>  #> $Rhat #> $Rhat$summary #>         b_nu_Intercept b_A_groupa b_A_groupb b_B_groupa b_B_groupb b_C_groupa #> Min.         0.9967871   1.019397   1.010245   1.003884   1.005592  0.9968155 #> 1st Qu.      0.9967871   1.019397   1.010245   1.003884   1.005592  0.9968155 #> Median       0.9967871   1.019397   1.010245   1.003884   1.005592  0.9968155 #> Mean         0.9967871   1.019397   1.010245   1.003884   1.005592  0.9968155 #> 3rd Qu.      0.9967871   1.019397   1.010245   1.003884   1.005592  0.9968155 #> Max.         0.9967871   1.019397   1.010245   1.003884   1.005592  0.9968155 #>         b_C_groupb b_sigmaA_groupa b_sigmaA_groupb b_sigmaB_groupa #> Min.      1.001343        1.008301        1.003969        1.007346 #> 1st Qu.   1.001343        1.008301        1.003969        1.007346 #> Median    1.001343        1.008301        1.003969        1.007346 #> Mean      1.001343        1.008301        1.003969        1.007346 #> 3rd Qu.   1.001343        1.008301        1.003969        1.007346 #> Max.      1.001343        1.008301        1.003969        1.007346 #>         b_sigmaB_groupb b_sigmaC_groupa b_sigmaC_groupb Intercept_nu   lprior #> Min.          0.9998079        1.001971        1.004493    0.9967871 1.003223 #> 1st Qu.       0.9998079        1.001971        1.004493    0.9967871 1.003223 #> Median        0.9998079        1.001971        1.004493    0.9967871 1.003223 #> Mean          0.9998079        1.001971        1.004493    0.9967871 1.003223 #> 3rd Qu.       0.9998079        1.001971        1.004493    0.9967871 1.003223 #> Max.          0.9998079        1.001971        1.004493    0.9967871 1.003223 #>             lp__ #> Min.    1.007073 #> 1st Qu. 1.007073 #> Median  1.007073 #> Mean    1.007073 #> 3rd Qu. 1.007073 #> Max.    1.007073 #>  #> $Rhat$complete #>   b_nu_Intercept b_A_groupa b_A_groupb b_B_groupa b_B_groupb b_C_groupa #> 1      0.9967871   1.019397   1.010245   1.003884   1.005592  0.9968155 #>   b_C_groupb b_sigmaA_groupa b_sigmaA_groupb b_sigmaB_groupa b_sigmaB_groupb #> 1   1.001343        1.008301        1.003969        1.007346       0.9998079 #>   b_sigmaC_groupa b_sigmaC_groupb Intercept_nu   lprior     lp__ model #> 1        1.001971        1.004493    0.9967871 1.003223 1.007073     1 #>  #>  #> $NEFF #> $NEFF$summary #>         b_nu_Intercept b_A_groupa b_A_groupb b_B_groupa b_B_groupb b_C_groupa #> Min.         0.8242433  0.4796173  0.4625026  0.6216885  0.8039098  0.8473324 #> 1st Qu.      0.8242433  0.4796173  0.4625026  0.6216885  0.8039098  0.8473324 #> Median       0.8242433  0.4796173  0.4625026  0.6216885  0.8039098  0.8473324 #> Mean         0.8242433  0.4796173  0.4625026  0.6216885  0.8039098  0.8473324 #> 3rd Qu.      0.8242433  0.4796173  0.4625026  0.6216885  0.8039098  0.8473324 #> Max.         0.8242433  0.4796173  0.4625026  0.6216885  0.8039098  0.8473324 #>         b_C_groupb b_sigmaA_groupa b_sigmaA_groupb b_sigmaB_groupa #> Min.     0.6606381       0.5294243       0.7920633       0.7537733 #> 1st Qu.  0.6606381       0.5294243       0.7920633       0.7537733 #> Median   0.6606381       0.5294243       0.7920633       0.7537733 #> Mean     0.6606381       0.5294243       0.7920633       0.7537733 #> 3rd Qu.  0.6606381       0.5294243       0.7920633       0.7537733 #> Max.     0.6606381       0.5294243       0.7920633       0.7537733 #>         b_sigmaB_groupb b_sigmaC_groupa b_sigmaC_groupb Intercept_nu    lprior #> Min.          0.4098103       0.5522034       0.9414743    0.8242433 0.4549344 #> 1st Qu.       0.4098103       0.5522034       0.9414743    0.8242433 0.4549344 #> Median        0.4098103       0.5522034       0.9414743    0.8242433 0.4549344 #> Mean          0.4098103       0.5522034       0.9414743    0.8242433 0.4549344 #> 3rd Qu.       0.4098103       0.5522034       0.9414743    0.8242433 0.4549344 #> Max.          0.4098103       0.5522034       0.9414743    0.8242433 0.4549344 #>              lp__ #> Min.    0.4026582 #> 1st Qu. 0.4026582 #> Median  0.4026582 #> Mean    0.4026582 #> 3rd Qu. 0.4026582 #> Max.    0.4026582 #>  #> $NEFF$complete #>   b_nu_Intercept b_A_groupa b_A_groupb b_B_groupa b_B_groupb b_C_groupa #> 1      0.8242433  0.4796173  0.4625026  0.6216885  0.8039098  0.8473324 #>   b_C_groupb b_sigmaA_groupa b_sigmaA_groupb b_sigmaB_groupa b_sigmaB_groupb #> 1  0.6606381       0.5294243       0.7920633       0.7537733       0.4098103 #>   b_sigmaC_groupa b_sigmaC_groupb Intercept_nu    lprior      lp__ model #> 1       0.5522034       0.9414743    0.8242433 0.4549344 0.4026582     1 #>  #>  #> $ESS #> $ESS$summary #>                  A_groupa A_groupb B_groupa B_groupb C_groupa C_groupb #> Bulk_ESS.Min.    623.5990 553.2634 726.1598 379.5054 703.5870 595.6773 #> Bulk_ESS.1st Qu. 623.5990 553.2634 726.1598 379.5054 703.5870 595.6773 #> Bulk_ESS.Median  623.5990 553.2634 726.1598 379.5054 703.5870 595.6773 #> Bulk_ESS.Mean    623.5990 553.2634 726.1598 379.5054 703.5870 595.6773 #> Bulk_ESS.3rd Qu. 623.5990 553.2634 726.1598 379.5054 703.5870 595.6773 #> Bulk_ESS.Max.    623.5990 553.2634 726.1598 379.5054 703.5870 595.6773 #> Tail_ESS.Min.    143.8852 138.7508 186.5065 241.1729 254.1997 198.1914 #> Tail_ESS.1st Qu. 143.8852 138.7508 186.5065 241.1729 254.1997 198.1914 #> Tail_ESS.Median  143.8852 138.7508 186.5065 241.1729 254.1997 198.1914 #> Tail_ESS.Mean    143.8852 138.7508 186.5065 241.1729 254.1997 198.1914 #> Tail_ESS.3rd Qu. 143.8852 138.7508 186.5065 241.1729 254.1997 198.1914 #> Tail_ESS.Max.    143.8852 138.7508 186.5065 241.1729 254.1997 198.1914 #>                  nu_Intercept sigmaA_groupa sigmaA_groupb sigmaB_groupa #> Bulk_ESS.Min.        631.0697      699.8421      743.1364       379.198 #> Bulk_ESS.1st Qu.     631.0697      699.8421      743.1364       379.198 #> Bulk_ESS.Median      631.0697      699.8421      743.1364       379.198 #> Bulk_ESS.Mean        631.0697      699.8421      743.1364       379.198 #> Bulk_ESS.3rd Qu.     631.0697      699.8421      743.1364       379.198 #> Bulk_ESS.Max.        631.0697      699.8421      743.1364       379.198 #> Tail_ESS.Min.        247.2730      158.8273      237.6190       226.132 #> Tail_ESS.1st Qu.     247.2730      158.8273      237.6190       226.132 #> Tail_ESS.Median      247.2730      158.8273      237.6190       226.132 #> Tail_ESS.Mean        247.2730      158.8273      237.6190       226.132 #> Tail_ESS.3rd Qu.     247.2730      158.8273      237.6190       226.132 #> Tail_ESS.Max.        247.2730      158.8273      237.6190       226.132 #>                  sigmaB_groupb sigmaC_groupa sigmaC_groupb #> Bulk_ESS.Min.         661.8827      440.0539      740.4436 #> Bulk_ESS.1st Qu.      661.8827      440.0539      740.4436 #> Bulk_ESS.Median       661.8827      440.0539      740.4436 #> Bulk_ESS.Mean         661.8827      440.0539      740.4436 #> Bulk_ESS.3rd Qu.      661.8827      440.0539      740.4436 #> Bulk_ESS.Max.         661.8827      440.0539      740.4436 #> Tail_ESS.Min.         122.9431      165.6610      282.4423 #> Tail_ESS.1st Qu.      122.9431      165.6610      282.4423 #> Tail_ESS.Median       122.9431      165.6610      282.4423 #> Tail_ESS.Mean         122.9431      165.6610      282.4423 #> Tail_ESS.3rd Qu.      122.9431      165.6610      282.4423 #> Tail_ESS.Max.         122.9431      165.6610      282.4423 #>  #> $ESS$complete #>              par Bulk_ESS Tail_ESS model #> 1   nu_Intercept 631.0697 247.2730     1 #> 2       A_groupa 623.5990 143.8852     1 #> 3       A_groupb 553.2634 138.7508     1 #> 4       B_groupa 726.1598 186.5065     1 #> 5       B_groupb 379.5054 241.1729     1 #> 6       C_groupa 703.5870 254.1997     1 #> 7       C_groupb 595.6773 198.1914     1 #> 8  sigmaA_groupa 699.8421 158.8273     1 #> 9  sigmaA_groupb 743.1364 237.6190     1 #> 10 sigmaB_groupa 379.1980 226.1320     1 #> 11 sigmaB_groupb 661.8827 122.9431     1 #> 12 sigmaC_groupa 440.0539 165.6610     1 #> 13 sigmaC_groupb 740.4436 282.4423     1 #>  #>  #> $mcmcTrace #> $mcmcTrace[[1]]  #>  #>  #> $priorPredictive #> $priorPredictive[[1]]  #>  #>  #> $posteriorPredictive #> $posteriorPredictive[[1]]  #>  #>  fit_2 <- fit_test fit_list <- list(fit_test, fit_2) x <- barg(fit_list, list(ss, ss)) #> Warning: The ESS has been capped to avoid unstable estimates. #> Warning: The ESS has been capped to avoid unstable estimates. #> Warning: The ESS has been capped to avoid unstable estimates. #> Warning: The ESS has been capped to avoid unstable estimates. #> Warning: The ESS has been capped to avoid unstable estimates. #> Warning: The ESS has been capped to avoid unstable estimates.  x <- conjugate(   s1 = rnorm(10, 10, 1), s2 = rnorm(10, 13, 1.5), method = \"t\",   priors = list(     list(mu = 10, sd = 2),     list(mu = 10, sd = 2)   ),   plot = FALSE, rope_range = c(-8, 8), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"unequal\",   bayes_factor = c(50, 55) ) #> Warning: plot argument is deprecated, use plot.conjugate instead. b <- barg(x, priors = list(\"rnorm\" = list(\"n\" = 10, \"mean\" = c(5, 20), \"sd\" = c(5, 10)))) # }"},{"path":"https://danforthcenter.github.io/pcvr/reference/brmPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to visualize brms models similar to those made using growthSS outputs. — brmPlot","title":"Function to visualize brms models similar to those made using growthSS outputs. — brmPlot","text":"Models fit using growthSS inputs fitGrowth (similar models made means) can visualized easily using function. generally called growthPlot.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/brmPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to visualize brms models similar to those made using growthSS outputs. — brmPlot","text":"","code":"brmPlot(   fit,   form,   df = NULL,   groups = NULL,   timeRange = NULL,   facetGroups = TRUE,   hierarchy_value = NULL,   vir_option = \"plasma\" )"},{"path":"https://danforthcenter.github.io/pcvr/reference/brmPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to visualize brms models similar to those made using growthSS outputs. — brmPlot","text":"fit brmsfit object, similar fit growthSS outputs. form formula similar growthSS inputs specifying outcome, predictor, grouping structure data outcome ~ predictor|individual/group. df optional dataframe use plotting observed growth curves top model. groups optional set groups keep plot. Defaults NULL case groups model plotted. timeRange optional range times use. can used view predictions future data available data reached point (asymptotic size), although prediction using splines outside observed range necessarily reliable. facetGroups logical, groups separated facets? Defaults TRUE. hierarchy_value hierarchical model plotted, value hiearchical predictor ? left NULL (default) mean value used. >1L x axis use hierarchical variable model mean timeRange (mean x values model timeRange specified). vir_option Viridis color scale use plotting credible intervals. Defaults \"plasma\".","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/brmPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to visualize brms models similar to those made using growthSS outputs. — brmPlot","text":"Returns ggplot showing brms model's credible intervals optionally individual growth lines.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/brmPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to visualize brms models similar to those made using growthSS outputs. — brmPlot","text":"","code":"# \\donttest{ simdf <- growthSim(   \"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ss <- growthSS(   model = \"logistic\", form = y ~ time | id / group, sigma = \"spline\",   list(\"A\" = 130, \"B\" = 10, \"C\" = 3),   df = simdf, type = \"brms\" ) fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1) #> Start sampling #> Init values were only set for a subset of parameters.  #> Missing init values for the following parameters: #> Intercept_sigma, bs_sigma, zs_sigma_1_1, sds_sigma_1, zs_sigma_2_1, sds_sigma_2, Intercept_nu #>  #> To disable this message use options(cmdstanr_warn_inits = FALSE). #> Running MCMC with 1 chain... #>  #> Chain 1 Iteration:   1 / 500 [  0%]  (Warmup)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f87d005bf9.stan', line 130, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f87d005bf9.stan', line 130, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Location parameter[1] is -nan, but must be finite! (in '/tmp/RtmpHeVx4q/model-a6f87d005bf9.stan', line 130, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f87d005bf9.stan', line 130, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Iteration: 100 / 500 [ 20%]  (Warmup)  #> Chain 1 Iteration: 200 / 500 [ 40%]  (Warmup)  #> Chain 1 Iteration: 251 / 500 [ 50%]  (Sampling)  #> Chain 1 Iteration: 350 / 500 [ 70%]  (Sampling)  #> Chain 1 Iteration: 450 / 500 [ 90%]  (Sampling)  #> Chain 1 Iteration: 500 / 500 [100%]  (Sampling)  #> Chain 1 finished in 27.5 seconds. #> Warning: 1 of 250 (0.0%) transitions ended with a divergence. #> See https://mc-stan.org/misc/warnings for details. growthPlot(fit = fit, form = y ~ time | group, groups = \"a\", df = ss$df)  # }"},{"path":"https://danforthcenter.github.io/pcvr/reference/brmSurvPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to visualize brms survival models specified using growthSS. — brmSurvPlot","title":"Function to visualize brms survival models specified using growthSS. — brmSurvPlot","text":"Models fit using growthSS inputs fitGrowth (similar models made means)  can visualized easily using function. generally called growthPlot.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/brmSurvPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to visualize brms survival models specified using growthSS. — brmSurvPlot","text":"","code":"brmSurvPlot(   fit,   form,   df = NULL,   groups = NULL,   timeRange = NULL,   facetGroups = TRUE )"},{"path":"https://danforthcenter.github.io/pcvr/reference/brmSurvPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to visualize brms survival models specified using growthSS. — brmSurvPlot","text":"fit brmsfit object, similar fit growthSS outputs. form formula similar growthSS inputs specifying outcome, predictor, grouping structure data outcome ~ predictor|individual/group. df optional dataframe use plotting observed growth curves top model. groups optional set groups keep plot. Defaults NULL case groups model plotted. timeRange optional range times use. can used view predictions future data available data reached point (asymptotic size), although prediction using splines outside observed range necessarily reliable. facetGroups logical, groups separated facets? Defaults TRUE.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/brmSurvPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to visualize brms survival models specified using growthSS. — brmSurvPlot","text":"Returns ggplot showing brms model's credible intervals optionally individual growth lines.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/brmSurvPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to visualize brms survival models specified using growthSS. — brmSurvPlot","text":"","code":"# \\donttest{ set.seed(123) df <- growthSim(\"exponential\",   n = 20, t = 50,   params = list(\"A\" = c(1, 1), \"B\" = c(0.15, 0.1)) ) ss1 <- growthSS(   model = \"survival weibull\", form = y > 100 ~ time | id / group,   df = df, start = c(0, 5) ) #> Prior is numeric, replicating to 2 length 2 elements (mu, sd) and assuming order a, b fit1 <- fitGrowth(ss1, iter = 600, cores = 2, chains = 2, backend = \"cmdstanr\") #> Start sampling #> Running MCMC with 2 parallel chains... #>  #> Chain 1 Iteration:   1 / 600 [  0%]  (Warmup)  #> Chain 1 Iteration: 100 / 600 [ 16%]  (Warmup)  #> Chain 1 Iteration: 200 / 600 [ 33%]  (Warmup)  #> Chain 1 Iteration: 300 / 600 [ 50%]  (Warmup)  #> Chain 1 Iteration: 301 / 600 [ 50%]  (Sampling)  #> Chain 1 Iteration: 400 / 600 [ 66%]  (Sampling)  #> Chain 1 Iteration: 500 / 600 [ 83%]  (Sampling)  #> Chain 1 Iteration: 600 / 600 [100%]  (Sampling)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 43, column 2 to column 43) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 43, column 2 to column 43) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: weibull_lpdf: Scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 53, column 4 to column 102) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: weibull_lpdf: Scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 53, column 4 to column 102) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: weibull_lpdf: Scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 53, column 4 to column 102) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: weibull_lpdf: Scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 53, column 4 to column 102) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 43, column 2 to column 43) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 43, column 2 to column 43) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: weibull_lpdf: Scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 53, column 4 to column 102) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 2 Iteration:   1 / 600 [  0%]  (Warmup)  #> Chain 2 Iteration: 100 / 600 [ 16%]  (Warmup)  #> Chain 2 Iteration: 200 / 600 [ 33%]  (Warmup)  #> Chain 2 Iteration: 300 / 600 [ 50%]  (Warmup)  #> Chain 2 Iteration: 301 / 600 [ 50%]  (Sampling)  #> Chain 2 Iteration: 400 / 600 [ 66%]  (Sampling)  #> Chain 2 Iteration: 500 / 600 [ 83%]  (Sampling)  #> Chain 2 Iteration: 600 / 600 [100%]  (Sampling)  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 43, column 2 to column 43) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 43, column 2 to column 43) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: weibull_lpdf: Scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 53, column 4 to column 102) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: weibull_lpdf: Scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 53, column 4 to column 102) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: weibull_lpdf: Scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 53, column 4 to column 102) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: weibull_lpdf: Scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 53, column 4 to column 102) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 43, column 2 to column 43) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 43, column 2 to column 43) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: weibull_lpdf: Scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f846c71d13.stan', line 53, column 4 to column 102) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 1 finished in 0.0 seconds. #> Chain 2 finished in 0.0 seconds. #>  #> Both chains finished successfully. #> Mean chain execution time: 0.0 seconds. #> Total execution time: 0.3 seconds. #>  brmSurvPlot(fit1, form = ss1$pcvrForm, df = ss1$df)   # note that using the cumulative hazard to calculate survival is likely to underestimate # survival in these plots if events do not start immediately. ss2 <- growthSS(   model = \"survival binomial\", form = y > 100 ~ time | id / group,   df = df, start = c(-4, 3) ) #> Prior is numeric, replicating to 2 length 2 elements (mu, sd) and assuming order a, b #> Priors and parameters are not the same length. Output will assume that priors are for groups and are in order: a, b fit2 <- fitGrowth(ss2, iter = 600, cores = 2, chains = 2, backend = \"cmdstanr\") #> Start sampling #> Running MCMC with 2 parallel chains... #>  #> Chain 1 Iteration:   1 / 600 [  0%]  (Warmup)  #> Chain 1 Iteration: 100 / 600 [ 16%]  (Warmup)  #> Chain 1 Iteration: 200 / 600 [ 33%]  (Warmup)  #> Chain 1 Iteration: 300 / 600 [ 50%]  (Warmup)  #> Chain 1 Iteration: 301 / 600 [ 50%]  (Sampling)  #> Chain 2 Iteration:   1 / 600 [  0%]  (Warmup)  #> Chain 2 Iteration: 100 / 600 [ 16%]  (Warmup)  #> Chain 2 Iteration: 200 / 600 [ 33%]  (Warmup)  #> Chain 1 Iteration: 400 / 600 [ 66%]  (Sampling)  #> Chain 1 Iteration: 500 / 600 [ 83%]  (Sampling)  #> Chain 1 Iteration: 600 / 600 [100%]  (Sampling)  #> Chain 2 Iteration: 300 / 600 [ 50%]  (Warmup)  #> Chain 2 Iteration: 301 / 600 [ 50%]  (Sampling)  #> Chain 2 Iteration: 400 / 600 [ 66%]  (Sampling)  #> Chain 2 Iteration: 500 / 600 [ 83%]  (Sampling)  #> Chain 2 Iteration: 600 / 600 [100%]  (Sampling)  #> Chain 1 finished in 0.2 seconds. #> Chain 2 finished in 0.2 seconds. #>  #> Both chains finished successfully. #> Mean chain execution time: 0.2 seconds. #> Total execution time: 0.3 seconds. #>  brmSurvPlot(fit2, form = ss2$pcvrForm, df = ss2$df)  # }"},{"path":"https://danforthcenter.github.io/pcvr/reference/brmViolin.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to visualize hypotheses tested on brms models similar to those made using growthSS outputs. — brmViolin","title":"Function to visualize hypotheses tested on brms models similar to those made using growthSS outputs. — brmViolin","text":"Function visualize hypotheses tested brms models similar made using growthSS outputs.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/brmViolin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to visualize hypotheses tested on brms models similar to those made using growthSS outputs. — brmViolin","text":"","code":"brmViolin(fit, ss, hypothesis)"},{"path":"https://danforthcenter.github.io/pcvr/reference/brmViolin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to visualize hypotheses tested on brms models similar to those made using growthSS outputs. — brmViolin","text":"fit brmsfit object dataframe draws. need combine multiple models use combineDraws merge draws single dataframe testing. ss pcvrss object. component currently used pcvrForm. hypothesis hypothesis expressed character string style used brms::hypothesis testGrowth. hypothesis \"...\" can used mean \"groups parameter\" hypothesis \"... / A_group1 > 1.05\" include \"\" coefficients groups 1:N along x axis, see examples. hypothesis using several parameters per group (second example) math around parameters ellipses wrapped parentheses. Note currently single hypothesis option (...) supports hypotheses using two parameters model time (ie, \"groupA / groupB > 1.05\" works \"(groupA / groupB) - (groupC / groupD) > 1\" ).","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/brmViolin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to visualize hypotheses tested on brms models similar to those made using growthSS outputs. — brmViolin","text":"Returns ggplot showing brms model's posterior distributions violins filled posterior probability hypothesis.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/brmViolin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to visualize hypotheses tested on brms models similar to those made using growthSS outputs. — brmViolin","text":"","code":"# \\donttest{ set.seed(123) simdf <- growthSim(   \"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 180, 190, 160), \"B\" = c(13, 11, 10, 10), \"C\" = c(3, 3, 3.25, 3.5)) ) ss <- growthSS(   model = \"logistic\", form = y ~ time | id / group, sigma = \"int\",   list(\"A\" = 130, \"B\" = 10, \"C\" = 3),   df = simdf, type = \"brms\" )  fit <- fitGrowth(ss, backend = \"cmdstanr\", iter = 500, chains = 1, cores = 1) #> Start sampling #> Init values were only set for a subset of parameters.  #> Missing init values for the following parameters: #> b_sigma, Intercept_nu #>  #> To disable this message use options(cmdstanr_warn_inits = FALSE). #> Running MCMC with 1 chain... #>  #> Chain 1 Iteration:   1 / 500 [  0%]  (Warmup)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Location parameter[1] is -nan, but must be finite! (in '/tmp/RtmpHeVx4q/model-a6f81a4435d0.stan', line 97, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Iteration: 100 / 500 [ 20%]  (Warmup)  #> Chain 1 Iteration: 200 / 500 [ 40%]  (Warmup)  #> Chain 1 Iteration: 251 / 500 [ 50%]  (Sampling)  #> Chain 1 Iteration: 350 / 500 [ 70%]  (Sampling)  #> Chain 1 Iteration: 450 / 500 [ 90%]  (Sampling)  #> Chain 1 Iteration: 500 / 500 [100%]  (Sampling)  #> Chain 1 finished in 6.8 seconds. brmViolin(fit, ss, \".../A_groupd > 1.05\") # all groups used  brmViolin(fit, ss, \"abs(1 - ((...)/(C_groupd - B_groupd))) > 0.05\") # rather arbitrary  brmViolin(fit, ss, \"abs(1 - ((...)/(C_groupa - B_groupd))) > 0.05\") # totally arbitrary  brmViolin(fit, ss, \"A_groupa/A_groupd > 1.05\") # only these two groups  # }"},{"path":"https://danforthcenter.github.io/pcvr/reference/bw.outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove outliers from bellwether data using cook's distance — bw.outliers","title":"Remove outliers from bellwether data using cook's distance — bw.outliers","text":"Remove outliers bellwether data using cook's distance","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/bw.outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove outliers from bellwether data using cook's distance — bw.outliers","text":"","code":"bw.outliers(   df = NULL,   phenotype,   naTo0 = FALSE,   group = c(),   cutoff = 3,   outlierMethod = \"cooks\",   plotgroup = c(\"barcode\", \"rotation\"),   plot = TRUE,   x = NULL,   traitCol = \"trait\",   valueCol = \"value\",   labelCol = \"label\",   idCol = NULL,   ncp = NULL,   separate = NULL )"},{"path":"https://danforthcenter.github.io/pcvr/reference/bw.outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove outliers from bellwether data using cook's distance — bw.outliers","text":"df Data frame use. Can long wide format. phenotype Column use classify outliers. length > 1 taken multi-value traits use. See examples. naTo0 Logical, NA values changed 0. group Grouping variables find outliers character vector. typically time  design variables (DAS, genotype, treatment, etc). used predictors `phenotype` generalized linear model. cutoff Cutoff something \"outlier\" expressed multiplier mean Cooks Distance data. defaults 5, higher values conservative (removing less data). outlierMethod Method used detecting outliers. Currently \"cooks\" \"mahalanobis\" distances supported, \"mahalanobis\" supported multi-value traits. plotgroup Grouping variables drawing plots plot=TRUE. Typically identifier images plant time defaults c('barcode',\"rotation\"). plot Logical, TRUE list returned ggplot dataframe. x Optional specification x axis variable plot true. left NULL (default) first element `group` used. traitCol Column phenotype names, defaults \"trait\". generally need changed default.    valueCol present colnames(df) data    assumed long format. valueCol Column phenotype values, defaults \"value\". generally need changed default. labelCol Column phenotype labels long data, defaults \"label\". generally need changed default. idCol Column(s) identify individuals time. Defaults plotGroup. ncp Optionally specify number principle components used MV data outlier detection cooks distance. left NULL (default) 3 used. separate Optionally separate data variable speed modeling step. design variable many levels may helpful separate variable. Note subset data model change outlier removal (generally conservative).","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/bw.outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove outliers from bellwether data using cook's distance — bw.outliers","text":"input dataframe outliers removed optionally plot (plot returned output list).","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/bw.outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove outliers from bellwether data using cook's distance — bw.outliers","text":"","code":"sv <- growthSim(\"logistic\",   n = 5, t = 20,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) sv[130, ]$y <- 500 sv_res <- bw.outliers(   df = sv, phenotype = \"y\", naTo0 = FALSE, cutoff = 15,   group = c(\"time\", \"group\"), outlierMethod = \"cooks\",   plotgroup = \"id\", plot = TRUE ) sv_res$plot  # \\donttest{ tryCatch(   { # in case offline     library(data.table)     mvw <- read.pcv(paste0(       \"https://media.githubusercontent.com/media/joshqsumner/\",       \"pcvrTestData/main/pcv4-multi-value-traits.csv\"     ), mode = \"wide\", reader = \"fread\")     mvw$genotype <- substr(mvw$barcode, 3, 5)     mvw$genotype <- ifelse(mvw$genotype == \"002\", \"B73\",       ifelse(mvw$genotype == \"003\", \"W605S\",         ifelse(mvw$genotype == \"004\", \"MM\", \"Mo17\")       )     )     mvw$fertilizer <- substr(mvw$barcode, 8, 8)     mvw$fertilizer <- ifelse(mvw$fertilizer == \"A\", \"100\",       ifelse(mvw$fertilizer == \"B\", \"50\", \"0\")     )     mvw <- bw.time(mvw, timeCol = \"timestamp\", group = \"barcode\", plot = FALSE)      phenotypes <- which(grepl(\"hue_freq\", colnames(mvw)))      mvw2 <- bw.outliers(       df = mvw, phenotype = phenotypes, naTo0 = FALSE, outlierMethod = \"cooks\",       group = c(\"DAS\", \"genotype\", \"fertilizer\"), cutoff = 3, plotgroup = c(\"barcode\", \"rotation\")     )       mvl <- read.pcv(paste0(       \"https://media.githubusercontent.com/media/joshqsumner/\",       \"pcvrTestData/main/pcv4-multi-value-traits.csv\"     ), mode = \"long\")     mvl$genotype <- substr(mvl$barcode, 3, 5)     mvl$genotype <- ifelse(mvl$genotype == \"002\", \"B73\",       ifelse(mvl$genotype == \"003\", \"W605S\",         ifelse(mvl$genotype == \"004\", \"MM\", \"Mo17\")       )     )     mvl$fertilizer <- substr(mvl$barcode, 8, 8)     mvl$fertilizer <- ifelse(mvl$fertilizer == \"A\", \"100\",       ifelse(mvl$fertilizer == \"B\", \"50\", \"0\")     )     mvl <- bw.time(mvl, timeCol = \"timestamp\", group = \"barcode\", plot = FALSE)      mvl2 <- bw.outliers(       df = mvl, phenotype = \"hue_frequencies\", naTo0 = FALSE, outlierMethod = \"cooks\",       group = c(\"DAS\", \"genotype\", \"fertilizer\"), cutoff = 3, plotgroup = c(\"barcode\", \"rotation\")     )   },   error = function(e) {     message(e)   } ) #> Warning: 14 groupings had all observations removed #> Warning: 14 groupings had all observations removed # }"},{"path":"https://danforthcenter.github.io/pcvr/reference/bw.time.html","id":null,"dir":"Reference","previous_headings":"","what":"Time conversion and plotting for bellwether data — bw.time","title":"Time conversion and plotting for bellwether data — bw.time","text":"Time conversion plotting bellwether data","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/bw.time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time conversion and plotting for bellwether data — bw.time","text":"","code":"bw.time(   df = NULL,   mode = c(\"DAS\", \"DAP\", \"DAE\"),   plantingDelay = NULL,   phenotype = NULL,   cutoff = 1,   timeCol = \"timestamp\",   group = \"Barcodes\",   plot = TRUE,   format = \"%Y-%m-%d %H:%M:%S\",   traitCol = \"trait\",   valueCol = \"value\",   index = NULL,   digits = 0 )"},{"path":"https://danforthcenter.github.io/pcvr/reference/bw.time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time conversion and plotting for bellwether data — bw.time","text":"df Data frame use, can wide long format. mode One \"DAS\", \"DAP\" \"DAE\" (Days Planting Days Emergence). Defaults adding columns. Note timeCol numeric DAS always returned. plantingDelay `mode` includes \"DAP\" `plantingDelay` used adjust \"DAS\" phenotype `mode` includes \"DAE\" phenotype used classify emergence. cutoff `mode` includes \"DAE\" value used classify emergence. Defaults 1, meaning image value 1 `phenotype` \"emerged\". timeCol Column input time values, defaults \"timestamp\". numeric assumed timestamp format format argument. group Grouping variables specify unique plants character vector. defaults \"Barcodes\". taken together identify unique plant across time, although often \"angle\" \"rotation\" added. plot Logical, plots new time variables printed? format R POSIXct format, defaults lemnatech standard format. used timeCol numeric. traitCol Column phenotype names, defaults \"trait\". generally need changed default.    valueCol present colnames(df) data    assumed long format. valueCol Column phenotype values, defaults \"value\". generally need changed default. index Optionally time use beginning experiment. may useful multiple datasets adding data bw.water plants watered imaged want index days midnight. defaults NULL take value coercible POSIXct .POSIXct(... , tz=\"UTC\") \"2020-01-01 18:30:00\" digits Number digits round DAS timeCol numeric, defaults 0.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/bw.time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time conversion and plotting for bellwether data — bw.time","text":"input dataframe new numeric columns different ways describing time experiment. plot TRUE ggplot also returned part list.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/bw.time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time conversion and plotting for bellwether data — bw.time","text":"","code":"# \\donttest{ f <- \"https://raw.githubusercontent.com/joshqsumner/pcvrTestData/main/pcv4-single-value-traits.csv\" tryCatch(   {     sv <- read.pcv(       f,       mode = \"wide\", reader = \"fread\"     )     sv$genotype = substr(sv$barcode, 3, 5)     sv$genotype = ifelse(sv$genotype == \"002\", \"B73\",       ifelse(sv$genotype == \"003\", \"W605S\",         ifelse(sv$genotype == \"004\", \"MM\", \"Mo17\")       )     )     sv$fertilizer = substr(sv$barcode, 8, 8)     sv$fertilizer = ifelse(sv$fertilizer == \"A\", \"100\",       ifelse(sv$fertilizer == \"B\", \"50\", \"0\")     )     sv <- bw.time(sv,       plantingDelay = 0, phenotype = \"area_pixels\", cutoff = 10,       timeCol = \"timestamp\", group = c(\"barcode\", \"rotation\"), plot = FALSE     )      svl <- read.pcv(       f,       mode = \"long\", reader = \"fread\"     )     svl$genotype = substr(svl$barcode, 3, 5)     svl$genotype = ifelse(svl$genotype == \"002\", \"B73\",       ifelse(svl$genotype == \"003\", \"W605S\",         ifelse(svl$genotype == \"004\", \"MM\", \"Mo17\")       )     )     svl$fertilizer = substr(svl$barcode, 8, 8)     svl$fertilizer = ifelse(svl$fertilizer == \"A\", \"100\",       ifelse(svl$fertilizer == \"B\", \"50\", \"0\")     )     svl <- bw.time(svl,       plantingDelay = 0, phenotype = \"area_pixels\", cutoff = 10, timeCol = \"timestamp\",       group = c(\"barcode\", \"rotation\"), plot = FALSE     )   },   error = function(e) {     message(e)   } ) # }"},{"path":"https://danforthcenter.github.io/pcvr/reference/bw.water.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in lemnatech watering data from metadata.json files — bw.water","title":"Read in lemnatech watering data from metadata.json files — bw.water","text":"Read lemnatech watering data metadata.json files","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/bw.water.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in lemnatech watering data from metadata.json files — bw.water","text":"","code":"bw.water(file = NULL, envKey = \"environment\")"},{"path":"https://danforthcenter.github.io/pcvr/reference/bw.water.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in lemnatech watering data from metadata.json files — bw.water","text":"file Path json file lemnatech metadata. envKey Character string representing json key environment data. default set \"environment\". Currently situations makes sense change.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/bw.water.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in lemnatech watering data from metadata.json files — bw.water","text":"data frame containing bellwether watering data","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/bw.water.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in lemnatech watering data from metadata.json files — bw.water","text":"","code":"tryCatch(   {     w <- bw.water(\"https://raw.githubusercontent.com/joshqsumner/pcvrTestData/main/metadata.json\")   },   error = function(e) {     message(e)   } ) #> Using the first watering time, 2023-04-13 23:28:17.58, as beginning of experiment to assign DAS"},{"path":"https://danforthcenter.github.io/pcvr/reference/checkGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to check groups in data. — checkGroups","title":"Helper function to check groups in data. — checkGroups","text":"Helper function check groups data.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/checkGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to check groups in data. — checkGroups","text":"","code":"checkGroups(df, group)"},{"path":"https://danforthcenter.github.io/pcvr/reference/checkGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to check groups in data. — checkGroups","text":"df Data frame use. group Set variables use grouping observations. taken together identify unique plant (unique plant unique angle) across time.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/checkGroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to check groups in data. — checkGroups","text":"duplicates grouping return message code start checking duplicates data.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/checkGroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to check groups in data. — checkGroups","text":"","code":"df <- growthSim(\"linear\",   n = 10, t = 10,   params = list(\"A\" = c(2, 1.5)) ) checkGroups(df, c(\"time\", \"id\", \"group\")) #> Grouping is unique df$time[12] <- 3 checkGroups(df, c(\"time\", \"id\", \"group\")) #> There are 1 observations that are not uniquely identified. #> The max number of duplicates is 2. #> Run `df[duplicated(interaction(df$time, df$id, df$group)),]` to see the duplicated rows, #>  or df[interaction(df$time, df$id, df$group)=='3.id_2.a',] to see the first duplicated instance."},{"path":"https://danforthcenter.github.io/pcvr/reference/combineDraws.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Draws From brms Models — combineDraws","title":"Combine Draws From brms Models — combineDraws","text":"Helper function binding draws several brms models make data.frame use brms::hypothesis(). also check draws comparable using basic model metrics.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/combineDraws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Draws From brms Models — combineDraws","text":"","code":"combineDraws(..., message = TRUE)"},{"path":"https://danforthcenter.github.io/pcvr/reference/combineDraws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Draws From brms Models — combineDraws","text":"... number brmsfit objects /dataframes draws (generally type model fit different data) message Logical, messages possible problems printed? Default TRUE. warn models may converged, different numbers draws objects, models different formulations.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/combineDraws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Draws From brms Models — combineDraws","text":"Returns dataframe posterior draws.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/combineDraws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine Draws From brms Models — combineDraws","text":"","code":"# note that this example will fit several bayesian models and may run for several minutes. # \\donttest{ simdf <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(     \"A\" = c(200, 160, 220, 200, 140, 300),     \"B\" = c(13, 11, 10, 9, 16, 12),     \"C\" = c(3, 3.5, 3.2, 2.8, 3.3, 2.5)   ) ) ss_ab <- growthSS(   model = \"logistic\", form = y ~ time | id / group,   sigma = \"logistic\", df = simdf[simdf$group %in% c(\"a\", \"b\"), ],   start = list(     \"A\" = 130, \"B\" = 12, \"C\" = 3,     \"sigmaA\" = 15, \"sigmaB\" = 10, \"sigmaC\" = 3   ), type = \"brms\" )  ss_cd <- growthSS(   model = \"logistic\", form = y ~ time | id / group,   sigma = \"logistic\", df = simdf[simdf$group %in% c(\"c\", \"d\"), ],   start = list(     \"A\" = 130, \"B\" = 12, \"C\" = 3,     \"sigmaA\" = 15, \"sigmaB\" = 10, \"sigmaC\" = 3   ), type = \"brms\" )  ss_ef <- growthSS(   model = \"logistic\", form = y ~ time | id / group,   sigma = \"logistic\", df = simdf[simdf$group %in% c(\"e\", \"f\"), ],   start = list(     \"A\" = 130, \"B\" = 12, \"C\" = 3,     \"sigmaA\" = 15, \"sigmaB\" = 10, \"sigmaC\" = 3   ), type = \"brms\" ) ss_ef2 <- growthSS(   model = \"gompertz\", form = y ~ time | id / group,   sigma = \"logistic\", df = simdf[simdf$group %in% c(\"e\", \"f\"), ],   start = list(     \"A\" = 130, \"B\" = 12, \"C\" = 3,     \"sigmaA\" = 15, \"sigmaB\" = 10, \"sigmaC\" = 3   ), type = \"brms\" )   fit_ab <- fitGrowth(ss_ab, chains = 1, cores = 1, iter = 1000) #> Start sampling #> Init values were only set for a subset of parameters.  #> Missing init values for the following parameters: #> Intercept_nu #>  #> To disable this message use options(cmdstanr_warn_inits = FALSE). #> Running MCMC with 1 chain... #>  #> Chain 1 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is -nan, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is -nan, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[501] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[501] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Location parameter[1] is -nan, but must be finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is -nan, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[501] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 1 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 1 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 1 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 1 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 1 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 1 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 1 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 1 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 1 finished in 7.0 seconds. fit_ab2 <- fitGrowth(ss_ab, chains = 1, cores = 1, iter = 1200) #> Start sampling #> Init values were only set for a subset of parameters.  #> Missing init values for the following parameters: #> Intercept_nu #>  #> To disable this message use options(cmdstanr_warn_inits = FALSE). #> Running MCMC with 1 chain... #>  #> Chain 1 Iteration:    1 / 1200 [  0%]  (Warmup)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is -nan, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Iteration:  100 / 1200 [  8%]  (Warmup)  #> Chain 1 Iteration:  200 / 1200 [ 16%]  (Warmup)  #> Chain 1 Iteration:  300 / 1200 [ 25%]  (Warmup)  #> Chain 1 Iteration:  400 / 1200 [ 33%]  (Warmup)  #> Chain 1 Iteration:  500 / 1200 [ 41%]  (Warmup)  #> Chain 1 Iteration:  600 / 1200 [ 50%]  (Warmup)  #> Chain 1 Iteration:  601 / 1200 [ 50%]  (Sampling)  #> Chain 1 Iteration:  700 / 1200 [ 58%]  (Sampling)  #> Chain 1 Iteration:  800 / 1200 [ 66%]  (Sampling)  #> Chain 1 Iteration:  900 / 1200 [ 75%]  (Sampling)  #> Chain 1 Iteration: 1000 / 1200 [ 83%]  (Sampling)  #> Chain 1 Iteration: 1100 / 1200 [ 91%]  (Sampling)  #> Chain 1 Iteration: 1200 / 1200 [100%]  (Sampling)  #> Chain 1 finished in 13.3 seconds. fit_cd <- fitGrowth(ss_cd, chains = 1, cores = 1, iter = 1000) #> Start sampling #> Init values were only set for a subset of parameters.  #> Missing init values for the following parameters: #> Intercept_nu #>  #> To disable this message use options(cmdstanr_warn_inits = FALSE). #> Running MCMC with 1 chain... #>  #> Chain 1 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[501] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[501] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Location parameter[1] is -nan, but must be finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 1 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 1 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 1 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 1 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 1 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 1 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 1 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 1 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 1 finished in 8.5 seconds. fit_ef <- fitGrowth(ss_ef, chains = 1, cores = 1, iter = 1000) #> Start sampling #> Init values were only set for a subset of parameters.  #> Missing init values for the following parameters: #> Intercept_nu #>  #> To disable this message use options(cmdstanr_warn_inits = FALSE). #> Running MCMC with 1 chain... #>  #> Chain 1 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Location parameter[1] is -nan, but must be finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is -nan, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[2] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f85bb21699.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 1 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 1 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 1 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 1 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 1 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 1 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 1 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 1 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 1 finished in 7.7 seconds. fit_ef2 <- fitGrowth(ss_ef2, chains = 1, cores = 1, iter = 1000) #> Start sampling #> Init values were only set for a subset of parameters.  #> Missing init values for the following parameters: #> Intercept_nu #>  #> To disable this message use options(cmdstanr_warn_inits = FALSE). #> Running MCMC with 1 chain... #>  #> Chain 1 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is -nan, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f86abec574.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is -nan, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f86abec574.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f86abec574.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[1] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f86abec574.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter[2] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f86abec574.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Degrees of freedom parameter[1] is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f86abec574.stan', line 119, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 1 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 1 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 1 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 1 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 1 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 1 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 1 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 1 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 1 finished in 19.8 seconds.  x <- combineDraws(fit_ab, fit_cd, fit_ef) draws_ef <- as.data.frame(fit_ef) draws_ef <- draws_ef[, grepl(\"^b_\", colnames(draws_ef))] x2 <- combineDraws(fit_ab2, fit_cd, draws_ef) #> fit_cd has fewer than 600 draws and will be padded with 100 NAs #> draws_ef has fewer than 600 draws and will be padded with 100 NAs x3 <- combineDraws(fit_ab, fit_cd, fit_ef2) #> Some of these models have different growth formulas, consider if this is what you want. #> fit_ab: y~A/(1 + exp((B - time)/C)), fit_cd: y~A/(1 + exp((B - time)/C)), fit_ef2: y~A * exp(-B * exp(-C * time)) # }"},{"path":"https://danforthcenter.github.io/pcvr/reference/conjugate-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class conjugate for output from the pcvr::conjugate function. — conjugate-class","title":"Class conjugate for output from the pcvr::conjugate function. — conjugate-class","text":"Comparisons made conjugate function return objects class containing parameters prior posterior distributions, hypothesis tests, ROPE tests, Bayes Factors, plots posterior.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/conjugate-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class conjugate for output from the pcvr::conjugate function. — conjugate-class","text":"See methods(class = \"conjugate\") overview available methods.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/conjugate-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class conjugate for output from the pcvr::conjugate function. — conjugate-class","text":"summary Summary data frame results posterior Posterior distribution list named lists prior Prior distribution list named lists plot Optionally plot distributions differences data data s1 s2 arguments conjugate. call Matched call conjugate.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/reference/conjugate.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian testing using conjugate priors and method of moments for single or multi value traits. — conjugate","title":"Bayesian testing using conjugate priors and method of moments for single or multi value traits. — conjugate","text":"Function perform bayesian tests ROPE comparisons using single multi value traits several distributions.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/conjugate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian testing using conjugate priors and method of moments for single or multi value traits. — conjugate","text":"","code":"conjugate(   s1 = NULL,   s2 = NULL,   method = c(\"t\", \"gaussian\", \"beta\", \"binomial\", \"lognormal\", \"lognormal2\", \"poisson\",     \"negbin\", \"vonmises\", \"vonmises2\", \"uniform\", \"pareto\", \"gamma\", \"bernoulli\",     \"exponential\", \"bivariate_uniform\", \"bivariate_gaussian\", \"bivariate_lognormal\"),   priors = NULL,   plot = NULL,   rope_range = NULL,   rope_ci = 0.89,   cred.int.level = 0.89,   hypothesis = \"equal\",   bayes_factor = NULL,   support = NULL )"},{"path":"https://danforthcenter.github.io/pcvr/reference/conjugate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian testing using conjugate priors and method of moments for single or multi value traits. — conjugate","text":"s1 data.frame matrix multi value traits vector single value traits. multi value trait used column names include number representing \"bin\". Alternatively distributions \"binomial\" (requires list data \"successes\" \"trials\" numeric vectors list, see examples) can formula specifying outcome ~ group group exactly 2 levels. using wide MV trait data formula specify column positions ~ grouping 1:180 ~ group. sample shown red plotted. s2 optional second sample, s1 formula dataframe. sample shown blue plotted. method distribution/method use. Currently \"t\", \"gaussian\", \"beta\", \"binomial\", \"lognormal\", \"lognormal2\", \"poisson\", \"negbin\" (negative binomial), \"uniform\", \"pareto\", \"gamma\", \"bernoulli\", \"exponential\", \"vonmises\", \"vonmises2\" supported. count (binomial, poisson negative binomial), bernoulli, exponential, pareto distributions implemented single value traits due updating /nature input data. \"t\" \"gaussian\" methods use T distribution \"t\" testing difference means \"gaussian\" testing difference distributions (similar Z test). Von Mises options use circular data (instance hue values circular quality data relevant). Note non-circular distributions can compared . done caution may supported downstream functions. also 3 bivariate conjugate priors supported use single value data. \"bivariate_uniform\", \"bivariate_gaussian\" \"bivariate_lognormal\". priors Prior distributions described list lists. single list duplicated second sample, generally good idea samples use distribution (method). Elements inner lists named parameter represent (see examples). names vary method (see details).  default NULL weak priors (generally jeffrey's priors) used.  posterior part output can also recycled new prior Bayesian  updating appropriate use. plot deprecated, use plot method instead. rope_range Optional vector specifying region practical equivalence. interval considered practically equivalent effect. Kruschke (2018) suggests c(-0.1, 0.1) broadly reasonable ROPE standardized parameters. range also rescaled standard deviation/magnitude non-standardized parameters, ultimately informed setting scientific question. See Kruschke (2018) details ROPE Bayesian methods aide decision-making doi:10.1177/2515245918771304  doi:10.1037/a0029146 . rope_ci credible interval probability use ROPE. Defaults 0.89. cred.int.level credible interval probability use computing HDI samples, defaults 0.89. hypothesis Direction hypothesis two samples provided. Options \"unequal\", \"equal\", \"greater\", \"lesser\",  read \"sample1 greater sample2\". bayes_factor Optional point interval evaluate bayes factors . Note generally makes sense use informative priors change odds prior posterior meaningful data. non-NULL columns bayes factors added summary output. Note implemented univariate distributions. support Deprecated","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/conjugate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian testing using conjugate priors and method of moments for single or multi value traits. — conjugate","text":"conjugate-class object slots including: summary: data frame containing HDI/HDE values sample    ROPE well posterior probability hypothesis ROPE test (specified).    HDE \"Highest Density    Estimate\" posterior, tallest part probability density function.    HDI Highest Density Interval, interval contains X% posterior    distribution, cred.int.level = 0.8 corresponds HDI includes 80 percent    posterior probability. Bayes factors calculated posterior/prior sample. posterior: list updated parameters format prior     given method. desired allow Bayesian updating. prior: prior list format posterior. plot: ggplot showing distribution samples optionally    distribution differences/ROPE. plot_parameters: Parameters used making plot data.    Contains support range posterior recoded use density function. data: Data s1 s2 arguments. call: function call.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/conjugate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian testing using conjugate priors and method of moments for single or multi value traits. — conjugate","text":"Prior distributions default weakly informative cases may wish change . \"t\", \"gaussian\", \"lognormal\": priors = list(mu = 0, sd = 10),     mu mean sd standard deviation. lognormal method describe     normal distribution mean parameter lognormal data log scale. \"beta\", \"bernoulli\", \"binomial\":    priors = list(= 0.5, b = 0.5),     b shape parameters beta distribution. Note binomial     distribution used prior success probability P,     assumed beta distributed beta-binomial distribution. \"lognormal2\":  priors = list(= 1, b = 1) ,    b shape scale parameters gamma distribution lognormal data's    precision parameter (using alternative mu, precision parameterization). \"gamma\":  priors = list(shape = 0.5, scale = 0.5, known_shape = 1),     shape scale respective parameters gamma distributed rate     (inverse scale) parameter gamma distributed data. \"poisson\" \"exponential\":  priors = list(= 0.5,b = 0.5),     b shape parameters gamma distribution. \"negbin\":  priors = list(r = 10, = 0.5, b = 0.5),     r r parameter negative binomial distribution     (representing number successes required)      b shape parameters beta distribution.      Note r value updated.       conjugate beta prior valid r fixed known,       limitation method. \"uniform\":  list(scale = 0.5, location = 0.5), scale     scale parameter pareto distributed upper boundary location location parameter     pareto distributed upper boundary. Note different sources use different     terminology parameters. names chosen consistency     extraDistr implementation pareto distribution. Wikipedia parameters     called shape scale, corresponding extraDistr's scale location respecitvely,     can confusing. Note lower boundary uniform assumed 0. \"pareto\":  list(= 1, b = 1, known_location = min(data)),     b shape scale parameters gamma distribution pareto distribution's     scale parameter. case location assumed constant known, less     limitation knowing r negative binomial method since location generally     right around/just minimum sample data. Note pareto method     implemented currently single value traits since one statistics needed update     gamma distribution product data currently method     calculate similar sufficient statistic multi value traits. \"vonmises\":  list(mu = 0, kappa = 0.5, boundary = c(-pi, pi),     known_kappa = 1, n = 1), mu direction circular distribution (mean),     kappa precision mean, boundary vector including two values     circular data \"wraps\" around circle, known_kappa fixed value precision     total distribution, n number prior observations. Von Mises option     updates conjugate prior mean direction, Von-Mises distributed.     ways analogous T method, assuming fixed variance mean     updated. Note due rescaling works larger circular boundaries can slow     plot. \"vonmises2\":  priors = list(mu = 0, kappa = 0.5,     boundary = c(-pi, pi), n = 1), mu kappa mean direction precision     von mises distribution, boundary vector including two values     circular data \"wraps\" around circle, n number prior observations.     Von-Mises implementation assume constant variance instead uses MLE estimate     kappa data updates kappa prior weighted average data prior.     mu parameter updated per Von-Mises conjugacy. \"bivariate_uniform\":      list(location_l = 1, location_u = 2, scale = 1), scale     shared scale parameter pareto distributed upper lower boundaries location l u     location parameters Lower (l) Upper (u) boundaries uniform     distribution. Note uses terminology pareto distribution's parameters     \"uniform\" method. \"bivariate_gaussian\" \"bivariate_lognormal\":      list(mu = 0, sd = 10, = 1, b = 1), mu sd     mean standard deviation Normal distribution data's mean b     shape scale gamma distribution precision. Note internally uses     Mu Precision parameterization normal distribution parameters     shown plot tested, priors use Mu SD normal distribution mean.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/reference/conjugate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian testing using conjugate priors and method of moments for single or multi value traits. — conjugate","text":"","code":"mv_ln <- mvSim(   dists = list(     rlnorm = list(meanlog = log(130), sdlog = log(1.2)),     rlnorm = list(meanlog = log(100), sdlog = log(1.3))   ),   n_samples = 30 )  # lognormal mv ln_mv_ex <- conjugate(   s1 = mv_ln[1:30, -1], s2 = mv_ln[31:60, -1], method = \"lognormal\",   priors = list(mu = 5, sd = 2),   rope_range = c(-40, 40), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\", support = NULL ) #> Warning: support argument is deprecated.  # lognormal sv ln_sv_ex <- conjugate(   s1 = rlnorm(100, log(130), log(1.3)), s2 = rlnorm(100, log(100), log(1.6)),   method = \"lognormal\",   priors = list(mu = 5, sd = 2),   rope_range = NULL, rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\", support = NULL ) #> Warning: support argument is deprecated.  # Z test mv example  mv_gauss <- mvSim(   dists = list(     rnorm = list(mean = 50, sd = 10),     rnorm = list(mean = 60, sd = 12)   ),   n_samples = 30 )  gauss_mv_ex <- conjugate(   s1 = mv_gauss[1:30, -1], s2 = mv_gauss[31:60, -1], method = \"gaussian\",   priors = list(mu = 30, sd = 10),   rope_range = c(-25, 25), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\", support = NULL ) #> Warning: support argument is deprecated.  # T test sv example with two different priors  gaussianMeans_sv_ex <- conjugate(   s1 = rnorm(10, 50, 10), s2 = rnorm(10, 60, 12), method = \"t\",   priors = list(list(mu = 40, sd = 10), list(mu = 45, sd = 8)),   rope_range = c(-5, 8), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\", support = NULL ) #> Warning: support argument is deprecated.  # beta mv example  set.seed(123) mv_beta <- mvSim(   dists = list(     rbeta = list(shape1 = 5, shape2 = 8),     rbeta = list(shape1 = 10, shape2 = 10)   ),   n_samples = c(30, 20) )  beta_mv_ex <- conjugate(   s1 = mv_beta[1:30, -1], s2 = mv_beta[31:50, -1], method = \"beta\",   priors = list(a = 0.5, b = 0.5),   rope_range = c(-0.1, 0.1), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\",   bayes_factor = 0.5 # note this may not be reasonable with these priors )  # beta sv example  beta_sv_ex <- conjugate(   s1 = rbeta(20, 5, 5), s2 = rbeta(20, 8, 5), method = \"beta\",   priors = list(a = 0.5, b = 0.5),   rope_range = c(-0.1, 0.1), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\",   bayes_factor = c(0.5, 0.75) # note this may not be reasonable with these priors )  # binomial sv example # note that specifying trials = 20 would also work # and the number of trials will be recycled to the length of successes  binomial_sv_ex <- conjugate(   s1 = list(successes = c(15, 14, 16, 11), trials = c(20, 20, 20, 20)),   s2 = list(successes = c(7, 8, 10, 5), trials = c(20, 20, 20, 20)), method = \"binomial\",   priors = list(a = 0.5, b = 0.5),   rope_range = c(-0.1, 0.1), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\" )  # poisson sv example  poisson_sv_ex <- conjugate(   s1 = rpois(20, 10), s2 = rpois(20, 8), method = \"poisson\",   priors = list(a = 0.5, b = 0.5),   rope_range = c(-1, 1), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\" )  # negative binomial sv example # knowing r (required number of successes) is an important caveat for this method. # in the current implementation we suggest using the poisson method for data such as leaf counts  negbin_sv_ex <- conjugate(   s1 = rnbinom(20, 10, 0.5), s2 = rnbinom(20, 10, 0.25), method = \"negbin\",   priors = list(r = 10, a = 0.5, b = 0.5),   rope_range = c(-1, 1), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\" )  # von mises mv example  mv_gauss <- mvSim(   dists = list(     rnorm = list(mean = 50, sd = 10),     rnorm = list(mean = 60, sd = 12)   ),   n_samples = c(30, 40) ) vm1_ex <- conjugate(   s1 = mv_gauss[1:30, -1],   s2 = mv_gauss[31:70, -1],   method = \"vonmises\",   priors = list(mu = 45, kappa = 1, boundary = c(0, 180), known_kappa = 1, n = 1),   rope_range = c(-1, 1), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\" )  # von mises 2 sv example vm2_ex <- conjugate(   s1 = brms::rvon_mises(10, 2, 2),   s2 = brms::rvon_mises(15, 3, 3),   method = \"vonmises2\",   priors = list(mu = 0, kappa = 0.5, boundary = c(-pi, pi), n = 1),   cred.int.level = 0.95 )"},{"path":"https://danforthcenter.github.io/pcvr/reference/cumulativePheno.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce phenotypes in longitudinal data to cumulative sums of phenotypes. — cumulativePheno","title":"Reduce phenotypes in longitudinal data to cumulative sums of phenotypes. — cumulativePheno","text":"Often bellwether experiments curious effect  treatment vs control. certain routes analysing data requires   considering phenotypes relative differences compared control.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/cumulativePheno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce phenotypes in longitudinal data to cumulative sums of phenotypes. — cumulativePheno","text":"","code":"cumulativePheno(   df,   phenotypes = NULL,   group = \"barcode\",   timeCol = \"DAS\",   traitCol = \"trait\",   valueCol = \"value\" )"},{"path":"https://danforthcenter.github.io/pcvr/reference/cumulativePheno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce phenotypes in longitudinal data to cumulative sums of phenotypes. — cumulativePheno","text":"df Dataframe use, can long wide format. phenotypes character vector column names phenotypes compared control. group character vector column names identify groups data. Defaults \"barcode\". groups calibrated separately, exception group identifies control within greater hierarchy. timeCol Column name use time data. traitCol Column phenotype names, defaults \"trait\". generally need changed default.    valueCol present colnames(df) data    assumed long format. valueCol Column phenotype values, defaults \"value\". generally need changed default.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/cumulativePheno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce phenotypes in longitudinal data to cumulative sums of phenotypes. — cumulativePheno","text":"dataframe cumulative sum columns added specified phenotypes","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/cumulativePheno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce phenotypes in longitudinal data to cumulative sums of phenotypes. — cumulativePheno","text":"","code":"# \\donttest{ f <- \"https://raw.githubusercontent.com/joshqsumner/pcvrTestData/main/pcv4-single-value-traits.csv\" tryCatch(   {     sv <- read.pcv(       f,       reader = \"fread\"     )     sv$genotype <- substr(sv$barcode, 3, 5)     sv$genotype <- ifelse(sv$genotype == \"002\", \"B73\",       ifelse(sv$genotype == \"003\", \"W605S\",         ifelse(sv$genotype == \"004\", \"MM\", \"Mo17\")       )     )     sv$fertilizer <- substr(sv$barcode, 8, 8)     sv$fertilizer <- ifelse(sv$fertilizer == \"A\", \"100\",       ifelse(sv$fertilizer == \"B\", \"50\", \"0\")     )      sv <- bw.time(sv,       plantingDelay = 0, phenotype = \"area_pixels\", cutoff = 10,       timeCol = \"timestamp\", group = c(\"barcode\", \"rotation\"), plot = TRUE     )$data     sv <- bw.outliers(sv,       phenotype = \"area_pixels\", group = c(\"DAS\", \"genotype\", \"fertilizer\"),       plotgroup = c(\"barcode\", \"rotation\")     )$data     phenotypes <- colnames(sv)[19:35]     phenoForm <- paste0(\"cbind(\", paste0(phenotypes, collapse = \", \"), \")\")     groupForm <- \"DAS+DAP+barcode+genotype+fertilizer\"     form <- as.formula(paste0(phenoForm, \"~\", groupForm))     sv <- aggregate(form, data = sv, mean, na.rm = TRUE)     pixels_per_cmsq <- 42.5^2 # pixel per cm^2     sv$area_cm2 <- sv$area_pixels / pixels_per_cmsq     sv$height_cm <- sv$height_pixels / 42.5     df <- sv     phenotypes <- c(\"area_cm2\", \"height_cm\")     group <- c(\"barcode\")     timeCol <- \"DAS\"     df <- cumulativePheno(df, phenotypes, group, timeCol)       sv_l <- read.pcv(       f,       mode = \"long\", reader = \"fread\"     )     sv_l$genotype <- substr(sv_l$barcode, 3, 5)     sv_l$genotype <- ifelse(sv_l$genotype == \"002\", \"B73\",       ifelse(sv_l$genotype == \"003\", \"W605S\",         ifelse(sv_l$genotype == \"004\", \"MM\", \"Mo17\")       )     )     sv_l$fertilizer <- substr(sv_l$barcode, 8, 8)     sv_l$fertilizer <- ifelse(sv_l$fertilizer == \"A\", \"100\",       ifelse(sv_l$fertilizer == \"B\", \"50\", \"0\")     )     sv_l <- bw.time(sv_l,       plantingDelay = 0, phenotype = \"area_pixels\", cutoff = 10,       timeCol = \"timestamp\", group = c(\"barcode\", \"rotation\")     )$data     sv_l <- cumulativePheno(sv_l,       phenotypes = c(\"area_pixels\", \"height_pixels\"),       group = c(\"barcode\", \"rotation\"), timeCol = \"DAS\"     )   },   error = function(e) {     message(e)   } ) #> Warning: 14 groupings had all observations removed # }"},{"path":"https://danforthcenter.github.io/pcvr/reference/distributionPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for plotting iterations of posterior distributions — distributionPlot","title":"Function for plotting iterations of posterior distributions — distributionPlot","text":"Function plotting iterations posterior distributions","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/distributionPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for plotting iterations of posterior distributions — distributionPlot","text":"","code":"distributionPlot(   fits,   form,   df,   priors = NULL,   params = NULL,   maxTime = NULL,   patch = TRUE )"},{"path":"https://danforthcenter.github.io/pcvr/reference/distributionPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for plotting iterations of posterior distributions — distributionPlot","text":"fits list brmsfit objects following data time. Currently checkpointing supported. form formula describing growth model similar growthSS brmPlot : outcome ~ predictor |individual/group df data used fit models (used plot subject's trend line). priors named list samples prior distributions parameter params. used sample_prior=FALSE brmsfit object. left NULL prior included. params vector parameters include distribution plots . Defaults NULL use parameters top level model. maxTime Optional parameter designate max time observed models far patch Logical, patchwork plot returned lists ggplots returned?","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/distributionPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for plotting iterations of posterior distributions — distributionPlot","text":"ggplot list ggplots (depending patch).","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/distributionPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for plotting iterations of posterior distributions — distributionPlot","text":"","code":"# \\donttest{ f <- \"https://raw.githubusercontent.com/joshqsumner/pcvrTestData/main/brmsFits.rdata\" tryCatch(   {     print(load(url(f)))     library(brms)     library(ggplot2)     library(patchwork)     fits <- list(fit_3, fit_15)     form <- y~time | id / group     priors <- list(       \"phi1\" = rlnorm(2000, log(130), 0.25),       \"phi2\" = rlnorm(2000, log(12), 0.25),       \"phi3\" = rlnorm(2000, log(3), 0.25)     )     params <- c(\"A\", \"B\", \"C\")     d <- simdf     maxTime <- NULL     patch <- TRUE     from3to25 <- list(       fit_3, fit_5, fit_7, fit_9, fit_11,       fit_13, fit_15, fit_17, fit_19, fit_21, fit_23, fit_25     )     distributionPlot(       fits = from3to25, form = y ~ time | id / group,       params = params, d = d, priors = priors, patch = FALSE     )     distributionPlot(       fits = from3to25, form = y ~ time | id / group,       params = params, d = d, patch = FALSE     )   },   error = function(e) {     message(e)   } ) #>  [1] \"fit_3\"  \"fit_5\"  \"fit_7\"  \"fit_9\"  \"fit_11\" \"fit_13\" \"fit_15\" \"fit_17\" #>  [9] \"fit_19\" \"fit_21\" \"fit_23\" \"fit_25\" \"simdf\"  #> Loading required package: Rcpp #> Loading 'brms' package (version 2.22.0). Useful instructions #> can be found by typing help('brms'). A more detailed introduction #> to the package is available through vignette('brms_overview'). #>  #> Attaching package: ‘brms’ #> The following object is masked from ‘package:stats’: #>  #>     ar #> [[1]] #> [[1]][[1]]  #>  #> [[1]][[2]]  #>  #>  #> [[2]] #> [[2]][[1]] #> [[2]][[1]][[1]]  #>  #> [[2]][[1]][[2]]  #>  #> [[2]][[1]][[3]]  #>  #>  #> [[2]][[2]] #> [[2]][[2]][[1]]  #>  #> [[2]][[2]][[2]]  #>  #> [[2]][[2]][[3]]  #>  #>  #>  # } ## End(Not run)"},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowth.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease of use wrapper function for fitting various growth models specified by growthSS — fitGrowth","title":"Ease of use wrapper function for fitting various growth models specified by growthSS — fitGrowth","text":"Ease use wrapper function fitting various growth models specified growthSS","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease of use wrapper function for fitting various growth models specified by growthSS — fitGrowth","text":"","code":"fitGrowth(ss, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease of use wrapper function for fitting various growth models specified by growthSS — fitGrowth","text":"ss list generated growthSS. ... Additional arguments passed model fitting functions determined ss$type. type = \"nlme\" passed nlme::nlmeControl, nlme::nlme. Additional arguments documented fitGrowthbrms, fitGrowthnlme, fitGrowthnls, fitGrowthnlrq, fitGrowthmgcvgam, fitGrowthsurvreg, fitGrowthflexsurv.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease of use wrapper function for fitting various growth models specified by growthSS — fitGrowth","text":"fit model selected type.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ease of use wrapper function for fitting various growth models specified by growthSS — fitGrowth","text":"","code":"simdf <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ss <- growthSS(   model = \"logistic\", form = y ~ time | group,   df = simdf, type = \"nls\" ) fitGrowth(ss) #> Nonlinear regression model #>   model: y ~ A[group]/(1 + exp((B[group] - time)/C[group])) #>    data: ss[[\"df\"]] #>      A1      A2      B1      B2      C1      C2  #> 208.049 146.435  13.295  10.952   2.998   3.480  #>  residual sum-of-squares: 172865 #>  #> Number of iterations to convergence: 4  #> Achieved convergence tolerance: 4.541e-08 ss <- growthSS(   model = \"gam\", form = y ~ time | group,   df = simdf, type = \"nls\" ) fitGrowth(ss) #>  #> Call: #> stats::lm(formula = ss[[\"formula\"]], data = ss[[\"df\"]]) #>  #> Coefficients: #>      (Intercept)         bs(time)1         bs(time)2         bs(time)3   #>            9.615           -53.526           231.130           190.053   #>           groupb  bs(time)1:groupb  bs(time)2:groupb  bs(time)3:groupb   #>           -2.670            66.393           -63.155           -58.386   #>"},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthbrms.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease of use brms wrapper function for fitting growth models specified by growthSS — fitGrowthbrms","title":"Ease of use brms wrapper function for fitting growth models specified by growthSS — fitGrowthbrms","text":"Helper function generally called fitGrowth.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthbrms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease of use brms wrapper function for fitting growth models specified by growthSS — fitGrowthbrms","text":"","code":"fitGrowthbrms(   ss,   iter = 2000,   cores = getOption(\"mc.cores\", 1),   chains = 4,   prior = NULL,   backend = \"cmdstanr\",   silent = 0,   ... )  fitGrowthbrmsgam(   ss,   iter = 2000,   cores = getOption(\"mc.cores\", 1),   chains = 4,   prior = NULL,   backend = \"cmdstanr\",   silent = 0,   ... )"},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthbrms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease of use brms wrapper function for fitting growth models specified by growthSS — fitGrowthbrms","text":"ss list generated growthSS. iter number iterations sample chain. default half length taken warm-MCMC algorithm. defaults 2000. cores number cores run parallel. defaults 1 \"mc.cores\" option set. Generally specified one core per chain model fit parallel. chains number markov chains use, defaults 4. prior brmsprior object growthSS priors specified. left NULL (default) ss contain priors warning issued model still attempt fit. backend backend brms use Stan . defaults use \"cmdstanr\". silent Passed brms::brm control verbosity. defaults 0, verbose option messages progress printed. changes cmdstanr brms may removed, option available .... Note likely print lots messages warmup iterations MCMC gets started. ... Additional arguments passed brms::brm.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthbrms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease of use brms wrapper function for fitting growth models specified by growthSS — fitGrowthbrms","text":"brmsfit object, see ?`brmsfit-class` details.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthflexsurv.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease of use wrapper function for fitting growth models specified by growthSS — fitGrowthflexsurv","title":"Ease of use wrapper function for fitting growth models specified by growthSS — fitGrowthflexsurv","text":"Helper function generally called fitGrowth.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthflexsurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease of use wrapper function for fitting growth models specified by growthSS — fitGrowthflexsurv","text":"","code":"fitGrowthflexsurv(ss, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthflexsurv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease of use wrapper function for fitting growth models specified by growthSS — fitGrowthflexsurv","text":"ss list generated growthSS. ... Additional arguments passed flexsurv::flexsurvreg.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthflexsurv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease of use wrapper function for fitting growth models specified by growthSS — fitGrowthflexsurv","text":"survreg object.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease of use lm wrapper function for fitting growth models specified by mvSS — fitGrowthlm","title":"Ease of use lm wrapper function for fitting growth models specified by mvSS — fitGrowthlm","text":"Helper function generally called fitGrowth.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease of use lm wrapper function for fitting growth models specified by mvSS — fitGrowthlm","text":"","code":"fitGrowthlm(ss, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease of use lm wrapper function for fitting growth models specified by mvSS — fitGrowthlm","text":"ss list generated mvSS. ... Additional arguments passed stats::lm.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease of use lm wrapper function for fitting growth models specified by mvSS — fitGrowthlm","text":"lm object, see ?lm details.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthmgcvgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease of use mgcv wrapper function for fitting gams specified by growthSS — fitGrowthmgcvgam","title":"Ease of use mgcv wrapper function for fitting gams specified by growthSS — fitGrowthmgcvgam","text":"Helper function generally called fitGrowth.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthmgcvgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease of use mgcv wrapper function for fitting gams specified by growthSS — fitGrowthmgcvgam","text":"","code":"fitGrowthmgcvgam(ss, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthmgcvgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease of use mgcv wrapper function for fitting gams specified by growthSS — fitGrowthmgcvgam","text":"ss list generated growthSS. ... Additional arguments passed mgcv::gam.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthmgcvgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease of use mgcv wrapper function for fitting gams specified by growthSS — fitGrowthmgcvgam","text":"gam object, see ?gam details.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlme.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease of use nlme wrapper function for fitting growth models specified by growthSS — fitGrowthnlme","title":"Ease of use nlme wrapper function for fitting growth models specified by growthSS — fitGrowthnlme","text":"Helper function generally called fitGrowth.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease of use nlme wrapper function for fitting growth models specified by growthSS — fitGrowthnlme","text":"","code":"fitGrowthnlme(ss, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease of use nlme wrapper function for fitting growth models specified by growthSS — fitGrowthnlme","text":"ss list generated growthSS. ... Additional arguments passed nlme::nlmeControl.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease of use nlme wrapper function for fitting growth models specified by growthSS — fitGrowthnlme","text":"nlme object, see ?nlme details.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlmegam.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease of use lme wrapper function for fitting gams specified by growthSS — fitGrowthnlmegam","title":"Ease of use lme wrapper function for fitting gams specified by growthSS — fitGrowthnlmegam","text":"Helper function generally called fitGrowth.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlmegam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease of use lme wrapper function for fitting gams specified by growthSS — fitGrowthnlmegam","text":"","code":"fitGrowthnlmegam(ss, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlmegam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease of use lme wrapper function for fitting gams specified by growthSS — fitGrowthnlmegam","text":"ss list generated growthSS. ... Additional arguments passed nlme::lmeControl.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlmegam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease of use lme wrapper function for fitting gams specified by growthSS — fitGrowthnlmegam","text":"lme object, see ?lme details.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlrq.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease of use nlrq wrapper function for fitting growth models specified by growthSS — fitGrowthnlrq","title":"Ease of use nlrq wrapper function for fitting growth models specified by growthSS — fitGrowthnlrq","text":"Helper function generally called fitGrowth.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlrq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease of use nlrq wrapper function for fitting growth models specified by growthSS — fitGrowthnlrq","text":"","code":"fitGrowthnlrq(ss, cores = getOption(\"mc.cores\", 1), ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlrq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease of use nlrq wrapper function for fitting growth models specified by growthSS — fitGrowthnlrq","text":"ss list generated growthSS. cores Optionally specify many cores run parallel ss$taus >1L. Defaults 1 mc.cores option set globally. ... Additional arguments passed quantreg::nlrq.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlrq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease of use nlrq wrapper function for fitting growth models specified by growthSS — fitGrowthnlrq","text":"nlrqModel object tau length 1 list models multiple taus,   see ?quantreg::nlrq ?nls::nlsModel details.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlrqgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease of use rq wrapper function for fitting gams specified by growthSS — fitGrowthnlrqgam","title":"Ease of use rq wrapper function for fitting gams specified by growthSS — fitGrowthnlrqgam","text":"Helper function generally called fitGrowth.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlrqgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease of use rq wrapper function for fitting gams specified by growthSS — fitGrowthnlrqgam","text":"","code":"fitGrowthnlrqgam(ss, cores = getOption(\"mc.cores\", 1), ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlrqgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease of use rq wrapper function for fitting gams specified by growthSS — fitGrowthnlrqgam","text":"ss list generated growthSS. cores number cores run parallel ... Additional arguments passed quantreg::rq.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlrqgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease of use rq wrapper function for fitting gams specified by growthSS — fitGrowthnlrqgam","text":"rq object, see ?rq details.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnls.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease of use nls wrapper function for fitting growth models specified by growthSS — fitGrowthnls","title":"Ease of use nls wrapper function for fitting growth models specified by growthSS — fitGrowthnls","text":"Helper function generally called fitGrowth.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease of use nls wrapper function for fitting growth models specified by growthSS — fitGrowthnls","text":"","code":"fitGrowthnls(ss, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease of use nls wrapper function for fitting growth models specified by growthSS — fitGrowthnls","text":"ss list generated growthSS. ... Additional arguments passed stats::nls.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease of use nls wrapper function for fitting growth models specified by growthSS — fitGrowthnls","text":"nls object, see ?nls details.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlsgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease of use lm wrapper function for fitting gams specified by growthSS — fitGrowthnlsgam","title":"Ease of use lm wrapper function for fitting gams specified by growthSS — fitGrowthnlsgam","text":"Helper function generally called fitGrowth.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlsgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease of use lm wrapper function for fitting gams specified by growthSS — fitGrowthnlsgam","text":"","code":"fitGrowthnlsgam(ss, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlsgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease of use lm wrapper function for fitting gams specified by growthSS — fitGrowthnlsgam","text":"ss list generated growthSS. ... Additional arguments passed stats::lm.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthnlsgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease of use lm wrapper function for fitting gams specified by growthSS — fitGrowthnlsgam","text":"lm object, see ?lm details.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthrq.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease of use rq wrapper function for fitting models specified by mvSS — fitGrowthrq","title":"Ease of use rq wrapper function for fitting models specified by mvSS — fitGrowthrq","text":"Helper function generally called fitGrowth.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthrq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease of use rq wrapper function for fitting models specified by mvSS — fitGrowthrq","text":"","code":"fitGrowthrq(ss, cores = getOption(\"mc.cores\", 1), ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthrq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease of use rq wrapper function for fitting models specified by mvSS — fitGrowthrq","text":"ss list generated mvSS. cores number cores run parallel ... Additional arguments passed quantreg::rq.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthrq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease of use rq wrapper function for fitting models specified by mvSS — fitGrowthrq","text":"rq object, see ?rq details.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthsurvreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease of use wrapper function for fitting growth models specified by growthSS — fitGrowthsurvreg","title":"Ease of use wrapper function for fitting growth models specified by growthSS — fitGrowthsurvreg","text":"Helper function generally called fitGrowth.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthsurvreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease of use wrapper function for fitting growth models specified by growthSS — fitGrowthsurvreg","text":"","code":"fitGrowthsurvreg(ss, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthsurvreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease of use wrapper function for fitting growth models specified by growthSS — fitGrowthsurvreg","text":"ss list generated growthSS. ... Additional arguments passed survival::survreg.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/fitGrowthsurvreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease of use wrapper function for fitting growth models specified by growthSS — fitGrowthsurvreg","text":"survreg object.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/flexsurvregPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to visualize flexsurv::flexsurvreg models fit by fitGrowth. — flexsurvregPlot","title":"Function to visualize flexsurv::flexsurvreg models fit by fitGrowth. — flexsurvregPlot","text":"Models fit using growthSS inputs fitGrowth (similar models made means) can visualized easily using function. generally called growthPlot.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/flexsurvregPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to visualize flexsurv::flexsurvreg models fit by fitGrowth. — flexsurvregPlot","text":"","code":"flexsurvregPlot(   fit,   form,   groups = NULL,   df = NULL,   timeRange = NULL,   facetGroups = TRUE,   groupFill = FALSE,   virMaps = c(\"plasma\") )"},{"path":"https://danforthcenter.github.io/pcvr/reference/flexsurvregPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to visualize flexsurv::flexsurvreg models fit by fitGrowth. — flexsurvregPlot","text":"fit model fit returned fitGrowth type=\"nls\". form formula similar growthSS inputs (pcvrForm part output) specifying outcome, predictor, grouping structure data outcome ~ predictor|individual/group. individual group specified observed growth lines plotted. groups optional set groups keep plot. Defaults NULL case groups model plotted. df dataframe use plotting observed growth curves top model. must supplied nls models. timeRange Ignored, included compatibility plotting functions. facetGroups logical, groups separated facets? Defaults TRUE. groupFill logical, groups different colors? Defaults FALSE. TRUE viridis colormaps used order virMaps virMaps order viridis maps use. recycled necessary length. Defaults \"plasma\", generally informed growthPlot's default.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/flexsurvregPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to visualize flexsurv::flexsurvreg models fit by fitGrowth. — flexsurvregPlot","text":"Returns ggplot showing survival model's survival function.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/flexsurvregPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to visualize flexsurv::flexsurvreg models fit by fitGrowth. — flexsurvregPlot","text":"","code":"df <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ss <- growthSS(   model = \"survival weibull\", form = y > 100 ~ time | id / group,   df = df, type = \"flexsurv\" ) fit <- fitGrowth(ss) flexsurvregPlot(fit, form = ss$pcvrForm, df = ss$df, groups = \"a\")  flexsurvregPlot(fit,   form = ss$pcvrForm, df = ss$df,   facetGroups = FALSE, groupFill = TRUE )"},{"path":"https://danforthcenter.github.io/pcvr/reference/frem.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance partitioning using Full Random Effects Models — frem","title":"Variance partitioning using Full Random Effects Models — frem","text":"Variance partitioning phenotypes (time) using fully random effects models","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/frem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance partitioning using Full Random Effects Models — frem","text":"","code":"frem(   df,   des,   phenotypes,   timeCol = NULL,   cor = TRUE,   returnData = FALSE,   combine = TRUE,   markSingular = FALSE,   time = NULL,   time_format = \"%Y-%m-%d\",   ... )"},{"path":"https://danforthcenter.github.io/pcvr/reference/frem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance partitioning using Full Random Effects Models — frem","text":"df Dataframe containing phenotypes design variables, optionally time. des Design variables partition variance character vector. phenotypes Phenotype column names (data assumed wide format) character vector. timeCol column data denotes time longitudinal experiments. left NULL (default) data assumed one timepoint. cor Logical, correlation plot made? Defaults TRUE. returnData Logical, used make plots returned? Defaults FALSE. combine Logical, plots combined patchwork? Defaults TRUE, works well single timepoint used. markSingular Logical, singular fits marked variance explained plot? FALSE default good practice check TRUE situations.  TRUE add white markings plot models singular fits,   common problem type model. time data contains multiple timepoints used? can left NULL use maximum time timeCol specified.  single number provided time value used.   Multiple numbers include timepoints.    string \"\" include timepoints. time_format Format non-integer time, passed strptime, defaults \"%Y-%m-%d\". ... Additional arguments passed lme4::lmer.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/frem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance partitioning using Full Random Effects Models — frem","text":"Returns either plot (returnData=FALSE) list plot data/list dataframes (depending returnData cor).","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/frem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance partitioning using Full Random Effects Models — frem","text":"","code":"library(data.table) set.seed(456) df <- data.frame(   genotype = rep(c(\"g1\", \"g2\"), each = 10),   treatment = rep(c(\"C\", \"T\"), times = 10),   time = rep(c(1:5), times = 2),   date_time = rep(paste0(\"2024-08-\", 21:25), times = 2),   pheno1 = rnorm(20, 10, 1),   pheno2 = sort(rnorm(20, 5, 1)),   pheno3 = sort(runif(20)) ) out <- frem(df, des = \"genotype\", phenotypes = c(\"pheno1\", \"pheno2\", \"pheno3\"), returnData = TRUE) lapply(out, class) #> $plot #> [1] \"patchwork\" \"gg\"        \"ggplot\"    #>  #> $data #> [1] \"list\" #>  frem(df,   des = c(\"genotype\", \"treatment\"), phenotypes = c(\"pheno1\", \"pheno2\", \"pheno3\"),   cor = FALSE )  frem(df,   des = \"genotype\", phenotypes = c(\"pheno1\", \"pheno2\", \"pheno3\"),   combine = FALSE, timeCol = \"time\", time = \"all\" ) #> [[1]]  #>  #> [[2]]  #>  frem(df,   des = \"genotype\", phenotypes = c(\"pheno1\", \"pheno2\", \"pheno3\"),   combine = TRUE, timeCol = \"time\", time = 1 )  frem(df,   des = \"genotype\", phenotypes = c(\"pheno1\", \"pheno2\", \"pheno3\"),   cor = FALSE, timeCol = \"time\", time = 3:5, markSingular = TRUE )  df[df$time == 3, \"genotype\"] <- \"g1\" frem(df,   des = \"genotype\", phenotypes = c(\"pheno1\", \"pheno2\", \"pheno3\"),   cor = FALSE, timeCol = \"date_time\", time = \"all\", markSingular = TRUE ) #> Skipping DAS 2 as grouping contains a variable that is singular"},{"path":"https://danforthcenter.github.io/pcvr/reference/gam_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for visualizing differences in GAMs fit with mgcv::gam — gam_diff","title":"Helper function for visualizing differences in GAMs fit with mgcv::gam — gam_diff","text":"Note using GAMs less useful fitting parameterized models supported growthSS fitGrowth common applications plant phenotyping.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/gam_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for visualizing differences in GAMs fit with mgcv::gam — gam_diff","text":"","code":"gam_diff(   model,   newdata = NULL,   g1,   g2,   byVar = NULL,   smoothVar = NULL,   cis = seq(0.05, 0.95, 0.05),   unconditional = TRUE,   plot = TRUE )"},{"path":"https://danforthcenter.github.io/pcvr/reference/gam_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for visualizing differences in GAMs fit with mgcv::gam — gam_diff","text":"model model fit smooth terms mgcv::gam newdata data.frame new data use make predictions. left NULL (default) attempt made make newdata using first smooth term formula. See examples guidance making appropriate newdata g1 character string level byVar use first group compare, plot=TRUE shown blue. g2 second group compare (comparison g1 - g2). plot=TRUE shown red. byVar Categorical variable name used separate splines string. smoothVar variable splines used . often time variable. cis Confidence interval levels, can multiple. example, 0.95 return Q_0.025 Q_0.975 columns, c(0.9, 0.95) return Q_0.025, Q_0.05, Q_0.95, Q_0.975 columns. Defaults seq(0.05, 0.95, 0.05) unconditional Logical, unconditional variance-covariance used calculating standard errors. Defaults TRUE. plot Logical, plot difference returned? Defaults TRUE.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/gam_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for visualizing differences in GAMs fit with mgcv::gam — gam_diff","text":"dataframe list containing ggplot dataframe","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/gam_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for visualizing differences in GAMs fit with mgcv::gam — gam_diff","text":"","code":"ex <- pcvr::growthSim(\"logistic\",   n = 20, t = 25,   params = list(     \"A\" = c(200, 160),     \"B\" = c(13, 11),     \"C\" = c(3, 3.5)   ) )  m <- mgcv::gam(y ~ group + s(time, by = factor(group)), data = ex)  support <- expand.grid(   time = seq(min(ex$time), max(ex$time), length = 400),   group = factor(unique(ex$group)) )  out <- gam_diff(   model = m, newdata = support, g1 = \"a\", g2 = \"b\",   byVar = \"group\", smoothVar = \"time\", plot = TRUE ) dim(out$data) #> [1] 400 120 out$plot  out2 <- gam_diff(   model = m, g1 = \"a\", g2 = \"b\", byVar = NULL, smoothVar = NULL, plot = TRUE )"},{"path":"https://danforthcenter.github.io/pcvr/reference/growthPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to visualize models made by fitGrowth. — growthPlot","title":"Function to visualize models made by fitGrowth. — growthPlot","text":"Models fit using growthSS inputs fitGrowth (similar models made means) can visualized easily using function.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/growthPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to visualize models made by fitGrowth. — growthPlot","text":"","code":"growthPlot(   fit,   form,   groups = NULL,   df = NULL,   timeRange = NULL,   facetGroups = TRUE,   groupFill = !facetGroups,   hierarchy_value = NULL )"},{"path":"https://danforthcenter.github.io/pcvr/reference/growthPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to visualize models made by fitGrowth. — growthPlot","text":"fit model fit object (list nlrq models) returned fitGrowth. form formula similar growthSS inputs (pcvrForm part output) specifying outcome, predictor, grouping structure data outcome ~ predictor|individual/group. Generally given directly growthSS output (ss$pcvrForm). formula include individuals groups lines data plotted may best data specify unique individuals model include autocorrelation. groups optional set groups keep plot. Defaults NULL case groups model plotted. df dataframe use plotting observed growth curves top model making predictions. timeRange optional range times use. can used view predictions future data avaiable data reached point (asymptotic size). facetGroups logical, groups separated facets? Defaults TRUE. groupFill logical, groups different colors? Defaults opposite facetGroups. TRUE viridis colormaps used order c('plasma', 'mako', 'viridis', 'inferno', 'cividis', 'magma', 'turbo', 'rocket'). Alternatively can given vector viridis colormap names use different order . Note brms models ignored except used specify different viridis color map use. hierarchy_value hierarchical model plotted, value hiearchical predictor ? left NULL (default) mean value used. >1L x axis use hierarchical variable model mean timeRange (mean x values model timeRange specified).","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/growthPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to visualize models made by fitGrowth. — growthPlot","text":"Returns ggplot showing brms model's credible intervals optionally individual growth lines.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/reference/growthPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to visualize models made by fitGrowth. — growthPlot","text":"","code":"simdf <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ss <- growthSS(   model = \"logistic\", form = y ~ time | id / group,   df = simdf, type = \"nls\" ) #> Individual is not used with type = 'nls'. fit <- fitGrowth(ss) growthPlot(fit, form = ss$pcvrForm, df = ss$df)"},{"path":"https://danforthcenter.github.io/pcvr/reference/growthSS.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease of use growth model helper function. — growthSS","title":"Ease of use growth model helper function. — growthSS","text":"Output passed fitGrowth fit specified model.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/growthSS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease of use growth model helper function. — growthSS","text":"","code":"growthSS(   model,   form,   sigma = NULL,   df,   start = NULL,   pars = NULL,   type = \"brms\",   tau = 0.5,   hierarchy = NULL )"},{"path":"https://danforthcenter.github.io/pcvr/reference/growthSS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease of use growth model helper function. — growthSS","text":"model name model character string. Supported options c(\"logistic\", \"gompertz\", \"weibull\", \"frechet\", \"gumbel\", \"monomolecular\", \"exponential\", \"linear\", \"power law\", \"bragg\", \"lorentz\", \"beta\", \"double logistic\", \"double gompertz\", \"gam\", \"int\"), \"int\" representing intercept model used brms (expected used threshold models model homoskedasticity). Note dose response curves (bragg, lorentz, beta) may difficult fit using nlme backend work well using options. See growthSim examples type single parameterized growth curve (\"gam\" supported growthSim). can also specify decay models including \"decay\" keyword model name. Note using \"decay\" necessary brms backend since otherwise priors strictly positive. brms models entire formula negated decay models lognormal priors can still used least coefficients negative. Additionally, \"int_\" prefix may added model name specify intercept included. default models assumed intercepts 0, often fine. include intercept brms model specify prior \"\", \"B\", \"C\" parameter \"\". default growthSS make student T priors intercept parameters way estimated changepoints (see ). type=\"brms\" can also specify segmented models combining model names plus sign \"linear + linear\". segmented model names parameters follow normal \"\", \"B\", \"C\" notation, instead named type model, position formula, parameter model. also parameters represent time growth switches one model another called either \"changepointX\" \"fixedChangePointX\". \"changePointX\" terms estimated parameters model. \"fixedChangePointX\" parameters estimated kept numeric value given priors, useful experiment intervention set time expect change growth process acutely. \"linear + linear\" example yield parameters \"linear1A\", \"changePoint1\" (\"fixedChangePoint1\"), \"linear2A\". \"linear + gompertz\" model \"linear1A\", \"changePoint1\", \"gompertz2A\", \"gompertz2B\", \"gompertz2C\" parameters. Note double sigmoid models supported parts segmented models gams can currently included last part segmented model. using changepoint model may worth using segments simpler fit (gompertz instead EVD options, instance). Currently \"homo\" \"int\" treated \"spline\" \"gam\" interchangeable. Time--event models can specified using \"survival\" keyword, see details explanation changes entails. Similarly, using brms backend response distributions (see brms::brmsfamily) can specified model \"family: model\" model logistic increasing counts may written model = \"poisson: logistic\". form formula describing model. left hand side outcome variable (phenotype), cutoff making survival model (see details). right hand side needs least x variable (numeric  typically time). Grouping also described formula using roughly lme4  style syntax,formulas like y~time|individual/group show predictors  vary group autocorrelation individual:group  interactions modeled. Note autocorrelation modeled \"brms\"  backend way. \"nlme\" requires random effects correlations use grouping,  autocorrelation using \"nlme\" backend works group level, slightly underestimate  autocorrelation individual level. group one level included  ignored formulas growth variance (may case  split data fitting models able run smaller models quickly).  include multiple grouping variables separated \"+\"  y~time|individual/groupingVariable1 + groupingVariable2. backends multiple grouping  variables combined single factor interaction.  Hierarchical models can specified brms backend  y~time+other_covariate|individual/group case parameters main growth model  estimated models specified hierarchy argument. instance,  normally \"\" intercept group, now predicted  ~ AI + AA * covariate AI AA now intercept group. Note  specify hierarchical model priors required AI AA previous  example. sigma models distributional parameters. argument used \"brms\" \"nlme\" models handled differently . type=\"brms\" can supplied model list models. turned formula (list formulas) entry corresponding distributional parameter (mean) growth model family. family specified (model=\"logistic\" instance) student T distribution used, additional distributional parameters sigma nu. check naming distributional parameters response family use brms::brmsfamily(\"family\")$dpars. supported options model options (including threshold models). distributional parameters formula specified modeled intercept (group). Parameter names main model distributional parameter name prefix. Additionally, linear model used sigma can modeled without prior, prior specified (\"sigmaA\") non-linear formula used \"sigmaA\" parameter included output instead default \"sigma\" term. rare case wish model mean 3rd distributional parameter 2nd sigma = list(\"not_estimated\", \"model\") allow .  type =\"nlme\" options limited c(\"none\", \"power\", \"exp\"), corresponding using nlme::varIdent, nlme::varPower, nlme::varExp respectively \"power\" default. df dataframe use. Must contain variables listed formula. Note rows NA infinite values x, y, hierarchical predictors removed. start optional named list starting values means prior distributions. provided starting values picked stats::selfStart.  type = \"brms\" provided treated means   lognormal priors growth model parameters T_5(mu, 3) priors changepoint parameters.   done values strictly positive lognormal distribution   easily interpreted. changepoint priors T distributions symmetry, 5 DF   chosen heavy unmanageable tails.   argument provided priors made using brms::get_prior.   priors unlikely suitable different set priors need made   model using brms::set_prior good convergence. specifying starting   values/prior means think similar params argument   growthSim. Names correspond parameter names   model argument. numeric vector can also used, specifying   names best practice clarity. Additionally, due limitation   brms currently lower bounds set priors specific groups.   priors include multiple groups (start = list(= c(10,15), ...))   see warnings model fit specified lower   bound explicitly. warnings can safely ignored addressed   necessary features added brms. See details guidance. pars Optionally specify parameters change group. model dependent implemented brms models due flexible hypothesis testing. type Type model fit, options \"brms\", \"nlrq\", \"nlme\", \"nls\", \"mgcv\". Note \"mgcv\" option supports \"gam\" models. Survival models can use \"survreg\" model type (called non-brms/flexsurv type given) \"flexsurv\" model type requires flexsurv package installed. Note non-brms models variables model labeled factor level group, necessarily group name. done ease use different modeling functions, levels alphabetically sorted can checked using: table(ss$df$group, ss$df$group_numericLabel). tau vector quantiles fit nlrq models. hierarchy Optionally list model parameters modeled another predictor variable. used brms backend.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/growthSS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease of use growth model helper function. — growthSS","text":"named list elements make easier fit non linear growth models several R packages. brms models output contains: formula: brms::bf formula specifying growth model, autocorrelation, variance submodel, models variable growth model. prior: brmsprior/data.frame object. initfun: function randomly initialize chains using random draw gamma distribution (confines initial values positive makes correct number initial values chains groups). df data input, dummy variables added needed column link groups factor levels. family model family, currently always \"student\". pcvrForm form argument unchanged. returned can used later model visualization. Often may good idea save output function fit model, can useful later . quantreg::nlrq models output contains: formula: nls style formula specifying growth model groups specified. taus: quantiles fit start: starting values, typically generated growth model data similar way shown stats::selfStart models. df input data model. pcvrForm form argument unchanged. nls models output quantreg::nlrq models without taus returned. nlme::nlme models output contains: formula: list nlme style formulas specifying model, fixed random effects, random effect grouping, variance model (weights). start: starting values, typically generated growth model data similar way shown stats::selfStart models. df input data model. pcvrForm form argument unchanged. models type model also returned simplicity downstream.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/growthSS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ease of use growth model helper function. — growthSS","text":"Default priors provided, can serve starting points distribution. encouraged use growthSim consider kind trendlines result changes prior interpretation parameter. plotPrior function can used prior predictive checks. looking back forth data trying match  observed growth exactly prior distribution, rather informed understanding plants  using expectations based previous research.  \"double\" models parameter interpretation  non-double counterparts except A2, etc.  strongly recommended familiarize double sigmoid  distributions using growthSim attempting model one. Additionally,  distributions intended use long delays experiment,  think stress recovery experiments, minor hiccups plant growth. Logistic: list('' = 130, 'B' = 12, 'C' = 3) Gompertz: list('' = 130, 'B' = 12, 'C' = 1.25) Weibull: list('' = 130, 'B' = 2, 'C' = 2) Frechet: list('' = 130, 'B' = 5, 'C' = 6) Gumbel: list('' = 130, 'B' = 6, 'C' = 4) Double Logistic: list('' = 130, 'B' = 12, 'C' = 3,     'A2' = 200, 'B2' = 25, 'C2' = 1) Double Gompertz: list('' = 130, 'B' = 12, 'C' = 0.25,     'A2' = 220, 'B2' = 30, 'C2' = 0.1) Monomolecular: list('' = 130, 'B' = 2) Exponential: list('' = 15, 'B' = 0.1) Linear: list('' = 1) Power Law: list('' = 13, 'B' = 2) See details parameterization model option. Logistic: `/ (1 + exp( (B-x)/C) )`  asymptote, B inflection point, C growth rate. Gompertz: `* exp(-B * exp(-C*x))`  asymptote, B inflection point, C growth rate. Weibull: `* (1-exp(-(x/C)^B))`  asymptote, B weibull shape parameter, C weibull scale parameter. Frechet: `* exp(-((x-0)/C)^(-B))`  asymptote, B frechet shape parameter, C frechet scale parameter.  Note location parameter (conventionally m) 0 models simplicity still  included formula. Gumbel: `* exp(-exp(-(x-B)/C))`  asymptote, B inflection point (location), C growth rate (scale). Double Logistic: `/ (1+exp((B-x)/C)) + ((A2-) /(1+exp((B2-x)/C2)))`  asymptote, B inflection point, C growth rate,  A2 second asymptote, B2 second inflection point, C2 second  growth rate. Double Gompertz: `* exp(-B * exp(-C*x)) + ((A2-) * exp(-B2 * exp(-C2*(x-B))))`  asymptote, B inflection point, C growth rate,  A2 second asymptote, B2 second inflection point, C2 second  growth rate. Monomolecular: `-* exp(-B * x)`  asymptote B growth rate. Exponential: `* exp(B * x)`  scale parameter B growth rate. Linear: `* x`  growth rate. Power Law: `* x^(B)`  scale parameter B growth rate. Bragg: `* exp(-B * (x - C) ^ 2)`  models minima maxima dose-response curve max response,  B \"precision\" slope inflection, C x position max response. Lorentz: `/ (1 + B * (x - C) ^ 2)`  models minima maxima dose-response curve max response,  B \"precision\" slope inflection, C x position max response.  Generally Bragg preferred Lorentz dose-response curves. Beta: `* (((x - D) / (C - D)) * ((E - x) / (E - C)) ^ ((E - C) / (C - D))) ^ B`  models minima maxima dose-response curve Maximum Value,  B shape/concavity exponent similar sum alpha beta Beta distribution,  C position maximum value, D minimum position distribution > 0,  E maximum position distribution > 0.  difficult model fit can model non-symmetric dose-response relationships  may sometimes worth extra effort. Note distributions parameters exist vacuum.  Changing one make others look different resulting data.  growthSim function can helpful familiarizing distributions. Using brms backend sigma argument optionally specifies sub model account heteroskedasticity. combination models (except decay models) can specified sigma term. need variance raise lower gam/spline appropriate option. Using brms backend model lots parameters may difficult estimate lots groups. many levels \"group\" variable complex model consider fitting models subsets \"group\" variable using combineDraws make data.frame hypothesis testing. Limits Y variable can specified brms backend. generally unnecessary make model slower fit potentially difficult set priors . limited phenotype (besides normal positive constraint growth models) may helpful, one situation may canopy coverage percentage naturally bounded upper lower limit. specify limits add square brackets Y term upper lower limits \"y[0,100] ~ time|id/group\". \"Additional response information\" resp_weights standard errors can specified using brms backend, options documented fully brms::brmsformula details. also three supported submodel options nlme models, varFunc object can also supplied, see ?nlme::varClasses. none: varIdent(1|group), models constant variance separately    group. power: varPower(x|group), models variance power x per group. exp: varExp(x|group), models variance exponent x per group. Survival models can fit using \"survival\" keyword model specification. Using \"brms\" backend (type argument) can specify \"weibull\" (default) \"binomial\" distribution use model final model string \"survival binomial\" \"survival weibull\" equivalent \"survival\". Time event data different standard phenotype data, formula argument include cutoff Y variable count \"event\". example, checking germination using area wanted use 50 pixels germinated plant formula area > 50 ~ time|id/group. Internally input dataframe converted time--event data based formula. Alternatively can make time event data supply growthSS. case data columns called \"n_events\" (number individuals experiencing event time) \"n_eligible\" (number individuals experienced event least time) binomial model family \"event\" (binary 1,0 TRUE, FALSE) Weibull model family. Note since linear models using different model families priors handled differently. survival models default priors weak regularizing priors (Normal(0,5)) parameters. wish specify priors can supply brmsprior objects list priors = list(\"group1\" = c(0,3), \"group2\" = c(0,1)) order values Mu, Sigma. non-brms backend instead use survival::survreg fit model unless \"flexsurv\" type specified. Distributions passed survreg options \"weibull\", \"exponential\", \"gaussian\", \"logistic\",\"lognormal\" \"loglogistic\" type = \"survreg\" flexsurv::flexsurvreg type = \"flexsurv\" options \"gengamma\", \"gengamma.orig\", \"genf\", \"genf.orig\", \"weibull\", \"gamma\", \"exp\", \"llogis\", \"lnorm\", \"gompertz\", \"exponential\", \"lognormal\". flexsurvreg distributional modeling supported additional formula can passed list sigma argument growthSS way anc argument flexsurv::flexsurvreg. additional arguments supplied via fitGrowth desired.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/reference/growthSS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ease of use growth model helper function. — growthSS","text":"","code":"simdf <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ss <- growthSS(   model = \"logistic\", form = y ~ time | id / group,   sigma = \"spline\", df = simdf,   start = list(\"A\" = 130, \"B\" = 12, \"C\" = 3), type = \"brms\" ) lapply(ss, class) #> $formula #> [1] \"brmsformula\" \"bform\"       #>  #> $prior #> [1] \"brmsprior\"  \"data.frame\" #>  #> $initfun #> [1] \"function\" #>  #> $df #> [1] \"data.frame\" #>  #> $family #> [1] \"character\" #>  #> $pcvrForm #> [1] \"formula\" #>  #> $type #> [1] \"character\" #>  #> $model #> [1] \"character\" #>  #> $call #> [1] \"call\" #>  ss$initfun() #> $b_A #> [1] 1.5048525 0.7474248 #>  #> $b_B #> [1] 0.3126611 0.8370048 #>  #> $b_C #> [1] 2.9719342 0.2303612 #>  # the next step would typically be compiling/fitting the model # here we use very few chains and very few iterations for speed, but more of both is better. # \\donttest{ fit_test <- fitGrowth(ss,   iter = 500, cores = 1, chains = 1, backend = \"cmdstanr\",   control = list(adapt_delta = 0.999, max_treedepth = 20) ) #> Start sampling #> Init values were only set for a subset of parameters.  #> Missing init values for the following parameters: #> Intercept_sigma, bs_sigma, zs_sigma_1_1, sds_sigma_1, zs_sigma_2_1, sds_sigma_2, Intercept_nu #>  #> To disable this message use options(cmdstanr_warn_inits = FALSE). #> Running MCMC with 1 chain... #>  #> Chain 1 Iteration:   1 / 500 [  0%]  (Warmup)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Location parameter[1] is inf, but must be finite! (in '/tmp/RtmpHeVx4q/model-a6f8395be098.stan', line 130, column 4 to column 48) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Iteration: 100 / 500 [ 20%]  (Warmup)  #> Chain 1 Iteration: 200 / 500 [ 40%]  (Warmup)  #> Chain 1 Iteration: 251 / 500 [ 50%]  (Sampling)  #> Chain 1 Iteration: 350 / 500 [ 70%]  (Sampling)  #> Chain 1 Iteration: 450 / 500 [ 90%]  (Sampling)  #> Chain 1 Iteration: 500 / 500 [100%]  (Sampling)  #> Chain 1 finished in 96.6 seconds. # }   # formulas and priors will look different if there is only one group in the data  ex <- growthSim(\"linear\", n = 20, t = 25, params = list(\"A\" = 2)) ex_ss <- growthSS(   model = \"linear\", form = y ~ time | id / group, sigma = \"spline\",   df = ex, start = list(\"A\" = 1), type = \"brms\" )  ex_ss$prior # no coef level grouping for priors #>                    prior     class coef group resp  dpar nlpar lb   ub  source #>     student_t(3, 0, 2.5) Intercept                 sigma               default #>         normal(2.7, 0.8) Intercept                    nu               default #>  lognormal(log(1), 0.25)         b                           A  0 <NA>    user ex_ss$formula # intercept only model for A #> y ~ A * time  #> autocor ~ tructure(list(), class = \"formula\", .Environment = <environment>) #> sigma ~ s(time) #> nu ~ 1 #> A ~ 1  ex2 <- growthSim(\"linear\", n = 20, t = 25, params = list(\"A\" = c(2, 2.5))) ex2_ss <- growthSS(   model = \"linear\", form = y ~ time | id / group, sigma = \"spline\",   df = ex2, start = list(\"A\" = 1), type = \"brms\" ) ex2_ss$prior # has coef level grouping for priors #>                    prior     class coef group resp  dpar nlpar lb   ub  source #>     student_t(3, 0, 2.5) Intercept                 sigma               default #>         normal(2.7, 0.8) Intercept                    nu               default #>  lognormal(log(1), 0.25)         b                           A  0 <NA>    user ex2_ss$formula # specifies an A intercept for each group and splines by group for sigma #> y ~ A * time  #> autocor ~ tructure(list(), class = \"formula\", .Environment = <environment>) #> sigma ~ s(time, by = group) #> nu ~ 1 #> A ~ 0 + group"},{"path":"https://danforthcenter.github.io/pcvr/reference/growthSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Growth data simulating function — growthSim","title":"Growth data simulating function — growthSim","text":"growthSim can used help pick reasonable parameters common  growth models use prior distributions simulate data example models/plots.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/growthSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Growth data simulating function — growthSim","text":"","code":"growthSim(   model = c(\"logistic\", \"gompertz\", \"double logistic\", \"double gompertz\",     \"monomolecular\", \"exponential\", \"linear\", \"power law\", \"frechet\", \"weibull\",     \"gumbel\", \"logarithmic\", \"bragg\", \"lorentz\", \"beta\"),   n = 20,   t = 25,   params = list(),   D = 0 )"},{"path":"https://danforthcenter.github.io/pcvr/reference/growthSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Growth data simulating function — growthSim","text":"model One \"logistic\", \"gompertz\", \"weibull\", \"frechet\", \"gumbel\", \"monomolecular\", \"exponential\", \"linear\", \"power law\", \"logarithmic\", \"bragg\", \"double logistic\", \"double gompertz\". Alternatively can pseudo formula generate data segmented growth curve specifying \"model1 + model2\", see examples growthSS. Decay can specified including \"decay\" part model \"logistic decay\" \"linear + linear decay\". Count data can specified \"count: \" prefix, similar using \"poisson: model\" growthSS. Similarly intercepts can added \"int_\" prefix, case \"\" parameter specified. \"gam\" models supported growthSS simulated function. n Number individuals simulate time per group params t Max time (assumed start 1) simulate growth integer. params list numeric parameters. , B, C notation used order parameters appear formula (see examples). Number groups inferred length vectors parameters. case \"double\" models also A2, B2, C2 terms. Changepoints specified \"changePointX\" \"fixedChangePointX\" growthSS. D decay simulated starting point decay. defaults 0.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/growthSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Growth data simulating function — growthSim","text":"Returns dataframe example growth data following input parameters.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/growthSim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Growth data simulating function — growthSim","text":"params argument requires understanding growth model parameterized.     Examples help, examples. Logistic: `/ (1 + exp( (B-x)/C) )`     asymptote, B inflection point, C growth rate. Gompertz: `* exp(-B * exp(-C*x))`     asymptote, B inflection point, C growth rate. Weibull: `* (1-exp(-(x/C)^B))`     asymptote, B weibull shape parameter, C weibull scale parameter. Frechet: `* exp(-((x-0)/C)^(-B))`     asymptote, B frechet shape parameter, C frechet scale parameter.     Note location parameter (conventionally m) 0 models simplicity     still included formula. Gumbel: `* exp(-exp(-(x-B)/C))`     asymptote, B inflection point (location), C growth rate (scale). Double Logistic: `/ (1+exp((B-x)/C)) + ((A2-) /(1+exp((B2-x)/C2)))`     asymptote, B inflection point, C growth rate,     A2 second asymptote, B2 second inflection point, C2 second     growth rate. Double Gompertz: `* exp(-B * exp(-C*x)) + ((A2-) * exp(-B2 * exp(-C2*(x-B))))`     asymptote, B inflection point, C growth rate,     A2 second asymptote, B2 second inflection point, C2 second     growth rate. Monomolecular: `-* exp(-B * x)`     asymptote B growth rate. Exponential: `* exp(B * x)`     scale parameter B growth rate. Linear: `* x`     growth rate. Logarithmic: `* log(x)`     growth rate. Power Law: `* x ^ (B)`     scale parameter B growth rate. Bragg: `* exp(-B * (x - C) ^ 2)`     models minima maxima dose-response curve max response,     B \"precision\" slope inflection, C x position max response. Lorentz: `/ (1 + B * (x - C) ^ 2)`     models minima maxima dose-response curve max response,     B \"precision\" slope inflection, C x position max response.     Generally Bragg preferred Lorentz dose-response curves. Beta: `* (((x - D) / (C - D)) * ((E - x) / (E - C)) ^ ((E - C) / (C - D))) ^ B`     models minima maxima dose-response curve Maximum Value,     B shape/concavity exponent similar sum alpha beta Beta distribution,     C position maximum value, D minimum position distribution > 0,     E maximum position distribution > 0.     difficult model fit can model non-symmetric dose-response relationships     may sometimes worth extra effort. Note distributions parameters generally exist vacuum.     Changing one make others look different resulting data.     examples good place start unsure parameters use.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/growthSim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Growth data simulating function — growthSim","text":"","code":"library(ggplot2) simdf <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Logistic\")   simdf <- growthSim(\"gompertz\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(0.2, 0.25)) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Gompertz\")   simdf <- growthSim(\"weibull\",   n = 20, t = 25,   params = list(\"A\" = c(100, 100), \"B\" = c(1, 0.75), \"C\" = c(2, 3)) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"weibull\")   simdf <- growthSim(\"frechet\",   n = 20, t = 25,   params = list(\"A\" = c(100, 110), \"B\" = c(2, 1.5), \"C\" = c(5, 2)) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"frechet\")   simdf <- growthSim(\"gumbel\",   n = 20, t = 25,   list(\"A\" = c(120, 140), \"B\" = c(6, 5), \"C\" = c(4, 3)) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"gumbel\")   simdf <- growthSim(\"double logistic\",   n = 20, t = 70,   params = list(     \"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5),     \"A2\" = c(400, 300), \"B2\" = c(35, 40), \"C2\" = c(3.25, 2.75)   ) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Double Logistic\")   simdf <- growthSim(\"double gompertz\",   n = 20, t = 100,   params = list(     \"A\" = c(180, 140), \"B\" = c(13, 11), \"C\" = c(0.2, 0.2),     \"A2\" = c(400, 300), \"B2\" = c(50, 50), \"C2\" = c(0.1, 0.1)   ) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Double Gompertz\")   simdf <- growthSim(\"monomolecular\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(0.08, 0.1)) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Monomolecular\")   simdf <- growthSim(\"exponential\",   n = 20, t = 25,   params = list(\"A\" = c(15, 20), \"B\" = c(0.095, 0.095)) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Exponential\")   simdf <- growthSim(\"linear\",   n = 20, t = 25,   params = list(\"A\" = c(1.1, 0.95)) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Linear\")   simdf <- growthSim(\"int_linear\",   n = 20, t = 25,   params = list(\"A\" = c(1.1, 0.95), I = c(100, 120)) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Linear with Intercept\")   simdf <- growthSim(\"logarithmic\",   n = 20, t = 25,   params = list(\"A\" = c(2, 1.7)) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Logarithmic\")   simdf <- growthSim(\"power law\",   n = 20, t = 25,   params = list(\"A\" = c(16, 11), \"B\" = c(0.75, 0.7)) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"Power Law\")   simdf <- growthSim(\"bragg\",   n = 20, t = 100,   list(\"A\" = c(10, 15), \"B\" = c(0.01, 0.02), \"C\" = c(50, 60)) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"bragg\")   # simulating models from segmented growth models  simdf <- growthSim(   model = \"linear + linear\", n = 20, t = 25,   params = list(\"linear1A\" = c(16, 11), \"linear2A\" = c(0.75, 0.7), \"changePoint1\" = c(11, 14)) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"linear + linear\")   simdf <- growthSim(   model = \"linear + linear decay\", n = 20, t = 25,   params = list(\"linear1A\" = c(16, 11), \"linear2A\" = c(3, 2), \"changePoint1\" = c(11, 14)) ) ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"linear + linear decay\")   simdf <- growthSim(   model = \"linear + linear + logistic\", n = 20, t = 50,   params = list(     \"linear1A\" = c(16, 11), \"linear2A\" = c(3, 4), # linear slopes, very intuitive     \"changePoint1\" = c(11, 14), \"changePoint2\" = c(10, 12),     # changepoint1 is standard, changepoint2 happens relative to changepoint 1     \"logistic3A\" = c(200, 210), \"logistic3B\" = c(20, 25), \"logistic3C\" = c(3, 3)   ) ) # similar to changepoint2, the asymptote and inflection point are relative to the starting # point of the logistic growth component. This is different than the model output # if you were to fit a curve to this model using `growthSS`. ggplot(simdf, aes(time, y, group = interaction(group, id))) +   geom_line(aes(color = group)) +   labs(title = \"linear + linear + logistic\")"},{"path":"https://danforthcenter.github.io/pcvr/reference/mvSS.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease of use multi-value trait model helper function. — mvSS","title":"Ease of use multi-value trait model helper function. — mvSS","text":"function provides simplified interface modeling multi-value traits using growthSS. Output passed fitGrowth fit specified model.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/mvSS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease of use multi-value trait model helper function. — mvSS","text":"","code":"mvSS(   model = \"linear\",   form,   sigma = NULL,   df,   start = NULL,   pars = NULL,   type = \"brms\",   tau = 0.5,   hierarchy = NULL,   spectral_index = c(\"none\", \"ari\", \"ci_rededge\", \"cri550\", \"cri700\", \"egi\", \"evi\",     \"gdvi\", \"mari\", \"mcari\", \"mtci\", \"ndre\", \"ndvi\", \"pri\", \"psnd_chlorophyll_a\",     \"psnd_chlorophyll_b\", \"psnd_caroteniods\", \"psri\", \"pssr_chlorophyll_a\",     \"pssr_chlorophyll_b\", \"pssr_caroteniods\", \"rgri\", \"rvsi\", \"savi\", \"sipi\", \"sr\",     \"vari\", \"vi_green\", \"wi\", \"fvfm\", \"fqfm\") )"},{"path":"https://danforthcenter.github.io/pcvr/reference/mvSS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease of use multi-value trait model helper function. — mvSS","text":"model model specification growthSS. form formula similar label | value ~ time + id/group label column histogram bins, value counts within bins, time optional time variable, id identifies individual, group contains treatment groups. time variable included individual variable also included. sigma Distributional models passed growthSS. df Data passed growthSS. start Starting values priors, passed growthSS. pars Parameters vary, passed growthSS. type Backend use, passed growthSS. tau Quantile model, passed growthSS. hierarchy Formulae describing hierarchical models, see growthSS. spectral_index Optionally, spectral index calculated PlantCV. given appropriate truncation model family (applicable) included index using without write formula.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/mvSS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease of use multi-value trait model helper function. — mvSS","text":"named list plots showing prior distributions growthSS use, optionally plot simulated growth curves using draws priors.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/reference/mvSS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ease of use multi-value trait model helper function. — mvSS","text":"","code":"set.seed(123) mv_df <- mvSim(dists = list(rnorm = list(mean = 100, sd = 30)), wide = FALSE) mv_df$group <- rep(c(\"a\", \"b\"), times = 900) mv_df <- mv_df[mv_df$value > 0, ] mv_df$label <- as.numeric(gsub(\"sim_\", \"\", mv_df$variable))  ss1 <- mvSS(   model = \"linear\", form = label | value ~ group, df = mv_df,   start = list(\"A\" = 5), type = \"brms\", spectral_index = \"none\" ) # \\donttest{ mod1 <- fitGrowth(ss1, backend = \"cmdstanr\", iter = 1000, chains = 1, cores = 1) #> Start sampling #> Running MCMC with 1 chain... #>  #> Chain 1 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f87239101.stan', line 76, column 6 to column 71) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f87239101.stan', line 76, column 6 to column 71) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f87239101.stan', line 76, column 6 to column 71) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Random variable is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f87239101.stan', line 60, column 2 to line 61, column 34) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: student_t_lpdf: Scale parameter is inf, but must be positive finite! (in '/tmp/RtmpHeVx4q/model-a6f87239101.stan', line 76, column 6 to column 71) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 1 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 1 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 1 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 1 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 1 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 1 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 1 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 1 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 1 finished in 1.6 seconds. growthPlot(mod1, ss1$pcvrForm, df = ss1$df)  # }  # when the model is longitudinal the same model is possible with growthSS  m1 <- mvSim(   dists = list(     rnorm = list(mean = 100, sd = 30),     rnorm = list(mean = 110, sd = 25),     rnorm = list(mean = 120, sd = 20),     rnorm = list(mean = 135, sd = 15)   ),   wide = FALSE, n = 6 ) m1$time <- rep(1:4, times = 6 * 180) m2 <- mvSim(   dists = list(     rnorm = list(mean = 85, sd = 25),     rnorm = list(mean = 95, sd = 20),     rnorm = list(mean = 105, sd = 15),     rnorm = list(mean = 110, sd = 15)   ),   wide = FALSE, n = 6 ) m2$time <- rep(1:4, times = 6 * 180) mv_df2 <- rbind(m1, m2) mv_df2$group <- rep(c(\"a\", \"b\"), each = 4320) mv_df2 <- mv_df2[mv_df2$value > 0, ] mv_df2$label <- as.numeric(gsub(\"sim_\", \"\", mv_df2$variable)) ss_mv0 <- mvSS(   model = \"linear\", form = label | value ~ group, df = mv_df2,   start = list(\"A\" = 50), type = \"brms\", spectral_index = \"ci_rededge\" ) ss_mv0 # non longitudinal model setup #> linear brms skew_normal model: #>  #> pcvr formula variables: #> Outcome: label | resp_weights(value) + trunc(lb = -1, ub = Inf) #> Group: group #>  #> Model Formula: #> label | resp_weights(value) + trunc(lb = -1, ub = Inf) ~ A  #> A ~ 0 + group #>  #> Data: #>   id group variable value time label #> 1  1     a    sim_1     1    1     1 #> 3  3     a    sim_1     2    3     1 #> 4  4     a    sim_1     1    4     1 #> ... #> (5117 rows)  ss_mv1 <- mvSS(   model = \"linear\", form = label | value ~ time | group, df = mv_df2,   start = list(\"A\" = 50), type = \"brms\", spectral_index = \"ci_rededge\" ) ss_mv1 #> skew_normal: linear brms skew_normal model: #>  #> pcvr formula variables: #> Outcome: label | resp_weights(value) + trunc(lb = -1, ub = Inf) #> X: time #> Group: group #>  #> Model Formula: #> label | resp_weights(value) + trunc(lb = -1, ub = Inf) ~ A * time  #> sigma ~ 0 + group #> alpha ~ 0 + group #> A ~ 0 + group #>  #> Data: #>   id group variable value time label #> 1  1     a    sim_1     1    1     1 #> 3  3     a    sim_1     2    3     1 #> 4  4     a    sim_1     1    4     1 #> ... #> (5117 rows) ss_mv2 <- growthSS(   model = \"skew_normal: linear\",   form = label | resp_weights(value) + trunc(lb = -1, ub = Inf) ~ time | group,   df = mv_df2, start = list(\"A\" = 50) ) ss_mv2 #> skew_normal: linear brms skew_normal model: #>  #> pcvr formula variables: #> Outcome: label | resp_weights(value) + trunc(lb = -1, ub = Inf) #> X: time #> Group: group #>  #> Model Formula: #> label | resp_weights(value) + trunc(lb = -1, ub = Inf) ~ A * time  #> sigma ~ 0 + group #> alpha ~ 0 + group #> A ~ 0 + group #>  #> Data: #>   id group variable value time label #> 1  1     a    sim_1     1    1     1 #> 3  3     a    sim_1     2    3     1 #> 4  4     a    sim_1     1    4     1 #> ... #> (5117 rows) # ignoring environments and other such details these are identical except for the # function call. unlist(lapply(names(ss_mv1), function(nm) {   if (!identical(ss_mv1[[nm]], ss_mv2[[nm]],     ignore.environment = TRUE,     ignore.srcref = TRUE   )) {     if (!identical(as.character(ss_mv1[[nm]]), as.character(ss_mv2[[nm]]))) {       nm     }   } })) #> [1] \"call\"  # \\donttest{ if (rlang::is_installed(\"mnormt\")) {   m2 <- fitGrowth(ss_mv1, backend = \"cmdstanr\", iter = 1000, chains = 1, cores = 1)   growthPlot(m2, ss_mv1$pcvrForm, df = ss_mv1$df) } # }"},{"path":"https://danforthcenter.github.io/pcvr/reference/mvSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi Value Trait simulating function — mvSim","title":"Multi Value Trait simulating function — mvSim","text":"mvSim can used simulate data example models/plots.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/mvSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi Value Trait simulating function — mvSim","text":"","code":"mvSim(   dists = list(rnorm = list(mean = 100, sd = 15)),   n_samples = 10,   counts = 1000,   min_bin = 1,   max_bin = 180,   wide = TRUE,   binwidth = 1,   t = NULL,   model = \"linear\",   params = list(A = 10) )"},{"path":"https://danforthcenter.github.io/pcvr/reference/mvSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi Value Trait simulating function — mvSim","text":"dists list lists, names corresponding random deviate generating functions arguments function list values (see examples). Note n argument need provided. n_samples Number samples per distribution generate. Defaults 10, can >1L. counts Number counts per histogram, defaults 1000. min_bin minumum bin number. can thought minimum value accepted distribution functions, lower numbers raised value. Note bin arguments ignored case \"rbeta\" treated 0,1. max_bin number bins return. Note also max value accepted distribution functions, higher numbers shrunk value. Defaults 180. wide Boolean, data returned wide format (default)? FALSE long data returned. binwidth wide bins ? Defaults 1. t Number timepoints simulate. Defaults NULL case data simulated non-longitudinal. Note currently first non n argument data simulating function assumed parameter changing time (ie, mean rnorm, meanlog rlnorm). model type growth model, passed growthSim. used t specified. params Parameters growth model, passed growthSim. also used t specified. Note growth start values specified dists. See examples.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/mvSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi Value Trait simulating function — mvSim","text":"Returns dataframe example multi-value trait data simulated specified distributions.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/mvSim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi Value Trait simulating function — mvSim","text":"","code":"library(extraDistr) # for rmixnorm #>  #> Attaching package: ‘extraDistr’ #> The following objects are masked from ‘package:brms’: #>  #>     ddirichlet, dfrechet, pfrechet, qfrechet, rdirichlet, rfrechet library(ggplot2) dists <- list(   rmixnorm = list(mean = c(70, 150), sd = c(15, 5), alpha = c(0.3, 0.7)),   rnorm = list(mean = 90, sd = 3) ) x <- mvSim(dists = dists, wide = FALSE) dim(x) #> [1] 3600    4 x2 <- mvSim(dists = dists) dim(x2) #> [1]  20 181  ggplot(x, aes(   x = as.numeric(sub(\"sim_\", \"\", variable)),   y = value, group = interaction(group, id), fill = group )) +   geom_col(position = \"identity\", alpha = 0.25) +   pcv_theme() +   labs(x = \"bin\")  dists = list(rnorm = list(mean = 30, sd = 15), rnorm = list(mean = 25, sd = 10)) x3 <- mvSim(   dists = dists, wide = FALSE, # here we make longitudinal data   t = 10, model = \"linear\", params = list(\"A\" = c(10, 5)) ) ggplot(x3, aes(   x = as.numeric(sub(\"sim_\", \"\", variable)),   y = value, group = interaction(group, id), fill = group )) +   facet_wrap(~times) +   geom_col(position = \"identity\", alpha = 0.25) +   pcv_theme() +   labs(x = \"bin\")"},{"path":"https://danforthcenter.github.io/pcvr/reference/mv_ag.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi Value Trait Aggregation function — mv_ag","title":"Multi Value Trait Aggregation function — mv_ag","text":"EMD can get heavy large datasets. example lemnatech dataset filtering images every 5th day 6332^2 = 40,094,224 pairwise EMD values. long format 40 million row dataframe, unwieldy. function help reduce size datasets comparing histograms moving matrix methods network analysis.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/mv_ag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi Value Trait Aggregation function — mv_ag","text":"","code":"mv_ag(   df,   group,   mvCols = \"frequencies\",   n_per_group = 1,   outRows = NULL,   keep = NULL,   parallel = getOption(\"mc.cores\", 1),   traitCol = \"trait\",   labelCol = \"label\",   valueCol = \"value\",   id = \"image\" )"},{"path":"https://danforthcenter.github.io/pcvr/reference/mv_ag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi Value Trait Aggregation function — mv_ag","text":"df dataframe multi value traits. can wide long format, data assumed long traitCol, valueCol, labelCol present. group Vector column names variables uniquely identify groups data summarize data . Typically design variables time variable. mvCols Either vector column names/positions representing multi value traits character string identifies multi value trait columns regex pattern. Defaults \"frequencies\". n_per_group Number rows return group. outRows Optionally different way specify many rows return. often exact groups number observations . keep vector single value traits also average groups, mix single multi value traits data. parallel Optionally groups can run parallel number cores, defaults 1 \"mc.cores\" option set globally. traitCol Column phenotype names, defaults \"trait\". labelCol Column phenotype labels (units), defaults \"label\". valueCol Column phenotype values, defaults \"value\". id Column uniquely identifies images data long format. ignored data wide format.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/mv_ag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi Value Trait Aggregation function — mv_ag","text":"Returns dataframe summarized specified groups multi-value traits.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/mv_ag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi Value Trait Aggregation function — mv_ag","text":"","code":"s1 <- mvSim(   dists = list(runif = list(min = 15, max = 150)),   n_samples = 10,   counts = 1000,   min_bin = 1,   max_bin = 180,   wide = TRUE ) mv_ag(s1, group = \"group\", mvCols = \"sim_\", n_per_group = 2) #>             group sim_1 sim_2 sim_3 sim_4 sim_5 sim_6 sim_7 sim_8 sim_9 sim_10 #> runif_1.1 runif_1     0     0     0     0     0     0     0     0     0      0 #> runif_1.2 runif_1     0     0     0     0     0     0     0     0     0      0 #>           sim_11 sim_12 sim_13 sim_14 sim_15 sim_16 sim_17 sim_18 sim_19 sim_20 #> runif_1.1      0      0      0      0 0.0096 0.0066 0.0074 0.0072 0.0068 0.0068 #> runif_1.2      0      0      0      0 0.0062 0.0068 0.0096 0.0094 0.0070 0.0064 #>           sim_21 sim_22 sim_23 sim_24 sim_25 sim_26 sim_27 sim_28 sim_29 sim_30 #> runif_1.1 0.0074 0.0070 0.0074 0.0092 0.0046 0.0078 0.0082 0.0092 0.0086 0.0078 #> runif_1.2 0.0062 0.0074 0.0060 0.0088 0.0060 0.0056 0.0070 0.0082 0.0068 0.0062 #>           sim_31 sim_32 sim_33 sim_34 sim_35 sim_36 sim_37 sim_38 sim_39 sim_40 #> runif_1.1 0.0086 0.0072 0.0058 0.0078 0.0096 0.0058 0.0074 0.0072 0.0060 0.0086 #> runif_1.2 0.0092 0.0090 0.0070 0.0064 0.0080 0.0050 0.0070 0.0058 0.0062 0.0050 #>           sim_41 sim_42 sim_43 sim_44 sim_45 sim_46 sim_47 sim_48 sim_49 sim_50 #> runif_1.1 0.0078 0.0092 0.0060 0.0082 0.0078 0.0074 0.0104 0.0082 0.0078 0.0074 #> runif_1.2 0.0070 0.0090 0.0064 0.0078 0.0066 0.0052 0.0092 0.0078 0.0068 0.0080 #>           sim_51 sim_52 sim_53 sim_54 sim_55 sim_56 sim_57 sim_58 sim_59 sim_60 #> runif_1.1 0.0064 0.0060 0.0080 0.0080 0.0064 0.0060 0.0062 0.0078 0.0062 0.0082 #> runif_1.2 0.0088 0.0084 0.0092 0.0052 0.0080 0.0066 0.0082 0.0056 0.0086 0.0062 #>           sim_61 sim_62 sim_63 sim_64 sim_65 sim_66 sim_67 sim_68 sim_69 sim_70 #> runif_1.1 0.0090 0.0082 0.0078 0.0068 0.0072 0.0068 0.0092 0.0076 0.0078 0.0082 #> runif_1.2 0.0094 0.0076 0.0054 0.0086 0.0088 0.0080 0.0086 0.0070 0.0074 0.0082 #>           sim_71 sim_72 sim_73 sim_74 sim_75 sim_76 sim_77 sim_78 sim_79 sim_80 #> runif_1.1 0.0070  0.007 0.0078 0.0064 0.0066 0.0108 0.0082 0.0084 0.0100 0.0084 #> runif_1.2 0.0062  0.007 0.0094 0.0074 0.0074 0.0076 0.0074 0.0068 0.0072 0.0032 #>           sim_81 sim_82 sim_83 sim_84 sim_85 sim_86 sim_87 sim_88 sim_89 sim_90 #> runif_1.1 0.0056  0.008 0.0056 0.0062 0.0056 0.0054 0.0056 0.0060 0.0096 0.0074 #> runif_1.2 0.0102  0.008 0.0064 0.0068 0.0064 0.0084 0.0080 0.0068 0.0074 0.0082 #>           sim_91 sim_92 sim_93 sim_94 sim_95 sim_96 sim_97 sim_98 sim_99 #> runif_1.1 0.0068 0.0066 0.0084 0.0072 0.0108 0.0090 0.0070 0.0074 0.0066 #> runif_1.2 0.0094 0.0080 0.0066 0.0080 0.0060 0.0084 0.0072 0.0080 0.0094 #>           sim_100 sim_101 sim_102 sim_103 sim_104 sim_105 sim_106 sim_107 #> runif_1.1  0.0058  0.0066  0.0072  0.0058  0.0066   0.007  0.0066  0.0074 #> runif_1.2  0.0064  0.0074  0.0088  0.0094  0.0080   0.009  0.0042  0.0062 #>           sim_108 sim_109 sim_110 sim_111 sim_112 sim_113 sim_114 sim_115 #> runif_1.1  0.0078  0.0072  0.0090  0.0066  0.0048  0.0096  0.0074  0.0080 #> runif_1.2  0.0078  0.0076  0.0078  0.0062  0.0074  0.0064  0.0082  0.0074 #>           sim_116 sim_117 sim_118 sim_119 sim_120 sim_121 sim_122 sim_123 #> runif_1.1  0.0062  0.0046  0.0058  0.0086  0.0094  0.0072  0.0064  0.0068 #> runif_1.2  0.0062  0.0068  0.0080  0.0104  0.0074  0.0082  0.0076  0.0094 #>           sim_124 sim_125 sim_126 sim_127 sim_128 sim_129 sim_130 sim_131 #> runif_1.1  0.0062  0.0090  0.0054  0.0082  0.0066  0.0064  0.0068  0.0076 #> runif_1.2  0.0066  0.0084  0.0078  0.0068  0.0084  0.0082  0.0078  0.0080 #>           sim_132 sim_133 sim_134 sim_135 sim_136 sim_137 sim_138 sim_139 #> runif_1.1  0.0088  0.0066  0.0088  0.0062  0.0068  0.0066  0.0086  0.0066 #> runif_1.2  0.0082  0.0064  0.0064  0.0092  0.0068  0.0086  0.0060  0.0050 #>           sim_140 sim_141 sim_142 sim_143 sim_144 sim_145 sim_146 sim_147 #> runif_1.1  0.0066  0.0078  0.0096  0.0076  0.0074   0.007   0.008  0.0072 #> runif_1.2  0.0094  0.0070  0.0058  0.0078  0.0048   0.008   0.006  0.0088 #>           sim_148 sim_149 sim_150 sim_151 sim_152 sim_153 sim_154 sim_155 #> runif_1.1  0.0062  0.0100       0       0       0       0       0       0 #> runif_1.2  0.0044  0.0102       0       0       0       0       0       0 #>           sim_156 sim_157 sim_158 sim_159 sim_160 sim_161 sim_162 sim_163 #> runif_1.1       0       0       0       0       0       0       0       0 #> runif_1.2       0       0       0       0       0       0       0       0 #>           sim_164 sim_165 sim_166 sim_167 sim_168 sim_169 sim_170 sim_171 #> runif_1.1       0       0       0       0       0       0       0       0 #> runif_1.2       0       0       0       0       0       0       0       0 #>           sim_172 sim_173 sim_174 sim_175 sim_176 sim_177 sim_178 sim_179 #> runif_1.1       0       0       0       0       0       0       0       0 #> runif_1.2       0       0       0       0       0       0       0       0 #>           sim_180 #> runif_1.1       0 #> runif_1.2       0"},{"path":"https://danforthcenter.github.io/pcvr/reference/net.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizing igraph networks — net.plot","title":"Visualizing igraph networks — net.plot","text":"Easy igraph visualization pcv.net output","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/net.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizing igraph networks — net.plot","text":"","code":"net.plot(   net,   fill = \"strength\",   shape = NULL,   size = 3,   edgeWeight = \"emd\",   edgeFilter = NULL )"},{"path":"https://danforthcenter.github.io/pcvr/reference/net.plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualizing igraph networks — net.plot","text":"net Network object similar returned pcv.net, dataframes named \"edges\" \"nodes\" fill Variable name(s) nodes data used color points. default \"strength\" used. shape Optional discrete variable name(s) nodes data used change shape points. variable numeric coerced character. size Size points, defaults 3. edgeWeight Edge dataframe column weight connections nodes. Defaults \"emd\" compatability pcv.emd. edgeFilter edges filtered? can either numeric (0.5) case taken filter edges values greater equal number kept character string (\"0.5\") case strongest X percentage edges kept. defaults NULL filtering, although considered best standard behaviour. See details.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/net.plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualizing igraph networks — net.plot","text":"Returns ggplot network.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/net.plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualizing igraph networks — net.plot","text":"","code":"library(extraDistr) dists <- list(   rmixnorm = list(mean = c(70, 150), sd = c(15, 5), alpha = c(0.3, 0.7)),   rnorm = list(mean = 90, sd = 3) ) x <- mvSim(   dists = dists, n_samples = 5, counts = 1000,   min_bin = 1, max_bin = 180, wide = TRUE ) emd_df <- pcv.emd(x,   cols = \"sim\", reorder = c(\"group\"), mat = FALSE,   plot = FALSE, parallel = 1 ) #> Estimated time of calculation is roughly 0.1 seconds using 1 cores in parallel. net <- pcv.net(emd_df, meta = \"group\") net.plot(net)  net.plot(net, edgeFilter = \"0.25\")  net.plot(net,   edgeFilter = 0.25, fill = c(\"degree\", \"group\"),   shape = c(\"degree\", \"group\") )  net.plot(net,   edgeFilter = 0.25, fill = c(\"degree\", \"group\"),   shape = c(\"degree\") )"},{"path":"https://danforthcenter.github.io/pcvr/reference/nlmePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to visualize common nlme::nlme growth models. — nlmePlot","title":"Function to visualize common nlme::nlme growth models. — nlmePlot","text":"Models fit using growthSS inputs fitGrowth (similar models made means)  can visualized easily using function. generally called growthPlot.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/nlmePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to visualize common nlme::nlme growth models. — nlmePlot","text":"","code":"nlmePlot(   fit,   form,   df = NULL,   groups = NULL,   timeRange = NULL,   facetGroups = TRUE,   groupFill = FALSE,   virMaps = c(\"plasma\") )"},{"path":"https://danforthcenter.github.io/pcvr/reference/nlmePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to visualize common nlme::nlme growth models. — nlmePlot","text":"fit model fit returned fitGrowth type=\"nlme\". form formula similar growthSS inputs (pcvrForm part output) specifying outcome, predictor, grouping structure data outcome ~ predictor|individual/group df dataframe use plotting observed growth curves top model. must supplied nlme models. groups optional set groups keep plot. Defaults NULL case groups model plotted. timeRange optional range times use. can used view predictions future data avaiable data reached point (asymptotic size). facetGroups logical, groups separated facets? Defaults TRUE. groupFill logical, groups different colors? Defaults FALSE. TRUE viridis colormaps used order virMaps. virMaps order viridis maps use. recycled necessary length. Defaults \"plasma\", generally informed growthPlot's default.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/nlmePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to visualize common nlme::nlme growth models. — nlmePlot","text":"Returns ggplot showing nlme model's credible intervals optionally individual growth lines.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/nlmePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to visualize common nlme::nlme growth models. — nlmePlot","text":"","code":"simdf <- growthSim(\"logistic\",   n = 10, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) )  ss <- growthSS(   model = \"logistic\", form = y ~ time | id / group, sigma = \"none\",   df = simdf, start = NULL, type = \"nlme\" )  fit <- fitGrowth(ss)  nlmePlot(fit, form = ss$pcvrForm, groups = NULL, df = ss$df, timeRange = NULL)  nlmePlot(fit, form = ss$pcvrForm, groups = \"a\", df = ss$df, timeRange = 1:10, groupFill = TRUE)"},{"path":"https://danforthcenter.github.io/pcvr/reference/nlrqPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to visualize common quantreg::nlrq growth models. — nlrqPlot","title":"Function to visualize common quantreg::nlrq growth models. — nlrqPlot","text":"Models fit using growthSS inputs fitGrowth (similar models made means) can visualized easily using function. generally called growthPlot.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/nlrqPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to visualize common quantreg::nlrq growth models. — nlrqPlot","text":"","code":"nlrqPlot(   fit,   form,   df = NULL,   groups = NULL,   timeRange = NULL,   facetGroups = TRUE,   groupFill = FALSE,   virMaps = c(\"plasma\") )"},{"path":"https://danforthcenter.github.io/pcvr/reference/nlrqPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to visualize common quantreg::nlrq growth models. — nlrqPlot","text":"fit model fit, list model fits, returned fitGrowth type=\"nlrq\". form formula similar growthSS inputs (pcvrForm part output) specifying outcome, predictor, grouping structure data outcome ~ predictor|individual/group. individual group specified observed growth lines plotted. df dataframe use plotting observed growth curves top model. must supplied nlrq models. groups optional set groups keep plot. Defaults NULL case groups model plotted. timeRange optional range times use. can used view predictions future data avaiable data reached point (asymptotic size). facetGroups logical, groups separated facets? Defaults TRUE. groupFill logical, groups different colors? Defaults FALSE. TRUE viridis colormaps used order virMaps virMaps order viridis maps use. recycled necessary length. Defaults \"plasma\", generally informed growthPlot's default.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/nlrqPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to visualize common quantreg::nlrq growth models. — nlrqPlot","text":"Returns ggplot showing nlrq model's quantiles  optionally individual growth lines.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/nlrqPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to visualize common quantreg::nlrq growth models. — nlrqPlot","text":"","code":"simdf <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ss <- growthSS(   model = \"logistic\", form = y ~ time | id / group,   tau = c(0.5, 0.9), df = simdf, start = NULL, type = \"nlrq\" ) #> Individual is not used with type = 'nlrq'. fit <- fitGrowth(ss) nlrqPlot(fit, form = ss$pcvrForm, df = ss$df, groups = \"a\", timeRange = 1:20) #> Warning: Removed 20 rows containing missing values or values outside the scale range #> (`geom_line()`).  nlrqPlot(fit, form = ss$pcvrForm, df = ss$df, groupFill = TRUE, virMaps = c(\"plasma\", \"viridis\")) #> Warning: Removed 25 rows containing missing values or values outside the scale range #> (`geom_line()`). #> Warning: Removed 25 rows containing missing values or values outside the scale range #> (`geom_line()`).   ss <- growthSS(   model = \"logistic\", form = y ~ time,   tau = c(0.5, 0.9), df = simdf, start = NULL, type = \"nlrq\" ) fit <- fitGrowth(ss) nlrqPlot(fit, form = ss$pcvrForm, df = ss$df) #> Warning: Removed 25 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://danforthcenter.github.io/pcvr/reference/nlsPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to visualize common stats::nls growth models. — nlsPlot","title":"Function to visualize common stats::nls growth models. — nlsPlot","text":"Models fit using growthSS inputs fitGrowth (similar models made means) can visualized easily using function. generally called growthPlot.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/nlsPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to visualize common stats::nls growth models. — nlsPlot","text":"","code":"nlsPlot(   fit,   form,   df = NULL,   groups = NULL,   timeRange = NULL,   facetGroups = TRUE,   groupFill = FALSE,   virMaps = c(\"plasma\") )  gamPlot(   fit,   form,   df = NULL,   groups = NULL,   timeRange = NULL,   facetGroups = TRUE,   groupFill = FALSE,   virMaps = c(\"plasma\") )  lmPlot(   fit,   form,   df = NULL,   groups = NULL,   timeRange = NULL,   facetGroups = TRUE,   groupFill = FALSE,   virMaps = c(\"plasma\") )"},{"path":"https://danforthcenter.github.io/pcvr/reference/nlsPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to visualize common stats::nls growth models. — nlsPlot","text":"fit model fit returned fitGrowth type=\"nls\". form formula similar growthSS inputs (pcvrForm part output) specifying outcome, predictor, grouping structure data outcome ~ predictor|individual/group. individual group specified observed growth lines plotted. df dataframe use plotting observed growth curves top model. must supplied nls models. groups optional set groups keep plot. Defaults NULL case groups model plotted. timeRange optional range times use. can used view predictions future data avaiable data reached point (asymptotic size). facetGroups logical, groups separated facets? Defaults TRUE. groupFill logical, groups different colors? Defaults FALSE. TRUE viridis colormaps used order virMaps virMaps order viridis maps use. recycled necessary length. Defaults \"plasma\", generally informed growthPlot's default.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/nlsPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to visualize common stats::nls growth models. — nlsPlot","text":"Returns ggplot showing nls model's predictions.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/nlsPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to visualize common stats::nls growth models. — nlsPlot","text":"","code":"simdf <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ss <- growthSS(   model = \"logistic\", form = y ~ time | id / group,   df = simdf, start = NULL, type = \"nls\" ) #> Individual is not used with type = 'nls'. fit <- fitGrowth(ss) nlsPlot(fit, form = ss$pcvrForm, df = ss$df, groupFill = TRUE)  nlsPlot(fit, form = ss$pcvrForm, df = ss$df, groups = \"a\", timeRange = 1:10)   simdf <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ss <- growthSS(   model = \"gam\", form = y ~ time | id / group,   df = simdf, start = NULL, type = \"nls\" ) #> Individual is not used with type = 'nls'. fit <- fitGrowth(ss) gamPlot(fit, form = ss$pcvrForm, df = ss$df, groupFill = TRUE)  gamPlot(fit, form = ss$pcvrForm, df = ss$df, groups = \"a\", timeRange = 1:10)  ss <- growthSS(   model = \"gam\", form = y ~ time | group,   df = simdf, start = NULL, type = \"nls\" ) fit <- fitGrowth(ss) gamPlot(fit, form = ss$pcvrForm, df = ss$df, groupFill = TRUE)   simdf <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ss <- growthSS(   model = \"gam\", form = y ~ time | id / group,   df = simdf, start = NULL, type = \"nls\" ) #> Individual is not used with type = 'nls'. fit <- fitGrowth(ss) lmPlot(fit, form = ss$pcvrForm, df = ss$df)"},{"path":"https://danforthcenter.github.io/pcvr/reference/pcadf.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to run a PCA, plot and optionally return the data with PCA coordinates and pca object — pcadf","title":"Function to run a PCA, plot and optionally return the data with PCA coordinates and pca object — pcadf","text":"Function run PCA, plot optionally return data PCA coordinates pca object","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcadf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to run a PCA, plot and optionally return the data with PCA coordinates and pca object — pcadf","text":"","code":"pcadf(   df = NULL,   cols = NULL,   color = NULL,   facet = NULL,   returnData = TRUE,   ncp = NULL )"},{"path":"https://danforthcenter.github.io/pcvr/reference/pcadf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to run a PCA, plot and optionally return the data with PCA coordinates and pca object — pcadf","text":"df Dataframe ordinate cols columns reduce dimensions . Can specified names positions. length 1 treated regex pattern match column names used. color column name(s) used color points pca plot. facet Optional column vector facet plots . returnData Logical, data returned? ncp Optional, number principal components return attached dataframe data returned. Defaults .","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcadf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to run a PCA, plot and optionally return the data with PCA coordinates and pca object — pcadf","text":"ggplot list ggplot, dataframe data PCs, factominer PCA object elements.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcadf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to run a PCA, plot and optionally return the data with PCA coordinates and pca object — pcadf","text":"data returned contain coordinates  PCA contain columns reduced.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcadf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to run a PCA, plot and optionally return the data with PCA coordinates and pca object — pcadf","text":"","code":"dists <- list(   rlnorm = list(meanlog = log(40), sdlog = 0.5),   rnorm = list(mean = 60, sd = 10) ) mv <- mvSim(   dists = dists, n_samples = 100, counts = 1000,   min_bin = 1, max_bin = 180, wide = TRUE ) mv$otherGroup <- sample(c(\"a\", \"b\"), size = nrow(mv), replace = TRUE) pcadf(mv, cols = \"sim_\", returnData = TRUE) #> $data #>        group otherGroup       pc1          pc2          pc3           pc4 #> 1   rlnorm_1          b  8.786751 -0.274778785  0.875725481   1.040877031 #> 2   rlnorm_1          a  8.954006  1.996322945 -1.648729165   0.120741303 #> 3   rlnorm_1          a  8.608858 -0.573687562 -7.773431427  -1.354747919 #> 4   rlnorm_1          a  7.597139 -2.320728345 -1.783264797   0.644035292 #> 5   rlnorm_1          a  8.405810 -0.207406119  0.486276076   0.299360009 #> 6   rlnorm_1          a  8.273993  3.791938403  1.914711679   1.735085694 #> 7   rlnorm_1          a  8.202944  0.216125484  2.957322751   0.400389448 #> 8   rlnorm_1          b  7.811583 -3.521788010  1.507361053  -0.180459715 #> 9   rlnorm_1          b  8.014510 -1.082860745 -1.583549882  -0.556615983 #> 10  rlnorm_1          a  8.752666  0.345010350 -0.416051731   3.015411823 #> 11  rlnorm_1          a  8.375022 -3.141177073  4.482420370  -1.346532936 #> 12  rlnorm_1          b  8.724132  0.726077137 -1.269307344   0.314506907 #> 13  rlnorm_1          b  8.806825  1.107772892 -0.364106595   3.163434834 #> 14  rlnorm_1          a  8.634896 -0.252214327  0.170318758   0.580581960 #> 15  rlnorm_1          b  8.215298  0.991325641  0.732522578   0.354657434 #> 16  rlnorm_1          a  9.510846  1.120986502  0.966155811   1.655850154 #> 17  rlnorm_1          b  8.253900 -1.247964063 -3.908258561  -1.710729572 #> 18  rlnorm_1          b  8.269186  2.441203882 -1.084317907  -0.918752460 #> 19  rlnorm_1          b  7.515203  2.261165782 -1.960365930  -0.858294051 #> 20  rlnorm_1          a  7.585756  1.486848171  1.829570667   1.665176678 #> 21  rlnorm_1          a  8.710666 -3.314110592 -3.440849861  -0.651175870 #> 22  rlnorm_1          a  7.947360  3.173652117 -1.440265632  -1.588300558 #> 23  rlnorm_1          a  8.622604  1.879383173  0.813537883   1.816787347 #> 24  rlnorm_1          a  7.944432 -1.217002783 -0.062417322   0.445499108 #> 25  rlnorm_1          a  8.988734 -2.160259218 -3.682455641   0.687672578 #> 26  rlnorm_1          a  8.116528  2.604414918 -1.269608288  -2.830088445 #> 27  rlnorm_1          a  9.021398 -0.897286660 -0.550072599  -0.865160093 #> 28  rlnorm_1          b  8.333758 -0.600375965 -0.359830291   0.371506911 #> 29  rlnorm_1          a  8.690173  2.696049944  0.363030733   1.470231072 #> 30  rlnorm_1          a  8.632686  1.005138697  0.136486426   2.062312827 #> 31  rlnorm_1          b  7.967307 -1.291744024  2.100816772  -3.577934187 #> 32  rlnorm_1          b  8.295726  0.347174051  0.324045184   0.367386133 #> 33  rlnorm_1          b  8.793408 -0.166325278 -0.374600100   2.892535425 #> 34  rlnorm_1          a  8.411504 -3.555701984 -0.997386855   0.904805607 #> 35  rlnorm_1          b  8.440980 -1.854479362 -3.971191349  -4.098854544 #> 36  rlnorm_1          b  8.917187  1.897876935  3.929704840   2.497768180 #> 37  rlnorm_1          a  7.798562 -1.802100571  2.057029479  -3.913855402 #> 38  rlnorm_1          b  8.711223  2.810246615  1.249657762  -3.365006679 #> 39  rlnorm_1          a  7.911434 -1.098294597  1.880502273   0.848181941 #> 40  rlnorm_1          b  8.097426 -2.066182468 -0.312311250   2.477721457 #> 41  rlnorm_1          b  8.917738  2.695767553 -2.709500824  -0.130720916 #> 42  rlnorm_1          b  7.902102  0.513245159  3.526650594  -1.263864140 #> 43  rlnorm_1          b  8.040944  1.143846212 -1.560699621   1.716397885 #> 44  rlnorm_1          a  8.811272 -0.686996985 -2.025408797   3.363474315 #> 45  rlnorm_1          b  9.333415 -0.301606769  1.702058494   0.443193577 #> 46  rlnorm_1          b  8.836694 -0.071482311 -1.509003649   0.607194039 #> 47  rlnorm_1          b  7.935947  0.372033822 -1.818398162   0.421442730 #> 48  rlnorm_1          b  8.866204 -0.679827297 -0.899374967  -4.791104499 #> 49  rlnorm_1          b  8.791672  0.111888939 -1.677450486   1.961733811 #> 50  rlnorm_1          b  8.182703 -3.378812475  2.865691675  -1.775794908 #> 51  rlnorm_1          a 10.391590 -6.308086921  0.282349649   1.570743244 #> 52  rlnorm_1          a  8.568953 -0.911239129 -3.959987616  -1.655997191 #> 53  rlnorm_1          b  8.343753  1.163947253 -1.635945051  -2.384915953 #> 54  rlnorm_1          a  9.333126  3.156658798  0.325772300   3.795307978 #> 55  rlnorm_1          a  8.277135  1.985095143 -1.164675426  -2.480028561 #> 56  rlnorm_1          a  8.214702 -1.438183633  1.737805701  -0.655752686 #> 57  rlnorm_1          a  8.119418  0.402305089 -0.409741965   0.208062658 #> 58  rlnorm_1          a  8.748387  0.013358685 -1.309433000  -2.368668455 #> 59  rlnorm_1          b  8.480403 -2.098171180 -0.502507478   1.589137929 #> 60  rlnorm_1          b  9.444510  0.422441813  0.098165770   2.403892535 #> 61  rlnorm_1          b  7.952502 -1.761215028 -0.781600601   0.572009582 #> 62  rlnorm_1          b  7.387823 -1.378568844 -0.970731174  -3.095479368 #> 63  rlnorm_1          b  8.768419 -1.142953387 -2.479742844   0.623146797 #> 64  rlnorm_1          a  9.055412 -3.190877971 -0.568044691   0.780045835 #> 65  rlnorm_1          a  9.796296  1.155965451  3.443254704   1.179871652 #> 66  rlnorm_1          b  8.812753 -3.212684650 -0.012356360  -0.418056341 #> 67  rlnorm_1          a  9.539303 -0.502674738  0.854504225  -0.099091356 #> 68  rlnorm_1          b  8.788224 -3.758151717 -1.824909620   4.417690439 #> 69  rlnorm_1          b  8.319581  0.723488266 -0.269126301   0.482004915 #> 70  rlnorm_1          a  8.737165  4.802467543  0.436013023   0.077054518 #> 71  rlnorm_1          a  6.647524 -2.905048144  2.552350430  -1.370009710 #> 72  rlnorm_1          b  8.386589  1.618145876  8.297175988   0.057632108 #> 73  rlnorm_1          b 10.181055  6.131595458  5.439718321   3.625247268 #> 74  rlnorm_1          b  7.855992 -3.853243211  1.937271165  -0.184564043 #> 75  rlnorm_1          a  7.149192 -1.628518034  2.771236802  -0.266169519 #> 76  rlnorm_1          a  9.185136  3.411131138  2.120233140  -3.150434858 #> 77  rlnorm_1          b  8.445730 -2.638935722 -5.530905592   1.962162451 #> 78  rlnorm_1          a  8.566915 -0.473445590  0.723918730  -0.194823670 #> 79  rlnorm_1          a  8.977791 -0.355876697 -0.898566314   2.470375845 #> 80  rlnorm_1          a  9.797498 12.681798977 -2.673648120  -1.685375111 #> 81  rlnorm_1          b  8.767547  0.247598828 -3.312497189  -0.503847722 #> 82  rlnorm_1          b  7.867169 -0.451782566  1.894075046 -15.084579561 #> 83  rlnorm_1          b  7.597611  0.429927365  1.040226903   0.137908522 #> 84  rlnorm_1          b  8.572868  1.518818041 -1.126414016   0.437819288 #> 85  rlnorm_1          b  9.072714 -0.435481497  0.711551226   1.818122753 #> 86  rlnorm_1          a  8.956487  1.977585967 -0.225201381   3.239348096 #> 87  rlnorm_1          b  8.131581  0.570945179 -4.261478773   1.339971685 #> 88  rlnorm_1          b  8.015907 -1.635128247 -2.637979993  -2.224636479 #> 89  rlnorm_1          b  7.467500 -0.049493516 -0.260935544  -1.214521295 #> 90  rlnorm_1          a  8.579774  0.713790634  4.072847564  -2.541765549 #> 91  rlnorm_1          b  8.353795 -0.773715776  0.203507458   0.318118596 #> 92  rlnorm_1          a  9.401175 -2.190329220  2.188618797   3.490587870 #> 93  rlnorm_1          b  8.980799 -3.040377196 -0.943847191   0.873793025 #> 94  rlnorm_1          b  7.578796  1.462965570 -1.229669063  -0.383984421 #> 95  rlnorm_1          a  9.222669  1.306276823  0.626701145   1.645462772 #> 96  rlnorm_1          a  7.903398 -1.586925746  2.266750689  -1.494772485 #> 97  rlnorm_1          b  8.428845 -1.511519898  6.015780683  -0.835768926 #> 98  rlnorm_1          b  8.411887 -3.402837721  3.383091780  -0.592873565 #> 99  rlnorm_1          a  8.963673  4.917660525 -2.698080778  -2.652092987 #> 100 rlnorm_1          a  7.406897 -0.331902081  2.222515447   0.991337269 #> 101  rnorm_2          a -8.665831  0.109721388  0.098044048  -0.139962231 #> 102  rnorm_2          b -8.499319  0.297337820 -0.010397972   0.357138413 #> 103  rnorm_2          b -8.909391  0.249265969  0.351329155  -0.162745128 #> 104  rnorm_2          a -8.496080 -0.761968383 -0.439973035   0.063756260 #> 105  rnorm_2          a -8.613858  0.093631749  0.270378603   0.237890990 #> 106  rnorm_2          b -8.280028 -0.175050544 -0.428370131   0.428868760 #> 107  rnorm_2          a -7.916950 -0.067127936 -0.395878230   0.107777840 #> 108  rnorm_2          a -8.484976 -0.378283668 -0.282233382   0.138220311 #> 109  rnorm_2          b -8.431329 -0.421107323 -0.437211312   0.022937733 #> 110  rnorm_2          b -8.358121  0.222490611 -0.364408123  -0.277179713 #> 111  rnorm_2          b -8.424187 -0.012376250 -0.043429923   0.074306271 #> 112  rnorm_2          a -8.450568  0.440718295 -0.162472864   0.272241113 #> 113  rnorm_2          b -8.398384 -0.012538362 -0.255577859  -0.101762267 #> 114  rnorm_2          a -8.369089 -0.171467917 -0.454647049  -0.042151560 #> 115  rnorm_2          b -8.874094 -0.384042575 -0.005113078   0.150803728 #> 116  rnorm_2          b -8.675338  0.164147912  0.095512900  -0.048936664 #> 117  rnorm_2          b -8.950174 -0.214821268  0.262083894  -0.088121856 #> 118  rnorm_2          a -8.186640 -0.009220995  0.030100820   0.040313806 #> 119  rnorm_2          a -8.962379 -0.243201659  0.273305516   0.045674989 #> 120  rnorm_2          a -8.677848 -0.428316804  0.304811761   0.089463384 #> 121  rnorm_2          b -8.595749  0.010520035  0.426860756  -0.066494177 #> 122  rnorm_2          b -8.765246  0.058076137 -0.054042105   0.168688830 #> 123  rnorm_2          a -8.253204  0.031441305  0.175989978  -0.013466712 #> 124  rnorm_2          a -8.422735  0.544326353 -0.126157214   0.628963680 #> 125  rnorm_2          a -8.371259  0.463168387 -0.105990262   0.405488467 #> 126  rnorm_2          b -8.488487  0.210540078 -0.100150371   0.272098920 #> 127  rnorm_2          b -8.292930  0.180210604  0.333046272   0.036513850 #> 128  rnorm_2          b -8.161414 -0.511895442  0.113004213  -0.311285908 #> 129  rnorm_2          a -8.043366 -0.142479243  0.293480608   0.302019942 #> 130  rnorm_2          b -8.611009 -0.028774774 -0.249192685   0.012689446 #> 131  rnorm_2          a -8.321783  0.194501668 -0.074387611  -0.036434809 #> 132  rnorm_2          a -8.552606 -0.549854425 -0.058460589  -0.195747072 #> 133  rnorm_2          b -9.037257  0.066051179 -0.525800540  -0.424337977 #> 134  rnorm_2          a -8.737206  0.019597180  0.639915317  -0.241468012 #> 135  rnorm_2          b -8.631247 -0.231698906  0.467739855   0.234186516 #> 136  rnorm_2          b -8.172594  0.061245126  0.190138696   0.022717689 #> 137  rnorm_2          b -8.447023  0.144908377 -0.222703655  -0.029437347 #> 138  rnorm_2          a -8.356667 -0.113207477  0.067619171   0.043119164 #> 139  rnorm_2          b -8.753344  0.082496383  0.225777530  -0.099403439 #> 140  rnorm_2          b -8.386987 -0.134555814 -0.228577559   0.184166118 #> 141  rnorm_2          b -7.908238 -0.173002090 -0.318700431   0.044849337 #> 142  rnorm_2          a -8.299159  0.253883199 -0.393989128   0.157249008 #> 143  rnorm_2          b -9.000697 -0.197861446  0.144929319  -0.007024006 #> 144  rnorm_2          b -8.541663  0.299539913  0.232690069   0.134469219 #> 145  rnorm_2          a -8.792529 -0.020675034 -0.475520116  -0.281509530 #> 146  rnorm_2          b -8.296267  0.381045407  0.778532342  -0.084753736 #> 147  rnorm_2          b -8.326033 -0.639253198  0.187196444  -0.031985743 #> 148  rnorm_2          b -8.509601 -0.052579576 -0.280557130  -0.458299511 #> 149  rnorm_2          a -8.326438  0.026478901 -0.259594356  -0.089103900 #> 150  rnorm_2          b -8.592982  0.029135111  0.206081435  -0.149522781 #> 151  rnorm_2          a -8.163202  0.372062264 -0.252384919   0.216554042 #> 152  rnorm_2          b -9.157825  0.235803945  0.275959440   0.071655042 #> 153  rnorm_2          b -8.580757 -0.432403032  0.209226132  -0.087995878 #> 154  rnorm_2          a -8.529247  0.315881423  0.366781382   0.034613992 #> 155  rnorm_2          b -8.563426  0.167503020 -0.343324518   0.225876223 #> 156  rnorm_2          b -8.608911 -0.006937282 -0.581950744  -0.173717766 #> 157  rnorm_2          a -8.638254  0.197084511  0.430907421   0.131085819 #> 158  rnorm_2          a -8.454312  0.513016379  0.050274839   0.193180500 #> 159  rnorm_2          b -8.125001 -0.190320958  0.249376690  -0.348711471 #> 160  rnorm_2          a -8.647960 -0.243515462  0.126462326   0.127856864 #> 161  rnorm_2          b -8.707861  0.458707522 -0.369355694  -0.009067478 #> 162  rnorm_2          b -8.276025  0.034492255  0.084936749  -0.128636428 #> 163  rnorm_2          a -8.508749 -0.084302301 -0.084250364  -0.056123950 #> 164  rnorm_2          b -8.157799  0.152831328  0.007418536   0.100152323 #> 165  rnorm_2          a -8.447497 -0.346745762  0.828996429  -0.139316609 #> 166  rnorm_2          b -8.611302  0.405965244 -0.012507962   0.026384387 #> 167  rnorm_2          b -8.252820  0.324292624 -0.436237311  -0.321009373 #> 168  rnorm_2          b -8.798656 -0.256421991  0.119264725   0.129597036 #> 169  rnorm_2          a -8.790275  0.141908255 -0.422456400  -0.303136468 #> 170  rnorm_2          a -8.977105  0.268537073  0.243929878   0.218749815 #> 171  rnorm_2          a -8.554972  0.310795945 -0.520199680   0.093963367 #> 172  rnorm_2          a -8.474523  0.093584589 -0.447175460  -0.362172327 #> 173  rnorm_2          a -8.498558 -0.236646146  0.486427513   0.035075491 #> 174  rnorm_2          a -8.360930 -0.068498520  0.142429808   0.051002129 #> 175  rnorm_2          a -8.776500  0.159215096 -0.065094174   0.250690640 #> 176  rnorm_2          b -8.403500  0.341559854  0.163486528  -0.033465676 #> 177  rnorm_2          b -8.651122  0.276044172 -0.455434107  -0.120608795 #> 178  rnorm_2          a -8.615426 -0.166420684  0.042819081   0.251473804 #> 179  rnorm_2          b -8.152468 -0.220967024 -0.042127697   0.067608372 #> 180  rnorm_2          a -8.360584 -0.295187678 -0.188783572  -0.184692107 #> 181  rnorm_2          a -8.494080 -0.009481477  0.051595746   0.063417186 #> 182  rnorm_2          b -8.417136 -0.381803735  0.146118071   0.194606053 #> 183  rnorm_2          a -8.433023  0.047907737 -0.144926264  -0.014831903 #> 184  rnorm_2          b -8.423723  0.469559671 -0.285090346  -0.103003152 #> 185  rnorm_2          a -8.859347  0.216550012 -0.145357792  -0.038997630 #> 186  rnorm_2          a -8.377399 -0.008260052  0.010599632   0.129439252 #> 187  rnorm_2          b -8.482343  0.157460070 -0.050975847  -0.100249999 #> 188  rnorm_2          a -8.610208 -0.322694557  0.194272070  -0.197508898 #> 189  rnorm_2          a -7.894769  0.129897062 -0.231766091   0.046801646 #> 190  rnorm_2          a -8.674354 -0.070425435 -0.068698977   0.277739894 #> 191  rnorm_2          a -8.147379 -0.037341430 -0.031590586   0.304246570 #> 192  rnorm_2          a -8.926402 -0.135838804  0.008092120   0.401757496 #> 193  rnorm_2          b -8.359808 -0.047631380  0.334393206   0.084016163 #> 194  rnorm_2          a -8.894962 -0.098904304  0.159015677   0.319967014 #> 195  rnorm_2          b -8.024393  0.316670530 -0.412440050  -0.014791119 #> 196  rnorm_2          b -7.987591  0.206674836  0.374029191   0.143699742 #> 197  rnorm_2          a -8.909564  0.112819377  0.011589467  -0.046434301 #> 198  rnorm_2          b -8.086788  0.390664709  0.276227477   0.192617330 #> 199  rnorm_2          a -8.327167  0.456452167  0.038828741   0.042654925 #> 200  rnorm_2          a -8.428771  0.010787049  0.366838779  -0.074097947 #>               pc5          pc6          pc7          pc8           pc9 #> 1   -3.7646265157 -2.633683783 -0.614984294  1.835554559  4.2973402901 #> 2    0.8017967909 -3.172112363  2.382940405 -0.797477978 -0.6774372396 #> 3   -0.9379654887  2.001157997 -3.047823741  4.652710481 -0.3164595147 #> 4    1.6184492117  0.092821798 -1.947193931 -1.949327471 -0.8313073054 #> 5    1.7210481301  0.382729900 -2.551102729  3.083898961  0.7322203988 #> 6   -0.8379811241  3.316955814 -1.249808206  0.930014914  1.5977515281 #> 7    0.5977467501 -2.232148697  0.321698290 -0.922662858 -0.7360885117 #> 8   -2.6059625634 -1.059339739 -1.181712031  1.063762316  2.1926300577 #> 9   -1.3661738260  0.205119808 -0.384636332  0.741749828 -0.4046435118 #> 10   2.2493422705 -0.696314775  3.226944589 -1.630836551  2.1204524347 #> 11  -1.5455355562 -1.661255830  3.907936332  3.955681778 -5.4017115846 #> 12  -1.9835863656 -1.540368818  4.428552688 -3.739952531  1.2924305063 #> 13  10.3114454322 -4.246312850  0.013377225 -1.423375814 -2.3725044787 #> 14   1.2028869824  3.476756283  2.185927729  1.708948703  0.7275870822 #> 15  -2.1334804526 -0.549201290 -0.739494048 -0.696201667  2.3823764719 #> 16   3.2262351907 -6.654194392  1.180250429  2.601825483  4.3953462635 #> 17  -2.0721105412  1.175591904 -1.416747579  1.633655368 -2.1002439173 #> 18  -1.3728571974 -2.797622305 -0.925196333 -2.789402209  5.9181228732 #> 19   0.2395454970 -0.021381801 -2.089071929 -1.187517905 -1.4436026941 #> 20  -2.4638515831  0.193388234 -1.759784338 -0.516814574 -1.9542090167 #> 21  -0.3054616895  0.371259292  1.870743844 -0.867118636 -0.9904673367 #> 22  -0.5584585580  1.315733795 -1.347034093  2.032105900 -0.3893872659 #> 23   2.8305928575  0.721056899 -0.398643267  0.670010350  0.0540203018 #> 24   0.1462411181 -0.306524803  0.370112778 -0.961367502 -1.8956793042 #> 25   0.6579357125  2.447606410  0.156337862 -3.040202619  1.4521290096 #> 26   0.1945087156  0.001311688 -2.424159165  2.862159270 -1.2987350610 #> 27   2.7222342524  1.080986846 -1.577769171  0.292966683  1.4744975407 #> 28  -2.1017939355 -0.102445246  1.352125175  2.431729438 -1.7573298044 #> 29   2.0419115353 -4.242871426 -0.679389482 -0.215711366  3.1016408245 #> 30   3.1428326310  1.104465509 -0.729017457 -3.489637706 -0.3898371219 #> 31  -2.9031126092 -3.284562581  3.709428729  1.253700809  3.1537958079 #> 32  -1.2588265573 -2.437890789 -0.580807920 -0.614516337 -2.6061887587 #> 33   0.1757012595  1.218895805  1.909838675 -2.494947652 -1.8242318756 #> 34  -0.0972687086  0.147880397  1.835011327 -3.379858410  4.3205225551 #> 35  -6.9158357455  0.804024017  4.765795488 -1.876141933  2.3461028286 #> 36   1.6078162780  5.288505272 -1.928943056 -0.803111066  2.0626658861 #> 37   3.4040249700  0.238134624 -2.907181093  2.285675967 -1.9353162482 #> 38  -2.0224104361  0.926490292 -7.716843750 -1.303933880 -1.0268137928 #> 39  -1.0436259058 -1.788014048 -2.542434373  1.416506537  2.8299064334 #> 40  -3.7275193923  2.977196101  0.729377047  1.142828882 -1.0078415800 #> 41  -1.3823555527 -3.435304480 -0.171925323  1.783156459 -0.6946055026 #> 42   0.2057645816  1.202163415 -0.377138036 -2.292223620 -0.6849372329 #> 43   1.5644786100 -0.299370971  0.607851152 -1.861854543 -2.0266473472 #> 44   1.1387922339  1.924306815  0.641468427  2.378248212 -4.0127463091 #> 45   0.1288874669  3.887369751  0.345041137  1.612425031 -0.9473776462 #> 46   2.4811305006  0.310370016  1.601131012  0.904517285  1.0298308439 #> 47  -3.9683655774 -0.390350322 -3.633672603  0.886378077  0.4939020369 #> 48   1.3454906444 -0.918362164 -0.373866945 -0.877121168 -0.7414662279 #> 49  -1.0407064180 -1.624383776 -2.089452588 -0.439474910 -2.2753440988 #> 50   0.0663299006 -0.629767591  2.895682427  1.210953933 -0.3062374905 #> 51   5.0803516092 -4.213611586  0.596322593 -3.121685428  3.3625818381 #> 52   2.9693645127 -1.785675562 -1.199534755  4.164565507  1.5695653428 #> 53   0.0676588328  1.687150664  0.373394721 -1.242916747 -2.1235342180 #> 54   0.5390667995  7.235243831  1.109429076  4.617609676  3.7011371160 #> 55  -4.0310077837 -2.148169203  6.068162986  3.224272555 -3.7732475554 #> 56  -0.7899945837 -0.897893320 -1.921438571 -1.220301685 -0.7947522612 #> 57   0.6668575885  0.217860229 -2.190845156 -0.315275027 -2.1907259251 #> 58   3.8809516497 -1.850348330  0.605327999  2.249467226  0.4380230669 #> 59   1.3673107321  0.602706894  2.241503135 -1.220760549 -5.7834346993 #> 60   0.8664973252  0.267259833  2.551656414 -1.946333863 -3.7109172422 #> 61   0.9185415933  2.160154004  0.747481637  2.383839669  1.1256889488 #> 62   0.7862477664  0.301795465 -0.332810766 -0.791585735 -1.9666399649 #> 63  -4.4103192872 -0.212316273 -0.488386694 -2.055757487  1.0474490509 #> 64  -0.6720386394 -0.750331257  1.769449098  5.553603696  0.8047826449 #> 65  -0.7556887657  0.246504869  0.033720722  0.032919433 -0.5032105001 #> 66  -1.6636648853 -0.150245497 -2.160521464 -1.375363274 -1.1883397019 #> 67   2.6071284023  2.645077521  1.526382474  1.912730016 -1.2366051698 #> 68   0.1044727178 -0.419651838 -2.170328539  0.903166420 -0.2650157350 #> 69  -1.2896028762  0.996978358 -0.752681333  3.593834777  0.2701192321 #> 70  -3.8060315759 -1.357504546  5.503474615 -4.995814535  0.4020440384 #> 71  -1.8669225270 -1.525738102 -1.228509344 -1.518158344 -2.9094417669 #> 72   0.1693763883  4.113793362  1.176009548 -3.528594212 -0.3956929674 #> 73  -3.3058547251  2.785343105  0.716334036  2.113824566  1.9179440112 #> 74  -2.5617725907 -0.764548094  2.209497698  1.166756924 -3.6831629272 #> 75   0.8033338153  0.717150724  0.027590692  1.069853199 -0.4697085263 #> 76   0.4051231345  0.412118805  0.695719917  0.456896832 -0.1761437066 #> 77   3.2823325249  6.941358705  0.253926324 -2.123890496  1.8339036477 #> 78   0.4137584721  0.503631410  0.118422321 -1.705450763 -2.2342007164 #> 79  -3.0879645577 -0.703396405 -4.570792078 -1.311917952  1.7028004890 #> 80   0.8572114785 -2.363179918  1.274382803 -0.080236321 -0.6271984343 #> 81  -3.4528705749 -0.735134610 -0.261590635 -5.868695441 -0.5684284491 #> 82   4.6917775700  5.138096186 -0.176432189 -2.430221611  3.2411017873 #> 83   1.7691787307 -1.193886513  0.021664954 -0.876883820 -3.2885121365 #> 84   0.8880023633 -2.843185379 -1.927262498 -2.704548359  2.4211295945 #> 85   0.0594275994  2.423658494  0.343981913 -2.861706364  2.2214906055 #> 86   1.0576763759 -0.729763546 -1.782531616  1.166274892 -1.9659601648 #> 87  -2.9526872599  1.547328285 -4.483630193 -2.921991178  0.1148821766 #> 88   0.8113812272  0.322495207 -1.778894920  0.673358308  1.1702896910 #> 89  -0.5416547930  1.161535238  0.653472212  2.211348763  1.3717587772 #> 90  -0.6586952223  2.841219416 -0.709982795 -1.411345502 -1.3910954489 #> 91   0.2825460865  0.032970388  0.446114647  1.981948503  2.2063854633 #> 92   0.1753957730  2.041034386  1.071024582  1.432178414  2.8481199349 #> 93   0.4640673902  0.414282589  2.565191872 -3.358050132 -1.7210331097 #> 94  -0.6168124798 -0.981112852 -0.022964832  1.817121286 -0.7376931783 #> 95   0.6654059132 -1.679343339  0.598809353  1.072809446  0.3178401996 #> 96   0.8222307586 -4.357041173 -1.065997782  2.485102913  2.3828422945 #> 97  -1.6421220186 -4.924661050 -7.570832331 -1.897546531 -2.5265715358 #> 98   0.0240009033 -0.462057251  3.106647470  0.764043577  4.2787818056 #> 99   2.5569262945 -1.284490483  4.123391989  0.417588029 -1.0175993820 #> 100 -0.9363038427  0.687054742 -0.461990355  0.210246748  0.0242177734 #> 101  0.1327074335 -0.064243584  0.141163640 -0.183323660  0.2040345244 #> 102  0.2393321030 -0.005744052  0.132254686 -0.391659492 -0.0979829831 #> 103  0.3645783149  0.181353850 -0.048157705  0.054280656 -0.1571595053 #> 104 -0.6574920366 -0.770768339 -0.621704919  0.402476329  0.4499773586 #> 105 -0.0967183218  0.186018481  0.324003393 -0.124259744 -0.3118130097 #> 106 -0.4695649350 -0.491871689 -0.289036459 -0.069219205  0.3748689355 #> 107 -0.0591246879 -0.332587875  0.300556892 -0.018236689  0.0959428637 #> 108 -0.0483946664 -0.020906044 -0.004982913 -0.228731826  0.1580334279 #> 109 -0.3145926489 -0.571365071 -0.671909880  0.611675865 -0.0456294013 #> 110 -0.1453930394  0.252323562 -0.174520387  0.035837310  0.0722253847 #> 111  0.4589807962  0.518367143  0.023011629 -0.685283383  0.1154631863 #> 112  0.0385313755  0.219245353  0.182478663 -0.377564844 -0.1936598375 #> 113 -0.0532084841  0.270606212  0.234867119 -0.063832502  0.1710041944 #> 114  0.5026793135 -0.316639828 -0.321009033  0.573345303 -0.3197439197 #> 115 -0.2125887622 -0.129689037  0.072710361 -0.416680037  0.4328624487 #> 116 -0.2593041546  0.092478945  0.012637936 -0.156179285  0.3044016751 #> 117 -0.6444208734  0.324783222  0.140228836  0.150425982  0.1276457308 #> 118  0.2159629910  0.181199892  0.267174032 -0.191520424  0.0234326883 #> 119  0.2359381239  0.378755145 -0.241289044 -0.256585259 -0.2922389348 #> 120 -0.6274079644 -0.283167780 -0.247270884  0.135502614  0.1301353517 #> 121  0.0689442927  0.397957313  0.124393861 -0.063607990 -0.2350035904 #> 122  0.0539008306 -0.069988581  0.086860872  0.182249965 -0.2400368151 #> 123  0.1532289904  0.056981107 -0.056992787  0.023620518 -0.0991936397 #> 124  0.3203564186 -0.756706653  0.064828084  0.209721511  0.0722545786 #> 125  0.2202418318  0.120697105  0.402118577  0.021266062 -0.2690126188 #> 126  0.1706275185 -0.416954611 -0.363205773  0.069755251  0.0943430226 #> 127 -0.2139035340 -0.271177210 -0.133862194 -0.034732781 -0.0599186216 #> 128  0.0049829695 -0.442873512 -0.160824884  0.285385987  0.2068021390 #> 129 -0.2347990883  0.240658935  0.054780899  0.023558293 -0.0903288227 #> 130  0.0005081097  0.204393163  0.395805041 -0.300692054  0.2279818752 #> 131  0.1148986268  0.029190088  0.029934983  0.108002467 -0.1650758815 #> 132  0.1238947123 -0.156575165  0.026958373 -0.181591977  0.4510405000 #> 133 -0.1211187802  0.058678129  0.554543631  0.487580129  0.2871613364 #> 134  0.0642409463  0.089018834  0.038097364  0.244273797 -0.0999756953 #> 135  0.1055132471 -0.057897610  0.114115916 -0.208606984  0.0196252914 #> 136 -0.2329312682  0.063541813  0.065920549  0.579884949 -0.2729500527 #> 137  0.1889856174 -0.098680429 -0.375866466  0.341872340  0.0001154852 #> 138 -0.5550692958 -0.255556854 -0.085651781  0.230536526  0.1593492170 #> 139 -0.0614045958  0.143649805  0.234388309  0.181956937 -0.0011798597 #> 140 -0.0448947081  0.196706115  0.040056006  0.284620024 -0.4059087119 #> 141 -0.1553268508 -0.593912054 -0.503696419  1.074315153 -0.3039495289 #> 142  0.4637842454  0.142977630 -0.062776679 -0.349531224 -0.1116647686 #> 143 -0.4631664029 -0.227427201 -0.256157988  0.263539703  0.2850910419 #> 144 -0.0681662530 -0.104076021 -0.112462243  0.001618243  0.1210666659 #> 145  0.4896470152  0.378875039 -0.076254660 -0.131968314 -0.0012846651 #> 146  0.4163493516 -0.065158742  0.187399107 -0.001107263  0.0592255377 #> 147 -0.4255292402 -0.319565026  0.045206302 -0.100109258  0.5747436216 #> 148 -0.4453001335 -0.031407615  0.226519025  0.100694474  0.3731878738 #> 149  0.1436071669 -0.230013470  0.182920802 -0.169209430  0.0440466063 #> 150  0.3465376938 -0.040073448  0.010417289 -0.343555899  0.4431138113 #> 151 -0.2330711027 -0.037636271  0.118896317  0.400612360 -0.0605731110 #> 152  0.1848972720  0.936314756  0.011726042 -0.816258125 -0.1191824247 #> 153  0.6086330003 -0.193291316 -0.198727178  0.250143931 -0.2331466841 #> 154  0.1016493561 -0.598058251  0.053840167  0.889692885 -0.1566555758 #> 155  0.3076227654  0.181212174  0.045172896  0.127725389 -0.2428669599 #> 156  0.2845476282  0.119113001 -0.046276205  0.316886828 -0.4384547749 #> 157  0.3645979940 -0.197573621 -0.129592221 -0.131354317 -0.0310745937 #> 158  0.4453021042  0.108078566  0.187688173 -0.043255575 -0.3201202450 #> 159  0.0918519388 -0.098089638  0.339219080  0.404461584 -0.0480939701 #> 160 -0.1521213075 -0.038130677 -0.102344070 -0.065362888  0.1060062825 #> 161 -0.2763352542  0.202589894  0.160164647  0.222166294  0.0397287114 #> 162  0.0229464270  0.002046186  0.296889998  0.169402912 -0.0288776448 #> 163 -0.1165155728  0.076407029 -0.127248058 -0.299486325  0.2653031607 #> 164  0.0593189314  0.008883171  0.016623749 -0.192664176 -0.0524942997 #> 165 -0.4803394813 -0.485505879 -0.264946855  0.524443109  0.1207230079 #> 166  0.2342873772 -0.165070987  0.272634537 -0.177998731  0.4156810494 #> 167  0.3179902149  0.755828985  0.453439171 -0.248466217 -0.3582740732 #> 168 -0.2900475455 -0.103211983 -0.092805982  0.069551184  0.2747578620 #> 169  0.0396537877  0.465822143  0.315544128 -0.184355441  0.1496104976 #> 170  0.3801003404  0.751182324  0.321808387 -0.487936780 -0.2080002474 #> 171  0.3695150831  0.317592627 -0.401445332 -0.236153438 -0.4512757097 #> 172  0.7353127321  0.785409694 -0.190580137 -0.022129672 -0.5685727630 #> 173 -0.1820279333  0.040044480  0.011693357 -0.354032681  0.1726773999 #> 174 -0.3531110344 -0.203571187 -0.264105277  0.537965348  0.0055611200 #> 175  0.2908483319  0.031999850 -0.189915074 -0.488694927  0.0556054765 #> 176  0.4548193628 -0.068315494  0.504685747  0.289758055 -0.2268273822 #> 177 -0.1931526886 -0.131368147 -0.218292909  0.035852274  0.2640520325 #> 178 -0.2824119340  0.115020593 -0.354057417  0.066291001 -0.1012484135 #> 179 -0.1266767160 -0.448070870 -0.047721304  0.210880275  0.0188977667 #> 180  0.0533900448 -0.068377613  0.011074383  0.276213117  0.1687843413 #> 181 -0.3127493302  0.149710412 -0.152407344 -0.129057715 -0.0580095377 #> 182 -0.6672773701 -0.510921480 -0.137771263  0.141365856  0.1629511540 #> 183  0.2469143093 -0.164163993 -0.131380540 -0.355750899  0.1273529805 #> 184  0.2453024108 -0.106108615  0.255157570  0.412353405 -0.0661711827 #> 185 -0.2397240474 -0.007863357  0.110566547 -0.415355982  0.3485354747 #> 186  0.0600030886 -0.509364619 -0.013840195  0.124309183  0.2834876892 #> 187  0.3122490253  0.461044380 -0.124649601  0.062614765 -0.4555529270 #> 188 -0.7359302212 -0.378918830  0.035156329  0.649339494  0.1937041987 #> 189 -0.2775320124 -0.068307532  0.552430310  0.371331614  0.1595781318 #> 190  0.4574025834 -0.027831575  0.152817858 -0.905543664  0.3166150178 #> 191 -0.1991335682 -0.261283683  0.380927781 -0.218175853 -0.1969960492 #> 192 -0.0642030488  0.293940897  0.060392668 -0.755322712  0.1651471559 #> 193 -0.1716990410  0.436829376  0.441037730 -0.055484066 -0.0940948965 #> 194 -0.0066187339  0.245264072 -0.621932651 -0.221672605 -0.3299750323 #> 195  0.3037535254 -0.159453712 -0.123946590  0.007137972  0.0666974811 #> 196  0.1746438960 -0.188328487  0.295577864 -0.033213483  0.2025899834 #> 197 -0.0724660573  0.490943517 -0.007354345 -0.331170860 -0.0042135406 #> 198  0.7243781232  0.193184722  0.361809899 -0.717377411 -0.0903376701 #> 199  0.3355941286  0.076156889 -0.146583708 -0.308929197  0.1081431121 #> 200 -0.2284116567  0.171758278  0.089961935  0.013793697 -0.0084551923 #>             pc10         pc11         pc12         pc13          pc14 #> 1    3.144129388  2.656754081 -0.663099387 -1.906436578  0.2570622679 #> 2   -1.377592649 -2.431722650  0.180772901  2.643745562 -1.5583589569 #> 3   -3.060594475 -1.827900314 -1.073851910  1.130736636 -1.6177830567 #> 4    1.766121061  0.183773108 -1.518952030  4.146119955  1.2410966646 #> 5   -2.560933943 -0.656171244 -2.854597863  0.913478893 -1.2258009166 #> 6   -1.457341182 -1.137593659  3.123118946 -0.414193032  3.9387810561 #> 7    1.147095298  0.313498942  3.410326179  2.458988360 -2.9032976841 #> 8   -1.519251100  0.006639562 -4.588439933 -1.772460249 -0.8768559925 #> 9    0.240787227 -0.473535274 -0.641046257  1.314411245  0.9085282792 #> 10   6.075171428 -0.732301455 -2.344680622  4.661698530 -0.0220230708 #> 11   4.095791387 -2.393106401  4.897186098 -1.354937089  1.1926170394 #> 12  -0.333287248 -2.560995802 -1.275104035  1.192947216 -2.0001887906 #> 13   2.109341064  7.122497739  2.226928064 -0.617141015 -1.6557758028 #> 14  -1.449923574 -0.111693710 -2.938561310 -0.822589876  1.1862903461 #> 15  -1.440492933  2.017217480 -1.117959093 -0.928093723  1.4530851426 #> 16   0.009216426  4.664003514  2.566696596  0.924030202 -0.7247305053 #> 17  -1.899036814  1.215547586  0.998673540 -0.993709585  0.6671784816 #> 18  -0.529022047 -1.582017047  4.061399665  3.344735507 -0.3633789190 #> 19   1.474217426 -2.586719350 -2.239453880 -0.959283012  3.3094198797 #> 20   2.139950904 -1.810003958  0.292697466 -1.540668995  2.0593615496 #> 21   1.451660663  1.950587671  0.291985860 -3.363522706 -0.2420169012 #> 22   0.200459253 -0.212149203  0.292430719 -0.571069635  3.9237955629 #> 23  -1.076622647  0.124944030 -0.251274702  2.246994553  0.5903644818 #> 24  -1.817825292 -0.820936670  1.274936252 -1.376534271 -1.4322058039 #> 25  -3.756155231 -2.146260613  2.388160408 -0.066706564 -2.2152250080 #> 26   0.475482881 -1.836953053  2.941336306  0.991920582  1.7842745607 #> 27  -2.635797402 -3.281029858 -0.927211953  1.015757457  0.0499647975 #> 28  -0.970494467 -1.231465620  0.447319583  1.004343757  1.7335165088 #> 29  -3.946146488 -1.629839061  2.969233370  0.233042850 -2.6897190088 #> 30   1.920369511  1.374724093 -2.368054687 -0.104834881  0.4686995910 #> 31   0.392779787  0.846897618  0.503080871 -2.389969747  0.4293810492 #> 32  -0.898262245 -0.373886110  1.444206981 -0.088678868 -0.3071632037 #> 33  -4.191520412  0.963457326  1.494156895 -2.134431756 -1.6703911218 #> 34   3.447374722 -2.710065618 -1.316919144 -2.399299440  3.7904377417 #> 35  -0.960557562  4.238685892  0.180661279  0.237340133  4.8795883081 #> 36  -0.127181913  0.364351665  4.014103811  0.754207602  2.3347730917 #> 37  -1.167986925 -0.501652438 -0.711405112 -1.831698218  2.1966873276 #> 38   5.115690619  1.425631262  0.610073590 -1.120710249  1.3772387798 #> 39   1.202717869  1.861072787 -0.112066416 -2.395087685 -2.9888351827 #> 40   1.442331331  1.367833900 -2.525507476 -0.031405997 -3.8195483168 #> 41  -0.975638327  1.031464073  0.751442030  1.002659365 -0.0486087167 #> 42   1.332537062  0.855529837 -1.386308620 -2.176780898  0.5269818336 #> 43  -1.792975084  0.653486547 -0.620681410  0.099545846 -1.2031912867 #> 44   4.638397241 -0.296571344  0.143000564 -2.141507973 -0.6272334587 #> 45  -2.606889571  0.086513643  2.349291017 -1.169424616 -0.0905651850 #> 46   1.259867783  1.063959987 -0.859547804 -1.816009028  1.6994676783 #> 47  -1.083339714  3.117417426 -0.361312724 -1.712518824 -2.2474201290 #> 48   1.551324874  0.901487647  1.420278987  1.006340639 -0.4183064182 #> 49  -2.824264326 -0.492214575 -1.408181777 -3.644488485 -0.1772655791 #> 50   0.684267152  1.539871940 -1.844860387  5.182545747  2.9478895828 #> 51  -0.704823690 -2.489869494  0.290387036 -5.962675099  5.4497345645 #> 52  -2.757948286  3.009805838  0.773825041  1.614017303  1.0709384217 #> 53  -0.878238680  0.945304380 -3.169193707 -0.803222656 -2.0568208338 #> 54  -0.568920624  3.507332659  0.380909438  3.705483651  3.7707289591 #> 55  -2.980084805  0.398224509  2.216077688 -1.083806763  0.5223943119 #> 56  -1.708391226  1.658790028 -2.717949740  2.647332474 -1.0642948669 #> 57  -0.103530247 -3.015080845 -1.790736382  1.292813095  1.5923572735 #> 58   1.754270559  2.597896799 -2.095115436  0.850530814  1.0937162256 #> 59  -0.284111919 -0.658605381  0.953623085  3.514130015  3.9741360803 #> 60  -0.794886878 -2.410421203 -0.929675282 -0.523766156 -4.5522751773 #> 61  -1.628342850 -0.042221257 -2.227416528 -0.802473098  1.0868038911 #> 62   0.142805783  0.144541812  1.798687872  1.263099316  0.1661737518 #> 63  -0.676145344  0.375257248  2.418464089  1.131041447  0.1036355932 #> 64   3.356278206  0.452361490  0.205014140  1.993597282 -0.2499929035 #> 65  -0.456152681 -0.409783517 -2.396974833 -2.273588871 -1.4252842491 #> 66  -1.824959135  4.052141338  2.473871917  3.867434483 -1.7010379551 #> 67   6.573856462 -3.218630698  0.116462831 -0.078550796 -1.9551535478 #> 68   0.787650069  0.663503408  0.255298681 -3.720294748  0.5926774459 #> 69   2.281451009 -0.168753182 -1.354198875  0.165046176 -4.2843346085 #> 70   0.702900811  3.537032537 -2.648407644 -2.282817491  2.1154175465 #> 71  -0.292181041 -0.917537594  0.684513453  1.544227800  1.3324162617 #> 72  -4.787003457  5.893474463 -1.943201816  2.552423707  0.1093828056 #> 73   1.159109955  0.140203162  2.497365157 -3.689882467 -1.6647921782 #> 74   1.306772395 -0.094102608  2.650105118  1.918231821  1.4601667979 #> 75  -0.742548959 -0.705568961  4.373708657 -2.243368029  0.2169578147 #> 76  -1.778014946 -4.058092783  1.849216942  2.657527558 -1.3967290445 #> 77  -0.748089668 -0.386796234  1.831859791 -1.250235508  1.2790199559 #> 78   0.422734301 -0.735211532  2.070937903  0.346935846 -1.6400240222 #> 79   5.247670616  1.269944672  2.538148723  1.417728808 -0.2435661434 #> 80   2.222381374 -3.749496091 -2.510267713 -0.326439167  2.2947072087 #> 81   1.427342381 -0.692408729 -0.849552458  2.677909439 -1.5269940131 #> 82   2.806165120  1.083370201  0.999807098 -1.154050815 -3.4938569553 #> 83  -1.307871231  1.002358692 -0.178607717 -0.241005813 -1.0050373930 #> 84  -0.812020149 -1.557301204  2.688634565  0.536104736  2.2303940705 #> 85  -1.739442738 -3.588356820  4.638634442  0.169988754 -0.3074508140 #> 86  -1.397505071 -0.599930987 -1.338720970 -1.201997275  0.6888724647 #> 87   3.802868677 -0.021983037  1.458186938 -0.014691719 -3.8205785765 #> 88  -0.604678414  0.075275946 -3.273549034 -1.052081164  1.6561243885 #> 89  -1.760183023 -0.232554482  0.590538551 -0.172547294 -1.7113699486 #> 90   0.167659823  0.830567288 -1.274502999 -3.767251708 -2.0850385912 #> 91  -1.776472136  0.591080878  0.741912438  0.253129823 -1.7254567721 #> 92   2.338239524 -1.662112591 -4.406712318  5.214746175 -2.0054406759 #> 93   0.405889408  2.107746026 -0.102823653 -0.606751787 -0.8798720951 #> 94   0.247336893  1.304950449 -3.030818624 -0.992693866 -2.8061739730 #> 95  -0.521315117  0.317199045 -2.766631807 -2.552694881 -0.1079383381 #> 96   0.223765681 -2.075294612  1.070970173 -2.056782826 -1.6129583715 #> 97  -3.264670534 -1.366180760 -4.548934619  2.350071730  3.3666606747 #> 98  -1.587014314 -7.523280982 -2.914038420  0.332228859 -2.7082890810 #> 99  -0.056824870 -0.086037823 -2.311711537 -0.163706131 -0.5436173110 #> 100 -0.180906128 -1.347501895 -1.363953894  0.809472844  0.8357170863 #> 101 -0.160565457  0.603706313 -0.323153391  0.118242260 -0.4005152548 #> 102  0.139162601  0.083237458 -0.146392686  0.016467079  0.0286296665 #> 103  0.189757406  0.074931368 -0.372207747 -0.026196490  0.7282235973 #> 104  0.420106882 -0.242817107 -0.089932915  0.414412144 -0.4318896214 #> 105  0.673121990  0.007983807 -0.334475816  0.203390564  0.6839059256 #> 106  0.365524505 -0.314218657  0.299587749  0.361359267 -0.5501208641 #> 107  0.058454167 -0.464942074  0.379755483  0.081602026 -0.0610953017 #> 108 -0.165049429 -0.281525807  0.199456596 -0.167048182 -0.0579990454 #> 109  0.548027537 -0.478657645  0.209168199  0.236421224  0.1406029043 #> 110  0.190076835  0.047969124 -0.209769300 -0.178291032  0.0318747157 #> 111 -0.327643168 -0.282716764  0.296095288 -0.589596022 -0.7110671988 #> 112  0.045851290 -0.398937670  0.289610410 -0.409026538  0.4694852132 #> 113 -0.322520120 -0.134226928 -0.032748593 -0.161715286 -0.5171899655 #> 114 -0.369056621 -0.009843651  0.487393646 -0.092032534 -0.3099794733 #> 115  0.308730400 -0.058962408  0.027887174  0.100392211  0.0542879767 #> 116  0.061119458  0.075023235  0.357544991  0.134005015 -0.1485369394 #> 117  0.212887802 -0.479616959  0.191889419  0.102121707  0.0960283356 #> 118 -0.472462263  0.178314941 -0.113681501 -0.234762822  0.1452684561 #> 119  0.002839967 -0.131166977 -0.058593886  0.005285696 -0.1672957945 #> 120  0.459689363 -0.301243359  0.080255289  0.300211316 -0.0303570752 #> 121  0.109317867  0.052027970  0.011130016 -0.005941444  0.3713557184 #> 122 -0.007745269 -0.140001783  0.276295672  0.107650358  0.3382748536 #> 123 -0.190258604 -0.284617198 -0.068991304  0.235871610  0.0007963053 #> 124 -0.148033771 -0.034681700  0.466077760 -0.187520527  0.2437285355 #> 125 -0.324979811  0.120075075 -0.076617059 -0.277801411 -0.2019372164 #> 126  0.538974861  0.149503505  0.231989657  0.096668781  0.0825100865 #> 127  0.597990221 -0.314409365  0.072902212  0.061685696  0.3195677834 #> 128 -0.194207705  0.557360555  0.093107180  0.509406207 -0.4374690573 #> 129  0.182106285 -0.331326094 -0.158896050  0.095868678  0.1176103470 #> 130 -0.219353124  0.142388508 -0.133678155 -0.286074318 -0.1884455017 #> 131 -0.588442224  0.165106218  0.204960733 -0.179426478 -0.2709727252 #> 132 -0.618394855  0.379890390 -0.053195105  0.133734680 -0.6876117879 #> 133 -0.523217198  0.065356624 -0.002933496 -0.150213450  0.2638386779 #> 134 -0.050169919  0.543463409 -0.012048330  0.434233298 -0.0419374579 #> 135 -0.136159044  0.034110397  0.151070549  0.215688915  0.3554329983 #> 136  0.256790726 -0.171197538  0.149665921  0.465797950  0.4480091996 #> 137  0.016623333  0.009479605  0.042455610 -0.129353883 -0.0358655962 #> 138  0.442305832  0.060481721  0.225375144  0.426298901 -0.1631818867 #> 139  0.092727705  0.268851448 -0.222622499  0.050716972  0.1983461825 #> 140 -0.064629080 -0.205982821 -0.035728068  0.185059832  0.0458098760 #> 141  0.159452952 -0.232016263  0.246716003 -0.008807597 -0.1114868076 #> 142 -0.431367217 -0.148799295 -0.171687806 -0.409297225 -0.0314866954 #> 143  0.428815200 -0.338847480  0.005471673  0.192109949  0.2135138334 #> 144  0.381357523 -0.010876441 -0.268886561 -0.231690917  0.1382946990 #> 145 -0.569107186  0.029765821  0.026796352 -0.573240654 -0.5227378445 #> 146 -0.618265833  0.844471424 -0.458964002  0.232188400  0.0999915671 #> 147 -0.003400118 -0.145916261 -0.400337542 -0.151259227 -0.2772985332 #> 148 -0.231793036  0.590531721 -0.253078591  0.109469959 -0.6425018135 #> 149 -0.056941001 -0.032948158  0.207727585 -0.241415430 -0.1251961627 #> 150 -0.282275878  0.480798553 -0.209010652 -0.166418143 -0.3442416353 #> 151  0.161199192  0.619708963  0.341760993  0.538206450  0.0809257791 #> 152  0.397431666 -0.514752680  0.183427086 -0.593546038  0.4338912824 #> 153 -0.254275220 -0.191376034  0.100497690 -0.002500857 -0.2460841780 #> 154  0.228078802 -0.058306870 -0.060564405  0.143235354  0.7336867811 #> 155 -0.099991602 -0.055121574 -0.364826512 -0.336085518  0.2694548273 #> 156 -0.114078417  0.375614981 -0.091190018  0.009127291 -0.4647221063 #> 157  0.281841649 -0.059438298 -0.128837638  0.049639616  0.5722281383 #> 158 -0.351699701 -0.043146286 -0.313563695 -0.405930581 -0.1471513228 #> 159 -0.356320136  0.753868791 -0.454133647  0.507617849  0.1546180311 #> 160  0.172459099 -0.080262089  0.065256852  0.262921073 -0.1401866098 #> 161 -0.158994063  0.505145862  0.171853678  0.125533855 -0.1720757861 #> 162 -0.171938187  0.069409630 -0.174934845 -0.073133405 -0.0498105114 #> 163  0.177158881 -0.143401066  0.287260149 -0.325969998  0.1930591104 #> 164  0.080685860 -0.393999387 -0.250797942 -0.313868881  0.2360987706 #> 165  0.565493800  0.400382024 -0.089740461  1.237479685 -0.1886790409 #> 166  0.067074601 -0.052852670  0.132101962 -0.252606363  0.4913398322 #> 167 -0.387100923  0.230546676  0.010758910 -0.172595380 -0.1159875579 #> 168 -0.088592297 -0.215158913  0.029175084  0.108388719 -0.1806767471 #> 169 -0.150968934  0.187723054 -0.274006708 -0.298704793 -0.2089818178 #> 170 -0.040034444 -0.381331126  0.095905203 -0.608042265  0.4808433288 #> 171  0.099203050 -0.370496527 -0.053744756 -0.458990929 -0.1028099013 #> 172 -0.407648176  0.201686324  0.143287275 -0.333670783 -0.1177425221 #> 173  0.309293922 -0.015056362 -0.123292424  0.262325492  0.3589931745 #> 174 -0.216740205  0.035852248 -0.409971846  0.132215116 -0.1382596104 #> 175  0.220880982  0.188968700  0.080615945 -0.192689373 -0.0827571251 #> 176 -0.324979742  0.559126778 -0.227345871  0.205358114  0.4663947298 #> 177  0.107682524 -0.204110407  0.171133442 -0.285767402 -0.1841132724 #> 178  0.511921172 -0.452114272  0.224293947  0.171586312 -0.2006343169 #> 179  0.268095398 -0.068149224 -0.086370049  0.431087557 -0.1851682135 #> 180 -0.566132382  0.428001279  0.400251191 -0.166615351 -0.3904555008 #> 181  0.446875130 -0.006351599 -0.102430997  0.236574096 -0.0680945356 #> 182  0.539867828 -0.815766242  0.553960672  0.216137512  0.2840785914 #> 183  0.067884085 -0.017812758 -0.217488914 -0.217235949 -0.4336451251 #> 184 -0.548476332  0.054799214 -0.054980880 -0.211935286  0.3153532807 #> 185 -0.045696894  0.123391285 -0.092360878  0.036293889 -0.4060810325 #> 186  0.087213202 -0.483364482  0.321856326 -0.149514046  0.3775630769 #> 187 -0.180494853  0.109317208  0.130002359 -0.110836600 -0.1012406734 #> 188  0.543425133  0.504107397  0.124268759  0.814045867 -0.0871465494 #> 189 -0.434721667  0.152877451 -0.047748361  0.010906029  0.0237285560 #> 190 -0.408770230  0.214588377  0.016058469 -0.240756755 -0.4344212134 #> 191  0.020612459 -0.168586411  0.177832000  0.305887271  0.1947729032 #> 192  0.250136494 -0.124357317 -0.144541291  0.120067404 -0.3727115496 #> 193 -0.134851832  0.329371337  0.061389077  0.265718761  0.2401340076 #> 194  0.911008397 -0.514405519 -0.133709201  0.005174409  0.1520012819 #> 195 -0.226625333 -0.031908596  0.132371584 -0.562350168  0.0068560120 #> 196  0.016458979 -0.299180442 -0.243127658 -0.155864067  1.0264196657 #> 197  0.069684755 -0.325987604 -0.184991047 -0.419187335 -0.0601713266 #> 198 -0.430279701  0.380342618 -0.187515798 -0.137078184 -0.1042912912 #> 199  0.216080930 -0.339982753 -0.221675071 -0.391036589  0.0868128132 #> 200 -0.035931164  0.151302625  0.007931800 -0.017521377 -0.1974724768 #>             pc15         pc16         pc17         pc18         pc19 #> 1    0.363576662  0.171407269 -3.506480097  1.691128711  0.115625004 #> 2   -2.764674420  2.117994135 -2.827329997  0.281112390  0.362783036 #> 3   -2.696173878  0.563321981  3.625559302  2.575676552 -0.618861707 #> 4    0.293209175  1.767147757  0.198470660  1.335774716 -1.141080109 #> 5    0.890823265 -1.645079876  1.192444651  0.378813876 -0.402535169 #> 6   -3.475832602  1.779711362  1.278830929  0.211900314  0.203894799 #> 7   -1.693721369 -1.143080530  1.248759175 -1.943204513  1.534297978 #> 8    0.370098604  0.039171213 -1.843422901 -3.127951544  0.048643082 #> 9   -0.793730248 -0.281350856 -0.344658795 -0.180846102  0.577336340 #> 10  -2.531810517 -0.654659434 -0.940944216 -3.421750825  1.353319393 #> 11   2.640559929 -0.308922877 -1.025170177 -1.645330481  1.163646930 #> 12  -2.326482711  0.146523281  0.651973405  4.789010889  1.979444036 #> 13   1.635229517  0.385835205  1.960472095  2.369395572  3.409441165 #> 14   1.080534945 -1.104447889  1.036755673 -0.660731783 -0.682435991 #> 15   0.865872577  2.122533471  0.073654170 -0.680878600 -2.544541240 #> 16   0.624082281  0.559193989 -0.082269100 -1.685488206  0.375694308 #> 17   1.826317337 -1.612916974 -2.723482700 -1.074747525 -0.249325256 #> 18   1.429475273 -2.800874601  1.919564998 -2.650366192 -0.607142097 #> 19  -0.973080581  1.189534442  0.310481085 -1.478765329 -1.475451755 #> 20  -0.617232469 -1.249129052  0.456404613  0.520830938  0.585981738 #> 21  -0.137136612 -2.485118122 -4.501110003 -3.576751101  0.724494730 #> 22   0.326001833 -0.224662142 -1.783432670 -2.922584498 -0.519454608 #> 23  -2.216095270 -2.630199645 -1.783249493 -0.635267360 -1.417969180 #> 24  -0.900911485  2.334573650  1.082414515  1.038721631 -1.205443520 #> 25  -0.570186190  3.097112186 -3.065291770  3.362725373 -0.110594682 #> 26  -1.583299055  0.769965742  1.772122480 -0.533222423 -1.541622509 #> 27  -1.496963149 -1.012763997 -0.181192018  1.116083013  1.697952003 #> 28  -2.199304223  0.149416267  2.312409805 -1.515667125  2.479052182 #> 29  -0.569134484 -1.922819783 -0.707629589 -1.904070716 -3.998063224 #> 30  -3.028992754 -3.150469290 -1.757903909  2.439953113 -1.548472718 #> 31  -0.037033396 -1.018274218  0.544792763  0.891909529  0.567390975 #> 32  -4.005990501 -0.163546457 -0.513097843 -0.102466303  3.432362402 #> 33   0.435927765 -0.066762956  1.311076837 -4.381114478  2.087592973 #> 34   1.268707773  2.480368261  0.159818401 -0.269441892  2.532459963 #> 35  -1.685606875  0.528670287 -1.410630312 -0.074178648 -0.183513411 #> 36  -2.527296089 -1.724801909 -1.316943627 -1.082300397  4.660433381 #> 37  -1.854076216 -0.004241649  4.241173047  2.137636981 -0.033741728 #> 38  -1.109617015  1.080080275 -2.390773807  2.322079741  2.368282176 #> 39  -0.204385052  1.243934904 -2.906638259  0.519009121 -3.610603155 #> 40  -0.984309461 -2.158145805  7.220722102 -3.194551028  0.571710757 #> 41   0.726207841 -1.769034791  3.061345334  0.065193747  1.119490320 #> 42   2.365015658  3.607143538  0.475843532 -2.364454884 -1.064278829 #> 43   1.473555301 -1.602155357  0.038170770 -1.686389818  0.612426128 #> 44   0.294976399  2.065195994  1.031000916 -0.876883825 -5.066901808 #> 45   3.595119089  0.199700631 -1.111067000 -0.286641667  2.517783819 #> 46   2.279492692  1.668580082 -1.039808509 -1.573576975  0.840389503 #> 47  -0.422959031 -1.588541505 -1.306708968  3.866852962  1.192308841 #> 48  -1.485834029 -0.770951928 -0.484682494  0.778582160 -0.923302133 #> 49   2.533541317 -2.862655836 -0.744160295 -1.364738229  2.571832296 #> 50   4.230984070 -2.722312033  3.425095043  0.842722458  0.211296331 #> 51   1.234125206 -1.841785220  3.555697061  3.052728586 -0.074950611 #> 52   0.895980606  6.022411989 -1.656002395  0.854032687 -1.582154158 #> 53   1.558620482 -0.896660400 -0.375928485 -1.050718281 -0.033207481 #> 54   0.297204389  2.403171156 -0.060356629 -2.478124641  2.050295832 #> 55  -0.112256379 -0.711597267 -1.351062188  2.691605610 -0.193099170 #> 56   3.228975476 -0.394668127  0.650146486 -0.620497053 -1.116908399 #> 57   0.462039328 -1.605075636 -0.485695492 -0.967984655  0.303081434 #> 58  -3.731222569 -0.433974534 -0.966570869  2.098743160  2.552800641 #> 59   1.007247986 -1.975754050 -2.744819545  3.138239651 -4.975987671 #> 60  -0.802681667  3.797425550 -1.224263327 -0.606290713  2.380816241 #> 61   1.327459349 -2.490489974  1.515939517  2.476069852  1.956346322 #> 62  -0.103583321 -0.610050988 -0.556783480 -0.386751355 -0.288739043 #> 63   2.220520060  1.359544322  3.419403685  0.809878056  1.310448988 #> 64   0.716446240  2.415352257  0.520037654 -0.466996627  0.411759695 #> 65   2.002572465 -0.480696460 -0.439915134 -1.503241815  1.498612524 #> 66   5.022740891  1.543587353  1.600106927 -0.460757691  0.032962602 #> 67   1.386289091 -2.909469530  1.068967871  2.149450202 -1.882716949 #> 68  -2.804590846  1.925581610  2.733259012 -3.656258868  0.465888757 #> 69  -0.211356884 -2.210358044  3.544171346  2.503781765  0.681299102 #> 70  -2.184708203  1.297321543  4.792299989  2.535115848 -1.402854233 #> 71  -0.274621144 -1.459585514 -0.708716815  0.141346542 -1.604576718 #> 72   0.708685212  0.662379210  0.410167100  2.336245884 -2.257873560 #> 73  -0.069421326 -3.696766099 -2.302540695  4.809574098  0.855154272 #> 74   0.257703431 -1.444909949 -2.750918019  1.006156598 -0.622394190 #> 75  -1.572390446  4.944641177  1.755724070  0.365075912  1.527048636 #> 76  -2.343503128  3.305962047  2.197647641 -0.091480114  0.806401955 #> 77   2.655172066 -0.068933344 -1.376986901  2.553948961  0.116270443 #> 78   0.399030401  1.267651308 -0.668493720 -0.613235878 -1.289877543 #> 79   1.795526849  2.452301274 -0.542289235  1.624201349 -1.754907001 #> 80   6.703034119  0.831607594  1.620537488 -0.980680608 -1.272763097 #> 81  -0.694384630  0.701451068 -0.278153149 -1.363501031 -0.144250125 #> 82   0.189064539 -1.108798801 -0.341856227 -2.364335745  0.515474044 #> 83  -0.751814867 -0.620817436 -1.853375946 -0.969403921  0.824833069 #> 84  -0.683183171 -2.015106138  0.924785302 -2.662691205 -1.970815439 #> 85   1.724472625 -3.341987899  0.031319902  0.452860703 -1.559887729 #> 86  -0.448365037  0.477906145 -1.637113928  0.902077811 -1.652143389 #> 87   3.686271751  0.224168977  1.181248443  1.563041415  1.446470501 #> 88  -2.666541865 -4.285427898 -0.055150124 -0.455003455  0.144843323 #> 89   0.058131368 -0.334652385 -2.530687418 -1.446031278 -1.209040174 #> 90  -2.934322904  3.058523360  2.706157453 -0.049295262 -4.420884453 #> 91  -0.037519676 -4.700771168  0.828451243 -0.812532281 -4.630379834 #> 92  -1.886518342  1.401058430 -2.201734177  1.216489377 -1.190698947 #> 93  -4.373129108  0.427870113  1.127505660 -1.510931084 -0.759287446 #> 94   0.258541319  0.331548686 -2.418658771 -1.068214000  0.829675797 #> 95  -0.489223117  0.658301748 -1.617492893 -1.494844214 -2.902694733 #> 96  -0.979616175  1.355277637  0.329482575  0.633910272 -2.108892900 #> 97   1.111949741  1.149997054 -1.144618018  0.499944577  3.660789113 #> 98   4.132040379  3.458916194 -1.240309134  1.619991141  1.654109290 #> 99   0.384727662  0.272409616 -1.939305435  1.308809580  3.726649967 #> 100 -2.789228722  0.366376257 -1.508197961 -3.051684748 -0.405474409 #> 101  0.347424875 -0.212932420  0.119328757  0.617703330  0.391075388 #> 102  0.123437607  0.164064289 -0.485816700  0.115699085 -0.091382712 #> 103  0.002017205  0.657653208  0.326120407  0.076414457 -0.561626688 #> 104 -1.127196080 -0.634408692 -0.181840872 -0.284406775  1.143338097 #> 105  0.443939793  0.335629116 -0.161814573  0.039176875 -0.162596122 #> 106 -0.538767527 -0.558301792 -0.235723428 -0.135607292  0.216716492 #> 107 -0.609324496 -0.031734543 -0.083788768  0.077092580 -0.097909585 #> 108 -0.180022666 -0.221505293 -0.423971406 -0.062451339 -0.222732039 #> 109 -0.861637757  0.191347428  0.157109093 -0.179783799  0.500947169 #> 110 -0.081460308  0.274771119  0.284667333 -0.202324430  0.564207428 #> 111  0.254535572 -0.259359372 -0.606486173 -0.266625824 -0.269424982 #> 112  0.388261792  0.231946018  0.183170353 -0.671221020 -0.442016895 #> 113 -0.281820084 -0.428829367 -0.132202099 -0.115625202  0.164120001 #> 114  0.149372414  0.344266410 -0.048264350  0.585745003 -0.015524714 #> 115 -0.581614126 -0.299142581 -0.429088245 -0.066331367 -0.127421683 #> 116  0.350767263 -0.379706575  0.018166560  0.031526507 -0.280628991 #> 117  0.016656951 -0.307678055  0.081866614 -0.111816002  0.417704239 #> 118  0.350311835  0.259171822 -0.135220629 -0.382490023 -0.481507265 #> 119  0.426501908 -0.001180951  0.130723511 -0.260835151  0.052626121 #> 120 -0.458429233 -0.737654820  0.176070394 -0.416552455  0.157534384 #> 121  0.513381497  0.225685186  0.643229406  0.093808340 -0.216724061 #> 122 -0.018061691  0.340350856  0.251464881  0.040333391 -0.207609770 #> 123 -0.063209574  0.191784273  0.034711964  0.055011909 -0.230858785 #> 124 -0.293989690  0.126082372  0.163422493  0.450421225 -1.016253150 #> 125  0.116320313  0.084321630 -0.448674907  0.790466057 -0.130819044 #> 126 -0.116717313  0.061736748 -0.341238905  0.682917822  0.213411200 #> 127  0.274498283 -0.475845099  0.003983875  0.267346732  0.118588513 #> 128 -0.563085172 -0.159406864  0.192394562  0.358691401  0.092566513 #> 129  0.017704564 -0.329636084  0.059754031 -0.237870276 -0.031638304 #> 130 -0.016176035 -0.099785542 -0.367512656 -0.257309451  0.214304620 #> 131  0.229279233 -0.048863757  0.132410326  0.125694236 -0.297708611 #> 132 -0.928350224 -0.618356764 -0.260116043  0.128734081  0.004770913 #> 133 -0.117280612  0.699348322  0.093490688  0.101247656 -0.115839801 #> 134  0.684435074  0.163247127  0.246532792  0.640592468  0.292748401 #> 135  0.181057203  0.238231143  0.211184131  0.030284221 -0.622154943 #> 136 -0.029764086  0.327257108  0.601806350 -0.034221847 -0.192424874 #> 137  0.126001238  0.352729596  0.383358893 -0.223508610  0.281035071 #> 138 -0.132273409 -0.422982298  0.157656298  0.081103409  0.711666043 #> 139  0.112025461  0.267294589  0.159967992  0.141369859  0.414066398 #> 140  0.024690986  0.177356591  0.223365687 -0.277469816 -0.215881691 #> 141  0.041291385 -0.236361353  0.448862564  0.385727344  0.769373390 #> 142  0.407723246  0.349473244 -0.040926390 -0.133206195 -0.520661523 #> 143 -0.305828856 -0.495512323  0.046312690 -0.182287508  0.555470212 #> 144  0.281036447 -0.430970423  0.121910704  0.160881274  0.098432599 #> 145  0.334657779  0.159801351  0.057068825 -0.094526614  0.144570066 #> 146  0.399716305  0.257669670  0.614024948  0.049608215 -0.739207159 #> 147 -0.947387383 -1.281501146 -0.146896758 -0.220696072  0.489807961 #> 148 -0.198550708 -0.490510279  0.074809030 -0.224491536  0.667543152 #> 149 -0.120243525 -0.059110830 -0.577842414  0.118787915  0.094627946 #> 150 -0.361901008  0.076963169 -0.205076684 -0.071765471  0.280882320 #> 151  0.041827216  0.585804669  0.022032257  0.524807771 -0.485497395 #> 152  0.477125229 -0.005216543 -0.173171613 -0.453311413  0.281678190 #> 153  0.529899156  0.137661043  0.368387863  0.269010250  0.268551917 #> 154 -0.069514502  0.453997211  0.565327736  0.645313943 -0.178794937 #> 155  0.152417000  0.490750379 -0.137557888 -0.050958412  0.229024425 #> 156  0.180201693  0.614737764 -0.260527918  0.382929736  0.555547689 #> 157  0.119403154  0.444161719  0.213610750  0.025663276 -0.745759928 #> 158  0.235362476  0.256927674 -0.266260564  0.221585838 -0.031275530 #> 159 -0.143360040  0.245222409  0.294600290  0.677880283 -0.283253043 #> 160 -0.402078847 -0.356118339  0.242817419  0.046173050 -0.123915718 #> 161  0.739859199  0.615512816 -0.125435025  0.156531938  0.534079719 #> 162  0.172114186  0.155492951 -0.191167029 -0.148943768  0.154689523 #> 163 -0.019388402 -0.045099700 -0.100583269 -0.344153418  0.090760753 #> 164  0.034336841 -0.091643491 -0.100121662 -0.372508107  0.023751693 #> 165 -0.681414067 -0.355798255  0.461995901  0.153467981  0.249979877 #> 166 -0.175607220  0.674530581 -0.192065770 -0.412761128 -1.044130741 #> 167  0.504154275  0.843131170 -0.293217232 -0.143854772  0.263059110 #> 168 -0.183265872 -0.588569249  0.320721076 -0.214946397  0.271088147 #> 169  0.125912726  0.363603180 -0.265510335 -0.416203274  0.188368025 #> 170  0.547703155  0.369199609 -0.036873789 -0.197277499 -0.569195187 #> 171  0.515481324  0.328124664 -0.247825803 -0.022662065  0.872747984 #> 172  0.544470989  1.031143776  0.403504649  0.025216710 -0.296009519 #> 173  0.151559566 -0.341866944 -0.107415707  0.022399642 -0.006775884 #> 174  0.016032435 -0.489422796  0.145720760 -0.098143274  0.675485380 #> 175  0.214626524 -0.205820693 -0.244972799  0.125714579 -0.104983014 #> 176  0.385533123  0.922101444  0.103976833  0.560853580 -0.573763523 #> 177 -0.716253516 -0.197154961  0.037003632 -0.229430969  0.170260437 #> 178 -0.250342325 -0.498178251  0.208036951 -0.108153180 -0.377266945 #> 179 -0.352575621 -0.279913760 -0.078325150  0.202656041  0.245622413 #> 180  0.318555553 -0.339102081  0.206113913  0.649258918  0.236399942 #> 181  0.264894690 -0.216771899 -0.155309673  0.029266033  0.208038364 #> 182 -0.588410716 -0.609817014  0.052689492 -0.336284177  0.174356174 #> 183 -0.105094115 -0.237566012 -0.387989811 -0.211705427  0.344429716 #> 184 -0.318720768  0.383823502  0.201699975  0.211233469 -0.331467624 #> 185 -0.305444788 -0.308425123 -0.490728872 -0.411143809  0.394069286 #> 186 -0.707704812  0.044884420  0.014999503 -0.319289862 -0.409299016 #> 187  0.559961872  0.437732939  0.233194562  0.104949246 -0.132145124 #> 188 -0.183902065 -0.296383401  0.409335495  0.455504940  0.674776271 #> 189 -0.291972383 -0.119739760  0.315894818  0.051553988 -0.487151885 #> 190 -0.183719658 -0.573262813 -0.529456138 -0.138917768 -0.679124950 #> 191  0.341204544 -0.067353986 -0.553021281 -0.140763552 -0.155995968 #> 192 -0.158962092 -0.484374125 -0.026583123  0.074503170 -0.096021398 #> 193  0.137889525  0.324340542  0.203926144 -0.259425616 -0.107577608 #> 194  0.349324286 -0.181464285  0.120490944 -0.009853462  0.466061443 #> 195  0.031672438  0.287217749 -0.156893130 -0.055153510 -0.059305865 #> 196 -0.374976161  0.466117409 -0.017393304 -0.139779764 -1.083890060 #> 197  0.604385489 -0.450895188 -0.079038299 -0.364324655  0.401778988 #> 198  0.774431886  0.127624827 -0.525994892  0.182772230 -0.751341141 #> 199 -0.229399315 -0.086632821 -0.324250986 -0.229401117 -0.215967042 #> 200  0.569982940 -0.377761341 -0.031172125  0.044558039  0.197117425 #>             pc20        pc21         pc22          pc23        pc24 #> 1   -1.668833955  0.03613563 -2.706699942 -1.023989e-01 -1.97934489 #> 2   -2.021804515  1.65132260 -1.690583608  2.646901e+00 -0.88656428 #> 3    4.697022280 -2.55124610  4.264434294  1.208385e+00  1.84018568 #> 4    2.590219592 -0.69839905 -1.306577749 -9.655924e-01 -1.03479411 #> 5   -4.594599286 -0.18215802  0.890344534  1.465500e+00 -2.96540018 #> 6   -0.932842212 -0.13066756  1.808895151  9.825217e-01 -0.73632502 #> 7   -2.304385064 -3.79993165 -2.569995206 -1.312607e+00  4.56681286 #> 8   -1.136350610  0.39971493  3.308233887 -4.771815e-01 -2.68734524 #> 9   -0.444600154  1.53116338 -0.959442377  1.085985e-01  1.31660272 #> 10   2.783848988 -1.60412383 -0.262015747 -8.982868e-01  2.35878105 #> 11  -0.426585117  1.03519607  3.626213279  2.313772e+00 -0.65459695 #> 12  -1.189339919 -3.25420545 -1.319825695 -8.536779e-01 -0.36747315 #> 13   2.302819541  0.92805376  2.917245024 -6.786098e+00 -1.80469091 #> 14   0.116092223 -2.01622410 -0.254128486 -2.111818e-01 -0.24758879 #> 15  -1.468948059  0.87826985  0.054213448  6.658644e-01 -0.39381891 #> 16  -0.529131191 -0.68233034 -0.236713032  1.458979e+00  0.13887292 #> 17   1.550937035 -2.46103152  3.554281313  6.881194e-01 -0.06846934 #> 18  -0.584954074  0.70030034  1.822075855 -1.156123e+00 -1.83265781 #> 19  -0.262293492 -0.83528489  0.997782363 -1.472677e+00 -1.53998363 #> 20   1.464851439 -3.02710804 -2.216154051 -2.014946e+00  3.21115276 #> 21   1.016347982 -0.77553885  0.738215725  1.599830e+00  3.19835465 #> 22   2.222833410  1.56171823 -3.443067849 -7.374265e-01 -0.96111464 #> 23  -2.240418715 -0.07212086  0.814094023  1.519732e+00  1.68992918 #> 24  -2.615342415 -0.86400908 -1.358297694 -2.512275e+00 -0.25526276 #> 25   0.144396478  1.20447183  1.044025090 -2.611510e-01  0.57600030 #> 26   1.162613602 -1.21880864  0.572625669 -1.830050e+00  0.32728048 #> 27   0.396141394  4.67948625 -1.418374890 -1.694938e+00 -1.90705430 #> 28   3.448275986  0.35321057 -1.856339247  2.949477e-01 -2.13685463 #> 29   0.557852454  1.45749050 -1.685998605  2.935310e+00  3.15297518 #> 30   1.065555520 -0.27180673  0.759540600  3.359841e-01  0.21545979 #> 31   0.900769357 -0.05231823  0.326876641 -1.071692e+00 -0.20927121 #> 32   2.804789036 -1.34667980 -0.715471719  1.085750e+00  0.44660182 #> 33  -1.777691422 -2.53496122  0.328291400 -6.694286e-01 -1.23816021 #> 34   2.282624965 -0.81351693 -0.694051116  3.671001e-02 -0.89484257 #> 35  -0.093188020  1.45840080 -3.036461478 -3.292355e+00 -0.58775892 #> 36   1.084172842 -0.11459853  1.941273981  2.029380e+00  0.55707234 #> 37  -1.857350671 -3.84854329 -3.017711778  1.919073e+00 -0.62027784 #> 38  -0.725816439 -1.02309247 -0.763485490 -1.507358e+00  2.76378298 #> 39  -1.277509031 -0.48573910  1.335748114  1.332825e+00 -0.43770368 #> 40   0.581608157  6.41753845 -1.593450607 -9.941596e-01  3.91230679 #> 41  -0.539002985  0.59285777  0.967554803 -3.557905e-01 -0.82504757 #> 42  -0.328357194 -0.74467029 -0.570579685  2.349518e-01 -2.01609066 #> 43  -1.165624321 -0.05559233 -0.925241054 -5.408065e-01 -0.98030271 #> 44  -2.372811967  2.07618809 -1.003020670  3.263327e+00  1.70828979 #> 45  -0.575411616  3.02769709 -2.251151113 -1.307423e+00  0.69108864 #> 46   0.953504724  0.49338509 -0.234007023 -3.055337e-01 -0.22187906 #> 47   1.448312810  3.15044496  1.075036534  2.145139e+00  0.49705568 #> 48  -3.006596719 -1.27984420  1.275255574  4.393207e-01 -0.55098069 #> 49  -0.772398228 -3.96859031 -3.623737859  7.097683e-02  0.54569313 #> 50  -1.127646394  0.02157606 -0.565583382  7.133889e-01  0.88609953 #> 51   1.655590530 -0.78982443  1.813687036  3.953303e+00  2.29959070 #> 52   1.347254124  0.42296826 -1.734011497  9.464787e-01  3.05652060 #> 53   1.654121018 -1.07073480  1.456464764 -1.486992e+00  1.36572668 #> 54  -2.233652261 -1.34211849  1.734810256  4.075127e-01  2.32767736 #> 55   2.109556273 -1.33245321 -0.974964781 -1.793616e-02  0.62994248 #> 56   0.754360345 -0.55371007 -1.126496595 -1.807638e+00 -1.10770566 #> 57   0.464178927 -0.80680706 -3.935990050 -9.869940e-01 -2.33676689 #> 58  -2.494186249  0.94011965 -0.907891891  2.805664e+00 -3.40871755 #> 59   1.811013517  2.38120704 -1.310221006 -3.210068e-01  0.59092927 #> 60  -1.886526441 -0.58651497  0.814187039  1.153530e+00 -1.02535063 #> 61  -3.431760284 -1.45783447 -2.028325788  8.689222e-01 -1.69185408 #> 62   0.031924048  0.92342384 -0.716201181  2.081216e-01  1.31127930 #> 63  -0.997454893 -2.05650023  0.114214175 -7.826437e-02 -0.16534249 #> 64   0.005480454  1.20794735  1.487350398  3.352896e-01 -1.20064823 #> 65   2.690999435  0.08171048  1.905090027 -2.007622e-02 -1.74036953 #> 66   1.270943003 -2.36943906 -3.324056934  1.473535e+00 -0.61436447 #> 67  -0.500114137 -0.68385283 -0.502047139 -9.435591e-01 -2.06974654 #> 68   0.917653004  0.37069579 -0.971102159  3.542877e+00 -2.07486768 #> 69   0.985901105  1.85810276  0.292391517  5.515371e-01  1.62859345 #> 70  -1.478681264  0.64215447  2.612814492  3.241685e-01  0.83807046 #> 71  -2.600551324 -1.35032101  2.229534208  1.106988e-01  0.93426794 #> 72   3.098361685 -1.49021085  0.898435933  3.712921e+00  0.67937359 #> 73   2.687317155  1.34649574 -1.939366856 -3.348425e-01 -1.29988905 #> 74  -1.447170619 -0.28897601  5.379785008 -1.356817e+00 -0.29872206 #> 75  -0.658305604  1.11619843 -0.185888496 -3.301360e+00  0.57485320 #> 76   2.128814636 -1.38333960  1.719738879  4.762961e-01 -4.21648077 #> 77  -2.680899203  1.33790628  2.368903980 -2.580534e+00  0.98936069 #> 78   0.962215698  0.97999933 -0.334335290 -3.262760e-01 -3.20171797 #> 79  -0.361739143 -1.22813204 -1.850344792  2.474203e+00 -2.45125064 #> 80   0.310821927  1.52949550  1.532509768  1.763702e+00  1.89854299 #> 81  -0.627002260  0.43188280  2.321982875  2.138819e+00 -1.30606234 #> 82   2.534033802  0.53270579 -0.946061137  2.355336e+00  0.59839547 #> 83   2.129087314  1.48105787 -1.326511932  2.087444e+00 -0.22951302 #> 84   0.269323524  2.08433620  0.680279703 -1.549781e+00 -0.62613592 #> 85  -2.465105695  0.39276128 -0.901152516 -4.864331e-02  0.53831244 #> 86   1.957504611 -0.68345615 -1.121228882  3.264817e-01 -0.70963313 #> 87  -0.051597918  0.02551840  1.321281178  7.140508e-01  0.25265836 #> 88  -1.493579276 -0.10695871  0.915410624 -1.913671e+00 -0.29779914 #> 89  -0.314212615  1.80135494  1.743507728 -2.232069e+00 -1.64425522 #> 90  -2.601661594  0.96460318  0.189278767 -2.336575e+00 -0.18877364 #> 91   0.669559276 -0.32270709 -1.546880092 -2.529913e+00 -3.22419357 #> 92   0.349636203 -2.17787863 -0.178798542 -1.314781e+00  0.80241503 #> 93   1.180927728  4.16549299 -1.476544647  1.851777e+00  0.14864032 #> 94  -1.669515182 -3.97274374 -0.001374760 -8.711429e-01  1.34725813 #> 95   4.164316999 -1.53147497  2.455294577 -2.885014e+00 -0.88917985 #> 96  -1.352403742 -0.34086331 -0.322551652 -3.725129e+00  4.77570417 #> 97  -1.271968534  5.51676482  2.197693515 -1.010981e+00  2.52707973 #> 98   3.038148148  0.65170952 -0.813498928  1.123219e-01  2.09098406 #> 99  -5.089721730  1.97305934 -0.699470619  1.393567e+00  0.76897553 #> 100 -1.919459809 -0.78669008  0.625555290 -1.828614e+00  2.00469362 #> 101  0.115056485  0.07338962  0.543738179  1.178293e-01  0.42701556 #> 102  0.524403390  0.46717210 -0.729437041 -2.345098e-01  0.03693525 #> 103 -0.147747954 -0.09159125 -0.025070132 -1.954623e-01 -0.05783879 #> 104  0.397385960  0.47331513 -0.381104750 -2.015458e-01 -0.06157664 #> 105  0.199248542  0.26130783 -0.130494957  5.209279e-02 -0.44572846 #> 106  0.420638132  0.52365478 -0.235822675 -1.850812e-01 -0.03160174 #> 107 -0.097406303 -0.43808845  0.336392593  1.498124e-02 -0.16139587 #> 108 -0.079706792 -0.21618538  0.154989744  3.565807e-01  0.36835049 #> 109  0.119957053  0.86109487 -0.976380667 -3.023376e-01 -0.72721380 #> 110  0.007809032  0.09638472 -0.304746979 -6.822646e-01  0.22721511 #> 111 -0.025584002 -0.77266857 -0.012332568  3.083648e-01 -0.22426885 #> 112 -0.446653558 -0.67323478 -0.090134455 -2.438335e-02  0.39323194 #> 113 -0.502949433  0.22180649  0.193939544  7.236766e-02  0.30663918 #> 114 -0.431382013  0.90496343 -0.257750192  1.708200e-01 -0.02713994 #> 115  0.410215435  0.05927624 -0.216853271 -3.024803e-02 -0.12744630 #> 116  0.126661982 -0.36975664  0.075885824 -4.294360e-02  0.05588716 #> 117 -0.528766614 -0.54172554  0.392025296  1.040719e-01  0.09856045 #> 118  0.044774693 -0.65086020  0.014825601  8.822838e-02  0.13870504 #> 119 -0.350708269 -0.03496394  0.177031794  4.991420e-01  0.13600363 #> 120  0.021364332 -0.22258502  0.369746426  4.530992e-01 -0.67766632 #> 121 -0.245650961 -0.46528301  0.152455483  9.324313e-02  0.11532177 #> 122 -0.026039003 -0.12163962 -0.031262634 -4.834311e-02  0.18157548 #> 123 -0.448651334  0.17703910 -0.202027297 -4.474486e-02 -0.16141081 #> 124  0.115764206 -0.15663447 -0.225106861 -1.329210e-01  0.03497682 #> 125 -0.321376503  0.74612135 -0.242524561  5.179003e-02  0.33200848 #> 126  0.633421770  0.95357847 -0.835381422 -3.519687e-03 -0.83078471 #> 127 -0.684630326  0.41829828  0.182877247  6.692952e-01 -0.50225023 #> 128  0.283804811  0.15949475  0.732867156  1.078078e-01  0.09660908 #> 129 -0.681874087  0.31957435  0.030621466  1.700282e-01  0.05629007 #> 130 -0.085188024 -0.26002318  0.325639559  1.185685e-01  0.35428636 #> 131  0.415458828 -0.31524380  0.505192446 -2.131592e-02  0.25189456 #> 132  0.515227231 -0.18537487  0.582623531  1.885140e-01  0.04403293 #> 133 -0.623691210 -0.41945578  0.077495912 -6.800114e-01  0.98971663 #> 134 -0.045967891  0.05349481  0.666671726  3.377327e-01 -0.15691978 #> 135  0.125898531 -0.69475726  0.022297493  4.105942e-01 -0.22832872 #> 136 -0.155135592 -0.09462202  0.067537640 -2.642085e-01  0.06780045 #> 137 -0.047729696  0.13743258  0.044373741 -2.136727e-01 -0.07635480 #> 138  0.381029213  0.13535294  0.534960377  4.209410e-01 -0.70491170 #> 139 -0.210900524  0.04232916  0.067217654 -6.426618e-02 -0.19192811 #> 140  0.052378613 -0.08032503  0.100202582 -3.396118e-01  0.02983971 #> 141 -0.052770982  0.51400151 -0.003768884  2.406402e-01 -0.35185399 #> 142 -0.509436780  0.20077362 -0.358320919  5.994115e-02  0.74489617 #> 143 -0.269225302 -0.17091124 -0.012877846  1.701176e-02 -0.03046291 #> 144 -0.181149321 -0.02729744  0.393989346  1.906776e-01 -0.10063781 #> 145 -0.216330419 -0.24423063 -0.060929128 -1.312106e-02  0.27878688 #> 146  0.787961485 -0.78748915  0.911299665  4.069780e-02  0.55154757 #> 147  0.156512503 -0.74944221  1.338505690  5.151539e-01  0.27407289 #> 148  0.368228317 -0.24187238  0.386902465 -3.648974e-01  0.45440707 #> 149  0.230183302  0.13600575 -0.308772395  5.195218e-05  0.01164110 #> 150  0.596701052  0.14780755  0.017925376  4.025347e-02 -0.26296712 #> 151  0.009696273  0.68763720 -1.160839106 -8.584856e-01  0.10656292 #> 152 -0.527933782 -0.55033372 -0.674580404  1.101070e-01 -0.17292063 #> 153 -0.433880506 -0.31534324  0.812157870  8.618947e-01  0.30666388 #> 154  0.197115959  0.02197541  0.311377609  1.119160e-02 -0.71543261 #> 155 -0.221381230  0.53963401 -0.727702412 -4.184620e-01  0.06371901 #> 156 -0.114729779  1.00094874 -0.398770566 -3.374897e-01  0.04162494 #> 157  0.298569058 -0.04181060 -0.590661929 -4.014798e-02 -0.35519577 #> 158  0.205041259  0.09062841 -0.030048198 -1.442921e-01 -0.12688093 #> 159  0.388898812 -0.04624162  0.659632534 -2.400991e-01  0.29286751 #> 160  0.074880874  0.10527511  0.179456688 -7.687168e-02 -0.11760382 #> 161  0.092933833  0.03109828 -0.368444973 -4.558246e-01  0.17028567 #> 162  0.159892766 -0.09203187  0.345198397  7.550941e-02 -0.17642097 #> 163 -0.382438629 -0.32784255 -0.194157956  1.441540e-02  0.37916135 #> 164 -0.273994817  0.47547996 -0.328055711  2.239904e-01 -0.20078164 #> 165  0.884939097  0.25488896  0.438463205  2.082273e-01 -0.73819197 #> 166  0.030164881 -0.07315421 -0.801778880 -4.639610e-01  0.01882883 #> 167 -0.294151573  0.40517863 -0.341557586 -4.788519e-01  0.25033843 #> 168  0.006159380 -0.46440798  0.645511204  1.488027e-01  0.03625317 #> 169 -0.483586581 -0.26245009 -0.365692158 -5.426177e-01  0.39829890 #> 170 -0.520419420 -0.72358970 -0.763347029  1.808371e-01 -0.03219975 #> 171 -0.181575648  0.53962684 -0.765775103 -2.589091e-02  0.02747513 #> 172 -0.327821407 -0.10959203 -0.505516391 -5.306671e-01  0.12616963 #> 173 -0.344161078  0.02753015  0.626434586  7.450581e-01  0.38112282 #> 174 -0.032254657  0.20577187  0.391791696  2.581620e-01  0.03662270 #> 175 -0.123118724  0.52195773 -0.376793190  3.406314e-01 -0.27419743 #> 176 -0.304044588  0.79150671 -0.350795246 -8.342520e-02  0.29628245 #> 177  0.282482179  0.04968358 -0.415304439 -3.879571e-01 -0.44917791 #> 178  0.154985984 -0.32510779  0.394104717  2.664231e-02 -0.69092689 #> 179  0.478056737  0.46686705  0.207270954  2.752359e-01 -0.47161280 #> 180 -0.086083258 -0.16849072  0.331748598  2.322033e-01  0.38675765 #> 181  0.202386568  0.09082949 -0.261335452 -6.082753e-02 -0.17163377 #> 182  0.008158013 -0.09739626  0.273843168  4.327947e-01 -0.36947420 #> 183  0.249406344  0.55668858 -0.310872220  1.537808e-01 -0.14680369 #> 184  0.454456137 -0.59734080  0.278309514 -6.175011e-01  0.47828005 #> 185  0.368188087 -0.10946972 -0.212549126 -4.303688e-02 -0.17565034 #> 186  0.082806782 -0.52255461  0.231479189  1.249038e-01  0.05421645 #> 187 -0.201760957 -0.01496627  0.137889406 -5.932923e-02 -0.11255464 #> 188 -0.279127360  0.61311763  0.903893975 -1.335807e-02 -0.39876219 #> 189 -0.243316381 -0.35758518  0.846051565 -2.426106e-01  0.51678367 #> 190  0.855271850 -0.34500559  0.114760197  4.703660e-01  0.40414542 #> 191  0.038135061  0.20351307 -0.233912450  3.939351e-01  0.19608635 #> 192  0.587547699 -0.36361467 -0.416714510  7.283618e-02  0.62394957 #> 193  0.004128016 -0.49595967 -0.096997128 -1.104772e-01  0.14292203 #> 194 -0.411503566  0.54230096 -0.053604835  5.196388e-01 -0.59380200 #> 195 -0.191956151  0.37711689 -0.745109382 -8.754819e-02 -0.07156191 #> 196  0.350708455 -0.13229076 -0.901523897 -4.717459e-01  0.07920162 #> 197 -0.067500652 -0.45058118  0.287258809  4.811227e-01 -0.21204625 #> 198  0.441995768 -0.06656199  0.082696457  3.191805e-01  0.31381375 #> 199  0.437797409 -0.09414133 -0.327628257 -3.275474e-01 -0.18258543 #> 200 -0.019025280  0.10359030  0.682632556  1.723719e-01 -0.60882595 #>             pc25          pc26         pc27         pc28         pc29 #> 1    1.693537253 -0.1158215943  1.259486432  2.776778809 -1.251790916 #> 2    1.533960383 -2.2053250784 -0.745534944 -2.329936694  0.173865725 #> 3   -0.342973825  1.0171794999 -1.449623710  0.049478732 -0.682423551 #> 4    0.628224250 -0.5310621394 -0.558813901 -0.066651280  0.730830435 #> 5    1.195889375 -0.5850513638  0.115025414 -1.173081082  0.826210934 #> 6    2.917830077 -1.6628073094 -1.214087353  0.105020047  4.053399398 #> 7    0.213427945 -0.5391575640 -0.212761370  0.422123160 -1.246518671 #> 8    1.146729676 -0.3338021069 -2.411082319 -0.514380247 -0.933833790 #> 9    0.563798316 -0.9260303951 -2.648951018 -0.069671718 -0.501703119 #> 10  -1.859042886 -0.8040433532  0.793482106 -2.369342379 -0.959416876 #> 11   1.743628629  0.9449342129  0.029086391 -0.676785515  0.666484009 #> 12   4.110658369  1.7577068111 -3.418258373  0.450138309  0.820308337 #> 13   2.829638779  2.6225048481 -1.061613654  1.723594044 -0.844403019 #> 14   2.028598650 -1.6847023910  3.190645067 -0.955638590 -0.592773569 #> 15   0.875413702  1.5511992906  1.271407357 -0.434180519 -1.257566949 #> 16   1.315405893 -2.1881600418  2.336896949 -0.294253605 -1.801348439 #> 17   1.030863497  1.7592276272  2.610010458 -1.532563621 -0.268532347 #> 18   0.071785052  1.1901187190  0.270228974  1.531626852 -0.027746141 #> 19   2.592276473 -2.2012329224 -1.870582125  0.448398286 -0.015314471 #> 20   0.911116481  0.7657302849  0.918153869  1.760836187 -0.631414914 #> 21   1.032605012  0.6681118267  0.525449585 -1.476693531  1.829029087 #> 22   3.104908158  0.0645706562 -3.032449917 -1.860882762  1.972145846 #> 23  -1.998497283  0.5237985459 -0.605456340 -0.526219589 -0.952748155 #> 24  -2.428107111  1.5692189963  1.268847556 -0.477901722  1.612356530 #> 25   2.113075692  0.2589043846 -0.447536095  2.637222112 -1.251845224 #> 26  -0.100915478 -1.5774964096 -0.978381895 -1.424692961 -1.815131461 #> 27  -0.877703077  1.5441375663  1.682264375  2.446519044  1.320627633 #> 28   0.438438495  2.1953141517  0.199544864 -0.777488274 -1.061876264 #> 29   3.002490079  0.4543277910  0.448921290 -1.603714722  0.451219634 #> 30  -2.879831708  1.5315294738 -0.924009014 -0.432484557 -0.990949893 #> 31  -2.984387280 -2.9820310801 -3.687177652 -0.589631247  0.804676772 #> 32  -1.767222787 -0.9551549502 -0.143457233  0.443376678 -0.415306421 #> 33  -1.871247087 -1.4734670087  2.024293132  3.195647706 -0.852412134 #> 34  -2.107182752  0.3412285602  2.553747986  0.294142219 -2.912134482 #> 35   0.558797209  1.9455188342  0.268693554 -0.485902458  0.595617859 #> 36  -2.487708814  1.4424730530 -1.649694832 -0.727517019  2.847952439 #> 37  -0.996426971 -0.0415626261 -0.038632432 -0.297407295 -1.532920090 #> 38   0.406994584 -1.0028912548 -0.100467252  1.042835362 -0.496499630 #> 39  -0.681426311  0.3849641655 -0.209026872  1.777026361  1.705822528 #> 40   1.875786059 -2.9969557786 -0.520997395  0.303417700 -1.541829709 #> 41  -1.478694239  0.1318937461 -2.274069355 -0.237542093 -3.530166856 #> 42  -2.887658356 -2.4298582413 -3.054141138 -1.791758740 -2.052978802 #> 43  -0.320546989 -0.3269492175 -1.601352876  1.418112376  0.496244148 #> 44   0.357364675  4.8175337035 -2.208908622  1.959270194  1.097088594 #> 45  -0.135535126 -1.0522932066 -0.765207768 -1.658967642 -1.769830180 #> 46  -1.207192126 -3.5443145964 -2.825752802 -3.065481527 -0.767966116 #> 47  -1.972125650 -2.3920365449  1.085497105  0.931778000 -1.588828234 #> 48  -3.591805613 -0.6973634166 -1.035285197 -1.789504042  0.700681113 #> 49   0.187495842  2.0306564335 -0.461641314  1.366572957 -0.606679747 #> 50   1.678535933 -0.5178485902 -1.307947771  1.856348609  4.356059475 #> 51  -0.422210846 -1.4000430218 -0.168224977 -1.548432341  0.270204303 #> 52   0.720997767  1.3821237520  1.731828777 -2.036648227  1.339463338 #> 53   0.430702633 -0.8136830944  0.502432161 -0.453267322  2.708796618 #> 54  -0.636764541  1.6519311297  1.671750290  2.294796740 -1.377003766 #> 55  -3.574701204  0.0723105902  0.865977205  0.237485035 -1.248205405 #> 56   0.769501958 -1.3523602914  2.278633557 -0.252186228  4.950088862 #> 57  -0.062291154 -0.4624757841  0.907735375  1.055776376  0.405644315 #> 58   1.202798955 -1.8584864209  0.732170574 -0.932972426  0.809669383 #> 59   1.438323987 -3.5338750133  0.367863047  2.453144012 -3.371557356 #> 60   1.401037504  0.4782641711 -1.414702514 -2.043846151 -0.112675284 #> 61   0.312708730  1.0927491640 -3.479591254  2.366325774 -0.454327219 #> 62  -0.411580325 -0.7196934894  1.531131549 -1.432341763  0.851711227 #> 63   1.045555894  0.4280635774  0.268567756 -1.743599390 -0.002912771 #> 64   1.416839227  3.6720427811 -1.220319979 -0.888271106 -3.153855539 #> 65   3.078164632  0.5993666403  2.231828216 -1.409156578 -0.799903753 #> 66  -1.835827129  1.9618234672  0.363014170 -2.045863239  0.008524024 #> 67  -1.282559191  2.9951128847  2.670096970 -4.655222314  0.996247029 #> 68  -1.269340399 -1.2190017920  0.499649637  4.416085171  2.177017945 #> 69  -0.111921889 -3.1763002288  0.288570526 -0.208250568  0.501283460 #> 70   0.769518875  3.0089862622  0.580621404 -0.716927656  0.699827344 #> 71   2.630438246 -1.9131817298  2.006918594  2.978082036 -2.200630122 #> 72   0.186585194 -0.7992635183 -0.694397906 -0.579105561 -0.332284835 #> 73   0.994957268  0.4171952309  0.179876600 -1.728281222  1.810976606 #> 74  -0.722055766 -0.3720244848  0.460952810  3.973950736  2.381834097 #> 75  -1.578143817 -2.8264590473  1.884136085  0.009606903  3.353654390 #> 76   1.572169856  0.6172570422  2.297434976  0.501396022 -1.276582578 #> 77   0.412527311 -2.8320649237  0.165512064 -1.328048292 -1.459545703 #> 78  -1.714536708 -1.8614647070 -0.394507304 -1.004801384  1.690089373 #> 79  -0.338855968 -0.7716083546  0.904761042  0.342604997 -0.525298254 #> 80  -2.985607702 -0.0481207663  1.654137937  3.285600004  0.903753386 #> 81  -0.489452775 -0.9418741973 -0.122574860 -1.351351989  0.731129217 #> 82   2.046370846  1.8793660742 -1.435184178  4.188763378 -1.700081525 #> 83   1.540581117 -1.1345475657  0.679394189  0.354028601 -1.117538775 #> 84  -1.224899065 -0.5981952997 -2.155964852  1.668571610  1.393412313 #> 85   1.513016287  1.7597608207 -1.570403314 -2.238143940 -2.391990042 #> 86  -0.836244491  1.9106426439 -0.760984302  1.608051073  0.010133986 #> 87   0.427419585 -0.5591185153  0.674477503 -1.183861515  1.607427785 #> 88   0.872248936  0.6749812957  4.316713382 -1.960951479  2.261880460 #> 89  -3.085433977  1.5749271139 -2.856988023  0.609213312 -0.883891862 #> 90  -0.062411988 -0.4101460232  2.501382852 -0.558531211 -3.196524208 #> 91  -3.856029934  0.8139374033  0.849876830 -0.320618692 -0.299625507 #> 92  -2.718018139 -0.6483694984 -0.349549248  1.871386551  0.057355458 #> 93  -1.857593362  3.4752718629  0.307665469  1.030612837  1.654487419 #> 94   0.178163571 -0.3998323527 -3.947786199  0.535897309  1.508322538 #> 95   1.618599536 -0.9695290478 -0.526841827 -0.034062784 -0.683046749 #> 96   0.918974872  0.9255969039 -0.073196257  0.071858555  1.215107221 #> 97  -2.248087932  4.5254100448 -0.544895974 -2.499756188 -1.499373744 #> 98  -0.959337292  0.2041932930  0.487721695  2.014319424  1.031551676 #> 99  -1.266441215 -0.9122777035  3.544298414  0.476888016 -0.271215762 #> 100  1.166087577 -0.3975730057  1.155887050 -1.461160373 -0.548925812 #> 101 -0.091772255 -0.2067408360 -0.377426416 -0.019981111  0.570594407 #> 102  0.670267778 -0.0974919059 -0.287316173  0.013120574  0.514018882 #> 103  0.066209446  0.1506204184 -0.584743954 -0.474565470  0.263912433 #> 104  0.403573227 -0.1534076613  0.439428285 -0.051497828 -0.070536795 #> 105  0.361903766  0.0063084699 -0.023070227  0.255618253 -0.435005254 #> 106  0.186133372 -0.2236532395  0.248793819  0.309105441 -0.375761296 #> 107 -0.523958448  0.1442077462  0.531868466  0.164631304 -0.367639796 #> 108 -0.216612950 -0.0923031577  0.109148270  0.322807747 -0.394400646 #> 109  0.244057448 -0.2264661310  0.421324544 -0.049675669  0.139377527 #> 110  0.049671729  0.1801358102 -0.368159890 -0.077510706  0.543996961 #> 111 -0.594574014  0.4104022280  0.738782602 -0.272699269 -0.258009347 #> 112 -0.037160130  0.3291678572 -0.902609919 -0.284384530  0.204761131 #> 113 -0.565221194 -0.0933474744  0.362795829 -0.217967126 -0.491386615 #> 114 -0.589386809 -0.4250810239  0.159732282  0.228878703  0.373674733 #> 115  0.323389450  0.0318767192  0.610003855  0.320161368 -0.721178618 #> 116 -0.053263519 -0.0837455187 -0.261423091  0.085440084 -0.301106762 #> 117 -0.070372636 -0.0548868262 -0.193506308 -0.191705709 -0.757704514 #> 118  0.032310278  0.1620683836  0.177366336  0.119154107  0.246166346 #> 119  0.236926189  0.1849659865 -0.360445116 -0.025731386  0.059377912 #> 120  0.454810151  0.0061809368  0.360604299 -0.116458112 -0.655039249 #> 121  0.154749115  0.0181349834 -0.376353506 -0.050987235 -0.001947436 #> 122 -0.136590042 -0.1143077810 -0.293595736  0.040864440  0.491317634 #> 123 -0.033992832 -0.3418916444 -0.183547370 -0.546368537  0.056600363 #> 124 -0.201064256 -0.1581652510 -0.676481369 -0.361990941 -0.166178028 #> 125 -0.431536741 -0.6968173819 -0.175074866 -0.215027852 -0.685388308 #> 126  0.279427672 -0.0006255926  0.530465298  0.570859325 -0.200923588 #> 127  0.098372444 -0.0991622105 -0.198736346 -0.141431832 -1.076841901 #> 128 -0.100629384 -0.4550390979 -0.417003062 -0.169959172  0.171320012 #> 129  0.438470981 -0.3730308443  0.055512004 -0.302949044 -0.375598400 #> 130 -0.216495100  0.3754065683  0.587796404  0.217792224 -0.170239096 #> 131 -0.261960292 -0.3019037177 -0.130234684  0.125007704  0.599326667 #> 132 -0.311058699 -0.1170972188  1.010247264  0.025335853  0.197970100 #> 133 -1.309617205 -0.2008221271 -0.332403164 -0.078752848 -0.122400261 #> 134 -0.099324636 -0.3256471705 -0.658688214 -0.022893022 -0.021021248 #> 135  0.217801460  0.0263193540  0.141647199  0.110587380 -0.455196140 #> 136 -0.107541237 -0.0625282652 -0.101497771  0.042586696  0.185966059 #> 137 -0.078309091  0.1961483402 -0.016887984  0.026556766  0.711885759 #> 138  0.167667408 -0.0567411967  0.365358199  0.404062709 -0.383904559 #> 139  0.010244513  0.0263980064 -0.006779658  0.001590108 -0.020388818 #> 140 -0.134797964 -0.1024691281  0.134524219  0.116623367  0.186671951 #> 141 -0.411336052 -0.1381711051  0.733790767  0.500271605 -0.096839640 #> 142 -0.276526047  0.0642634591 -0.148077798 -0.102670414 -0.098487329 #> 143  0.149932490  0.2131121959 -0.103174741 -0.180227596 -0.824207988 #> 144  0.159392642  0.1055045331 -0.442661408 -0.227108366 -0.595952999 #> 145 -0.731502740  0.3516249324  0.287288639 -0.145468088  0.387738421 #> 146  0.151701732  0.0601408234 -0.919143281 -0.600646742  1.036932217 #> 147  0.164006637  0.1196412792  0.367900676 -0.375471054 -0.545239623 #> 148 -0.349742310  0.0634739487  0.315703722 -0.002690038  0.241577145 #> 149 -0.177378132  0.1292950661  0.171213695  0.074855329 -0.182821893 #> 150  0.318959861  0.3496647999  0.631981390 -0.042835426  0.817502153 #> 151 -0.108423382 -0.8131678777 -0.429067048  0.296809270  0.114786753 #> 152  0.372182481  0.7003031098  0.270726272  0.100642188 -0.051119963 #> 153 -0.387341197  0.3656919470 -0.044327700 -0.012201629  0.437038229 #> 154 -0.002057594 -0.2178732083 -0.054868903  0.087345379  0.158963874 #> 155  0.324942494  0.2567804506  0.141806648 -0.014311007  0.450155605 #> 156 -0.370884718 -0.3618209541  0.051349786  0.263268253  0.927686215 #> 157  0.631618568  0.4140858110 -0.114032207 -0.111225532  0.083546492 #> 158 -0.126390572  0.0642457950 -0.159895855 -0.489438554  0.220236672 #> 159 -0.201530690 -0.5428312899 -0.295182140  0.047100933  0.570188097 #> 160  0.443218463 -0.1281167336  0.123583798 -0.104580317  0.170524633 #> 161 -0.480035963  0.0258552779 -0.438128454  0.340657366 -0.152787388 #> 162 -0.055878893  0.0801299096  0.395013407  0.122117862  0.190501972 #> 163  0.049375602  0.2076935118 -0.469934662 -0.174126630 -0.320123435 #> 164  0.376185400  0.2416889908 -0.156120186 -0.360692814 -0.399918542 #> 165  0.758789707 -0.2160932341  0.465372866  0.153732509  0.238082089 #> 166  0.243174445  0.2627480008 -0.321808775 -0.392198196 -0.004071753 #> 167 -0.437250313 -0.0165197803 -0.218020915  0.169923197  1.062600140 #> 168  0.115235066  0.0840474829  0.303355302  0.113052457 -0.067557163 #> 169 -0.601731809  0.3096808488  0.114586251 -0.354984791  0.072501150 #> 170 -0.001013136  0.4728732854  0.405339614 -0.181581902 -0.151259732 #> 171 -0.004999242  0.4373365239 -0.179333131  0.043732102  0.621869113 #> 172 -0.670407978  0.3524768813 -0.009919826 -0.076259987  0.989459986 #> 173  0.439520185  0.0194803077 -0.709832850  0.114884489 -0.706355438 #> 174  0.041107211 -0.2621109236 -0.288671116 -0.406997131 -0.512389012 #> 175  0.367096170  0.0957453191 -0.113696578  0.048311807 -0.628178726 #> 176  0.094251095 -0.4259373360 -0.582203599 -0.077843598  0.332901104 #> 177 -0.182091057  0.2633876710  0.439888664 -0.162378426 -0.111526781 #> 178 -0.077785186  0.0847342016  0.247286178  0.006579672 -0.859255069 #> 179  0.210372517 -0.0222158442  0.579958494  0.366214468  0.023362556 #> 180 -0.672731357 -0.5111468439  0.352633000  0.382999258 -0.088745285 #> 181  0.319075489  0.1384510976 -0.160428169  0.163948787 -0.543620226 #> 182  0.158605238  0.1413087581  0.630467010  0.278573179 -0.934227910 #> 183  0.539094232  0.1859221647  0.278453039 -0.268465288  0.507204911 #> 184 -0.577503246 -0.2154620963 -0.755473787 -0.464551768  0.817658082 #> 185 -0.064323693  0.2203105098  0.439228511 -0.140254917 -0.125512603 #> 186 -0.161795482  0.1427104203  0.030743057 -0.257984587  0.119996561 #> 187 -0.292628916 -0.0723242229 -0.427743616 -0.015044389  0.573773279 #> 188  0.080966502 -0.7265997679 -0.378730747  0.354864441 -0.265421990 #> 189 -0.455159346 -0.4589154956 -0.367000130 -0.199451566  0.161866869 #> 190  0.166531279  0.2264618253  0.634339401  0.356073529  0.348907455 #> 191  0.146311033 -0.1829773686 -0.142820978  0.297602538 -0.233694926 #> 192  0.596344239  0.2400637022  0.382961499  0.496738722  0.100364197 #> 193  0.167680807 -0.0632470466  0.080524992  0.168566020  0.607824123 #> 194  0.589013421  0.5319394878 -0.029926024  0.254825264 -0.789644928 #> 195 -0.240283052  0.0107886548  0.002424175 -0.113663448  0.357946495 #> 196  0.787419318  0.1364429292  0.145165311 -0.236139457 -0.110447426 #> 197 -0.050774458  0.6416370334  0.478093011  0.274207585 -0.400007710 #> 198  0.372233958  0.1970302860 -0.643051838  0.009389879  0.366893270 #> 199  0.136966339  0.5615191297  0.213134791 -0.381568429 -0.035885844 #> 200  0.170468325 -0.3148389124  0.093862481 -0.071245598 -0.612758266 #>             pc30         pc31          pc32          pc33         pc34 #> 1   -0.227567279  2.521556138 -1.8994749302 -1.244168e+00 -3.085329885 #> 2    2.321285344 -0.903602329 -2.3649802033 -3.395842e-01  0.362612210 #> 3   -0.793724187  0.741281765 -0.0235859030 -8.566195e-01 -1.910379623 #> 4    1.641269596  0.058630124 -2.3709335567 -5.713543e-01 -0.238238948 #> 5   -0.147807082 -1.202296394 -1.4734683546  2.564499e-01  0.805699071 #> 6   -0.915865248 -0.046074612 -0.4445745146 -3.614038e+00  1.793087048 #> 7    1.643992998  1.788593308  1.6671514308  3.594243e-01 -1.468200789 #> 8    0.403606584  2.861621211  1.4239407803  2.280666e+00  3.270049459 #> 9   -0.420516168  1.847405297 -1.2827546514  3.555791e-01 -0.255254534 #> 10  -0.789813149  0.859672231 -0.9086938391 -2.144671e+00  1.193515777 #> 11   0.371154433 -2.499969665  1.3155594389 -1.113004e+00 -0.470463833 #> 12  -0.457698921  1.623675681 -1.6633162837 -9.306153e-01  0.827792459 #> 13  -2.008408948 -0.429856515 -1.0630359239  4.113015e-01  1.535605650 #> 14   0.859161262 -2.767016311 -3.1761210345 -7.399421e-01  1.265025934 #> 15  -0.492373596 -2.105879870 -0.6790026125  1.113310e+00 -0.271735525 #> 16   0.332190318  2.065476743  1.3826301231 -1.657130e-01 -0.730174553 #> 17  -1.779027536  1.839657481  1.4769931993 -1.332259e-01 -0.213020350 #> 18  -1.166568211 -3.843293162 -0.3604324042 -9.589799e-01 -0.130603203 #> 19  -2.277064029  2.849042948  2.2935547760  7.311139e-01 -2.229153496 #> 20   0.171603151 -0.273305546 -0.4967041693  8.005301e-02 -0.953977678 #> 21   0.456937310 -0.446029011 -1.2157157652  1.889760e+00 -0.242523324 #> 22  -0.114842057 -0.391583316  1.2214582084  1.001239e+00  1.318142765 #> 23  -0.795164696  0.325263758 -1.3556725213  3.336409e+00  1.469048916 #> 24  -2.178287358  1.191532694 -0.7758622625  4.397304e-02  1.333374935 #> 25   1.979702357  1.728707275  2.0185598333 -7.201613e-01  2.514252304 #> 26  -0.431432678  0.405720399 -0.1745251219  3.011762e-01 -2.039722974 #> 27  -2.236046521 -0.224623247  1.6940444575  1.255891e+00 -1.856890332 #> 28   2.242855046 -0.071738781  0.6346338125  3.528718e+00  0.677877837 #> 29   1.106214567 -2.360001377  0.1004022930 -4.077062e-01 -0.808501364 #> 30   0.927203302 -2.693085665  0.0854062012 -4.310039e-01 -3.104436925 #> 31   0.793525702  1.832952407 -2.8824192301 -1.055391e+00 -0.274370936 #> 32  -0.454234234 -1.406421071  2.2017876814  1.964558e+00  0.507543083 #> 33   1.548685980 -2.784457218 -0.8900090233 -4.803058e-01  0.447302548 #> 34  -1.204197338 -2.893725453 -0.2449358778  7.798364e-01 -1.564122552 #> 35   0.464939560 -2.443768180 -0.3049748202 -8.161586e-01  1.929026175 #> 36  -1.157425800  0.463751727 -0.4407716082  1.718232e+00 -0.119237139 #> 37  -1.674007679 -2.224774789 -0.9465468285 -1.799076e+00  2.912249994 #> 38   2.951961008 -1.476045435  1.7079573754  2.060723e+00 -1.940628390 #> 39  -0.937194990  2.713045156 -1.7910158935  1.830286e+00  0.327580161 #> 40  -0.782910338  0.794943564 -1.3466188454  1.828363e+00  0.564686454 #> 41   1.686506141  0.332819447  1.4514666136 -3.194540e+00  2.743707801 #> 42  -1.019397745 -0.449811803  1.7477919177 -2.082891e+00 -0.351175194 #> 43   1.062350406  0.812360235  1.1615661015 -1.098563e+00 -2.033549632 #> 44   2.252921721  0.215903636 -0.9237076090 -2.958275e+00 -1.378757193 #> 45  -2.617504511 -0.327189148 -0.7377621946  1.466092e+00 -0.296479271 #> 46   1.143964462 -0.742853153  1.6069750655 -1.777601e+00 -1.456470814 #> 47  -0.068408320 -1.364274425 -1.4094284349 -1.082466e+00 -2.091854313 #> 48   0.368866056 -0.362866330 -5.1227081279  1.045622e+00  1.136004792 #> 49   0.191233916 -0.080062725  0.2706660337 -1.831471e+00  1.907400086 #> 50   0.089524581 -1.854003255  0.5929541096  1.676347e+00 -2.551502342 #> 51  -0.495551076  2.090237000  0.6894493605  1.571050e+00  0.636440486 #> 52  -0.982263753 -1.933864740  0.4576776438  1.296164e+00 -0.280107093 #> 53  -0.081788253 -2.075122206 -0.4776520266  6.331340e-01  0.278463795 #> 54  -0.726665470  1.427106500 -2.2842890708 -5.593887e-01 -0.069555542 #> 55   1.963346165  1.773013592  0.4297894838 -1.815219e+00 -0.076561248 #> 56   2.595428601  1.666418688  1.8787720082 -1.868320e+00 -0.903876094 #> 57  -1.250439024  2.578534434 -0.0566815583  4.107396e-01 -0.968937629 #> 58  -1.162242276 -0.044967044  1.2417389182 -6.056596e-01 -1.064939603 #> 59  -3.090051432 -0.080113789 -1.7103357560  4.157627e-01  1.718602159 #> 60  -2.244616694 -0.940085978  0.6796556583  2.710210e-01 -0.487119945 #> 61   0.061621408  0.198220555 -0.7717728716 -5.390302e-01 -4.071127616 #> 62  -2.156397552  2.959838232 -2.4748385842  1.557762e-01  0.616875638 #> 63  -1.690013749 -0.199667899  2.3162110835 -2.684388e-01 -0.313087114 #> 64  -1.885449867 -0.170226462  2.3316401880 -1.299840e+00 -0.200685693 #> 65   2.470196132  0.904917703 -4.9363491380 -1.169195e+00 -1.382548474 #> 66  -1.276846051  1.809521144 -0.7904000959  1.728636e+00 -0.300628343 #> 67   3.009213722  0.126044826  1.5896380925 -1.582818e-01  0.299840068 #> 68   1.143066557  0.730845252  0.8819145784  1.172072e+00  1.672113582 #> 69   1.237014661 -2.229783223  0.3025960694  5.674526e-01  1.278409264 #> 70   1.692974179  1.022667659  0.3317919701  4.997101e+00  0.981334898 #> 71   0.980320188 -1.347250185  0.5059049519  9.086654e-01 -1.241687488 #> 72  -0.803684982  0.251912681  2.9756624674 -2.480050e+00 -0.350073633 #> 73  -2.526752580  0.139940697  0.9182416581 -4.769287e-01  0.941276504 #> 74  -1.428030092  0.023906406  0.3981851172 -9.116034e-05  0.825203302 #> 75   2.089345456 -0.144244678 -1.8555299262 -2.512946e+00  0.804173477 #> 76   3.072085357  0.940954853 -1.8471650170  2.660164e+00 -2.932863293 #> 77   5.405202869  0.669247759  1.8486220997  3.348621e-03 -0.242037094 #> 78  -1.568322274  1.260903033  0.2359988046  3.136536e+00  0.355788348 #> 79   2.370370246 -0.886582265  0.9119256068  1.353514e+00  2.479617050 #> 80  -0.833304052  1.769427643  0.5852046433  1.079290e-01  1.865324279 #> 81  -2.640054360 -2.070419565 -1.0429471156 -1.991694e+00 -1.225948760 #> 82   0.967564607  1.428398975 -0.0919532239 -1.144038e+00  2.779321610 #> 83   0.729484573 -0.010183135  0.0059638182  8.138135e-01 -0.641873717 #> 84   0.097145692 -0.921148136  0.4480608875 -1.420595e+00 -1.186375043 #> 85   1.411026776  0.992905067  0.4664876085  1.072917e+00  0.267151118 #> 86   0.982045429 -1.796936766 -0.9644102910 -1.183839e-01  2.251628957 #> 87  -2.553855110  1.075214634 -1.1415030922 -1.149500e+00  0.584789337 #> 88  -0.783790886 -0.661693623  1.5311841536 -1.208674e+00  1.239314019 #> 89   0.745238175 -2.509547362  0.3938676122  1.994665e+00 -1.733137039 #> 90  -2.913073447 -1.454169895  2.0025849099 -1.201299e-01 -1.235008434 #> 91   0.457568796  1.660331090  1.2071016295  3.615835e-01  0.268702913 #> 92   0.646270374 -0.402968675  1.5942969854  2.750447e-01  2.652036972 #> 93  -0.252096510  1.274647775  1.0623992515 -2.670663e+00 -2.161937211 #> 94  -0.908493998 -3.574301774  1.3293877875  1.931691e+00  0.895870836 #> 95   0.859256686  0.571869205 -2.1043871999 -2.139054e-01 -0.866885855 #> 96  -1.944489025 -0.995007421 -0.1605235397 -3.561442e-01 -0.655556952 #> 97   2.668227998  0.863032220 -1.2915519031 -1.999670e+00  1.136032355 #> 98  -1.393088531 -1.231715472  0.4507372134  1.943451e-01 -0.095899860 #> 99  -0.488254250  1.003068196  2.3801444256  3.981854e-01 -0.185319191 #> 100  0.275966867  3.037210385  2.1853758943 -1.170992e+00  0.817188355 #> 101  0.247678301  0.265339035  0.0935003227  2.611575e-01 -0.495049165 #> 102  0.148077022 -0.498032363  0.4548402481 -3.698870e-01  0.043212245 #> 103  0.096925730  0.461890168 -0.2052338079  1.919624e-01  0.353462503 #> 104 -0.398229097  0.078807558  0.5686341524 -4.260990e-01  0.058578070 #> 105 -0.089723383  0.095228043 -0.6432911022 -1.964316e-01  0.321252902 #> 106 -0.595730246 -0.156170099  0.4856473504 -5.079249e-01  0.884659783 #> 107 -0.359840639  0.700194392 -0.3417372438 -4.309526e-01 -0.431258930 #> 108 -0.621783728  0.078267660 -0.1532323394 -1.882456e-01  0.097649891 #> 109 -0.039141821 -0.136252638 -0.0475337843 -2.403050e-01  0.554955988 #> 110  0.148615933  0.225110534 -0.4324185773  1.700833e-01 -0.228206279 #> 111 -0.900717684  0.163320106 -0.3107352825 -4.111378e-01 -0.539303186 #> 112 -0.335313062 -0.027873692 -0.6892662578  3.252715e-02 -0.643564610 #> 113 -0.616077990  0.335835389 -0.3243478571 -2.479842e-01 -0.082398312 #> 114  0.191113491 -0.046938273  0.1126827244  9.085274e-02  0.641616799 #> 115 -0.504117039 -0.058066412  0.1720137207 -5.962079e-01  0.543368754 #> 116 -0.014538216 -0.294570518  0.1680492077  1.677240e-01 -0.016325939 #> 117 -0.762843783  0.422549607 -0.1864106736  2.306683e-01 -0.125386413 #> 118  0.426281272 -0.063760829 -0.1594349669  2.389680e-01 -0.916197009 #> 119  0.166360540  0.096157315 -0.2439312651 -3.394836e-02 -0.004788360 #> 120 -0.117639576  0.067421704  0.3383803622 -3.535685e-01  0.130526864 #> 121  0.224092875  0.167756686 -0.3896913030  6.109746e-01 -0.269614791 #> 122  0.097115300 -0.140559008  0.0604910537 -3.794608e-02  0.245903249 #> 123 -0.213011099  0.208982949 -0.0005252043  2.187977e-01 -0.112037743 #> 124 -0.192897126 -0.537639319  0.2395574961  5.032587e-01  0.277791183 #> 125 -0.628839314  0.536085542  0.0693101232  3.060796e-01 -0.051863284 #> 126  0.342473067 -0.690533446  0.0875121716  2.565770e-01  0.830592504 #> 127 -0.499491203 -0.175564739 -0.5757730828  3.757580e-01  0.583548093 #> 128  0.184296442 -0.356834925  0.5171820267 -3.788654e-01  0.482720709 #> 129 -0.640669494  0.433632749 -0.3361621692  2.259280e-02 -0.092111521 #> 130 -0.166253491  0.451125365 -0.0977853796 -5.972443e-02 -0.483649829 #> 131  0.720485967  0.059711781  0.9898469717  6.286975e-02  0.179604955 #> 132 -0.100821608  0.230947721  0.7582776577 -9.904612e-01  0.119200320 #> 133 -0.443225272  0.874082974 -0.4415582726  6.533509e-01 -0.850795661 #> 134  0.665435614 -0.407385792  0.2540594215  4.393458e-01  0.206068996 #> 135  0.275734587 -0.290497242 -0.1586305565  2.485406e-01  0.505489539 #> 136  0.287253122 -0.100972580 -0.2917916467  2.286684e-01 -0.037365504 #> 137  0.703390931  0.101822124  0.0300979089  2.235818e-01 -0.366949412 #> 138  0.324513633 -0.476170049  0.1278374766 -3.966485e-01  0.618747633 #> 139  0.386447367  0.068659598 -0.1797972940  2.351335e-01 -0.387638000 #> 140  0.115446253 -0.099062856 -0.3895512884 -5.641035e-01  0.301322052 #> 141  0.508104397 -0.255578072  0.3278206901  6.795354e-01  0.598979577 #> 142 -0.158762807  0.099048543 -0.4759069335  4.073867e-01  0.504012557 #> 143 -0.508080853  0.042664242 -0.2538354761  1.804613e-01  0.037404246 #> 144 -0.373832479 -0.316520721 -0.5164691569  3.291446e-01  0.449213581 #> 145  0.060437663  0.576253643 -0.3929409808  2.185504e-01 -0.795265340 #> 146  0.883406919 -0.435323346  0.8588712422  2.058512e-01 -0.199122278 #> 147 -1.233538902  0.310437428  0.1871159240 -8.228916e-01 -0.379850899 #> 148  0.229069002  0.269155169  0.6822026424 -8.208222e-02 -0.351584689 #> 149 -0.421959572 -0.439941944  0.2226370410 -4.560985e-01  0.140060168 #> 150  0.567014942 -0.022405442  0.7675157621 -2.854373e-01 -0.608354989 #> 151  0.426420294  0.305751189  0.4756897152  4.437799e-01  0.607468312 #> 152 -0.366031429  0.118191070 -1.1087279501 -2.329259e-01 -0.735852186 #> 153  0.222025153  0.290696489 -0.0541051795  6.747508e-01 -0.307651017 #> 154  0.849043678 -0.202511481  0.3534693886  5.860206e-01  0.065553654 #> 155  0.163173867  0.221367885 -0.4400562899 -3.217909e-03 -0.352116665 #> 156  0.552163101  0.363499094  0.3195607826 -1.491253e-01  0.117628320 #> 157  0.483984344 -0.240934314  0.3317751619  5.005137e-01  0.522361124 #> 158 -0.161734589  0.247740153  0.5096170354 -4.266867e-02 -0.200534073 #> 159  0.631548083  0.289437015  0.4923572246  3.511504e-01 -0.278287408 #> 160 -0.236519328  0.424218200  0.1809352192 -6.801690e-01  0.054974997 #> 161  0.495342703 -0.259770371 -0.2596509093  7.328986e-01 -0.579245523 #> 162  0.317126796  0.111835081  0.4969516555 -4.537315e-02 -0.141575911 #> 163 -0.685438535 -0.164661210 -0.4293749520  1.302365e-01 -0.087829945 #> 164 -0.483570627 -0.105491736 -0.3730150046 -3.223184e-01  0.151340254 #> 165  1.045248772 -0.359262844  1.2684545426 -1.435741e-01  0.918689089 #> 166  0.074462306 -0.075063590  0.2376024638  3.885420e-01 -0.281092711 #> 167  0.302303995  0.188698304 -0.3006373529 -3.472112e-01 -0.488957776 #> 168 -0.111956674  0.389554797  0.3055691278 -1.011308e-01 -0.197884333 #> 169 -0.263244828  0.833658772 -0.6267564994  3.630730e-01 -1.266108153 #> 170 -0.367654255  0.353338128 -0.9671663296  5.455240e-01 -1.125595559 #> 171 -0.048928671 -0.132994696 -0.5825720237 -1.993519e-01  0.309116145 #> 172  0.557648799  0.358689909 -0.9167665745  1.595488e-01 -0.163496015 #> 173 -0.280688164 -0.431638604 -0.3768576492  8.134869e-02  0.688323533 #> 174 -0.226257992 -0.121677601  0.2036591884  1.295804e-01  0.067192409 #> 175 -0.074363819 -0.357447394 -0.1605480301  2.761897e-01  0.260511144 #> 176  0.889813052 -0.152102176  0.2081993605  1.048779e+00  0.295218508 #> 177 -0.185462864  0.073709483  0.0189808742 -6.306536e-01 -0.123347208 #> 178 -0.366481293  0.005666817 -0.4028813164 -4.672348e-01  0.616326163 #> 179  0.307991773 -0.103480563  0.4662623697 -3.764779e-01  0.382840781 #> 180  0.221784887 -0.170555320  0.1249351076  8.192438e-01 -0.208570709 #> 181 -0.142905547 -0.359389948 -0.1671702873 -4.489858e-02  0.574931653 #> 182 -0.555446877  0.065051183  0.0268586536 -6.155047e-01  0.198107882 #> 183  0.112052494  0.222598375  0.6719897039 -2.583525e-01 -0.708968704 #> 184  0.021552814  0.373414839  0.3167456609 -1.372764e-01 -1.033926672 #> 185 -0.187645507 -0.286319655  0.1927159356 -5.958303e-01 -0.051159591 #> 186 -0.569191745 -0.205259809  0.1390565612  2.555339e-02  0.036739925 #> 187  0.489740529  0.057579275 -0.2108551868  2.776968e-02  0.066181146 #> 188  0.525999672  0.007030049  0.2633778379 -2.668340e-02  0.634517691 #> 189 -0.086263599  0.608360809 -0.1511810214 -1.551771e-01 -0.942682877 #> 190 -0.023814460 -0.594304058  0.6160098993 -7.067371e-01  0.434725379 #> 191 -0.318043837 -1.020878776  0.1111973748 -2.985610e-01  1.087670141 #> 192  0.001948888  0.327187621  0.5079734124 -6.134859e-02 -0.002444531 #> 193  0.531295351 -0.190172048  0.0143078411 -2.321647e-01 -0.211189743 #> 194 -0.225298095  0.045905223 -1.0256059520 -7.935338e-02  1.189068154 #> 195  0.133700102 -0.369871032 -0.1333362239  3.730258e-01 -0.053733211 #> 196 -0.063296475 -0.532508637  0.2730222672  4.538253e-01  0.267121240 #> 197 -0.073362672  0.097140948 -0.8052403182 -1.047893e-01 -0.397308795 #> 198  0.504969734 -0.831000547  0.3522823795  1.965851e-01 -0.067702262 #> 199 -0.578624886 -0.299476981 -0.2310350898 -4.787445e-01 -0.292397878 #> 200  0.043661291  0.017278611  0.0562225209 -3.656643e-01 -0.034760906 #>             pc35         pc36        pc37         pc38          pc39 #> 1    2.619311101  1.709444849  1.45722085  0.807161804  0.9004962523 #> 2    1.716497291 -1.849325582  1.59511747 -0.895128242 -1.4961299931 #> 3   -1.695434514 -0.978014649  1.15527317  0.491174539 -0.7999454024 #> 4    2.098092862  0.289183173 -2.31127862  2.115581254  1.0446103473 #> 5   -0.546904892 -0.517279981 -0.13532115 -1.795477506  2.4149966151 #> 6    1.318578361  0.760524574  0.48974955  1.569340534 -0.2270978065 #> 7    0.418132126 -0.274701324  0.87173487  0.329224982 -0.7908055944 #> 8    1.995795958 -1.085629233 -0.17625024 -1.297490265 -2.1692985546 #> 9   -2.721425008 -0.198788149 -1.13859916  0.423166712 -1.0564450062 #> 10   1.023518463 -1.250374654 -0.17941210 -2.560594243  2.5223987753 #> 11   0.216069400 -0.905752669  0.86272704 -0.954006535  0.8643509176 #> 12  -0.849303781 -0.938512445 -0.64993568  2.203643467  1.8777669336 #> 13   0.690572463 -0.546945136  1.66797304 -1.062314523  1.0776076629 #> 14  -2.179028076  2.971773313 -0.22011209  1.890467082  0.0616015601 #> 15   1.502517908 -3.131292167  1.08001873 -0.021475511 -1.2385883651 #> 16  -2.495573344 -0.419908670  1.32235710  1.389641891 -0.3455893370 #> 17   2.978237801  0.199882661  0.86029193 -0.238509625  3.4239587212 #> 18  -0.237932474 -0.952506272 -3.03470590  0.380621351  0.1871778797 #> 19  -0.386032239  0.339238146  0.34745987  2.608437124 -0.4971583551 #> 20  -1.693441035  1.260727596 -0.86634961 -2.616199096 -0.5563262921 #> 21   2.174811314 -2.764466720 -0.97597152  3.177865787  1.8275820457 #> 22   1.496308607  1.595268443  2.23761161  0.701585522 -1.0313703373 #> 23  -0.400909653 -1.915572822 -1.07293526 -2.942673934 -0.1442441323 #> 24  -1.090006975 -0.384464948  0.01868233  0.273772609 -0.7634424923 #> 25   0.730558215  1.318178995 -0.98890258 -1.931721211  0.3010567956 #> 26   0.853465824  2.390142857  1.36670567  2.146730636 -0.1487671007 #> 27  -1.156661376 -0.785651165 -1.16787761 -1.476678157  0.6888751524 #> 28  -0.512114443 -0.688187868 -1.22149676 -1.336154521 -0.0133292665 #> 29   0.473248723 -0.920006079 -0.41163937 -0.192271906  1.8306943617 #> 30  -0.166287669  0.825194830  1.61169474 -0.413066841 -0.9758599729 #> 31  -1.405237224  0.989463133 -0.28916851 -1.993535451  0.3213694337 #> 32  -0.764575889  0.849818967 -0.79650948 -1.184986448 -0.0611854855 #> 33  -0.175475152  3.436496754  1.75297451  1.027761051 -0.3360581577 #> 34  -1.342604188 -0.453637080  0.63122783  2.038336496 -0.8432383791 #> 35  -0.834394489  0.933835730  1.66724391 -3.032303252  0.2372042321 #> 36   0.451679662 -0.470642817  0.47918907  0.527239768 -0.5776132791 #> 37   1.374255472  0.784741466 -0.55851955 -0.978377428  1.4779184718 #> 38   0.760483208  1.660837153 -2.09938323 -0.822443478 -0.9817294148 #> 39  -1.015919243  2.753200675 -1.19936297 -0.474318554 -0.8359824456 #> 40   1.090958107  2.669232608  2.50866884  0.720715053  1.8066561022 #> 41   1.226512142  0.747287877 -1.92090008  0.560817395 -2.7701103552 #> 42   1.630039437 -2.442333889  1.37462992 -0.784019302  1.4211691511 #> 43  -0.049128773 -0.481847108  0.36566666  0.749608521 -2.3649842550 #> 44  -1.463338126  0.267127488 -1.21177245 -1.197616421 -0.0361563377 #> 45  -0.356772523 -0.253999887 -0.95645713 -1.200723118 -1.3567547909 #> 46  -2.791729451 -0.889764616 -3.00325703  0.683159058  0.7484180621 #> 47  -1.677396747 -1.916308933  4.11916566  0.592347704  0.2385866864 #> 48   2.075724635  1.737060081  2.74292596 -1.329959642 -1.4538482418 #> 49   1.998348271 -1.249452632  2.15665698 -0.565481825 -1.0880954477 #> 50   1.251829199 -1.520800298 -0.55798234  0.261735734  0.4178277875 #> 51   1.278480693  0.872069705  0.57744442 -0.452558474 -1.3742564227 #> 52   0.053850300  0.671075970  1.50189707  0.802232411 -0.1516019663 #> 53  -2.333767348  1.152933884 -2.89493046  0.647862062  0.9290721020 #> 54  -0.300038488 -1.795086483 -0.02165548  0.563965934 -0.5965739636 #> 55   1.312936605 -2.154397826 -1.20594619  1.605303319  2.6346242963 #> 56  -1.348375253  0.569976204  2.31970685 -0.440304269  0.4688596220 #> 57   0.272586816 -1.752594036  0.85128853  0.051414106 -0.5599012761 #> 58  -0.233668468  2.032731563 -0.88705158 -1.160421509  1.0846619949 #> 59  -0.961305404 -0.880104331 -0.76238842  0.454637280 -1.0394229954 #> 60  -0.706722723  1.439280808 -0.21887274  1.189108844 -0.1497437546 #> 61   0.161805358 -2.347451555 -0.32065369 -1.002180498  1.0157059925 #> 62   0.892133444  0.365681387 -2.40988389 -1.017043410 -1.1027656978 #> 63  -2.452949465 -1.749574021  0.08638994 -3.530524062  1.6535345080 #> 64   0.934356651  2.838103640 -1.08597584  0.554036235 -1.4371059289 #> 65  -1.308631305 -0.007703132 -2.25447427 -2.331397685 -0.7757456564 #> 66   0.698590941  1.965885808 -1.65096418  1.584115761 -1.8561695448 #> 67  -0.002127639 -0.419469524  2.04306137  1.511873856 -2.3990254112 #> 68  -0.314674067 -0.746044301 -1.86671148  1.168275785  2.3880000323 #> 69   0.899391029 -1.721908055  0.15883822  0.462205073 -0.5125944739 #> 70   0.437547556 -0.952661704 -0.16010666  2.326511732 -0.8188969983 #> 71   0.090419046  0.119629836 -0.25329985 -0.051290428 -1.4712423650 #> 72   1.053379039  1.069103506 -0.39503874 -0.547080364 -0.8243532015 #> 73   0.285576970  0.962628998 -1.00673478  1.278120484  0.8720381115 #> 74  -1.182466367 -0.139498039  1.78259940  0.541379127  0.4778623171 #> 75  -0.281568970 -1.189162043 -1.02915333  0.821569668 -1.6871939072 #> 76   1.655301939  0.847620028  1.69576361 -1.240721829  1.2407595765 #> 77   2.188762164  1.260112575 -0.36941015 -1.010837425  2.2139355184 #> 78  -1.749064997 -0.288659416  0.69979975  0.607169472  3.1574719260 #> 79  -2.493916620 -0.079167078 -1.45365887 -0.819824218  1.5004184227 #> 80   1.392727302  2.391389044  0.30551061 -3.152088115  1.5798689465 #> 81   0.737314920  0.330538615 -1.61718425  0.571510455 -1.4859111764 #> 82  -2.655219263 -2.039138783  1.09061062  1.542795686  0.3076788014 #> 83   0.746252285  0.335640326 -1.05115304 -1.433471723 -0.3172119004 #> 84   1.175687783 -0.194400091  0.82114583  1.607795855  0.1264510953 #> 85  -1.740234137  1.459710525  0.82272118  0.412384665  1.3607165106 #> 86  -1.285089661 -2.579939500  0.18610982  1.092964819 -2.1072792937 #> 87  -0.248204219 -2.794163937  1.83439506 -0.904370251 -2.1207377364 #> 88  -0.197402392  0.425304156 -0.76637343 -0.816042646 -1.3639428412 #> 89   0.281662878  0.762798247 -0.17499340 -0.202812716 -1.3380554638 #> 90   2.272320204 -2.924070533 -1.57270220 -0.121963975  1.3155083265 #> 91  -0.397389095  0.785941135 -1.57718928  1.982408428 -0.3443532203 #> 92   1.662897773  0.297845248  0.80966095  1.061088911  2.1302134385 #> 93   0.295065621  2.571897834  1.06800643 -2.231782595 -0.6155627347 #> 94  -0.121357416  2.078779074  0.96403716  0.121605820  1.1611406280 #> 95  -0.617807243 -1.206163653 -0.77172662 -0.607137819 -0.9963207873 #> 96   0.841574317 -0.047403899 -2.15002342 -0.465997525  0.5809493287 #> 97  -1.525044206  0.607906571  0.27179349  3.290751064  3.8086009067 #> 98   1.527640350  0.906287372  1.52076773 -0.325679940 -2.2194725964 #> 99  -2.315771677  0.043218743 -1.19313675  3.011429708 -1.4394162820 #> 100 -2.504046033 -2.008269353  2.03189945 -1.184015253 -1.8539014291 #> 101  1.204672738 -0.174839995 -0.79602569  0.070603989 -0.5627279976 #> 102  0.480393835 -0.111903269  0.06654446 -0.154676846 -0.4335682832 #> 103 -1.478976816  0.330157340  0.36759536 -0.318974833 -0.0510721904 #> 104  1.083372782 -0.231013423 -0.58547501 -0.147138087 -0.4643431102 #> 105 -0.132290115  0.301207461  0.13359322  0.060363253 -0.1558230543 #> 106  0.599026779 -0.159364940 -0.22105308  0.446192778  0.1052153013 #> 107  0.231454633  0.094295457 -0.12812618  0.553072490  0.6050768778 #> 108  0.032347319  0.296773101  0.48334603  0.599195756  0.0923077895 #> 109  0.562079691 -0.930063377  0.57802424  0.208111306 -0.1972542479 #> 110  1.126180970 -0.497015898 -1.28256671  0.016888905 -0.6292576688 #> 111 -0.344722952  0.523816979  0.58056322  0.464248043  1.2611682491 #> 112 -0.852149700  0.258399906  0.11785744  0.177999684  0.4110012160 #> 113  0.419633100  0.433560019 -0.54934613 -0.076615249  0.1221663254 #> 114  0.186562860 -0.434956336  0.85400125  0.447279723 -0.0376236144 #> 115 -0.090215814  0.358416757  0.33321331  0.187119302  0.0772293441 #> 116  0.186840041 -0.257605102 -0.06516826  0.341633732  0.3596528262 #> 117 -0.924882602  0.616285915 -0.37540287  0.006713197  0.2366479448 #> 118 -0.035922862 -0.049732394  0.26990278 -0.168053871  0.2388161055 #> 119  0.178406217  0.188207442 -0.18305338  0.557153273 -0.1828047588 #> 120 -0.276704060  0.297995902  0.20866828  0.025271062  0.2644113717 #> 121 -0.204011823 -0.094281764  0.20808531  0.092900433 -0.2755691407 #> 122 -0.723718826 -0.099039748  0.38233211 -0.037359465 -0.0403252843 #> 123 -0.277702377 -0.328673271  0.68441371 -0.028806322  0.1656655276 #> 124 -1.434795735 -0.049736338  1.28659240 -0.382193189  1.1103211753 #> 125 -0.237714227  0.400784091  0.51101838 -0.260240945  0.5170802850 #> 126  0.813992587 -0.711107719  0.46811370 -0.035595780 -0.2754422854 #> 127  0.174144725  0.320282592  0.58669301  0.431989943  0.2691214741 #> 128 -0.111912772  0.017712278 -0.17297874  0.151875985 -0.4752664065 #> 129 -0.270415752  0.762398700  0.17516442 -0.072675443 -0.3289968545 #> 130  0.157243139  0.701551764 -0.80069885 -0.280020502  0.1776635543 #> 131 -0.767137644  0.029068856 -0.28717151 -0.386343587 -0.3677910729 #> 132  0.228902749  0.335750203 -0.18049860 -0.277186056  0.0540388891 #> 133 -0.485343096 -0.437318049 -0.03011491 -0.394684676  0.7514267116 #> 134 -0.407797403 -0.249278519 -0.19223342 -0.115599584 -0.3364247924 #> 135 -0.868786972  0.213197772  0.76362395  0.267184027  0.2027254059 #> 136  0.123371177 -0.616557444  0.22920217  0.030436404 -0.2371431127 #> 137  0.588143820 -0.667957262 -0.32213937 -0.156143341 -0.3297715375 #> 138  0.487424769  0.093776876 -0.89813787  0.166013675 -0.4461295262 #> 139  0.303027106 -0.029527138 -0.35081137 -0.511014985 -0.4208828758 #> 140 -0.136995908 -0.256317276 -0.02028482  0.095960883  0.2574337197 #> 141  0.828255365 -0.726965766  0.12595982  0.048527898 -0.3571173845 #> 142  0.165746434  0.029144150  0.51751315  0.492696174  0.4326028922 #> 143 -0.180195396  0.355146680 -0.34114189 -0.072238772  0.3229351576 #> 144 -0.209333895  0.579280765 -0.23767029  0.068861991 -0.1372645662 #> 145  0.562461825 -0.396872954 -0.34770465  0.118855645  0.7087063389 #> 146 -1.481076688  0.050471324  0.07330577 -0.692462717 -0.4924579024 #> 147 -0.871984781  1.400091611 -0.38895146 -0.358946549 -0.1800593161 #> 148  1.028495284 -0.300724292 -1.28689785 -0.776082123 -0.1341926448 #> 149 -0.354908512  0.125536534  0.51605138  0.049619237  0.6053739815 #> 150  0.424760241 -0.170988532 -0.49234510 -0.637310731 -0.6703848618 #> 151  0.605503710 -0.657174222  0.28163388  0.042788879 -0.2754194034 #> 152  0.869043931  0.457963018 -0.29564114  0.362326716 -0.0229180473 #> 153 -0.622094521  0.213999971 -0.07121677  0.230882811  0.0127477995 #> 154 -0.944291778 -0.559360342  0.88893320 -0.603843040 -0.1581798611 #> 155  0.347423397 -0.024437780 -0.11418033 -0.346519059  0.0313917511 #> 156  1.263995861 -0.709920306 -0.44615250  0.058991481 -0.5065060084 #> 157 -0.922052780 -0.072934728  0.87572345 -0.048657005  0.1389763970 #> 158 -1.295585617  0.142908589  0.42785149 -0.613585165  0.6554449463 #> 159 -0.227666297 -0.310904468 -0.10122770 -0.531876302 -0.6337719299 #> 160  0.354357508  0.141393007 -0.20343128  0.162606927 -0.0911924299 #> 161  0.808609933 -0.967460468 -0.77341505 -0.127186592  0.3724796456 #> 162 -0.260341769  0.177139179 -0.06518454 -0.485387481 -0.2611820531 #> 163 -0.420943255  0.336847327  0.13692172  0.185533860  0.2488427557 #> 164 -0.267681864  0.693174591  0.14585430  0.093107454  0.1218547341 #> 165  0.441701361 -0.627564477 -0.18035977 -0.046644346 -0.9226996122 #> 166 -1.033380934 -0.236580296  1.12270670 -0.320731226  0.5206468713 #> 167  0.724149099 -0.298905524 -0.98065786 -0.115310845 -0.5745760291 #> 168 -0.164780149  0.307452293 -0.45356275 -0.072316511  0.0396201096 #> 169  0.579641641 -0.242398731 -0.56220083 -0.415211943  0.7364169703 #> 170  0.029223582  0.069688656  1.08833755  0.136528662  1.0655781678 #> 171  0.884152228 -0.195094034 -0.74786115  0.666370040 -0.3587766044 #> 172  0.370736880 -0.537199652 -0.37629196  0.255123075  0.1126023185 #> 173 -0.459855398  0.951220141 -0.25984163  0.620214525 -0.9525914975 #> 174 -0.651361595  0.318944413 -0.31658438 -0.601867211 -0.1985842517 #> 175  0.614096806 -0.192584700  0.45766888  0.449679535  0.1931882290 #> 176 -0.323754869 -0.272056180  0.46421737 -0.609561799 -0.6798647175 #> 177  0.371322519 -0.425988012 -0.27177496 -0.250153846  0.6361021079 #> 178 -0.200180454 -0.042686616  0.30555957  0.709164718  0.7270300031 #> 179  0.726821954 -0.251290113 -0.19668566  0.166597149 -0.1119788653 #> 180  0.827233305 -0.346253354  0.18572732  0.194838848  0.0333705743 #> 181  0.327629145  0.058614122 -0.36003223  0.424347459  0.2011022952 #> 182 -0.334913486  0.335925693  0.39489849  0.307458013  0.3309555454 #> 183  0.993853209 -0.215488161 -0.25952465 -0.177322510 -0.1286827279 #> 184 -1.019572583 -0.278644997  0.08558987 -0.588804493  0.3200683701 #> 185  0.587572452 -0.164626154 -0.26182938 -0.276011225  0.5798446735 #> 186 -1.552702236  0.168444747  1.06127659 -0.173124057  0.2841800726 #> 187 -0.244899651 -0.108512500 -0.24877480  0.354893538 -0.0808184742 #> 188  0.507225119 -0.076808167 -1.00339834 -0.070991781 -1.1684541712 #> 189 -0.140126039  0.248455357 -0.35670872 -0.131102920  0.2000050673 #> 190  0.077113448  0.614802329  0.27579887  0.217249532 -0.3161349651 #> 191 -0.573966112  0.324747163  0.86567495  0.333625994 -0.0105200221 #> 192  1.348538318  0.094272402 -0.66367303  0.444838311 -0.3611209050 #> 193  0.232726585  0.104313204 -0.11786872 -0.280622341 -0.8875500572 #> 194  0.458193632  0.621511460 -0.68815813  0.974824443 -0.3304127500 #> 195  0.311383385 -0.376836479  0.38501480 -0.184972606 -0.0750409068 #> 196 -1.572495611  0.186723841  1.51287171 -0.626044624 -0.1058722036 #> 197  0.647911384  0.286897953 -0.75276693  0.383405204  0.3211227652 #> 198 -0.524531599  0.431444025  0.12843444  0.066627209 -0.3309837755 #> 199 -0.233916137 -0.076077546  0.44523301 -0.024408902  0.7494581027 #> 200 -0.365647904  0.399881765 -0.31322518 -0.143750561  0.0002252966 #>             pc40         pc41          pc42         pc43         pc44 #> 1   -0.848403408 -0.857647658  2.4053277058  2.634368623 -2.700711638 #> 2    0.408466267  0.243776615  0.9994379206 -0.533708539  1.858573453 #> 3    0.210347286 -0.406926725 -0.1763680736  1.625448872  2.010908591 #> 4    0.302987823 -1.498950488 -0.5660822940 -1.829721650 -0.843782687 #> 5   -0.566253151  1.416897662  0.1379575707  1.127460086 -0.350028266 #> 6    0.811503783 -3.583659555 -1.4446359885  0.663778887  0.852847539 #> 7    0.048356827  1.535781600 -0.3075561701 -0.062399353  1.421173941 #> 8    0.625046110  1.157183475 -0.6474312654  0.403297817 -1.820736560 #> 9    0.118494867 -0.635816961 -0.0634741981  0.876154896 -1.599220032 #> 10  -2.097058137 -0.893859238 -0.0202435628  0.119855028  0.765288837 #> 11  -1.765234170 -0.035723284 -0.5428390359  0.356195328  1.672202225 #> 12  -1.021547733  1.007557660 -1.0881217568  2.060715716  0.693976434 #> 13   3.357941120  1.183330473 -0.3592547772 -0.838233651 -0.276629892 #> 14  -0.820715109 -0.063887103 -0.1338661433 -2.971228108  0.512815324 #> 15  -0.306413848  1.165978519 -1.9240371010 -0.440178833 -0.979320085 #> 16  -0.990820926  0.900396563 -1.8478918220  1.216452170  0.103543701 #> 17   0.398150196  0.017267877  0.4148498218  0.904464546  1.856001181 #> 18   0.914303564 -0.046878176  1.0752856132  0.293385094 -0.584741500 #> 19   2.198292980 -0.855494548  0.1017930575 -0.896979736  0.453037650 #> 20   0.576339543  0.001588489  1.3227341089  1.117979234  0.103841240 #> 21  -0.975901858 -1.184794173 -1.0239698215  1.560848214  0.154929251 #> 22  -1.628683913  1.619619266 -0.3569771370 -2.608120637  0.031914442 #> 23   0.720985888  0.393286422  0.5032951126  2.015610319  0.532656506 #> 24  -1.944362770  0.181711131  0.6271795337 -1.553380394  1.124612273 #> 25  -0.588049198  2.011406829 -2.0086018382  0.681066804  0.446361542 #> 26   1.079856071  2.048484976  0.9939831065 -2.570478537 -1.594717794 #> 27  -1.488174316 -1.415360727 -2.0079560094  0.638322778 -1.502279165 #> 28   1.045780732 -2.505942035  0.1838864231 -0.604462173 -0.726270829 #> 29   0.867963118 -0.847021217  0.7522719624 -0.752683213 -0.610258340 #> 30  -2.506393542 -1.684469552 -0.1819051468  0.549944932 -0.767985504 #> 31   0.350551969  0.185303106  0.5803664705 -0.014173117  0.734501507 #> 32   1.696029790 -3.684774366 -0.8418390781  0.046034280 -0.942675518 #> 33   1.304600703 -0.668565137  0.9338667716  1.298984470  1.916052918 #> 34  -1.243394857  1.375187133  0.0385238070  1.765282860  0.897516250 #> 35   2.006405648  2.017438146  0.0381819116  0.628244185  0.030074607 #> 36  -0.558696343  3.040408268  0.7570616374 -0.190744393 -1.996797095 #> 37  -0.405309436  0.548669199 -0.8387575656  0.701383660 -3.247772680 #> 38  -1.199294367  2.908954144 -0.7351214147  0.433703178  1.159205057 #> 39  -0.756833216 -2.747790147 -1.7645320241 -2.676015986  1.736118760 #> 40   0.102526534 -0.413957337 -1.0101313084  1.668831647  0.145915910 #> 41  -2.870770619 -0.393614198  0.5716425461  0.137272132  1.240084280 #> 42   0.859003836 -1.022969185 -1.6683131367  0.422878725 -0.982469994 #> 43  -0.544484968 -0.341794500  1.2328670306  0.346509420  0.825675138 #> 44   2.977656759  1.438118502 -0.3555472818  1.428465308 -0.629648471 #> 45  -2.086093711 -1.312934560 -0.3648934409  0.716017985  2.165066589 #> 46  -1.062467122  1.474456313 -3.7105752382  0.554224748  0.022979419 #> 47   0.022992932  0.156927654 -1.1079705400 -1.213044311 -1.619760792 #> 48   1.312855649  0.759408293  0.2599067317  0.528992788  0.256182544 #> 49  -0.783677427 -0.494159590 -2.9279909384 -0.675140381  0.301480803 #> 50  -0.217567796 -0.597992917  1.1618014836 -2.093966324  0.949797264 #> 51   1.453312237  0.546831621  2.8892125167 -0.627137650 -0.315824406 #> 52  -1.156644364  0.513013823  0.5602056357  1.087268336 -0.031018191 #> 53   0.653623546  2.468042950 -1.1327636825  0.409645911 -2.174078587 #> 54   2.220583311  0.009357303 -0.4057048317 -1.007298368  1.007734352 #> 55   1.372403372  1.625717183  1.0095254607 -1.314801410 -0.994088554 #> 56   0.237020836  0.550711561  0.3124277269  2.343614910 -1.137408080 #> 57   0.250614602 -1.129132902  1.1456058762  1.386487959  0.791349461 #> 58   0.180347158 -0.574988190  0.0254318663 -0.943910175  2.626901839 #> 59  -0.620486296  0.395501365  0.4550884153  0.508054037  1.254557939 #> 60  -1.787601588  2.238730863  3.3880875244 -0.689486658  0.037296061 #> 61  -0.060338350 -0.003710168 -0.4764576956 -0.147008627 -0.027263473 #> 62   0.111097201 -0.685993342 -3.2744370380  1.239985431 -0.042501666 #> 63   0.738873925 -1.318047737 -1.0133735803 -3.504304815 -0.049826822 #> 64  -0.951784885  0.331995273  1.1269163576  0.874128519 -1.622368555 #> 65  -2.009896811  0.563000714  2.3215007336 -2.006554142 -0.758170077 #> 66  -1.278914094 -1.682322384  1.8120974135 -0.072398785 -1.644061006 #> 67   2.963579500 -1.208031294 -2.6368006681  0.752741927  0.627918627 #> 68   0.903335297  2.423997393  1.4134213169  0.390817191  1.822536740 #> 69  -0.243613278  0.883757664  0.5725111297 -0.289102509 -1.084149691 #> 70  -1.620191536 -1.472498143 -1.2593322493  0.597474865 -0.094507804 #> 71   0.407824028  1.437185472 -2.2764873623 -2.093321328  1.002443332 #> 72   0.440008767 -0.007259549 -0.3053492833  2.319091567  0.574005297 #> 73   1.509130078  1.293415256  1.2734618999 -0.550826496  1.587852317 #> 74  -1.899509383 -1.159405210  0.4628885486  0.493418219 -2.098268530 #> 75  -0.360645179 -2.415654485 -0.6407374576  1.335282931 -1.282575490 #> 76  -1.690351128  1.034270649 -1.8777015532  1.686941722  0.381585503 #> 77  -0.926611440 -2.832677459  3.0784150490  0.127746787 -0.332018227 #> 78  -0.828007913  1.436727802  0.0080721963  0.563837181 -0.734851398 #> 79   1.685363531 -1.032848445 -0.0003296215 -0.931638612  0.999144243 #> 80  -1.453677455 -0.341654350  0.3580760987  0.531952129 -0.692387038 #> 81   3.322776118  0.618543894  1.6710695923  0.772979817 -0.002695588 #> 82  -0.300242936 -1.322397116  2.3508372400 -1.050378849  0.995360879 #> 83   3.492344737 -0.046249004 -0.3504339352  0.975651050 -2.573015880 #> 84  -1.876134055  1.325025837 -1.5350122527 -0.397419357  0.348048496 #> 85  -0.004657687 -0.594100865 -0.6977303202 -1.051984266 -3.100757030 #> 86  -2.303213940 -0.441261139  1.5839712406 -0.569762370 -0.388542914 #> 87  -0.755046656  0.379922868  0.6074258360 -0.030728371  0.835574203 #> 88  -0.287442860  1.362197136  0.2590776395  0.247985689  0.382201779 #> 89   2.278439284 -1.515584027  0.7831570936  1.012985433 -0.054599438 #> 90  -0.632946007 -0.332411249  2.0411463859 -0.605680828  0.709174523 #> 91   0.219806909  1.844772296 -0.2109899651  0.907893065  3.182054938 #> 92  -0.783145125  1.108635122  0.0524684129 -1.890388756 -0.899121608 #> 93  -2.218939815  0.294432036 -0.9340224705 -4.238070841 -0.123065883 #> 94  -0.224099859 -3.066760636  0.2633820183 -0.608902419  0.126594676 #> 95   0.693882215 -1.796271379 -0.5676197551 -1.492796222 -0.304435982 #> 96  -0.575691271 -0.852760962  0.4379786538  1.564785086  0.031255208 #> 97   1.509704698 -0.586270863  0.7195078585 -0.160396158  2.695483190 #> 98   3.228463841  0.726423872 -1.4100214130 -0.842927514  1.040096793 #> 99   1.832555189 -1.191461170  0.3329440180 -0.723482668 -2.159477748 #> 100  0.768470277  0.842758251  1.7459067993 -1.096334387 -2.008539717 #> 101  0.055813473  0.016255878 -0.1669856369 -0.320677905  0.421313259 #> 102  0.274019127 -0.207920539  0.3304345434  0.609335965  0.322445707 #> 103 -0.132638549  0.022278643  0.0533613627  1.011709786  0.411683241 #> 104  0.067451437 -0.780838359  0.6640612584  0.116510603  0.121721146 #> 105  0.240527541 -0.259384470 -0.5284496644  0.628594782  0.128184658 #> 106  0.120394358 -0.332849920  0.1136569430 -0.115163090 -0.711669435 #> 107 -0.007777663 -0.847461067 -0.3724710372 -1.026450689 -1.196860631 #> 108  0.418239956 -0.237632013 -0.5238322384 -0.555946117 -0.751614185 #> 109  0.051977388 -0.202260990  1.1408325623  0.299295068 -0.317292023 #> 110  0.265754605  0.284925305  0.5159650778  0.241125856 -0.073862808 #> 111  0.305653808 -0.557771071 -1.2487784499 -0.598116586 -0.023826832 #> 112  0.316676143  0.255720551  0.0275812184  0.430880849 -0.772147646 #> 113  0.328229416  0.126201185 -0.3270666504 -1.257303314  0.398981774 #> 114 -0.441041031  0.344872060 -0.2242475672 -0.974209688 -0.378803510 #> 115  0.333073819 -0.421602481 -0.1519326850  0.386507057 -0.135263974 #> 116  0.190950929 -0.169139956 -0.0782690409 -0.048160138 -0.326150353 #> 117  0.385481019  0.654053660 -0.1598225058  0.480367781  0.058365055 #> 118  0.037980421 -0.003765450 -0.1030114451 -0.259331315  0.106518053 #> 119 -0.202690478  0.453417129 -0.5909316501  0.015975993 -0.492327905 #> 120 -0.099593873 -0.037979379 -0.0832381203  0.284112043 -0.304265158 #> 121  0.082975266  0.450219942  0.0742473295  0.226793105 -0.002622178 #> 122 -0.183287264  0.662609052  0.5320129295  0.505387185 -0.629834176 #> 123  0.075555503 -0.386333082  0.4974508856 -0.219712651  0.581907862 #> 124 -0.281840082 -0.048706495  0.7779231515 -0.091069884  0.076102609 #> 125  1.002702693  0.378033289 -0.4239434387 -1.058344717  1.263620140 #> 126 -0.097515253 -0.614353010  0.3240342595  0.022763191  0.670971678 #> 127  0.067658872 -0.487872182 -0.8715274972 -0.412303833  0.598102169 #> 128 -0.401515569 -0.096122413  0.1510513242 -0.271172979 -0.353786951 #> 129  0.375608845  0.086530351 -0.1050805038 -0.048465177  0.596640283 #> 130 -0.066600361  0.392438318 -0.7288590979 -0.335631733  0.321369804 #> 131 -0.369437125  0.947822165 -0.1702990499  0.148880212 -0.640037619 #> 132 -0.133293884 -0.497743659  0.0428289503 -0.764673640 -0.479735953 #> 133  0.424508858  0.358109322  0.2764125633 -1.140322240  0.449873182 #> 134 -0.243751877  0.048713109 -0.2985043456  0.051490853  0.249574837 #> 135 -0.032552935 -0.187096799  0.0606520395  0.288736582 -0.636745630 #> 136 -0.212117329  0.073551341  0.8516555703 -0.240979050 -0.257367849 #> 137 -0.689170275 -0.183388513  0.5070871712 -0.205517455 -0.297484332 #> 138 -0.050278023  0.099506012  0.1316957105  0.239177986 -0.630434118 #> 139  0.062047275 -0.026359040  0.1228742905 -0.002563243  0.660292113 #> 140 -0.370200218  0.771274567  0.2142748508  0.086568998 -1.129214034 #> 141 -0.561721228  0.131765692  0.2061396493 -0.805138304 -0.112753623 #> 142 -0.026429805  0.452786802 -0.2724208882 -0.471937928 -0.191868841 #> 143 -0.192470458 -0.349194640  0.2195275166  0.112886712  0.613601573 #> 144 -0.035021225  0.131852074 -0.5743984175  0.134788705  0.595371644 #> 145 -0.039288461  0.445048839 -0.5390844446 -0.878546567 -0.207478180 #> 146 -0.651206530 -0.104891973  0.6626625040  1.074167854 -0.221022007 #> 147 -0.233542613 -0.339383295 -0.5170673491  0.240938439  0.111665815 #> 148 -0.126769059 -0.036856578 -0.0474857447 -0.684054335  0.488606664 #> 149 -0.028223205 -0.209903236 -0.2135456447  0.190416103  0.027831801 #> 150 -0.167369976 -0.311795933  0.5962404730  0.338645973  0.582283786 #> 151  1.059817237 -0.300321172  0.8762733057 -0.221553201  0.181645885 #> 152  0.641249591 -0.320941787 -0.3607312891  0.198977493 -0.017642941 #> 153 -1.163310439  0.139223281 -0.8165671948 -0.287485371 -0.040902609 #> 154 -0.459903237 -0.316366287  0.7941787692  0.384091805  0.336537432 #> 155 -0.142215816  0.612023417  0.5351076862  0.408709327  0.420910930 #> 156 -0.043708405  0.468686421 -0.3557091263 -0.540088479  0.042675408 #> 157 -0.497859617 -0.313962245  0.3807220615  1.343611076  0.295134786 #> 158 -0.260980026  0.159526116 -0.1994436529  0.592090121  0.840575228 #> 159 -0.043151360  0.088403539  0.1213393053 -0.141694373  0.396805839 #> 160 -0.009358051 -0.050550265  0.2000000890  0.162714575 -0.740230387 #> 161  0.388007679  0.535849876  0.4429688264 -0.568746527  0.251636855 #> 162 -0.251944201 -0.142749614 -0.3753719384  0.086308337  0.377027753 #> 163  0.176309705 -0.149514386 -0.0131083078  0.412547684  0.042805342 #> 164  0.055304506  0.064527368 -0.0849972891  0.512403544  0.119010194 #> 165 -0.347658258 -0.557937382  0.8564633231  0.554602358 -0.032108504 #> 166  0.098269323 -0.526759359  0.8271247599  0.713648293  0.752971574 #> 167  0.229283128  0.677591467 -0.0553780814 -0.222887203 -0.074558847 #> 168 -0.298581498  0.211246316  0.0729143369  0.030806650 -0.512741633 #> 169  0.451834492 -0.235737849 -0.4539492199 -0.955208530  1.083123211 #> 170  0.686623687  0.048090372 -0.0110419901 -0.267413146  0.520667160 #> 171 -0.043914697  0.541674579 -0.1402582186  0.550932278 -0.465887954 #> 172 -0.422785739  0.947972863 -0.1777067791 -0.328176367 -0.628222451 #> 173  0.164824769 -0.044631339 -0.7299306484  0.423277367 -0.065643419 #> 174 -0.150853354 -0.075184135  0.2915174574  0.155932174  0.709610642 #> 175  0.401458727 -0.369197734 -0.6626822832 -0.450595691  0.493041664 #> 176  0.024169329  0.546696194  0.5876682200 -0.166770016  1.340507074 #> 177  0.159101384 -0.346484216  0.5598777795 -0.124871041 -0.385369620 #> 178 -0.129645441 -0.138135027 -0.6035140573 -0.095864362 -1.134251003 #> 179 -0.171793024 -0.448557477 -0.0684626160 -0.042843643 -0.362603310 #> 180  0.155903576  0.749117927  0.0668901418 -1.238172410  0.006312972 #> 181 -0.032327048  0.037181788 -0.5083947764  0.398173070  0.130774377 #> 182 -0.235795678 -0.494712231 -0.1973786935 -0.118543930 -1.205914162 #> 183  0.044061854 -0.569355097 -0.2117168077  0.076611633  0.595926410 #> 184  0.288336571 -0.155727874  1.1335648153  0.148542582 -0.271468277 #> 185  0.078974812 -0.401560399  0.3834609337 -0.068259743  0.301522487 #> 186 -0.341720872 -0.468635851  0.5507889175  0.347560950 -0.070726595 #> 187 -0.138949349  0.918515001 -0.3062636405  0.199179107 -0.670435645 #> 188 -0.098173796  0.272607234 -0.1435412224 -0.294816584 -0.010424338 #> 189  0.422827447  0.509022474  0.3683947658 -0.796068016 -0.516727015 #> 190 -0.072792709  0.099965316 -0.4812629607  0.117934335 -0.619820759 #> 191 -0.324701951  0.311641882  0.0244238738  0.588753028 -0.196803317 #> 192  0.626325988  0.121612745 -0.0930860273  0.286888323 -0.358839446 #> 193  0.471367542  0.135956742  0.8132860442  0.098677316 -0.118526679 #> 194 -0.369680714  0.226561479 -1.3826643217  0.612304650 -0.703014978 #> 195  0.196260610 -0.147296393  0.4643383969 -0.305855172  0.438999809 #> 196 -0.103619973 -0.295148431  1.4428587524  1.613321420  0.952940675 #> 197  0.003214725  0.264347659 -0.9315120384 -0.210959802 -0.363959886 #> 198 -0.244002106  0.119739229 -0.6865558658  0.490993302  0.387997179 #> 199 -0.185494832 -1.111646750  0.1427626027  0.416258034  0.326504867 #> 200 -0.309105691  0.284582206 -0.7809567771 -0.050484905  0.109519777 #>             pc45         pc46         pc47         pc48         pc49 #> 1    0.156498718 -0.418060091  2.022228684  0.927809030  0.636453415 #> 2   -0.299600896  2.159174187 -0.038849459 -0.899697103  0.960243189 #> 3    0.402939597 -1.599207687  0.203637538  1.236836517  1.309092275 #> 4   -0.195625533  0.662865454 -2.306167462 -0.114999123  0.415114518 #> 5    1.250446284  0.186495137 -0.660255081  1.184669497  0.222748252 #> 6   -1.051676801  2.270551003 -0.053169832  1.334888555 -1.017071861 #> 7    0.049595182 -1.170484430  1.531557124 -1.298092159  0.780676345 #> 8    0.363722372  0.100551847  0.241709498 -0.473013542  1.267073311 #> 9   -0.935067858  3.133396622  0.892125788  2.312852392  2.929466153 #> 10  -1.176476854 -0.670130234  0.325814483  0.931660022  0.678967458 #> 11  -0.491727176 -0.781232717 -2.111714760 -0.622857081  1.254972567 #> 12   0.050418191 -0.403752989 -1.696887895 -0.975491522 -3.086938954 #> 13   1.446530275  0.793622309  0.406864349  1.919650583  1.079666273 #> 14  -0.404877456  0.457012186  0.084675520 -1.374850980  0.228766881 #> 15  -2.765506245  0.446590652  0.603872215 -0.820077329  0.396127594 #> 16  -0.765413081  0.498333051 -0.425722641  0.215591230 -0.278390260 #> 17   1.558533192  0.626434647 -1.347312140  0.801528282 -1.160324209 #> 18   0.500127690  2.202514441 -0.353023713 -1.137053453 -0.973057860 #> 19   0.164133280 -1.465336633 -0.101084257 -0.198585705  0.177153578 #> 20  -0.028849997 -0.398674722 -1.136285209  0.094831728  0.152256094 #> 21   2.331827136  0.021030960  1.061026161  0.490114787  1.112200852 #> 22   1.105715819 -0.094975815  0.160279023  0.146544926 -0.409709416 #> 23   0.950465690 -0.106249690 -0.086168246 -0.252486013 -1.900589328 #> 24  -2.550379252  0.289982390  1.008648044  1.826722750 -2.381532669 #> 25  -0.063152062 -0.811778496 -1.723710066 -0.341461660 -0.643411792 #> 26   0.217799658 -0.308572033  0.440045218  0.555070312  1.249655595 #> 27   0.171145865 -0.809502630 -0.702282839 -1.838427212  1.938007430 #> 28  -1.211312905  0.659488442  1.471772349  0.342071621  0.783540243 #> 29   0.355948183 -1.255884868  0.097730022  2.988188763 -0.763194504 #> 30  -0.268704695  2.245407244 -0.198797027 -2.343637905  0.717479864 #> 31  -0.811313175 -0.698119130 -1.304445103 -1.380259433 -0.387288092 #> 32  -0.328232200 -0.299228550  0.640759662  1.045939837 -1.404869041 #> 33  -1.048696123  0.483875822  0.369888692 -0.329903364  2.189641226 #> 34  -0.169595812  1.751447344 -0.977890220  3.573258740 -1.199575114 #> 35   0.105254283 -2.529553576  2.238424719  0.652004706  0.372297173 #> 36   0.321709800 -0.931225989 -1.998476535 -1.527865286  0.095287061 #> 37   2.523071918  0.767157926  1.236674962 -1.496383763  0.712959534 #> 38   1.415775452  0.850260130 -0.881262477 -0.499294052 -0.250480563 #> 39   0.608409116 -1.015728405  0.669724007 -0.153066364  1.675872348 #> 40   2.889590459  0.553822109 -1.727495807 -0.601566821 -1.731417301 #> 41   0.827215358 -0.263103773 -1.888162050  1.696911967  2.578196390 #> 42   0.940424239  0.198901523 -0.374278712  0.256539041 -1.121002912 #> 43  -0.926592838 -0.139537287 -1.434840957 -1.444687649  1.376367822 #> 44   0.115433027  1.364269061 -0.121830452  1.348853123  0.351911973 #> 45  -0.206374913 -0.809001535 -1.211188971  0.678588269  0.650084082 #> 46   1.067656534 -0.422032950  1.904895488 -0.470603857 -0.007379857 #> 47  -1.078817205 -2.312583690 -1.630850898  1.102993880 -1.336983331 #> 48  -0.596149015 -1.323742340 -0.847066008  1.861176759  0.226320737 #> 49  -2.902131967  1.332221100 -0.829582961 -0.768620081 -0.425761095 #> 50  -0.052249435 -1.208500141  0.524507524  0.599227120  1.240097866 #> 51  -0.399589212 -1.207005431  0.557330775 -1.071613609 -0.474461930 #> 52  -1.158845504  0.191487884 -2.011124964 -1.431254789  1.418510683 #> 53  -2.119179829 -1.279011005 -0.568573569  0.377987768 -0.385909278 #> 54   0.307364427 -1.114672669  2.002529502 -1.486691801 -1.656137401 #> 55   2.229193463  1.934673431  1.093462242 -1.599255065  0.206836755 #> 56  -0.936003560 -0.350469089 -0.759816036 -0.670381856 -0.004901215 #> 57  -0.178769781  0.690751861  1.673832634  0.358039366 -2.936581804 #> 58   0.341807167  1.362136227  0.483469073 -0.216557758 -0.892297527 #> 59  -0.046932450 -0.287135593  0.758163768  0.085644308  0.227514483 #> 60   0.723573927 -2.686896106  2.067081375  0.013934542 -0.181529956 #> 61   0.089366043 -2.150447636 -0.218209867  1.697922877  0.753135481 #> 62  -2.250619092  1.030123230  0.262134102 -0.039127904  1.430001241 #> 63  -0.231824328 -0.478712504 -0.170973938 -1.660192318  1.816316581 #> 64  -3.798864060  0.183018211 -0.702777778 -1.429470694 -3.267284057 #> 65   1.189541600  0.237111514 -1.249557753  0.492537525 -0.348553181 #> 66   1.557892742  0.059282558 -0.412580830 -0.268932537 -1.631159658 #> 67  -0.666850322 -2.014292850 -0.509251341 -0.199870561 -1.116089002 #> 68  -1.225577563 -0.269012233 -0.388552440 -1.209796865  0.355944800 #> 69  -2.117641689  1.621206224  2.377392428 -0.596774728 -1.144402577 #> 70  -0.185724807  0.338130636 -0.783735513  0.117334332  1.240502600 #> 71  -1.210656690 -0.679654470  1.480396616  0.423274406 -1.559517193 #> 72   0.531142048  0.558271571 -0.033501242  0.666165802 -0.259813485 #> 73  -1.859649146  0.851433415  0.920007669  0.556522338  2.053879490 #> 74   1.541113045  2.082366908 -0.855667303 -0.649971401 -0.692440477 #> 75   1.387692474 -2.926469088 -0.656676455  0.924644380 -0.711139859 #> 76   0.760209276  0.670550272  1.408525360 -0.320009294  0.443187069 #> 77  -1.741668882  0.905591850  2.022741904 -0.304134870  0.022682448 #> 78  -2.219930938 -0.177453064  1.336093362  1.912074961 -0.248115444 #> 79   2.343851084  0.442401748 -1.195415939  0.765054392 -0.211818074 #> 80  -0.644116773 -1.736643550  0.291070435  0.265854550 -0.650312811 #> 81   0.067325159 -1.386413670 -0.396489428 -1.749048067  0.533932877 #> 82  -1.568146745  0.108976911 -0.069264137 -0.269611840 -0.145771383 #> 83  -2.388571645 -0.420783760 -1.184225710 -0.693283196 -0.012521408 #> 84   0.240226194 -0.196448825  0.285236826  0.737654984 -0.707804111 #> 85   1.136888949 -0.377919234 -0.648093212  0.329123430 -0.474804294 #> 86   1.401088378 -2.197357494  0.069816868  0.930665326 -0.597944824 #> 87   1.053633796  1.856631745  3.349881067 -1.798583334  1.024899730 #> 88   1.153931978  0.940140999 -1.148758495  0.597840642 -0.711081744 #> 89   0.190710738  0.167469566  1.170741905 -0.601704024 -0.736727595 #> 90  -0.257569538  0.163144749 -1.035483054  0.609212878  1.195833651 #> 91   0.912563388  0.376514239 -0.206575263 -0.269707988  0.345614253 #> 92  -0.685342113 -1.578485024 -1.179248462  0.083162454  2.544939315 #> 93   1.765323847  0.979282312  1.460631192 -0.006689776 -1.419204560 #> 94  -0.241375298  1.027016864  0.043487132  1.243021413 -1.354340584 #> 95   0.769654145 -0.004929209  0.047611396 -3.379625839 -1.980532791 #> 96  -0.260606142 -0.639003243  1.607526247 -2.203182672 -0.323962431 #> 97  -1.198574833  0.004645661  1.697335553 -0.255387869  0.003790294 #> 98   2.860884214  2.897561263  0.202950926  1.292867883  0.889840441 #> 99   2.300382029 -0.045707131 -0.910621856 -0.183475542  0.020173804 #> 100  1.110760350  1.237726659 -1.226782301  1.807998884  0.874862086 #> 101 -0.244334544 -0.289593834 -0.082302542  0.738676075 -0.368312724 #> 102  0.310382054 -0.755631745 -0.256044777 -0.284778450  0.262354723 #> 103  0.564296749  0.534432792  0.624428622 -0.552670746  0.515274235 #> 104  0.191483053 -0.537392906 -0.489593698  0.393675092 -0.205008322 #> 105  0.125703219 -0.445125976 -0.235072417  0.151420421  0.603546413 #> 106 -0.304922142 -0.369123586 -0.596940260 -0.093298022  0.530921803 #> 107 -0.824374912  0.104012487 -1.077043315  0.432839270  1.133841266 #> 108 -0.234039230  0.097319320 -0.228462035  0.077976071  0.506056207 #> 109  0.172288523 -0.344306095 -0.708763176 -0.947343068  0.108000731 #> 110 -0.322152689  0.207801967 -0.611446069  0.471231964 -0.128805095 #> 111  0.173569326 -0.430861585  0.282340379 -0.545552585  0.515472731 #> 112 -0.588071445  1.349127565 -0.421109661 -0.090402569  0.858004874 #> 113 -0.146233612 -0.310384398 -0.472425351  0.100807101 -0.518880439 #> 114  0.226763299  0.467771999 -0.046009460 -1.042841729 -0.275370714 #> 115  0.322492927 -0.780191864  0.090568296  0.088193399  0.399836196 #> 116  0.301069865  0.350221884 -0.469560697  0.103927959 -0.449283293 #> 117 -0.292474804  0.916029606 -0.156283632 -0.204848390 -0.446300073 #> 118 -0.044729885  0.051970877 -0.294474003  1.017568812 -0.088859782 #> 119  0.214420680 -0.246379742  0.835772612  0.329669583  0.100314660 #> 120 -0.130085142 -0.348828839  0.557854704  0.160771634 -0.111097700 #> 121 -0.363246275  0.245468220  0.090622540  0.187618414 -0.024496900 #> 122 -0.158138341  1.064137806  0.085628280 -0.262224418  0.061564020 #> 123  0.386671072 -0.317627193 -0.337579686 -0.384538297 -0.445554508 #> 124 -0.580931662  0.695669245 -0.567880984 -1.203616243 -0.274901224 #> 125 -0.612183207 -0.214620610 -0.981307674 -1.462340971 -0.296216233 #> 126  0.683981892 -1.208346840 -0.710699417 -1.165167814 -0.022647779 #> 127  0.194111667 -0.551809849 -0.075285059 -0.817357771 -0.173245175 #> 128  0.304525275 -0.538805961  0.723147183  0.407924851 -0.691266086 #> 129 -0.081405565 -0.045888529 -0.652870863 -0.098638545  0.300104452 #> 130 -0.558617366  0.206390651  0.091601357  0.836896947  0.230031297 #> 131 -0.206931629  1.031843581  1.286018909  0.124156610 -0.457708540 #> 132  0.278119599 -0.727463308  1.063692181  0.745673313 -0.430174621 #> 133 -0.556868946  1.789440322 -1.940994884  0.630237499 -0.428631332 #> 134  0.618076392 -0.065649339  0.791239794  0.196020707 -0.986116853 #> 135  0.285868328 -0.104109318  0.405908256  0.474589936  0.130940171 #> 136 -0.300409411  0.409166071 -0.613067795  0.314446699 -0.034574212 #> 137 -0.039277872  0.241484665 -0.250787699  0.744080228  0.335817962 #> 138 -0.232033408 -0.549479159  0.639322540  0.278977583  0.057173075 #> 139 -0.001217145 -0.248153433 -0.380550751  0.436477915 -0.468759657 #> 140 -0.153118586  0.513798660  0.155963235  0.305785004 -0.550669584 #> 141 -0.362255826  0.208781622  0.088998746  0.056605600 -0.312028789 #> 142 -0.233128273  0.482945743  0.183848938  0.091279688  0.274756636 #> 143  0.395517961 -0.061822979 -0.277596034  0.169058882 -0.173276811 #> 144 -0.106627316 -0.166863309  0.106184183 -0.285300021 -0.002316570 #> 145 -0.252730917  0.486837080  0.155303605  0.286703960 -0.678027176 #> 146  0.202110162  0.625022865  1.544198411  0.856587273  0.168982400 #> 147 -0.477151310 -0.149789847  0.556427154  0.546489413  0.533910292 #> 148 -0.195451334  0.165575408  0.068170209  1.678560379 -0.867044810 #> 149  0.457968318 -0.044086004 -0.011895622 -0.917471926 -0.099320856 #> 150  0.144806796 -1.068973753  0.531892699  0.480036709  0.238451313 #> 151 -0.134502421  0.358468429 -1.453282707 -0.826829533 -0.535276912 #> 152  0.186483267 -0.651588079 -0.466192773 -0.069742638  1.063159379 #> 153  0.020498982  0.829983355  1.038559023  0.399051539  0.379098125 #> 154 -0.216823644  0.360621637 -0.001874187 -0.714518525  0.224821158 #> 155  0.048073145  0.234292693 -0.556819204 -0.432253799 -0.165145012 #> 156 -0.083404867  0.151489388  0.164156174 -0.220563811 -0.390620856 #> 157  0.560300602 -0.085715427  0.808725431 -0.761717157  0.529950470 #> 158  0.238880270  0.117511733  0.650741692 -1.140673814 -0.050813053 #> 159 -0.044931065  0.308903207  0.172551508  0.691910483 -0.823715286 #> 160 -0.288374211 -0.206974396  0.167211507  0.080021703  0.331175689 #> 161 -0.451794350  0.486701125 -1.185173552  0.365493317 -0.888290379 #> 162  0.012658714  0.072150256  0.401687196  0.610708310  0.053970314 #> 163  0.330130745  0.415725306 -0.262559692 -0.240956689  0.201241857 #> 164  0.318449304 -0.568095309  0.226388994 -0.752392995  0.216703258 #> 165  0.354384456 -1.379441900  1.284810382  0.665041027 -0.056686775 #> 166  0.569796178  0.119333094 -0.997984467 -0.337349450  0.325719195 #> 167  0.097810600  0.436410516 -0.442994382  0.125388100 -0.155380766 #> 168 -0.365252781  0.434310085  0.281289562  0.966868116  0.244730513 #> 169  0.002763840  0.307252689 -1.232847526  0.666385364 -0.415807668 #> 170 -0.306530520  0.003705897 -0.936619536 -0.499541880  0.492170142 #> 171  0.133643441  0.285697032  0.315152285 -0.938266009  0.636218775 #> 172  0.103944862  0.685992930  0.310029062 -0.252612550 -0.330786991 #> 173  0.412581019 -0.270532895  0.533248398  0.410789450  0.541256537 #> 174  0.344975901  0.013366294  0.274681620 -0.145119245 -0.557434122 #> 175  0.619151513 -1.067893586  0.172437173 -0.681516551 -0.240318170 #> 176  0.482178375  0.429260985 -0.349337231 -0.124015166 -1.145379146 #> 177 -0.178112817 -0.355180775 -0.333138823 -0.638284964  0.159141859 #> 178 -0.276222527 -0.625367388  0.592607403 -0.388374027 -0.129937946 #> 179 -0.049394337 -0.732288673  0.524531347  0.025201654  0.181982122 #> 180 -0.370320104  0.451639935 -0.147683101  0.414068458 -1.508014187 #> 181  0.281283680 -0.540291928  0.366646448 -0.240166717  0.032395430 #> 182 -0.396272705 -0.138457739 -0.053146033 -0.039359178  0.973017798 #> 183  0.149409611 -0.770235000  0.251409756  0.078525823  0.175212717 #> 184 -0.722704354  1.116537987 -0.549113280 -0.283119638  0.319241449 #> 185  0.340287122 -0.743878872 -0.064472288  0.271047216 -0.411510615 #> 186 -0.152445774  0.718141742 -0.426295404 -0.553041111  1.009412320 #> 187 -0.011507632  0.553386211  0.919395731 -0.424432165 -0.223764969 #> 188 -0.119581379  0.018861681 -0.210440165  0.885766761 -0.761903534 #> 189 -1.349198159  1.025211827 -1.020932515  0.723394907  0.012818031 #> 190  0.187034708 -0.464003949  1.148818261  0.343655610  0.653879292 #> 191  0.472578979  0.361018929  0.383251579 -0.375180147 -0.099873038 #> 192 -0.788456465 -0.471740120  0.117361157  0.625569731  0.805738915 #> 193 -0.246939436  0.045919402 -0.164413663  1.142665317  0.246025737 #> 194  0.049336024 -0.832286218  1.067375100 -0.584118762  0.822129610 #> 195  0.196052988  0.076440108 -0.744512713 -0.706758176 -0.326225893 #> 196  0.688741948 -0.188930305 -0.513207117 -0.664267772  0.438520058 #> 197 -0.113284204 -0.211852765  0.671839373  0.488296666  0.219500251 #> 198  0.514328060 -0.350261252  0.868189233 -0.226336159 -0.044952555 #> 199  0.453197301 -0.954749991 -0.219289873 -0.899084437  0.932571244 #> 200  0.610660408 -0.654439159  0.490596796  0.138423862 -0.661381340 #>             pc50          pc51         pc52        pc53         pc54 #> 1    0.867845644  0.4439511124 -1.443493616  1.82503822  0.549591503 #> 2    0.668158038 -0.7444689867 -0.678810415 -1.68759583 -1.501529448 #> 3    1.333924225  0.0997789662 -1.374844860  0.02696064  1.468603855 #> 4   -0.401973901  0.3796630691 -0.632179704 -1.13774163 -0.455738852 #> 5   -0.339453750 -1.1890422637 -1.109401809 -0.01276414 -1.152842532 #> 6   -0.453583563 -0.1601450151 -1.044254325  0.21238251 -0.334396968 #> 7   -0.581551527 -0.0707874079  1.022896526  1.64893133 -1.232702201 #> 8   -0.258564987  1.1660882328  0.611031887  0.37933725  1.826056143 #> 9    0.118750826 -0.4047491332  1.658973999 -0.29180479 -2.508015768 #> 10   1.156021571  1.3648259307 -0.696115891 -0.60106642  0.698810671 #> 11   0.043713025  1.0291256610  0.683355868  0.32643200 -0.443517280 #> 12   1.354328086  2.6769036475  0.548556850  0.47225508 -0.588036094 #> 13   0.392273661  0.7983689714 -0.521253098 -0.37093269 -1.199666575 #> 14  -0.464857934  1.8807869750  1.210405002 -0.33150748 -0.555853019 #> 15  -0.578202232  0.3585155032  1.779219271 -0.76708359  0.587025777 #> 16  -2.456662512 -0.4820153480 -0.491037205 -1.28285379  2.426679597 #> 17  -0.757737615 -0.7899598316  1.948193984  0.32801361 -2.700343359 #> 18  -0.189773468  1.1931844070 -0.269815920  0.38779443 -1.471881461 #> 19  -1.176526673  1.1629722361  0.953626697  0.57381993 -0.996246205 #> 20  -0.435117605 -1.8813508416  0.206237605 -0.34671339  0.976583969 #> 21  -0.524951851 -2.3742042790 -1.603188188  0.82535185 -1.208183636 #> 22  -1.205608002  2.2779839949 -1.449090406  0.59873255  0.118397923 #> 23   0.239052562  1.6431122993 -1.674955566  1.89926508  1.945554082 #> 24   1.187153344 -1.3528800351 -1.769380849 -0.58983831 -0.131607328 #> 25  -1.291974240 -0.5314367168 -1.526762490 -1.05570012 -0.799913956 #> 26   0.799344655 -1.3506939753  0.704085451  0.74153271  0.141944351 #> 27  -0.387061339  0.1848601934  0.682435151  1.20448588 -0.846886527 #> 28   1.032670156  0.6381702590  0.358445658  0.81328861 -0.096361451 #> 29   0.115932888 -0.3513281084  1.525716307  0.76314027  0.389589904 #> 30  -0.545956611  0.8757391196 -0.188453452 -0.07023238 -0.683772384 #> 31   1.318265535 -0.4990634074 -0.707557207  0.11894892 -1.957143871 #> 32  -0.545240346 -0.3496842438 -0.809626269 -1.59539696 -0.388779409 #> 33  -0.811031039  1.1036587024 -0.955947541  1.21352022  0.516007935 #> 34   0.671669580 -0.8555946929  1.777729865  0.43872658 -0.498885324 #> 35  -1.058551256 -1.1112638964 -0.096010052 -0.19926246 -1.132223621 #> 36   1.440805257 -0.7230727202  0.544829149 -0.85477195 -0.901975441 #> 37  -0.218220346  0.3822224849  0.610165475  1.25463293 -0.637149177 #> 38  -0.595752561  1.0018245593 -1.618206643 -1.02261843  0.629110281 #> 39   1.064403255  0.6519418179  1.103267745 -0.88496675 -1.823070187 #> 40   0.603344586  0.5399762937  1.143136624 -1.38559576  1.441674255 #> 41   0.703625491 -2.0146909448  0.249022111 -0.06679089 -0.031693479 #> 42  -0.825916135  0.2732798167  1.300430576 -2.36138314  0.218507953 #> 43   0.133705978  0.0742036684 -0.687671036  0.83311889 -0.828276772 #> 44  -0.616775518 -0.6473452296  0.665703165 -0.03085524  0.554074031 #> 45  -1.045136632  1.3850385702  2.157397484  0.35258520 -1.292075729 #> 46   1.365873079 -1.3330282743 -1.723918861 -0.21177372  0.744450943 #> 47  -1.003006490  2.2138864442 -0.175612148  0.71592357 -1.173843559 #> 48  -0.406217085  0.3529691655  1.045756502 -1.30598637  0.603849859 #> 49   2.204733407 -1.2354538912  0.761768549  0.21052963  0.737810921 #> 50  -0.806062760  0.7244923601 -1.689945640 -2.68893010  0.433797018 #> 51  -0.220547291  0.0590542712 -0.282916199  0.58760188  1.235589215 #> 52   2.898828999  0.5369500959 -1.091050801 -1.98187430  0.625054388 #> 53  -0.764745682 -1.1066299972 -0.223994390  0.22650462  0.653703372 #> 54  -0.339988591 -1.1689239046 -0.023207216  0.37589931 -0.537591244 #> 55  -0.706274873  2.5752124435 -0.106192607 -0.61549941  0.142635853 #> 56   0.267108246 -1.9761477812  0.002470228  0.89800091  0.154605917 #> 57  -0.722446611  0.2034429256 -0.474863223 -2.93561783  0.047019968 #> 58  -0.527248156 -1.8606447860  1.400035981  0.93398454  0.978777432 #> 59   2.022488144 -0.7501365683  0.837049747  1.80316307  1.324647467 #> 60  -1.371940487 -0.5207115401 -0.112057281 -0.30008821 -0.051725067 #> 61   0.537496330 -0.0554475502  0.162039779 -0.12866512  0.094138010 #> 62  -1.297092068  1.6345992541 -0.955196264  1.45451065  1.248527638 #> 63  -0.470320913 -0.0159867986 -0.070795104  0.79134049  2.098405372 #> 64  -0.417910587  2.0182256949 -0.713823143  0.77077177 -0.027709605 #> 65   0.991815165  0.6690673649 -1.217380323 -0.26602095  0.258399288 #> 66   0.310453928 -1.4153011396 -0.366691235  1.41538570 -1.366854778 #> 67   0.038569217 -0.1082806946 -0.634145745  0.82287879 -1.405660063 #> 68   1.526696923  0.6868881359 -0.320333063 -1.12606478 -1.475848872 #> 69  -1.258336790 -0.8493165373 -1.941861800  1.82264979 -1.764698380 #> 70  -0.694466965 -0.6311020693 -0.172217698  0.26237972 -0.020289978 #> 71   2.131245195  0.6187200744 -1.074414490 -1.81288100 -1.143447231 #> 72   0.039146309  0.0988068619 -0.609496746 -0.38612964 -0.459585993 #> 73   0.849515931 -0.9284318804  0.555976561 -0.18940323  1.999154118 #> 74  -0.081393308 -1.0382942215  0.218419249 -0.14338770  2.325962769 #> 75   0.383306395  1.3670017575  0.782378346  0.18933452  0.929560873 #> 76  -0.280731365 -1.0717755337  1.687419992  0.05268594  1.649407283 #> 77  -1.166123143  0.6901553932  0.644242614 -0.32267169  0.495964680 #> 78  -0.094905918 -0.1850356490 -0.840003999  0.42029054  0.012731569 #> 79   0.568479385  0.9360080967  0.568277077  1.24718153  0.499420438 #> 80   0.747538324  0.3168367922 -0.595293060 -0.44813447 -1.618185387 #> 81  -0.730437925  0.9053384876  0.735503571  1.21688585  1.322992242 #> 82  -0.201864311 -0.4556457428  0.374879457  0.24896160  1.155461105 #> 83  -0.942915091 -0.1510300084  1.050486727  0.14408503 -1.304165390 #> 84   0.171765728 -0.8197498786  0.141992141  2.55371578  0.272056613 #> 85   1.252140788 -1.4421288436 -0.770532311 -1.81219458  0.422361693 #> 86  -5.113102903  0.3774540267  0.762545120 -1.27444467  1.022591974 #> 87   0.158845654 -0.1588447684  1.254488925 -1.55920160  0.219916428 #> 88   1.154314566  0.0830176426  0.958013259 -0.62263665  0.413400296 #> 89   2.526917891 -0.7217964366 -0.703619922 -1.51380509  0.684842336 #> 90   1.720261097 -0.7649006934 -2.461652241  0.50274975 -0.794319390 #> 91  -1.655269465  1.9319938714 -0.105040694 -1.64210069  0.749784569 #> 92  -0.289437014 -1.4194972522  2.464079188  0.93117406 -0.606519045 #> 93  -0.320996786 -0.7110243937  0.278689811 -0.04491923  0.540337545 #> 94   0.799605736  0.7091757977 -0.135290702  1.11174694  2.035393585 #> 95   0.563194948 -2.7654770740  0.756636079  0.45661355 -0.445452910 #> 96  -2.067592536 -0.3622930348  2.109211110 -0.99520596 -0.719105069 #> 97   0.270610733  0.0005431939  0.172040653  0.46928102  0.746995928 #> 98  -0.976074737 -0.2944472679 -1.996475398  0.69224999  0.100551567 #> 99   1.443580848 -0.1403626339  1.125821817 -0.92665553  0.465767871 #> 100  0.590999442  1.9821317183 -1.511132522  1.29771611 -0.949792350 #> 101 -0.004926832  0.1915051947  1.472747371  0.30311496 -0.047458109 #> 102  0.927701367 -0.1515443556  0.593521151  0.32286234  0.353952431 #> 103 -0.770781534  0.0142886992 -0.767590814  0.24934005 -0.580176788 #> 104 -0.717972987 -0.5675432412 -0.505938010 -0.63449763 -0.696411468 #> 105 -1.040710495 -1.1320949974 -0.557689518  0.28761155  0.086956558 #> 106  0.238618716 -0.2061229766  0.042361733 -1.06706725  0.190383994 #> 107 -0.904970830 -0.2953321762 -0.467239794  0.05045783  0.320046075 #> 108 -0.317804762  0.2892613973 -1.070388380 -0.15216957 -0.528052807 #> 109  0.251200031 -1.0040656256 -0.514368044 -0.77883719 -0.115986940 #> 110 -0.078593204 -0.3254918159  0.033412907 -0.39293943  0.613867635 #> 111  0.542726577  0.8544142455 -0.581642570  0.17320975  0.231106566 #> 112 -0.343402956  0.0839647703 -0.031435923 -0.59201403  0.522984131 #> 113 -0.168011828 -0.4028189241 -0.489577468 -0.03676806  0.531129946 #> 114  0.546577765  0.0319934683 -0.360091746  0.88202596 -0.340233728 #> 115 -0.417141671  0.1911695489 -1.004549145 -0.29047459 -0.612553842 #> 116  0.601889808  0.4163319843  0.233797339 -0.89761353 -0.142790772 #> 117 -0.576981077 -0.5388494361  0.175016319 -1.22356669 -0.634260018 #> 118  0.148299652  0.4933882703 -0.109978005  0.90494364 -0.008753225 #> 119  0.345718264  0.5367450886  0.122506292  0.04911059 -0.234245172 #> 120  0.140503637 -0.3842979494 -0.080900750 -1.04038983 -0.169395109 #> 121  0.243736971 -0.0838455055  0.898438652 -0.19525227 -0.077230254 #> 122  0.120116277 -0.1411142579  0.565776891 -0.41292541 -0.148374951 #> 123  0.349509539 -0.1509809228 -0.242855470  0.05321622 -0.195859003 #> 124 -0.149440985 -0.7599780050  0.508394790 -0.04053027 -0.100523423 #> 125 -0.314939411 -0.8505218242  0.312254239  0.25738100  0.450885981 #> 126  0.313760053 -0.5129432118 -0.711528763  0.62791326  0.451747197 #> 127 -0.371494934 -0.9817111127 -1.021523312  0.09971847 -0.069821628 #> 128  0.381865454 -0.2751052469  0.433574758  0.15158541 -0.861876297 #> 129 -0.369237986 -0.7773100749 -0.045024481 -0.61454609  0.055487355 #> 130 -0.662121502  0.6021522579  0.004903605  0.54376327  0.156216208 #> 131  1.089240180  1.0954069690  0.739704285 -0.08519802 -0.098177996 #> 132  0.308644138  0.6736292026 -0.718946666  0.16328956 -0.166131254 #> 133 -1.781609768 -0.0360094472 -0.428133463  0.38322060 -0.744035099 #> 134  0.103873863 -0.0663820584  0.398236228  1.09166800 -0.573924904 #> 135  0.153370815  0.0609495500 -0.179484631  0.35864932 -0.683223356 #> 136 -0.209276843 -0.4658810123  0.322842348 -0.36992654  0.389315559 #> 137 -0.482888099  0.5392670845 -0.533514570  1.07303233  0.650194491 #> 138  0.068740817 -0.8493656425 -0.040311796 -0.42140875  0.714910122 #> 139 -0.665708035 -0.6687984031 -0.134880480  1.07408817  0.121187210 #> 140 -0.092116508 -0.1777018295  0.186815569 -0.26807313  0.318808300 #> 141 -0.499517035 -0.4043134018 -0.526733069  0.22531317  0.251486391 #> 142 -0.278821019  0.8848811053 -0.433217403  0.13057981  0.208408809 #> 143 -1.184974079 -0.7744111904 -0.818957590 -0.33543814 -0.359114650 #> 144 -0.406236206 -0.8182908192 -0.135186809 -0.10559687  0.148988347 #> 145  0.337618482  0.9147581560  0.137215900  0.25477315  0.144475208 #> 146  0.428410797  1.3718730489  1.630213910 -0.19397873 -0.756420413 #> 147 -0.943935612 -0.1122489932  0.027061924 -1.23449275 -0.946883058 #> 148  0.033707121  0.2692380054  0.916167852 -0.03316594  0.442930844 #> 149 -0.028370757  0.0633050794 -0.159308689  0.01774257 -0.186107623 #> 150  0.830023065  1.1128592759  0.541245237  0.35560883 -0.064418762 #> 151  0.017958840 -1.2054145899  0.270841053  0.21142171  0.233991251 #> 152 -0.005678886 -0.0210275511 -1.213179958  0.13167736  1.105445870 #> 153 -0.315198390  0.8787230616  0.254741886  0.78267469 -1.121644807 #> 154 -0.844915670 -0.5668497580 -0.393367290  0.82607926 -0.158976893 #> 155 -0.464834373 -0.2245190786  0.241739268  0.52121476  0.366209714 #> 156  0.410624993 -0.0843689700  0.461556854  1.03249989  0.328417105 #> 157  0.521702992  0.8099004285 -0.079234572 -0.05016320 -0.893490393 #> 158  0.161201018  0.3127776961  0.664639821  0.49589501  0.200354287 #> 159 -0.008388547  0.0431691613  0.825965668  0.19951425 -0.882898232 #> 160  0.481340132 -0.0089043272  0.608067944 -1.06885329 -0.347337029 #> 161 -0.325400514 -0.1854421242  0.950025661  0.43254619  0.786526130 #> 162 -0.003937600  0.3768999316 -0.242032452  1.16500690 -0.045728039 #> 163 -0.797289337  0.1037125272 -0.663604335 -0.26193157 -0.508957424 #> 164  0.032437257 -0.4980825434 -0.470754709 -0.17965258 -0.060133643 #> 165  1.200190296  0.0816714548  1.001193996 -0.70250004  0.054536733 #> 166  0.089040999  0.5766468374 -0.327765689  0.49873890 -0.506021194 #> 167  0.727582176  0.2898197210  0.392232417  0.75653648  0.761810367 #> 168 -0.325423623  0.4613045755  0.122395161 -0.72526171  0.049123490 #> 169 -0.941444729  0.0437864916 -0.318430514  0.90637840  0.432173576 #> 170  0.297824875  0.0652492142  0.157105651 -0.16139111  0.668800417 #> 171  0.364953607  0.1465616545  0.164453518 -0.30666066  0.688834616 #> 172  0.718424989  0.5966034922  0.382375684  0.68102831  0.422924587 #> 173 -0.452764700 -0.0471228477 -1.017468792  0.02121498 -0.858643450 #> 174 -1.100681849 -0.5164865245 -0.229013239 -0.17015186 -0.444614843 #> 175  0.581876229 -0.0025726220 -0.480387036  0.41221804  0.021295183 #> 176  0.433582784 -0.4051222157  0.494442137  1.30578634 -0.457653882 #> 177 -0.071332651 -0.2026315714 -0.686277092 -0.78641346  0.756808958 #> 178 -0.195586007 -0.3861712311 -0.740172129 -0.66876591  0.472303887 #> 179  0.228003972 -0.0509311053 -0.158344045 -0.21651456 -0.050780747 #> 180  0.333590812  0.0586520990  0.792103753 -0.02646850 -0.155164186 #> 181  0.193230067 -0.3775586105  0.404141845 -0.43184325  0.087561414 #> 182 -0.435063802 -0.3521178583 -0.999501627 -1.10914356 -0.353449085 #> 183  0.983934384  0.7487623578  0.391989962 -0.11321161 -0.087246027 #> 184 -0.704890934  0.0134136087  0.444493860 -0.34212257  0.259497765 #> 185  0.206439313  0.2688228213  0.212240793  0.01071982  0.853822325 #> 186 -0.351925017  0.3006236169 -0.760721594 -0.34083784 -0.440991447 #> 187  0.515763952  0.3357706507  0.548336688  0.18592118  0.326603338 #> 188 -0.532410926 -1.4652327002  0.234687460  0.28252872 -0.030064385 #> 189 -0.735744520 -0.4544032077  0.733031882 -0.59569615  0.348060449 #> 190  1.685707753  1.6348163295  0.586737918 -0.59925655 -0.043549371 #> 191  0.505877766 -0.3411977172  0.654890127 -0.29702536 -0.187573128 #> 192  0.857113125  0.8570922706  1.114448433 -1.62500943  0.240705324 #> 193  0.387018259 -0.4191232980  0.676976593  0.32669058  0.876280762 #> 194 -0.349495995 -0.6212302413 -1.335335673 -0.03446765  0.194913309 #> 195  0.498569926 -0.3097435197 -0.640611552  0.58417177  0.275007382 #> 196  0.050624756  0.2028815495 -0.298208121 -0.27110688 -0.888489568 #> 197  0.006458931  0.2375229227 -0.375531848 -0.30618276  0.712030561 #> 198  1.548947221  1.1914282343  0.994350740  0.56549366 -0.372416767 #> 199 -0.195415857  0.7636111664 -0.838229574  0.09479793  0.432688633 #> 200  0.307046799 -0.3668020463  0.014879559  0.62980514  0.055350393 #>              pc55         pc56         pc57          pc58         pc59 #> 1    1.6936569781  0.674473141  0.480428071 -0.0144877633  0.563284569 #> 2    0.3709740989 -1.945607224  1.441078394  0.5913278433 -0.487064950 #> 3    0.8351589058 -0.490040703 -0.130201623 -0.5084530835  0.359801608 #> 4   -1.2973421206 -0.911355205  1.110496721 -1.4691447793  0.172164913 #> 5   -0.7112509472 -1.412777264 -0.144830206  0.0622564529  0.543849949 #> 6   -0.6007780701  0.115062715 -0.838103046  0.3085327151  0.367058498 #> 7   -0.9922011889 -0.666519171 -1.551237832 -0.2442283773 -0.402835301 #> 8    0.5126151966 -1.043892626 -0.240144357  1.2572561702  0.638139503 #> 9    0.6085490325 -2.259300784 -1.441226330  1.1391643539  1.165490679 #> 10   0.2063549323  0.891798590 -0.758471977 -0.8184977231  1.711289680 #> 11  -0.9823678212  2.087413350  1.043927933 -0.1575316285  0.056922441 #> 12   0.5153321292 -0.607216925  1.546105682 -0.2222428656 -1.692385397 #> 13  -0.9090356410 -0.101543891 -1.244945380  0.5566688385  0.302080921 #> 14   0.7402867458  0.495986238 -1.534252344  0.7561326181 -0.909021999 #> 15  -2.4880121482  1.383983810 -0.912721293 -0.7853302685  1.866841602 #> 16   2.8968195919 -0.417607250  1.217315545 -1.1716700944 -1.376019827 #> 17   0.5147094935 -0.797431208  0.085799380 -2.3437069643  0.921458262 #> 18   0.6734990091  0.742492574  1.523142683  1.6241604141 -0.168817312 #> 19  -1.2073748805  0.312486232  0.656742431 -0.5799223351  0.770926169 #> 20   0.9576288360  0.985659767 -1.011406251 -0.4239184493 -0.976011144 #> 21   0.8325254903 -0.217182109 -1.736437179  0.3336392932 -1.040510334 #> 22   0.2180123590  1.365655746 -2.340543652  1.5242638444 -1.189121451 #> 23  -1.9026777556  0.336205495  0.910146851 -0.6226901011 -0.690798334 #> 24  -0.6297697459  0.263109522 -0.651166031  1.3082355054 -0.410269187 #> 25   1.5321226276  0.900455001 -1.250240757 -0.3634699793  0.088807970 #> 26   0.6406816636  0.090934639  1.733021770  0.7052720285 -0.343138157 #> 27   1.4485973810  1.052224120  0.781723672 -1.0514274453  0.635770629 #> 28   0.0525582209 -2.393290609  0.306584965 -1.3041580606 -1.717785732 #> 29  -0.8272736312  0.309771446 -0.191764308  0.3151027738  1.388421472 #> 30   0.4244482857 -0.956826802 -1.885170001  0.8269059967 -0.029795043 #> 31  -0.4530547877 -0.317677735  0.302799775  1.1427344137  1.771646140 #> 32   1.6659371460  0.598777989  0.672784059  0.0498102099  1.470362010 #> 33   1.3435609987 -1.699725734  1.592449777  0.4960915966 -0.102910059 #> 34  -2.0656865633 -1.416770364 -0.646129055 -0.5479730861  0.119380944 #> 35   0.7898968516 -0.037768708  0.172123098 -1.6358172548  0.023179003 #> 36  -0.0992515760 -0.201239399  0.303741901  0.6704033214 -0.692837540 #> 37   1.6186263431 -0.073928469  0.877209317 -1.5069648574  1.180334613 #> 38  -0.7826171602 -0.735711888  1.274438028  0.7056282562  1.276153198 #> 39  -0.1343507529 -0.058104571 -0.368073800 -1.7557845669  0.818145048 #> 40   0.0455021190 -0.672626763  0.173116713  0.9361160717  0.048631312 #> 41  -2.3457029979 -0.909586458 -0.411765869 -1.1571602834  0.417401524 #> 42   0.6199143470 -0.073748564  0.132829852 -1.2293494569 -0.265210030 #> 43   0.1872611806  2.388499426 -1.041250629 -2.4541179427  0.025552582 #> 44   1.2965981856  1.002614517  1.157491848  1.2764965572  0.262042490 #> 45   0.3049443688  0.519205612  1.914716771  0.2738804011 -0.378479510 #> 46   0.9208733492  0.523799895 -0.032430141  0.5467240953  0.151289349 #> 47  -1.9390137690 -0.786783215  0.717851620  0.2245050436 -0.783814257 #> 48   0.6128766509  1.767281267  0.095244711  1.0817546250  0.928065213 #> 49   0.2548443832  0.391588110  1.388105252  0.9777437378  0.279246608 #> 50   1.3520575389 -1.251983187  0.795273540 -0.2166882941  1.063335656 #> 51  -0.4743191739  0.075383439  0.366521176 -0.2835835724 -0.877786435 #> 52   0.6192802185 -0.465926673  0.271549833  0.8469549529 -0.685112089 #> 53  -0.8861451873  1.254676523  1.806470571 -0.7996079313  0.141930727 #> 54  -1.1125099910 -0.231242454  0.886145138 -0.7216367847  0.671689126 #> 55  -2.1850072031  0.519053875 -0.064127049  0.9862136309 -0.590143064 #> 56  -2.9951897310 -0.741116430 -0.590042900  0.7297106937  0.799977069 #> 57  -0.1344810764  0.493243364 -0.013089642  0.6750273649  0.583271998 #> 58  -1.5358621424  1.093792388 -0.310167042 -0.7300182230 -2.031738018 #> 59  -0.1135527670  1.282830204  0.792756638  0.6239295787  1.293680387 #> 60   0.0567948565 -0.339566381 -0.139710655 -0.7631852084  1.532173963 #> 61  -0.1138653704  0.693270066 -1.862282551  0.9941186072 -1.612373507 #> 62  -0.2322676765 -0.536083100 -1.361679157  0.0847928147 -0.169948463 #> 63   0.0160062599 -0.463385322 -0.779730907  2.2057500274 -0.010719528 #> 64   0.0732115257 -0.396825482 -1.038273122  0.1762370031  0.896467758 #> 65   1.0256086497  0.017435471  0.952542367 -1.4147930255 -0.001112478 #> 66  -0.1046527393  1.040361762  0.040843852  0.9332896030  0.333190350 #> 67   1.3775000412 -1.612474557  1.204001886  0.7125550127  0.619979266 #> 68  -0.7366886368  0.975850293 -0.247328298  1.2723551144  1.279271007 #> 69  -0.6361707910  1.985302814 -1.816087866 -2.1007375269  0.389620643 #> 70   0.2685510740  1.624776214  1.020013312 -0.1683002336  1.057259911 #> 71   0.3854852632 -1.155328526 -0.743244175 -1.4396546716  0.144621006 #> 72   0.1480271564 -0.451189860  0.223120043  0.7501699643 -0.264920352 #> 73   0.9309846355 -1.306242459 -0.093059569 -0.6289021686  0.984389820 #> 74   0.3249682111 -1.542119080 -1.162128259  0.1903704562 -0.401217882 #> 75   0.2924689704  0.542384670 -2.342180150 -1.1851859812 -0.691882658 #> 76  -0.7822749587  1.904858035 -0.857556848  1.0629130306  0.874525562 #> 77  -0.5216502792  0.063806389  1.591920496  0.7344765332  0.334792033 #> 78  -0.2182246945 -0.994140788  1.259331841  0.2656515176 -0.979537860 #> 79  -0.6018596917 -0.128510652 -0.578714804 -0.3649071715 -1.043644036 #> 80   0.5506434695 -1.545066908 -1.108352415 -0.0618120187 -1.788085421 #> 81   1.1097335592 -1.001745588 -2.505008023 -0.2265409166 -0.875027001 #> 82  -0.1564184992 -0.591253226 -0.063158230  0.0071004484  0.086027351 #> 83   0.0003081498  0.152554179 -0.757517519 -0.2100165477 -1.211029392 #> 84   1.4323525329 -0.635893857  1.322579240 -0.5483608822  0.499175664 #> 85  -1.0380877027  0.226345727 -1.789732800 -1.0568634427  0.151003811 #> 86   0.2267043273 -2.115068956 -0.124630623  0.7781261598  0.560310213 #> 87   0.7371647355  1.961800894  1.261939097 -0.1959575998 -1.152386872 #> 88   0.3098119741  0.062958156  0.102750795  0.4160189220 -0.193257133 #> 89  -0.7829683715  0.055147040 -0.108384203 -0.9183280962 -1.583443419 #> 90   0.9078100367 -0.483647151 -0.473222650  0.9597348083 -1.678813255 #> 91  -0.0105887452  1.154804506 -0.794709803 -0.9751768263 -0.643512326 #> 92   0.8404987536  0.715239232  0.175370300  1.2160070833 -1.284621435 #> 93  -1.1802913864 -0.631289598  1.404902901 -0.9622565832 -0.513474180 #> 94  -1.3238126190  1.125694192  0.641102127 -1.0207695337 -0.418857842 #> 95   0.2665419493  0.348039469  0.129108629  1.8115705949 -0.567693768 #> 96  -1.6318732703 -1.983340264  0.909608627  0.5949966031 -0.828144904 #> 97   1.2920303619  1.547557117 -0.534656774  0.0650036489 -0.577364666 #> 98  -0.6870000092  0.833291556  0.185170569 -0.4565291397  0.434673749 #> 99   0.0454414756  0.706444260 -0.294470007  1.1669677595  1.592554958 #> 100 -0.1507304434  0.249227380  1.399169536 -0.6000453080 -0.339427743 #> 101  0.8403837791  0.296662184  0.409093078  0.1128859885 -0.617183700 #> 102 -0.4231833617  0.028966111  0.374522219 -0.1652235917 -0.005764812 #> 103 -0.5570610099  0.043731769  0.696938649 -0.7456657234 -0.504556985 #> 104 -0.1360911727  0.664711471  0.410795670  0.7367855025 -0.050591661 #> 105 -0.8777492391  0.357251914  0.877290720  0.5106659999 -1.932993871 #> 106 -0.3166509835  0.453326735  0.588047651 -0.1911198014  0.006206324 #> 107 -0.5634912413  0.299835412  0.977283042  0.2357680795 -0.468972811 #> 108  0.1688884532  0.763994206  0.342979020 -0.2314442063 -0.499088685 #> 109 -0.0380362907  0.110817924  0.115907760 -0.6198662298 -0.470907342 #> 110 -0.2059789027  0.365853773  0.109359091 -0.1635650507 -0.163312042 #> 111 -0.3421204125 -0.312828369  0.387297445  0.0607994897  0.668330268 #> 112 -0.6081507330 -0.311009929 -0.232700295 -0.8642248453  0.113898085 #> 113 -0.3009810365 -0.355299765 -0.107876482  0.0004234697  0.865686156 #> 114  0.4986412379 -0.470844084 -0.001903840 -0.7881893368  0.042346127 #> 115 -0.5827774648  0.849589004  0.562468652  1.0893405959 -0.174058220 #> 116  0.8171322073  0.653134427 -0.241705469 -0.5375818952  0.153503286 #> 117 -0.1292424888 -0.099782003 -0.647313964  0.3243245679  0.580817940 #> 118  0.5075981422  0.343368579 -0.308456512  0.5020773276 -0.634676545 #> 119  0.0626101220 -0.498373814 -0.018289574 -0.5661680665 -0.054861520 #> 120  0.1024191842 -0.272099213 -0.468814073  0.3448293402 -0.418549677 #> 121  0.4322825804 -0.004572478 -0.427774128 -0.2673236434 -0.949293791 #> 122 -0.0597708881  0.096364624 -0.206560760 -0.5471855260  0.139958168 #> 123  0.6522968383 -0.071396164 -0.115127022 -0.9323266032  0.189996097 #> 124  0.5740671861  0.097439402 -0.528773990 -0.7332474026  1.325060437 #> 125  0.1619186140 -1.369367544 -0.243577357 -0.4042807991  1.040546327 #> 126  0.0471339192  0.164633085  0.322627712  0.2112444991  0.750522748 #> 127  0.2774820470 -0.268307079 -0.120216591  0.0856476551 -0.497704568 #> 128  0.6253796004  0.893849473  0.342736779  0.3744751370  0.219099361 #> 129 -0.6383198935 -0.592931427 -0.076265904 -0.5956164508 -0.907163782 #> 130 -0.7134710509 -0.352736042 -0.182611330  1.3996775147  0.182558479 #> 131  0.5246809290 -0.447099749 -0.324722144 -0.1621276369  0.828171896 #> 132  0.0360517077  0.530518671  0.503160694  0.6779050122  0.735250766 #> 133  1.1311798734  0.990498968  0.103881665 -0.0596449275  0.270318325 #> 134  0.7600977804 -0.224306103  0.211761317  0.3566267437  0.904694758 #> 135  0.2005506275  0.575885308  0.155249853  0.1632338259 -0.132981024 #> 136  0.4797584571  0.364734421 -0.153216535 -1.0412360891 -0.410789429 #> 137  0.1052578368 -0.116286368  0.066302010 -0.0496778411  0.264117966 #> 138 -0.5280729864  0.053689312 -0.324273249  0.7695961184  0.154413684 #> 139 -0.0427001610 -0.152286044  0.183615875  0.9422551351  0.232728940 #> 140 -0.0270378408 -0.078519252  0.254086168 -0.5082826418 -0.229536849 #> 141  0.7436048825 -0.229414168 -0.638041424  0.4287202009 -0.792669225 #> 142  0.3762568625 -0.180030590 -0.438317492 -0.8262339232 -0.169455742 #> 143 -0.0940173980  0.544793476 -0.423630135  0.4154775705  0.260225652 #> 144 -0.1690243736  0.097627472  0.067541891 -0.0275885123 -0.250852438 #> 145  0.5351077397 -0.572157763 -0.323947253 -0.0259712864  0.489740685 #> 146  0.3827692691  0.625642738  0.325016720 -0.4431906627 -0.319346832 #> 147 -0.6950463543  0.934560873  0.551205171  1.2916507168 -1.078188522 #> 148  0.4194815560  0.190696331 -0.063626207  1.1449701236 -0.028986197 #> 149 -0.1554720078 -0.105815586 -0.311319731  0.7117924017  0.767896187 #> 150 -0.2006638892 -0.086396613 -0.182365070  0.9086332648  0.812278296 #> 151  0.5987678180  0.117223016  0.549064377 -1.3287692738  0.203936516 #> 152 -1.1682587408 -0.143082249 -0.040615172 -0.4892480236  0.405845353 #> 153  0.0171438896 -0.178591240 -0.146232436  0.3908276742 -0.683304041 #> 154  0.4043743257 -0.031013789 -0.026197931 -0.0114097008 -0.067607858 #> 155 -0.3956702106 -0.875953151 -0.431633334 -0.1239317997 -0.176486976 #> 156  0.2461264763 -0.973369755  0.603086326 -0.3314546780 -0.597937653 #> 157 -0.2220023010  0.077750038 -0.084246104 -0.1666900529 -0.520436508 #> 158 -0.2388714122 -1.475775676 -0.018335731  0.1851006414  0.947464389 #> 159  0.9417433313  0.667902883  0.663405078  0.1052154842 -1.236510758 #> 160 -0.4290409669  0.286632472  0.573961095 -0.4782752849 -0.895014929 #> 161  1.5832586717 -0.130207444 -0.823846670  0.2178833518  1.119130286 #> 162 -0.5365422967 -0.345213615  0.036409321  1.3671372314 -0.037592552 #> 163 -0.1965426825  0.337111965 -0.302998634  0.4042422826  0.571483035 #> 164 -0.8405305034 -0.530240980 -0.511086751  0.1695825519 -0.129593927 #> 165  0.0782512467  0.055953727  0.219831522 -0.0036006412 -0.380701340 #> 166 -0.0887172463  0.337341906 -0.354245834  0.0524388159  0.560209061 #> 167 -0.4484168727 -0.584188933  0.188283617 -0.2911154852  0.425111146 #> 168 -0.0758656163  0.165694757 -0.325188531  0.1154229773  0.024806928 #> 169  0.3308555034 -0.403604892  0.398774523  0.1659938364  0.064043372 #> 170  0.1956931244 -0.500735031 -0.804693933 -0.8223657704 -0.306577099 #> 171 -0.9266916514 -1.002594630 -0.097968252 -0.7230200629  0.263124865 #> 172  0.1813298910 -0.421432104  0.332957638 -1.1578959747 -0.118214650 #> 173 -0.7195658258  0.686283537  0.494207627  0.4422485207 -0.473588551 #> 174  0.1503508014 -0.447881939 -0.481632532  0.4640348904  0.555847463 #> 175  0.3710213144 -0.439705001 -0.118199712 -0.1076869404  0.694979997 #> 176  0.5862171667 -0.380275424 -0.743232745  0.0136423794  0.034647611 #> 177 -0.2213234374 -0.062452344 -0.040430502 -0.1531030039  1.170508868 #> 178 -0.0047951619 -0.091547152  0.738742234 -0.4015947934  0.199959306 #> 179 -0.3227533541 -0.091241359  0.214735008  0.3777422222 -0.613226788 #> 180  1.9323293370  0.320793184 -1.692328508  0.4119179962  0.281635666 #> 181  0.0309789222  0.091002652  0.332186802  0.0099554131 -0.627385642 #> 182 -0.2544226424  0.628772421  0.347342854  0.3559834535 -0.359574966 #> 183 -0.4594743806 -0.669263190 -0.323977359  0.7471946194 -0.469947198 #> 184  0.0748618604  0.512954357 -0.144677715 -1.0597693083  0.563604604 #> 185  0.2148751752 -0.069787131 -0.132968190  0.6178595509  1.534314194 #> 186 -0.4794101219  0.719698665  0.221621699 -0.1184980858  0.638757824 #> 187  0.1462147194 -0.991007922 -0.174849058 -1.0391204760  0.401921106 #> 188  0.2633941678  0.200184213  0.607110565  0.4182659942 -0.550239082 #> 189  0.2680415082  0.198064923 -0.014864483 -0.4870843267 -0.835666793 #> 190 -0.3187218309  0.718281407  0.272573190 -0.0276104971  0.025632673 #> 191  0.1257245684  0.330865721 -0.336956078  0.2571860458 -0.500981726 #> 192 -0.1756333577  0.513307957  0.180048848 -0.4031214222 -1.116318838 #> 193 -0.1684039650  0.216589193  0.010153339 -0.3955814376 -0.423424855 #> 194 -1.4331612347 -0.597579760  1.049365713 -0.2457688898 -0.951245288 #> 195  0.2814898817 -0.219504854 -0.570152035 -0.2927943352  0.504175492 #> 196 -0.4708999892  0.893930592 -0.717508611  0.4661472452 -0.232534186 #> 197 -0.2070545827 -0.240079175 -0.349766689  0.2693858428 -0.442156637 #> 198 -0.0673777995 -0.063416968 -0.007136867  0.0141711460  0.189639668 #> 199 -0.9153942122 -0.053374246  0.610511045  0.0790916288  1.015546791 #> 200  0.4934805304 -0.381441430 -0.093995580  0.7050708239  0.138502307 #>            pc60         pc61         pc62          pc63         pc64 #> 1    0.04337007 -1.236671839 -0.866722050 -6.571919e-01 -0.112116312 #> 2   -0.32366369 -1.700429879 -0.623341924 -1.555459e+00  1.001165221 #> 3   -0.46717242  0.211135786 -0.574737194  5.276817e-01 -0.608587101 #> 4   -0.18021549 -1.303499844  1.209020540  1.735028e+00  0.939496762 #> 5   -1.01879805 -1.157862300 -0.560260396 -2.510804e-01 -1.028821239 #> 6    0.72354342  0.211755200 -1.053008620 -8.867864e-01  0.078675508 #> 7   -0.84829680  1.066727224  1.814379454 -3.729042e-01  0.007894728 #> 8    3.13424047  0.871994575  0.768536673  2.557711e+00 -1.050056974 #> 9   -1.55699359  0.577538059 -0.150773363 -7.742797e-02 -0.967215474 #> 10  -0.58065463  0.421212093  0.011963177  3.759957e-01 -0.260486472 #> 11   0.79322855  0.066971263  0.389745190  9.375378e-01  0.322581676 #> 12  -0.31467477 -0.302734534  0.117637340  2.816317e-01 -1.628929910 #> 13   0.69334550 -0.081776757 -0.478237522 -6.671627e-02 -0.002188508 #> 14   0.39777274 -1.924876446  1.192056593 -1.382777e+00  0.035737678 #> 15   0.24658580 -0.377686759 -0.069274848 -1.160665e+00 -1.961981129 #> 16  -0.05391228 -0.582412426 -1.034815301 -3.075387e-01  0.860469992 #> 17   0.63225470 -0.990138504 -0.441702412 -1.855115e-01 -0.530571728 #> 18   0.40946619  1.885392789 -0.391016223  5.618804e-01  0.149107995 #> 19   0.11097966 -0.991214779  0.064604391 -4.498995e-01  0.428104058 #> 20  -0.16311250 -0.830036245  0.115482737  1.316779e+00 -0.902459321 #> 21  -0.51939828  0.097412737  0.894636339  2.520204e-03  0.284614442 #> 22  -1.76146165  1.199919497 -0.114714868 -9.044421e-01 -0.253701080 #> 23   0.48323971 -0.461482025  0.637264197 -1.552940e+00  1.278662930 #> 24  -0.31720321 -0.705202151  1.973313237  1.147071e-01 -1.492604288 #> 25  -0.23695797  0.604645563  0.961736430 -1.273508e+00  0.485443314 #> 26   0.26848433  0.025605425  0.754060667  4.835422e-01 -0.357427298 #> 27   0.08809550 -0.301473989  0.311040557 -9.167572e-01 -1.042325434 #> 28  -0.59250542 -0.421328443 -0.874364645  1.471646e-02  0.037806717 #> 29   1.05112379 -0.338287342  1.364428692  7.305689e-01 -1.438643050 #> 30   1.84609422 -0.968367486  0.423675703 -1.443407e-01 -1.757099960 #> 31   1.09362759 -0.013300388  0.074990669  7.365259e-02  1.388121128 #> 32   0.86726537  0.748258833  1.004828985 -1.827807e+00  0.018224662 #> 33   0.03846849 -0.006908681  2.171193163  7.081000e-01 -1.181933106 #> 34  -0.05735912  0.992334421 -0.319028087  4.828580e-01 -0.007472189 #> 35   0.06804781 -0.120602165  0.701520689  9.826879e-01  1.308375336 #> 36  -0.23532905  0.298138817 -0.132738594  4.510106e-01  1.864423914 #> 37  -1.88385807 -0.027526229  0.087367987  5.314821e-01  0.779535592 #> 38   0.07166367 -0.239805766 -1.372827013 -5.791674e-01 -1.676016618 #> 39  -0.97298834  0.775600021  0.027480018  4.600768e-01 -0.148396397 #> 40   0.44894572 -0.078794906 -0.276588370 -1.245131e-01  0.491101425 #> 41   0.26981189  0.065588078 -0.046086463 -2.159645e+00  0.748455984 #> 42  -1.51244579 -0.355706597  1.675818214 -9.788827e-01 -0.499145462 #> 43  -0.03607881 -0.548373010 -0.509562013 -5.201028e-01  0.382745713 #> 44   0.28907795  0.628388890  0.129421044 -8.127782e-01  0.237965419 #> 45   0.84246897 -1.037693760 -1.610021373  1.668867e-01 -0.516691325 #> 46   0.71850284 -1.052885926 -0.192907545 -1.217469e-01 -0.127750251 #> 47  -0.77950730  1.208544698  1.730496615 -5.527198e-01  0.671134634 #> 48  -0.50965544  0.566467916 -1.573996654  3.190746e-01 -0.774981577 #> 49  -1.34827566  1.037318991 -2.465919258  4.722574e-01 -0.609546009 #> 50  -0.96253639  0.713199579  0.230528340 -9.243402e-01 -1.177373136 #> 51  -0.38621702 -0.900905014 -0.507525176 -1.601121e+00 -1.102339955 #> 52   1.33120187  0.579392583 -0.172810366  1.659997e+00 -0.764135519 #> 53  -0.80138740 -0.048672596 -0.269050840 -8.754931e-01  0.065083511 #> 54   0.01286669 -0.126603051 -1.217787065 -6.722950e-01 -1.123044510 #> 55   1.19179818  0.323766020 -0.393994344  3.005074e-01 -1.347693222 #> 56  -0.30149122 -0.125591965 -0.802004014 -8.336363e-01  0.362011715 #> 57   2.40873007 -0.329164954 -0.439020868  2.112357e+00  0.616119068 #> 58  -1.36476905  2.075857765  1.009896941  2.008946e+00 -0.132404372 #> 59  -0.43946259 -0.350960376 -0.341339569  2.148519e-01  0.887224025 #> 60   1.35308504 -0.632232713 -1.878461146  2.488663e-01 -0.053967265 #> 61   2.22099939  0.201375990  1.511458102 -7.826478e-01  1.083627029 #> 62   1.16454981  1.598206315  0.664490251 -1.805919e-01  0.127583340 #> 63   0.32442038 -1.295009247 -0.571783045  4.268177e-01 -0.291071224 #> 64  -1.80388371  0.086787951  1.588402639  4.290252e-02  0.563436076 #> 65  -0.80297904  1.607850352  0.180014746  4.122285e-01 -0.573778176 #> 66   1.35161029  0.751138973  0.664759711 -1.759223e+00  0.852255442 #> 67   0.73126981 -0.152539946  0.261588258 -1.741645e-02  0.216106471 #> 68  -0.64136227  0.229452012  0.496093163  6.748598e-01  0.470705212 #> 69   0.18325218 -0.153853271 -1.548835762  1.903643e+00 -0.741886019 #> 70  -0.57805630 -0.428873483 -0.319149853  2.579504e-01  0.942052792 #> 71   1.17298096  0.636871525 -0.431587211  3.368148e-01  1.919280601 #> 72  -0.47052682 -0.253229766  0.487545599  2.349203e+00  0.605778524 #> 73   0.84357570  0.150551649  0.999943208 -9.356498e-01  0.414547068 #> 74  -1.42647779 -0.800196365  0.158696238 -4.517776e-01 -1.136049274 #> 75   0.53360256 -0.484762035 -0.995228404  8.337183e-01 -0.399822538 #> 76  -0.02886202 -0.372967317  1.239006931 -7.610282e-01  0.699029190 #> 77  -0.17114459  1.793939963 -0.100984078 -7.816570e-02  0.501877361 #> 78  -0.90638705  0.532957887  0.018346467 -1.083176e+00 -1.181233860 #> 79   1.22771804 -1.271136037 -0.444232681 -2.366613e-01 -0.145632207 #> 80   0.39882815 -0.536921076  0.410287696  4.510298e-01 -0.198062362 #> 81  -0.11581189  0.709945218 -1.973919401 -5.916014e-01 -0.318940047 #> 82   0.81938175 -1.085621800 -0.397894961 -3.353166e-01 -0.189402984 #> 83  -0.58548390 -0.439081996 -0.834265773  4.367217e-01 -0.200966140 #> 84   0.51826731  0.288881977  0.640839748  1.552976e+00  0.270209461 #> 85  -1.64438764  0.507015948 -0.933780726  2.407539e+00  0.151060969 #> 86  -0.70846972  1.221874548 -0.036512176  9.120645e-01  1.435676364 #> 87  -1.41644973 -0.406589684  2.214756998  9.363685e-01  1.408924901 #> 88   1.53255293 -0.268854059  1.011522863 -1.155838e+00  1.353918539 #> 89  -1.80730643 -2.216309110  0.039009890  5.282756e-01  0.193179384 #> 90   0.07479546  1.352403073 -0.764048255 -3.449217e-01  0.735270733 #> 91  -1.46828743 -0.226349808 -1.609664861  1.679205e-01 -0.645876125 #> 92   0.92771701  0.253625224 -0.560240605 -7.983369e-02  0.029147509 #> 93   1.09735929 -0.311925560 -1.392281010 -2.707818e-01 -0.585462828 #> 94   1.01293832  0.539109795 -0.440291866 -9.898322e-02  1.541128597 #> 95  -0.33858755  0.926968114  0.194129223 -5.460420e-01  0.024843528 #> 96  -0.46682046 -0.308473726 -0.256606785 -3.066844e-01  1.301500179 #> 97  -0.14942668 -0.130698917  0.143297162 -1.392935e-01  0.418992871 #> 98  -0.29711359  0.805046201 -0.210058866 -6.701137e-01  0.791446320 #> 99  -0.70477662  1.217851926  0.440895754  1.110963e+00  0.240391118 #> 100 -1.07541060 -0.866717222  0.803042141 -4.168890e-01 -0.482983878 #> 101 -0.25644015 -0.238982174  0.221842712  4.254950e-01 -0.536962352 #> 102 -0.33500075 -0.247956095 -0.095179195  3.485943e-01 -0.736148885 #> 103  0.40864954  1.433426991  0.572321642  1.830259e-01 -0.660438318 #> 104  0.02456560 -1.389932141 -0.025566841  6.072570e-01 -0.555513082 #> 105 -0.27475931  0.311181384 -0.389640502 -4.703242e-02 -0.118449620 #> 106 -0.02198991 -0.783123270  0.256456582 -3.293504e-01  0.004144741 #> 107 -0.13366448 -0.216583497 -0.902815413  5.429336e-01  1.112941789 #> 108  0.45348704 -0.752062900 -0.378854860  1.881903e-01  0.230190048 #> 109  0.61532317  0.052782982 -0.076919598 -4.899625e-01 -0.269847374 #> 110 -0.29599194 -0.669468048  1.028477111  6.603664e-05 -0.274256775 #> 111 -0.35444483  0.471956243 -0.733407089 -8.291949e-02  0.383825569 #> 112  0.71950839 -0.120161929  0.229570641 -2.233769e-01  0.553813691 #> 113  0.10223927 -0.054724712  1.033909599  1.996405e-01 -0.447204829 #> 114  0.84695270 -0.469739649 -0.259308508  3.340585e-01 -0.247924787 #> 115 -0.29580521 -0.263177779 -0.246348601  9.631092e-02 -0.199015106 #> 116 -0.07223799  0.935954078 -0.063977237 -1.128853e+00 -0.772362869 #> 117  0.30187938  0.092965904 -0.118118360 -2.500057e-01 -0.652686994 #> 118 -0.13446073 -0.376330899 -0.983178538  1.335390e-01  1.025898373 #> 119  1.02292217 -0.470079254  0.118120897  3.250667e-01  0.120825777 #> 120  0.40319001  0.434453858 -0.993026931 -8.435987e-01  0.199713829 #> 121  0.38991752  0.709860575 -0.256086786 -2.883795e-01 -0.040817612 #> 122  0.55325468  0.047785393 -0.042744840 -4.442213e-02 -0.008823969 #> 123  0.39175541  1.405000936  0.050145122 -2.791299e-01 -0.719067382 #> 124  0.56311647 -0.475221955 -0.283657695  1.809810e-02  0.808872676 #> 125  0.01158319  0.230286840  0.447630920  9.476932e-01  0.056483334 #> 126 -0.74605009 -0.347990998  0.311029101  3.690623e-01 -0.212120785 #> 127  0.02452088  0.808721458  0.013875020 -2.256644e-01 -0.823656404 #> 128  0.41153559 -0.935927749  0.226787625  1.344338e-01 -0.843956977 #> 129  0.47899284  0.181069297  0.771633664  3.284910e-01 -0.661671826 #> 130 -0.97351580 -1.544058424 -0.175046357  4.344775e-01  1.126088905 #> 131 -0.02014639 -0.160622237 -0.080084945 -5.547440e-01  0.767070924 #> 132  0.02654099  0.268565730 -0.395170119  3.402657e-01 -0.481805640 #> 133 -0.08802101  0.097370665 -0.145569001  3.415830e-01  0.056344496 #> 134  0.03411004  0.368864055 -0.160011422  5.117820e-01 -1.130540430 #> 135  0.74014704  0.460286014 -0.858678106  8.044837e-03  0.079283827 #> 136  0.53200908  0.869410082  0.331290460 -2.306074e-01 -0.087011051 #> 137 -0.00932431 -1.241604068  0.287849135  7.888993e-01  1.098996563 #> 138 -0.43461996 -0.379590362  0.396407354 -2.955435e-01  0.109864895 #> 139 -0.29147731 -0.398607711 -0.156831294  8.333032e-01 -0.147626314 #> 140  0.96773531  0.307194319 -0.112373048 -4.223494e-01  0.442400868 #> 141 -0.34365452 -0.719791309  0.016302746 -1.552656e-01  1.011175891 #> 142  0.46050848 -0.746139393  1.009639888 -1.083938e-01  0.857694850 #> 143  0.03894668 -0.053019362  0.278874745  7.373668e-02 -0.690141831 #> 144 -0.03904948 -0.271256885  0.682359953  3.057994e-02 -0.356160466 #> 145 -0.03111531 -0.251131585 -0.588356713 -1.351895e-01  0.842275447 #> 146  0.44513760  0.594612134  0.240590247 -1.939811e-01 -0.044208101 #> 147 -0.15244260 -0.962994494 -0.508247254  2.244159e-01 -0.244875553 #> 148 -1.35179581 -0.222829120 -0.134220102 -5.254215e-01 -0.108071482 #> 149 -0.41899564 -0.064970399 -0.344727931 -1.213579e-01 -0.158642927 #> 150 -1.19746762 -0.832801104  0.017297647  5.701162e-01  0.584057397 #> 151  0.23173367  0.459220485  1.064589126 -3.137195e-01 -1.459386054 #> 152 -0.09209787  0.499587556  0.818819277  9.388008e-01 -0.634090152 #> 153  0.27699173 -0.767086424 -0.647361977  9.724051e-01  0.780054885 #> 154  0.04731797  0.909148014 -0.430519548  7.735260e-01  0.795000377 #> 155  0.20766580 -0.342752215 -0.139477020  5.002408e-01  0.529138681 #> 156 -0.28431168 -0.667393303 -0.144528462  2.007306e-01 -0.142399291 #> 157  0.07726967  1.520554582 -0.287640138 -5.889389e-01  0.041533555 #> 158 -0.43461824  1.268687602 -0.733845005 -5.216191e-02  0.683230427 #> 159 -0.25756129  0.923729520 -0.571736740 -7.286668e-02 -0.564657820 #> 160  0.65046544  0.711267397 -0.613024003 -1.533781e-01 -0.679574309 #> 161 -0.69239457 -0.770032396 -0.305291229 -3.606879e-01  0.681100125 #> 162 -0.80640287 -0.554053707 -0.907212136  3.536342e-01  0.615140499 #> 163 -0.10298468 -1.249046184  0.665630993  2.335544e-01 -0.219719263 #> 164  0.40759873  0.511195054  0.084406364 -1.193382e-01 -0.217659093 #> 165 -0.20506512  1.400548111  0.379192217 -7.010360e-01 -0.681301621 #> 166 -0.32778828  0.027008733  0.108383292 -5.387160e-01  0.372986107 #> 167 -0.62865091 -0.051984655  0.474621126  1.915529e-02 -0.413688527 #> 168  0.29323807 -0.045025686 -0.302412540  1.782705e-01  0.573070866 #> 169 -0.82685434  0.313995769 -0.114913861  9.441614e-02  0.218805000 #> 170  0.08184299  1.473149850 -0.819922909 -2.976595e-02  0.553395052 #> 171 -0.03910164 -0.629319159  0.691185111  2.658950e-01 -0.059096551 #> 172  0.58442014  0.580430401  0.172461496 -4.313022e-01  0.148058441 #> 173  0.51999209 -0.816484920  0.876927678  4.342496e-01 -1.252136181 #> 174  0.31388568 -0.296545482  0.371242358  3.237699e-01 -0.272871731 #> 175 -0.13026429 -0.066963325  0.017936064 -2.108954e-02 -0.213947671 #> 176 -0.03869996  0.281728325  0.250961003  3.204072e-01 -0.480965972 #> 177 -0.30955511  0.572920120  0.267750581 -3.873534e-01  0.224404232 #> 178  0.88238515  0.699983258 -0.289981113 -8.029969e-01  0.518880126 #> 179 -0.48787063  0.596800235 -0.444453757 -7.172919e-02  0.409207630 #> 180 -0.37866790 -1.087207129 -0.053182862 -1.351494e-01  0.497958686 #> 181 -0.22973429  0.460777696 -0.080760822 -8.905720e-01 -0.650329971 #> 182  0.42646175  0.257691478 -0.765272796 -2.223447e-01  0.371736509 #> 183 -1.15185276 -0.456831912 -0.865278839  4.496493e-02  0.291781583 #> 184  0.31974551  0.520435543  0.220119446  4.000668e-01  0.379809480 #> 185 -0.74807761 -0.511440683  0.169115606 -6.850790e-01 -0.023370065 #> 186  0.09842630 -0.787736428  0.161992351  2.808701e-01  0.550093917 #> 187  0.56711125  0.171950179  0.321409820 -3.522394e-01  0.328895214 #> 188  0.01362501 -0.662435962  0.642782560  2.180502e-01 -1.016545929 #> 189  0.77327663  0.006563597 -0.144442689  1.184938e-01  0.646830260 #> 190 -0.32127942 -0.632429759  0.232075646 -5.166439e-01  0.185360666 #> 191  0.20269115 -0.557021395 -0.145423804 -1.184060e+00 -0.497538039 #> 192 -0.18453577  0.085999163  0.429838550 -9.252529e-03 -0.015394799 #> 193  0.32868771  0.148150464  0.462005295  2.475038e-01 -0.508290962 #> 194  0.81628329 -0.126426287  0.563815632  2.204255e-01 -0.371921102 #> 195 -0.18635937 -0.511955056  0.555461588 -8.301853e-02  0.030469810 #> 196 -0.37837957  1.079011347  0.319277142 -2.770309e-01 -0.087943803 #> 197 -0.31309348  0.407279466 -0.413393852 -4.999392e-01  0.586165593 #> 198 -0.38340306 -0.240742428  0.008355799 -1.566464e-01  0.056379134 #> 199 -0.76577079  0.682412294  0.235511200  7.475007e-02  0.143172957 #> 200 -0.04061043  0.856117616 -0.819303676 -5.238131e-01 -0.284763929 #>              pc65         pc66         pc67          pc68         pc69 #> 1    0.4828108040 -1.350355429 -0.064429852 -0.3351290655  0.173317290 #> 2   -0.3834445564  1.062289999  0.754443492 -1.6136632628  0.513043784 #> 3   -0.2705056969 -1.285372949  0.298782652 -0.2360099998  1.491446896 #> 4   -0.3707140515  0.389498109 -1.837283222  0.5370563179 -0.015463047 #> 5    0.1636098702 -0.218534403  0.581235110  0.7542896864  0.451015348 #> 6    1.0472819356  0.895476276 -0.772949279 -0.0595795636  1.045028503 #> 7    0.8399551886 -0.048500713 -1.201070752  0.9817095776  1.347899381 #> 8   -1.3120155545  0.949940206  0.436474351 -0.3135440989  0.751204404 #> 9   -0.4739184036 -0.916068868  0.566573451  0.2464547873  0.617664321 #> 10  -0.6940428461  0.466922443  0.550705704  0.2864839147  0.047743828 #> 11  -1.0653569268 -0.364673713  0.587723750 -0.7619776451 -0.112894829 #> 12  -1.2989827330 -0.371379540 -0.868465493  0.4192597275 -0.689851511 #> 13  -0.0344383518 -0.145996235  0.538573187 -1.4977708254  0.293607755 #> 14   0.1105198284  0.948012212  0.238415306 -1.4264174803  0.002706751 #> 15  -1.1098666050 -0.866314572  0.626119260  0.1002430681 -0.763736104 #> 16  -0.5477951404  0.294539066  0.155104071  0.8054754773  0.112785862 #> 17   1.5791568490  0.263550209  0.443653740  1.4868007186 -0.781112135 #> 18  -0.6245465976 -0.463307901  0.384032228  1.0034721391 -0.667674285 #> 19   0.5786524607  1.362623152  1.066767577 -1.4220034144 -1.581805655 #> 20  -1.5589417514  0.471854227  1.507443383 -0.7712015915 -1.005105699 #> 21  -0.3390890265  0.441059364  0.007154726 -0.9119405962 -0.163821728 #> 22  -0.4245725931 -1.754324195  0.231539610  0.8002567408 -0.461416059 #> 23   1.1637394050 -0.506326886 -0.689883519 -0.2263650886 -3.039670010 #> 24  -0.2081750633 -0.286173640  0.446126598 -0.3647833137 -0.341526572 #> 25   0.0551517463  0.179680198  0.411972920  0.8171145723 -0.153827119 #> 26  -1.3985531114 -0.200778410 -0.551131421  1.5989394004 -1.170924308 #> 27  -0.3433519971  0.395818653  0.258826644 -0.4347768963  0.449811622 #> 28  -1.4824607443 -1.314437002 -0.027881170 -1.7326958952 -0.033923364 #> 29  -0.1704006671 -0.170122975 -0.273357768 -0.5005808175  0.993772505 #> 30  -0.2207070922 -0.640377599 -1.522481044  1.6454661643  0.046762562 #> 31  -1.1777930006 -1.293964271  2.263489927  0.2534651281  0.040030237 #> 32  -0.3306622663 -0.050477635  0.088228034 -1.0935831728 -2.156012825 #> 33   1.1695698178 -0.514351743  0.273087926  0.1597367309 -0.719669913 #> 34  -0.3132635815  2.042586658 -0.365952842 -0.6246719601  0.189321340 #> 35   0.3183522657 -0.455288374 -1.825587639  0.2050423145  0.670813386 #> 36   0.7040212534 -0.675917460 -0.019095449 -0.2778137139  1.839986971 #> 37  -0.3613187293  0.878410631  0.981589755 -0.1685409970  0.054834182 #> 38   0.5521760047  0.766664971 -0.318939291 -0.8322994323  0.422911996 #> 39  -0.1360348602  0.176977667 -2.243451967 -0.7589538291 -0.039578140 #> 40  -0.4459925730  1.189937124 -0.667384048  0.3789429240 -0.140146175 #> 41   1.0709076840 -1.093709479 -0.645149797  0.9219003430 -0.767839299 #> 42  -0.9609623021 -2.615301449 -1.029106003 -0.2976374790 -0.110158335 #> 43  -3.3380479198  1.053472849  0.092200877  0.0028350500  0.943100222 #> 44   0.5561669015  0.135887319 -1.044783582 -1.3981330344 -0.307483037 #> 45   0.5435036483  0.054262091 -1.013602853  0.4030227881  0.253893071 #> 46   1.5247238338  0.601413681  0.938215712  0.0584006664 -0.347883781 #> 47   0.3721125505 -0.622332030  0.994825560 -0.8931473482  0.041631086 #> 48   0.3227536627  1.691534188 -0.665639888  0.3851993179 -0.311761037 #> 49   1.2964892690  0.013163877  0.407025377 -0.2073000982 -0.357653684 #> 50   1.1323378996 -0.495520884  0.662837973  0.3096722860 -0.525370322 #> 51  -0.1550498531 -0.575350695 -1.606990830 -0.2806969324  0.898374656 #> 52  -0.5539534153  0.019980961  0.245306973  0.3895411091 -1.848592136 #> 53  -0.2321905705  0.130496197  0.412378015 -0.1455612463  1.747816858 #> 54  -2.0756631972 -0.163146672 -0.331059008  0.7906432561  0.256509615 #> 55   0.0957481188  1.554117982 -0.955633968 -0.5969968350  0.292919754 #> 56  -1.3881634410  0.306193823 -1.357656574 -0.6960688099 -1.388080225 #> 57   1.5733702842 -1.279646029  0.277259656  0.3068967587  0.949083297 #> 58  -0.1253427220  1.229010857  0.798955520  0.9095522030 -0.749179338 #> 59   0.3007212213 -0.985047280  0.057406425  0.5179809250  0.775858599 #> 60  -0.4943367513 -1.600261842 -0.863700732 -0.5750773463 -1.127442901 #> 61   0.2005476887  1.915756858  0.083153245  0.8288306649 -0.581599546 #> 62  -0.4357598132  0.367243779 -0.395326247 -0.6793827932  0.806841313 #> 63   1.8571204501  0.713303345 -1.646156420 -0.0563164825  0.743225109 #> 64   1.7967495404  0.759169313 -0.390754192 -0.8399011504  0.623891844 #> 65   1.4767615497 -0.372514120 -1.089101913  0.0803305729  0.323495292 #> 66  -0.1908374419  0.947002335  1.230911823 -0.3587177942 -0.197243363 #> 67  -0.5658427322 -0.664200236  0.325672347  1.4243448309  0.700270350 #> 68  -0.6819050740 -0.391487478 -0.198124813  1.0600204226 -0.043000665 #> 69   1.0187271861 -0.764532296  0.119889450 -0.5391947488 -1.174899705 #> 70   1.6532975451  0.361363484  1.378725979  0.7430740372 -0.377524639 #> 71  -0.2709636105  0.356807740 -0.523676932 -0.1532329211  0.332280053 #> 72  -0.1864083287 -0.166940015  0.247830690 -1.9163802704  0.648844546 #> 73  -0.7604641842  1.004299763  0.197853756  0.5169555214 -0.892002994 #> 74  -0.8047387856 -0.628757773  0.267388841  0.5845426884 -0.475290941 #> 75   0.8480064696 -0.247661006  0.052272473  0.5657758971 -1.158123921 #> 76  -0.0081441801 -0.710216224  0.435092500 -0.6093526800  1.054042872 #> 77  -0.6864888825 -0.292970178  1.206621608 -0.2831184291  0.221418030 #> 78   0.7442956735  1.329111852 -0.597602690  1.3471116950  1.004373324 #> 79  -0.1572180655 -1.498099906  1.366695366  0.5523130434  0.863040337 #> 80  -0.4442386476  0.985940349  0.035307462 -0.1647499885  0.473199303 #> 81   0.1973029063  0.220714945  1.397714341 -0.0324200826 -0.035080783 #> 82   0.6028260105 -0.021262837 -0.022546732 -0.1851962408 -0.875888943 #> 83   0.9758323489  0.006684012 -0.659920271  2.3736256747 -0.473275360 #> 84   1.0188461818 -0.293964877 -0.994102306 -1.9475858027 -0.589123356 #> 85  -0.6293366062  0.090059177  0.144806552 -0.4554598704 -1.056520629 #> 86  -0.7873673092  1.513500296  0.803242118  0.7461446347  0.110578329 #> 87  -0.3050688865  0.449097953 -0.275865549 -0.3174883533 -0.684776801 #> 88  -0.8392609244 -1.546303426 -0.966637533 -0.8020049104 -0.439036442 #> 89   0.9578091082  1.553939715 -0.007263201 -0.4923987970 -0.212257382 #> 90  -1.0433377111 -0.034630695 -0.719605886  0.9883812656  0.463051662 #> 91   0.2311249508 -0.056786438  0.348277195 -1.1334200444  0.844718708 #> 92   1.9787467784 -0.616350791  0.073768987 -1.5910207365 -1.096409093 #> 93  -0.0794591658  0.021680363  1.830183375  1.0630296782  0.527448505 #> 94  -0.9550287311 -0.490242931 -0.320797072  0.8244534264  2.661126263 #> 95   1.3203555461 -0.286235659 -0.072189349  1.1842581551 -0.254255832 #> 96   0.2253556133 -0.206303859  1.677477437 -0.2088502535  1.037340473 #> 97  -0.1034752442  0.030605197  0.196082423  0.7175531593  0.248268107 #> 98   0.1220377781 -0.028036451 -0.314245925  1.4445601193 -0.424163936 #> 99   0.5372478827 -1.782819259 -1.075515362 -0.5037797520  1.035920710 #> 100  0.6455820198  1.930833736  1.416714545  0.2724666823  0.149404297 #> 101 -0.4102156655 -0.234956147 -0.115186215 -0.0341468955 -0.168818101 #> 102  0.2995805000  0.358744042  0.238971525  0.2287348014  0.373812985 #> 103  0.0654170522 -0.891031062 -0.140949120  0.0003809559 -0.455113019 #> 104  0.3089236503 -0.066353991 -0.342349856 -0.0286378938  0.641163380 #> 105 -0.4907492389 -0.566611973 -0.169573193 -0.3136393153 -0.069819432 #> 106  0.0983552695  0.117672770 -0.375561445  0.2267172294  0.363748023 #> 107 -0.4754520391  0.055737439 -0.121547463 -0.4587217112 -0.162750941 #> 108 -0.3035803179 -0.022906505  0.135813755  0.2972343515  0.330760865 #> 109  1.0374074526  0.371304306 -0.610824796 -0.7277261098  0.863773555 #> 110  0.4163145933 -0.301892102 -0.509976307  0.0405390942 -0.013199653 #> 111  0.4174729994 -0.012110199  0.094791316 -0.1763241972 -0.199628418 #> 112  0.6537310572  0.049627837  0.157473772  0.3794492781 -0.088901514 #> 113 -0.0800697442  0.027888172  0.945668393 -0.3108765239  0.004945220 #> 114  0.0990473156  0.362287065  0.106113909 -0.4076541828  0.375527319 #> 115 -0.3169419275 -0.171957344  0.322943251  0.3831028221  0.199779376 #> 116 -0.1478973606  0.361281753  0.073269303 -0.0138401595  0.273346292 #> 117  0.4225720243 -0.359175780 -0.012989175 -0.1580332767 -0.580581392 #> 118 -0.0790044469 -0.309130891 -0.261982432  0.0288939288  0.126722198 #> 119  0.0228214551  0.153980019  0.545452881  0.3836944559 -0.284416969 #> 120 -0.0013623781  0.167759556 -0.038522651 -0.1976095321 -0.301262617 #> 121  0.3268528416 -0.328113135  0.407298562 -0.2123949678 -0.086797312 #> 122  0.6610568999 -0.188361481 -0.055654713  0.2716025419  0.323055999 #> 123  0.7875780953  0.210484904  0.221182608 -0.6591360388  0.376815365 #> 124  0.2698831770  0.696178290 -0.290192151 -0.0015568527  0.449896409 #> 125 -0.0421352554 -0.049780993  0.751992968  0.2116496617 -0.454327889 #> 126 -0.0630087198  0.570678218 -0.035597913  0.3252179415  0.488919201 #> 127 -0.4554395289  0.115479879  0.117465983 -0.8254658552 -0.054686835 #> 128 -0.3980584444  0.876885059 -0.492904681 -0.2243713584  0.498022342 #> 129  0.9072068621 -0.907867617  1.030901989 -0.4235371513 -0.076236783 #> 130 -0.6515309724 -0.946536966  0.307252850  0.4590994660 -0.785394495 #> 131 -0.0008990062  0.321829533  0.229297231  0.8820129674 -0.674001900 #> 132 -0.1854982832  0.277985575  0.528502068  0.1501628614  0.219727320 #> 133 -0.6144951732 -0.830100853 -0.581461353 -0.4731758977 -0.188143331 #> 134 -0.5456300488  0.943038796 -0.510519551  0.1473074306 -0.296326067 #> 135  0.0943824445  0.224988582  0.201251864 -0.0889071219  0.243280511 #> 136  0.4395926958  0.135773524  0.244976485 -0.0314671066  0.713108840 #> 137 -0.1179716571  0.164899723 -0.371330093  0.6954963600 -0.034556627 #> 138 -0.2922648514  0.613507377 -0.537205122  0.3853260197  0.209800982 #> 139 -0.4555407873  0.119590225 -0.175509174 -0.1504225173 -0.141653785 #> 140 -0.0330277172 -0.111589477 -0.006314482 -0.2091647359  0.442147987 #> 141 -0.3729250848 -0.048350122 -0.456750631 -0.0634929594  0.349286938 #> 142 -0.0617839826 -0.767621004  0.396115579  0.2247160291  0.001672621 #> 143  0.0207607756 -0.245555516 -0.261540476 -0.2358323416  0.518846925 #> 144 -0.1236216984 -0.281804783 -0.403374255 -0.1445728947 -0.147134924 #> 145 -0.0064654885 -0.075987651  0.012931207 -0.2987013872 -0.560563828 #> 146  0.0919809007  0.410612234 -0.488387642  0.6409208461 -0.578040950 #> 147 -0.0161965314 -0.720380965 -0.151678685 -0.0584944800 -0.340639331 #> 148 -0.4544975435 -0.385654432 -0.002095744 -0.4258260866 -0.403429971 #> 149 -0.1618070703  0.305382112 -0.099594084 -0.1103357307  0.301417408 #> 150  0.2579326875  0.395167545  0.399576309  0.7604884260 -0.595532956 #> 151 -0.1926293052  0.206813223  0.193573121 -0.4815639831  0.447760118 #> 152  0.6450569045 -0.454183073  1.297610919  0.3864929668  0.183812387 #> 153  0.2067735515 -0.191324108 -0.263776259  0.0715563002 -0.272917580 #> 154 -0.3723346918  0.581349327 -0.980988601  0.1724870369 -0.262408696 #> 155  0.2356476147 -0.840562253  0.126297213 -0.2979365584  0.128303745 #> 156 -0.2282000011 -0.326958885 -0.072223196 -0.1945945729  0.063164654 #> 157  0.0785060012 -0.176527973 -0.190754601 -0.1398992887 -0.240365561 #> 158  0.4246368226 -0.147383438 -0.770904406  0.2773545805 -0.425326982 #> 159 -0.2959856347 -0.356708259 -0.393761031 -0.3140659728 -0.196213692 #> 160  0.1807658970  0.192682357  0.372844187 -0.7023657123 -0.315572128 #> 161 -0.6961671994  0.452242870 -0.661789669  0.5422325720  0.065475935 #> 162 -0.4601495464  0.096476959 -0.549978665 -0.0279515325 -0.800097022 #> 163  0.0423119240 -0.162910510  0.326914782  0.1460304996  0.326953010 #> 164 -0.1367986904  0.045543033  0.006110422 -0.5932534554 -0.210143513 #> 165  0.5046309074  0.826870512 -0.314569520  0.3681118437  0.152754912 #> 166 -0.0686353878  0.403954237 -0.139855204 -0.4802567493 -0.054660154 #> 167 -0.0879319402 -0.141886309  0.383400038 -0.0838085325 -0.109658990 #> 168  0.4658927678 -0.477483441 -0.031933338  0.7392441561 -0.445394285 #> 169 -0.1871441047 -1.087320150  0.078373668 -0.6899472658 -0.123517057 #> 170  0.9678483262 -0.701941779  0.952537196 -0.5274344949  0.091002924 #> 171  0.6516445958 -0.452401462 -0.363512639  0.3341563865  0.030211610 #> 172  0.2281745788 -0.467852629  0.417316576 -0.5323013226  0.127347872 #> 173 -0.3055269734  0.072546440 -0.001484666  0.6936446123  0.178417681 #> 174 -0.2838990504 -0.084540349 -0.495240793  0.2144205072 -0.269324854 #> 175 -0.4333574115  0.346290717  0.658803732 -0.0440703376 -0.155529543 #> 176  0.1948332336  0.169036095  0.603897594 -0.5073028736  0.165669305 #> 177 -0.2306918736  0.538982829 -0.252736436 -0.1434984202 -0.257536515 #> 178 -0.5161115710  0.678718039 -0.404037844  0.1626493861 -0.010324396 #> 179 -0.4701320782  0.474642548 -0.515641972 -0.3068663262  0.024294383 #> 180  0.0236419604 -0.127919202  0.458672156  0.0933002686  0.591336929 #> 181 -0.4101973609 -0.255945218 -0.410001872 -0.2752056658  0.296570101 #> 182 -0.1075769572  0.628725521  0.108133282 -0.0374984324  0.099528561 #> 183  0.2921867170  0.323430284  0.225128577 -0.2787565577 -0.622637025 #> 184  0.1206130756  0.270294561 -0.751861029  0.4613335868 -0.231608215 #> 185 -0.5279847093  0.400607435 -0.347291439 -0.1490814981  0.011261678 #> 186  0.8256679114  0.092260510 -0.492847301  0.3804196672  0.070537548 #> 187  0.0545457742  0.091554684  0.003183506  0.4255085288 -0.240404031 #> 188 -0.5254897570  0.367683854 -0.155136081  0.0038994941  0.123793621 #> 189 -0.2967972639  0.016457810 -0.283376756 -0.1779227732 -0.332628256 #> 190  0.0541578253 -0.023581377  0.923520777  0.8246857838  0.066548388 #> 191  0.1648505736 -0.068859160  0.052933211 -0.3796064936  1.111962727 #> 192  0.3879560344 -0.871741141  1.272286816  1.0838801720  0.005649984 #> 193  0.8292754507 -0.051364596  1.012370223  0.5518729054  0.835032266 #> 194 -0.2136014522 -0.395373742 -0.144441863  0.3108774837 -0.261317558 #> 195  0.3677031517  0.324117271  0.098755761 -0.4267583579  0.645121481 #> 196  0.7355015545 -0.418122305  0.091754425 -0.2476172744  0.487453050 #> 197 -0.3007207299 -0.264785686 -0.207482587 -0.0260290881 -0.481746033 #> 198 -0.3129678406  0.539966887  0.263853394  0.4612705040 -0.239215955 #> 199 -0.3229571036  0.400344150 -0.852021860 -0.0343961723 -0.177184902 #> 200 -0.6460410187  0.322339470 -0.118349968 -0.3328540887 -0.209448551 #>             pc70         pc71        pc72         pc73         pc74 #> 1   -0.551648252 -0.337712188 -0.18013963 -0.602946186  0.568490469 #> 2    0.179839547 -0.267706594  1.25931452  0.456654363 -0.326808957 #> 3    0.075005333 -0.192775061  0.45607617 -1.433615014  0.635970597 #> 4   -0.245034127  0.560648143 -0.54804850 -1.980938810 -1.314790914 #> 5   -1.342713966  0.492571069 -0.98709163 -0.163755541  0.382564344 #> 6    0.829569801 -0.617132369  0.66760497 -0.017658935 -0.272391051 #> 7   -0.441054399  0.970684207 -0.33938418 -0.322418935  0.710454245 #> 8   -0.473576577 -1.202091621  0.11135039 -0.324466490  0.726735123 #> 9   -0.416111743  0.559777184  0.54590612 -0.487146732 -0.242516550 #> 10  -1.097974097  0.471904925 -0.96777820 -0.748771173 -0.704995574 #> 11   0.629675593 -0.846334808 -1.05862704 -0.723808170 -0.727837193 #> 12   0.905487285 -0.096473918 -0.09070928  0.352212823  1.097270480 #> 13   0.348058310  0.048241466  0.28088868 -0.032103909  0.218870902 #> 14  -0.055469556  0.789771475  1.32713548 -0.360683081 -0.556002155 #> 15  -0.009799152  1.417168372  0.98032394 -0.109797454  0.252655822 #> 16   0.871982861  0.361157427 -0.62987326  0.357413410 -1.097690581 #> 17  -0.665059472  0.839034801  0.52680364 -0.652879237 -1.210265252 #> 18  -0.844307810  0.179841268  0.90062338 -0.462663361 -0.767081516 #> 19   0.368037262  1.629563448 -0.23134562  1.204453133  1.221510664 #> 20  -1.132057912 -0.040832840  1.35459037  0.899982425 -0.330562816 #> 21  -0.261231915 -0.136444154  1.50404381  0.986595011  0.180317649 #> 22  -0.502892935 -0.589387925 -0.67575862 -0.277035194 -0.282388926 #> 23   0.011576743  0.882297245  0.22144409 -0.141333353 -0.142361433 #> 24  -0.042895825 -2.409757628 -0.69796333 -0.896936182 -0.580556497 #> 25   0.118884780 -0.655395867 -1.25776967  0.038985758 -0.435192856 #> 26  -0.102274145 -1.017856721 -1.08070602  0.460938158 -1.534818040 #> 27  -0.900548905 -2.080313075  0.85800892  0.253158476 -1.259823171 #> 28   1.531676514  0.450963350 -0.27949675 -0.157791777 -0.710037619 #> 29   1.231074827 -1.054630503  0.02588082  0.424901514  1.006425470 #> 30   0.706272153 -0.385787512 -0.26634706 -0.205221565  0.804172216 #> 31  -0.395262275  1.412572074  0.36148120 -0.570521104 -0.014722838 #> 32  -1.054070848 -0.232390606 -0.31535529  0.413308436  0.304160122 #> 33  -0.213406953  0.781586681 -0.18286539 -0.887337691 -0.187065244 #> 34  -0.142001822 -0.965792050 -1.58108451  1.707214227  0.418219384 #> 35   0.878527631  0.522044208  0.29190617 -0.336176399 -0.052298234 #> 36  -0.839996619  0.766512798 -0.31529521  1.435629493  0.711050675 #> 37   1.462721356 -0.299104210 -0.98760295  1.776740791  1.064667371 #> 38   0.520843227  0.152458837  1.13978624 -1.385574776 -0.290306235 #> 39  -0.328469022 -0.154735601 -0.03534702  1.204673054 -0.464438711 #> 40  -0.324724419 -0.936999489  0.01307987 -0.003899102 -0.524886760 #> 41   0.037853921 -1.077401768  0.53060473  1.245829273  0.587791183 #> 42  -0.282615825 -0.079394111 -0.31972363 -1.339306785  0.567215028 #> 43   0.664680935  0.085368812 -0.29663440  1.230818959 -0.685861654 #> 44  -0.459408668  1.053752215 -1.19941129  0.312516348 -0.188194663 #> 45   1.500251611  0.698232037 -0.31562198 -1.172154427  1.116506051 #> 46   1.242812788 -1.338402273  0.48707181 -0.194106128 -0.517567040 #> 47   0.560625680  0.562479562 -0.49034005  1.034532009 -0.731168867 #> 48   0.652367333 -1.181516588  0.15649033  0.920583911 -1.558636159 #> 49  -0.827875379  0.301458033 -0.10974393 -0.393536751 -0.343449847 #> 50  -0.341283724 -0.793289208 -0.25280539  0.898312629  0.983116252 #> 51  -0.526769907 -0.060191808  1.00537170 -1.292319186 -1.186643322 #> 52  -0.281677472  1.614204325 -0.59086972  1.071689362  1.364651578 #> 53  -0.147401436  0.360097011 -0.18304624 -0.252867826 -0.488233210 #> 54  -0.040445717 -1.669375153 -0.11320930 -0.088359085 -0.280747112 #> 55  -0.959994532 -1.177626950  0.41471172  0.625845867 -0.035214284 #> 56  -1.192807650 -0.818760949 -0.05666537  0.388555581 -0.163610730 #> 57   0.887581894  0.451136808 -0.39036240  1.663719319 -1.603947970 #> 58  -1.324086340  0.052495078  0.46079143 -1.065074683  0.771612879 #> 59  -1.606463945  0.077174988  0.24527006  0.134467272  1.122111304 #> 60  -0.201472737  0.484977853  0.24498176  0.434259827 -0.848277066 #> 61   0.158585509  0.828739871  0.22829086 -0.646987674 -1.343723993 #> 62   0.821887237  1.180095441 -0.76757803  0.367449684 -0.888322677 #> 63  -0.976266754  0.343936087 -0.34640737  1.455280488  0.129818032 #> 64  -0.747429321 -0.092920989  1.87036438  0.515278435 -0.453178065 #> 65  -0.368813867 -0.528807303  0.28954545  1.125510811  0.465311052 #> 66   1.015647985 -0.506908845 -0.28289491 -1.378821359  0.571264777 #> 67  -0.606568375 -0.113944099  0.98106369  0.410937510  0.884241463 #> 68   1.047952651  0.003975626  0.12380771 -0.387441602  0.660389010 #> 69   0.936166542  0.251176126 -0.65446085 -0.392357716 -0.258490026 #> 70  -0.578276825 -0.477776963 -1.14420475 -0.277199967 -0.100268041 #> 71   0.067918499 -0.993895966 -0.67851830 -0.623419484  1.166746500 #> 72  -0.334232723 -0.107386748  0.44599491  0.363913926 -0.763841147 #> 73  -0.183602615 -0.007584445 -1.52246179 -0.664362533  0.233499141 #> 74   2.242530556  0.650412741 -0.07984981  0.079932146 -0.507927992 #> 75  -1.833273165  0.665856307  0.97503812  0.181036583  1.288119812 #> 76  -0.653649438  0.613197147  0.19189458 -0.402396726  0.342280497 #> 77  -0.119011694  0.117624836 -1.03102292  1.209532940  0.787467379 #> 78   0.243446680  0.366727931  1.17567706  0.246331456  0.810752796 #> 79  -0.055750282 -0.679464583 -0.05341723  0.391902837 -0.705235740 #> 80   0.759912307  0.459702122  0.09570306 -0.148792785  0.888546715 #> 81  -0.004059769 -0.375180548 -1.58995748 -0.038661916  0.099437568 #> 82  -0.361410408 -0.285167899 -0.32081361 -0.021862747  0.159180645 #> 83   0.178913117 -1.890241616  0.35329836 -0.419508060  1.129074219 #> 84  -0.461912367 -0.017793221  0.76368857 -0.106288840 -0.100645975 #> 85   0.742611739  1.312688069  0.45509725 -0.701478850 -0.692924955 #> 86  -1.130782418  0.021338534  0.32973654 -1.647482992 -0.494907298 #> 87   0.309752361 -0.616366798  1.36949335 -0.556504807  1.022718640 #> 88   0.587518803  0.024256555 -0.38693339 -0.677746161  0.699590509 #> 89  -0.912342251 -0.813680095 -0.70738614 -0.486814064  0.422643412 #> 90   0.011282685  1.063710950  1.02267916  0.430983384 -1.442988363 #> 91   0.310779388  0.790193875 -0.22408723  0.553067819  1.010714331 #> 92   1.491174870 -0.418625998  0.73736114 -0.190298110  0.051697821 #> 93   0.414312205  1.025766065  0.59306314  0.112793958  1.011801734 #> 94  -0.488798700  0.158985183  0.67540673  0.910102196  0.285727231 #> 95   1.112904103  0.814856093 -1.57209324  0.611117703  0.029562918 #> 96   0.084296995 -0.698772698 -0.68227838 -0.500979823 -0.217579722 #> 97   0.431714795  0.569140591  0.08320941  0.286330998  0.180228626 #> 98   0.436845048  1.038465724  0.19542655  0.100677249 -0.079081350 #> 99   0.354132588  0.333774817  0.19523783 -1.057342049 -0.641774922 #> 100  0.263777936 -0.435077550 -0.55272018 -0.597943238  0.479098939 #> 101  0.229962189 -0.269245200 -0.45050381  0.274334242 -0.136460633 #> 102  0.042700188  0.105405897 -0.02392457 -0.433535712 -0.453086774 #> 103 -0.358758004 -0.262277758 -0.16018603  0.764696179 -0.607834414 #> 104 -0.416849358  0.263244463 -0.86615531  0.046101434  0.011723370 #> 105 -0.404393845  0.127125096  0.16065000  0.004959204 -0.020744149 #> 106 -0.986819419  0.552851610  0.25229013  0.359963638 -0.032080023 #> 107 -0.134782898 -0.090576846  0.11944788 -0.762229333  0.525685442 #> 108 -0.470818718 -0.120729808  0.22159263  0.135655072  0.809892933 #> 109  0.077349233  0.340246306 -0.88669536 -0.550835340 -0.074413301 #> 110  0.728633721  0.071070013 -0.07053386  0.345887505  0.108264871 #> 111 -0.078560446 -0.182686654 -0.18652741 -0.476050906 -0.241477050 #> 112 -0.272260033  0.073463733  0.06824979 -0.515630788  0.080513081 #> 113  0.065861545  0.010104322  0.15243667  0.110708586  0.228174913 #> 114 -1.024415263  0.291532549 -1.01093701 -0.210472795 -0.243926838 #> 115 -0.114335415 -0.192998497  0.93065924  0.428185128 -0.017104616 #> 116 -0.402895191  0.472336716 -0.08249053 -0.175223148  0.052126381 #> 117 -0.070602861  0.505465520  0.52092603  0.376177979  0.436767602 #> 118 -0.048466892 -0.612199570  0.06846750 -0.779842369  0.534734016 #> 119 -0.768632474  0.226801724  0.03885482  0.019589797  0.156637542 #> 120 -0.081268578  0.451105573  0.23936579 -0.425216045  0.142994997 #> 121  0.545651971 -0.244645567  0.55465461  0.143299675  0.027896304 #> 122 -0.356965300  0.250952856 -0.17087134 -0.165136649 -0.224954285 #> 123 -0.400307980  0.008506243 -0.44786142 -0.572891319  0.102750944 #> 124 -0.022904821 -0.355900538  0.50292899 -0.692933291 -0.255957483 #> 125  0.157434774 -0.759461375  1.32250948  0.614315728 -0.263354137 #> 126  0.873733798  0.330080533 -0.02702682  0.734893785 -0.548119054 #> 127 -0.427142602  0.057815918 -0.24863024 -0.092212352  0.505949402 #> 128 -0.066602761  0.602487985 -1.05195013 -0.526884440  0.125596802 #> 129 -0.286587081 -0.159180435 -0.16712095  0.543725268 -0.382228042 #> 130  0.381295050 -0.511563874  0.65381299  0.474281077 -0.001482474 #> 131  0.021512015  0.274246097  1.00295367  0.690278928 -0.630961210 #> 132  0.386596203  0.261284052 -0.07369249 -0.238182040 -0.251623402 #> 133 -1.040601462 -0.280213409  0.23990601 -0.018613465  1.100309927 #> 134  0.021299587  0.967751056 -0.06170343 -0.023580730  0.181392943 #> 135  0.203848086  0.046904143  0.46080436 -0.619490998  0.239512468 #> 136  0.182074982  0.089843080  0.24135580 -0.295197974  0.174294102 #> 137  0.274417667  0.106956684 -0.18653546  0.257240535  0.088077498 #> 138  1.095976156  0.910866479 -0.44915745 -0.091608213  0.503615763 #> 139  0.942767922  0.096196975  0.52582623 -0.122009830  0.431817680 #> 140 -0.500807587 -0.382673924  0.26217333 -0.006424166  0.280569721 #> 141 -0.463235986  0.302679734 -0.98851502  0.461292928  0.038418428 #> 142 -1.173807419 -0.996552066  0.08979882  0.759690798  0.164048234 #> 143 -0.270468650  0.039370606 -0.63158945  0.035066658  0.125135687 #> 144  0.142409350 -0.278794541  0.10791403  0.399527636 -0.174226861 #> 145 -0.115108595 -0.315366562 -0.46241937 -0.293256616 -0.111257648 #> 146 -0.096670007 -0.165678003 -0.09450056  0.241879656 -0.666076584 #> 147  0.491039551 -0.788545746 -0.48928743  0.527870987 -0.059906081 #> 148  0.063903929  0.435634944 -0.33137856  0.522237261 -0.243563538 #> 149 -0.541512130  0.200534346 -0.77221860 -0.196141128 -0.082430446 #> 150  1.220004323 -0.061954970  0.50603890  0.016191408 -0.548150731 #> 151 -0.153259642  0.878008494  0.82629545  0.280488492 -0.429948756 #> 152  1.332204212 -0.185793603  0.27857623 -0.244391075  0.293230924 #> 153 -1.436066522  0.234849287 -1.49300070 -0.386849372 -0.427289348 #> 154  0.586841149 -0.018275280  0.81416211 -0.031260865  0.538791065 #> 155  0.462963533 -1.350166683  0.01977834  0.309579349 -0.136229044 #> 156 -0.746328583  0.328150829 -0.22084605  0.406409681 -0.692394219 #> 157 -0.276917272 -0.329008300  0.29386217 -0.124266411 -0.509478856 #> 158  0.056117898 -0.679196519  0.19648867  0.221877331 -0.982579830 #> 159 -0.151190645 -0.036615045 -0.04722316  0.019822591 -0.301168327 #> 160  0.115506089  0.001338470  0.32142026 -0.466452221  0.014259247 #> 161 -0.001730117  0.187200720  0.72612130  0.272001164  0.790271115 #> 162  0.259895008  0.385228088  0.36743546 -0.122280064  0.202557405 #> 163 -0.077530502  0.053648230 -0.33908293  0.582738539  0.098645195 #> 164 -0.088629103 -0.375021012 -0.61368922 -0.710542476  0.780401167 #> 165  0.402659764  1.009283836 -0.32247942  0.107703073 -0.656790981 #> 166  0.226897006 -0.309804488 -0.25842063 -0.279486612 -0.019598991 #> 167  0.195943547  0.544529593 -0.03469697 -0.376365925  0.157777305 #> 168 -0.259233380  0.078667787  0.27130811  0.119640518  0.075992266 #> 169 -0.272370382 -0.563035657 -0.13328839  0.172945936 -0.040695316 #> 170  0.890573739 -1.085396157  0.28148371 -0.882238230  0.334981339 #> 171 -0.178813758  0.117691554 -0.76851663  0.311895833 -0.749147832 #> 172  0.269467960 -0.426464154 -0.22569320 -0.072644147 -0.409393047 #> 173 -0.315568298  0.531844994 -0.25713426  0.262988428  0.137631677 #> 174 -0.203796057 -0.053753271 -0.32607294  0.899071746  0.408701414 #> 175 -0.213328005 -0.173345088  0.23669366 -0.089836736 -0.122379173 #> 176 -0.241691095  0.025330647  0.17642100 -0.132516119 -0.470081783 #> 177  0.897095240  0.100538398  0.09974085 -0.004302124  0.593275779 #> 178  0.160812457  0.179204269  1.04102180  0.151110316  0.275888538 #> 179 -0.280893293  0.322615957 -0.30513850 -0.531282652  0.441834007 #> 180  0.174653162 -0.078133228 -0.24190655  0.265755423  0.219092531 #> 181 -0.330520332  0.076905361 -0.05129497  0.316892386 -0.094213265 #> 182 -0.538738022  0.320608456  0.39784627 -0.733468351  0.866100891 #> 183 -0.365340274  0.058884554 -0.64536894 -0.680883052 -0.643596030 #> 184  0.731639610 -0.655516182 -0.19842988 -0.241464950  0.567155699 #> 185  0.784673915  0.017057417  0.16251879  0.211998350  0.397459400 #> 186  0.328780889  0.154472113 -0.08233332 -0.113474112 -0.213846762 #> 187 -0.056407583  0.282350011  0.23008914  0.141458339 -0.252243428 #> 188 -0.089427723  1.343037648  0.11495401  0.345941853 -0.180213708 #> 189  0.272659116 -0.506006263  0.41283825 -0.663804802  0.735460453 #> 190 -0.097423163 -0.207223338  0.05752983  0.228372870 -0.837589572 #> 191 -1.219025306  0.399135348 -0.75985186 -0.233466688 -0.231975862 #> 192 -0.232521252 -0.370037991  1.15227529  0.937152604 -0.623338858 #> 193  1.150323793  0.326465104  0.47774104 -0.346474607 -0.415880311 #> 194 -0.179753524  0.014963487  0.05862035  0.622737602 -0.165876547 #> 195  0.427263798  0.053856081 -0.63266738 -0.187832629 -0.120290810 #> 196  0.598847992 -0.838291363 -0.17546753 -0.022589006  0.047729614 #> 197  0.224002902 -0.246400736 -0.07069055 -0.058167266  0.602541862 #> 198 -0.339099908 -0.293551781  0.10592725 -0.398925968 -0.544855591 #> 199  0.965329788 -0.630443047  0.18657169 -0.055870440  0.256971895 #> 200  0.230155776  0.054406071  0.14585621 -0.280171979  0.254691922 #>             pc75         pc76         pc77         pc78          pc79 #> 1   -1.071994799 -0.347176109  1.128888271  0.088207215 -0.1873742084 #> 2    0.394939064 -0.221497829  1.764683326 -0.969942937  0.0086793410 #> 3   -1.024156866  1.356718250  0.067106199 -0.425890351 -0.3139627117 #> 4   -0.175168301  0.668046620 -0.669588388  0.069740583 -0.3673639997 #> 5    0.985159774 -1.581147091 -1.445964373  1.321600138 -1.4458149655 #> 6   -1.463061657  0.979185411 -0.330173957  0.951663451  0.7144389058 #> 7   -0.847563718 -0.309569167  0.874461077  0.664569548  0.7846959198 #> 8   -0.825719544  0.389593270  1.269240472  0.704875811  0.2753902511 #> 9    0.784809005 -0.728849520  0.407046202  0.422470885  0.5595209731 #> 10  -0.642559998  0.062845441  0.182039351 -0.457141143 -0.8626968957 #> 11   0.358397530  0.397821867  0.187111668  0.730141271  0.2886697500 #> 12   0.677236245 -0.087220353 -0.089057180 -0.056848952  0.5186901217 #> 13   0.205665498 -0.165666064  0.287889133 -0.177251365 -0.1446971226 #> 14  -0.660247677 -0.462050068  1.460629722  0.524540526 -0.5849183421 #> 15   0.029634107 -0.366405630 -1.018846891 -1.183024187 -0.1041206585 #> 16   0.276866211  0.301020182 -0.680779536 -0.661795706 -0.0771176421 #> 17  -0.350822518 -0.110260759  1.167732836 -0.051171755  0.5348902160 #> 18   0.006717460  1.025611398 -0.224828457 -0.815470021  0.4787245052 #> 19  -0.252862282  0.577202980 -1.008628257 -1.057920925  0.1177624104 #> 20   1.032512895  0.023614801 -0.372308087 -0.079402909  0.4468283464 #> 21   0.314748622  0.082366357 -0.731925677 -0.992588632 -0.5793388881 #> 22   1.530796313 -0.018989467 -0.028277255 -0.457175132  0.4676537400 #> 23   0.191986947  0.478349811  0.140242993  0.407057014  0.8712350047 #> 24  -0.328930783 -0.560546396  0.053125698 -0.410135469  0.8301327498 #> 25   0.111537833  0.481857505  0.068120306 -0.569329577 -0.0667007935 #> 26  -0.305232816 -1.402527007  0.199360690  0.048584205 -0.3414330253 #> 27   0.257859863  0.487691731  0.340244847 -0.346721620  0.3611141528 #> 28   0.416428332  0.674409054 -0.522222962  2.003686958  0.0591021146 #> 29  -0.247142702 -0.004483566 -1.366798644  0.292187344  0.0464697311 #> 30   0.058871649 -0.170764200  0.498920485  0.300672099 -0.7157331979 #> 31  -0.678287146 -0.624208240 -0.516230191 -1.134690958  1.2621655969 #> 32   0.354817494 -0.938344023  1.025113700 -0.665998524  0.3413927792 #> 33   0.177150049  0.077132207 -1.114377927 -0.466255177  0.2073454809 #> 34  -0.649538883  0.115693888 -0.177339106 -0.008956937  1.4333779668 #> 35   0.588646423  0.565869038 -0.530980271  0.561027047  0.2898122726 #> 36  -0.479160881  0.275235430  0.154372221  0.390035499  0.4271236596 #> 37  -0.541214713  0.448774972  0.147520591 -1.175650465  0.1166327542 #> 38   0.229906076 -0.386759309 -1.638182041  0.215523589 -0.0628036419 #> 39   0.813851308 -0.188826163 -0.936790675 -1.263010745  1.1214295882 #> 40   0.024121410  0.087175212 -0.288414323 -0.552796081  0.5997508574 #> 41   0.612064483 -0.716368560 -0.033901977  0.174381491  0.1928108529 #> 42  -0.279623935  0.836716332 -0.471386981  0.170020062 -0.5872889681 #> 43  -0.551966847 -0.710399987 -0.285237922  0.905549943 -0.0147909892 #> 44  -0.038737587 -0.600515588  0.960925278  0.716911130  0.6537660556 #> 45  -0.921120740 -1.608091661  0.613833685 -0.965327939 -0.1488134118 #> 46   0.118614812 -0.102578539  0.264969759  0.911616499  0.5502461229 #> 47   0.831088696  0.575142428  1.161893113  0.931571921 -0.7818839065 #> 48  -0.438782816  1.152482821  0.019470570  0.475989525 -0.4274078863 #> 49   0.317931648  0.934902245  0.093451868  0.526151481 -0.2867604062 #> 50  -0.699443227  1.114269639  0.530352040 -0.142208264  0.7549842581 #> 51   0.653002439  0.007994617  0.354603765  0.116414667  0.3470265412 #> 52  -0.244378716 -0.035594930 -0.027997777  0.586202338  0.5101061443 #> 53  -0.439566519 -0.607118458  1.276673265 -0.111818246 -0.3282554020 #> 54   1.135101299 -0.505868795  0.634707910 -0.341623466 -0.1469968782 #> 55   0.097313651 -0.345509586 -0.302116837 -0.561918443 -0.5857887225 #> 56   0.143273831  0.920006260  1.067341177 -0.474797560  0.0303785328 #> 57   0.871241560 -0.980345177  0.340604142  0.340644759 -0.4741165836 #> 58   0.018972054 -0.327163170  0.431405855  0.621192246  0.1655362870 #> 59   0.692353492  0.339374880 -0.505648673 -0.168748736 -0.6278168671 #> 60  -0.668018279  1.027174140 -0.384910626  0.019450028  0.0119486786 #> 61  -0.400212034  0.185767905 -1.546813096 -0.280742668 -0.1650676299 #> 62  -0.099290136  0.340562417 -0.866449570 -0.302992759 -0.8877502883 #> 63  -0.465536194 -0.886480669  0.005432904 -0.676850187 -0.0114824291 #> 64   0.155380913 -0.566879999 -0.081844691 -0.273482542 -0.4418095255 #> 65   0.614959394  0.473016555 -0.917922620  0.139754254 -0.1231552249 #> 66   0.303850198  1.176014365 -0.603342903  0.932977572 -0.8032059967 #> 67   0.674451737 -0.279317971 -1.133655516 -1.217117396 -0.0508407979 #> 68   0.489567946 -0.523398692 -0.306822543 -0.393202451 -1.8406606554 #> 69  -0.580827692  0.098107803 -0.433269298 -0.610316387  1.3649215540 #> 70   0.046365004 -0.865061484  0.225885253  0.748646986 -1.1449610181 #> 71  -0.902496320  0.235991258  0.598842557  0.721233650 -0.3997316953 #> 72   0.519585262 -1.523302352 -0.436834357 -0.552622188  0.3904248312 #> 73  -0.433235124  1.128519124 -0.090599036  0.068485395 -1.2272667710 #> 74  -0.295771576 -0.897875018 -0.559558490  0.029155573  0.5125714102 #> 75   0.740845190 -0.017393604  0.374574951  0.852317496 -1.0453976752 #> 76   0.462505906  0.051781068 -0.077992959 -0.175851757  0.7145999805 #> 77   0.455653783  0.438864267 -0.421976159  0.151506447  0.3131476583 #> 78   0.044340573 -0.485887170  0.127662956  0.264113275  0.4430983490 #> 79  -0.690500344  0.276650691  1.241191414 -0.558903197 -0.1229682602 #> 80  -0.140121865  0.214195286  0.103933831  0.249998595 -0.0218212717 #> 81   0.646568210 -1.384262395 -0.331241305  0.329018095 -0.3761776707 #> 82   0.125381807 -0.347736443  0.081535969  0.316659259 -0.4069997749 #> 83  -1.136727534  0.155044090 -0.236692520 -0.072645656  0.8919029547 #> 84   0.477063660 -0.509457208  0.739496812  0.063072583 -1.4065100258 #> 85  -0.830466670 -0.785882756  1.122597184 -0.574214738 -0.7707008816 #> 86  -0.984794398 -0.393351222  0.221350678 -0.558795946  1.0848126140 #> 87   0.014179432 -0.179623008 -0.262756689  0.839464884  0.6748983055 #> 88  -0.497543253 -1.343582730 -0.113878648 -0.103632634  0.2612759576 #> 89  -0.546018511 -0.015481330 -0.673765892 -0.613439339 -0.8235826852 #> 90   0.789084113  1.242531471  1.110563749  0.047914370  0.6913340817 #> 91   0.132751113  0.872667702  0.805140347  1.029402956  1.0180374678 #> 92   0.416887370  0.262907242 -0.325077646  0.344190237  0.2773156440 #> 93  -0.608807573  0.846202000 -0.103877213 -0.254525691 -0.4446470097 #> 94   0.847472225 -0.194283555  0.180344905 -0.443285202 -0.4331186207 #> 95  -0.762908945  0.253913282  0.021084667  0.583205761  0.5982106955 #> 96   0.445571454  0.163709013  0.169046794  0.855260461 -1.0299268849 #> 97  -0.268898238  0.047014206 -0.108624099 -0.571008016  0.5109080125 #> 98   0.485022649 -0.957150215  0.046286448  0.801616710 -1.1275174384 #> 99  -0.309925215  1.335082644 -0.211393878  0.055003726  0.2069891229 #> 100  0.343720046  0.995806850 -0.887568016 -0.309007885 -0.9060736806 #> 101  1.055152895  0.189769042  0.266338218 -0.048553540 -0.1144980501 #> 102  0.190812327  0.192980786  0.343189670 -0.333051334  0.1858591436 #> 103 -1.005043134 -0.327936971 -0.075032950  0.603444134 -0.4298721134 #> 104  0.075878953 -0.005607991  0.705453658  0.105510740 -0.0804920705 #> 105 -0.865717005 -0.050032602 -0.730867034  0.014881031  0.2564716306 #> 106 -0.373928341 -0.176194236 -0.569673965  0.526283788  0.4107167104 #> 107  0.591044147 -0.314140702 -0.233450557  0.271189643  0.5612835777 #> 108  0.062313274 -0.224293294  0.069695195  0.192164040  0.6605961023 #> 109  0.002375922 -0.789441461 -0.359955994 -1.065524861  0.4324810189 #> 110 -0.013526958  0.029149409  0.847336986 -0.422259462 -0.0260453886 #> 111  0.527139590 -0.504245096 -0.063843574  0.465256870  0.7436003974 #> 112  1.065750300  0.890365561  0.390961137 -0.228108725  0.8460637182 #> 113 -0.084721978 -0.129514247  0.010846355 -0.019409941  0.2323783761 #> 114  0.437298506 -0.180222619 -0.474059445 -0.290582831  0.5719202263 #> 115 -0.743210408 -0.253999437 -0.926445466  1.040459907  0.3734658548 #> 116  0.060082505 -0.114301501  0.525006507  0.312835615  0.4508056482 #> 117 -0.232838557  1.134448412  0.400015129  0.153375168 -1.0251992979 #> 118  0.222258231  0.017208971  0.299315288 -0.516642533  0.6699324693 #> 119  0.355196154  0.150049596  0.297415516  0.560442422  0.4040363074 #> 120  0.185981334 -0.038263368 -0.399165995  0.322329996 -0.1848761626 #> 121  0.333304895  0.069572946 -0.242710422 -0.706754220 -1.0714124744 #> 122  0.217244529  0.568841333 -0.368883817 -0.024026248  0.0698301420 #> 123  0.127724592 -0.989325025  0.297848798 -0.397376590  0.0455124151 #> 124  0.440392671  0.406877613 -0.790060127  1.128376831 -0.2353393689 #> 125  0.483033790 -0.005457045 -0.606910157  1.228585057 -0.2012696886 #> 126 -0.458343878 -0.252367758 -0.249089787 -0.013260315  0.1251800566 #> 127  0.132274135  0.315934633  0.334288538  0.314989261 -0.6052506688 #> 128  1.463547514 -0.171682654  0.034996483  0.582999552  0.0847779409 #> 129  0.125136449  0.345699465 -0.101575082 -0.610773349 -0.3619832252 #> 130 -0.984347754  0.355454650 -0.415901651  0.516917610 -0.2871688923 #> 131 -0.805399286  0.366193191  0.363711789 -0.123794763 -0.6012072682 #> 132  0.213639439 -1.213310345 -0.797418566  0.829551024  0.8778360167 #> 133 -1.296708087 -0.377762416 -0.074794900  0.473871390 -0.0440234443 #> 134  0.460825989  0.375186523  0.551728293  0.171282527 -0.3665647622 #> 135 -0.264618697 -0.396726520 -0.401293184  0.181131386  0.6606163429 #> 136  0.041306324 -0.136402382  0.123445429 -0.505336518 -0.4588299813 #> 137  0.468399297 -0.327354008  0.463697140  0.061020031  0.4791068017 #> 138  0.909939984  0.086449471  0.129893650 -0.481416180  0.2077975284 #> 139 -0.199503813  0.448896098  0.421327943 -0.170699359 -0.3682722750 #> 140 -0.374271520  0.166519680 -0.511521703 -0.476922066  0.0930538178 #> 141 -0.472499719 -0.480631899 -0.264063241 -0.668709223 -0.6452477981 #> 142 -0.569128863 -0.577027417 -0.779407152  0.754299655  0.7626624368 #> 143 -0.118182175  0.218654114  0.494474416  0.657143162 -0.3349324394 #> 144  0.016101716  0.659973477  0.466829773 -0.256147251 -0.5389703914 #> 145 -0.065230196 -0.571161343 -0.166127153  0.249073400  0.5278296725 #> 146  0.167555870  0.321842594  0.173976289  0.211349957 -0.0938738834 #> 147  0.701018417  0.716677587 -0.218973201 -0.768749705 -1.0903832431 #> 148 -1.186382617 -0.100889764 -0.239673878  0.040762516 -0.4969293240 #> 149  0.603248300  0.788958658 -0.634061551  0.218084496  0.4131053031 #> 150 -0.070439435 -0.224536898  0.072017305  0.108191485  0.0045942888 #> 151 -0.957570696 -0.249697054  0.026041334  1.275289075 -0.2884663238 #> 152  0.579802724  0.079739539  1.678399033 -0.608115526  0.3626803135 #> 153  0.485970228  0.509564445  0.114337318 -0.302312658 -0.5148612749 #> 154 -0.178660838  0.150536374  0.261898464 -1.179412777 -1.3692444493 #> 155 -0.085473938  0.560289794 -0.548118730 -0.692405576 -0.1512875161 #> 156 -0.770536545 -0.211982781 -0.508149108 -0.075162050  0.1515444886 #> 157 -1.294037370 -0.628599571 -0.063898180  0.309707014 -0.7210762288 #> 158  0.223745492  0.129599011 -0.723645706  0.136318465 -0.0614627866 #> 159 -0.887365942 -0.622254063 -0.270004162 -0.355842207 -0.7737552150 #> 160  0.290097958 -0.389425398 -0.420206386  0.042905685 -0.2968524663 #> 161  0.206196712  0.232297084  0.300182520  0.462868032  0.0127715983 #> 162 -0.840190485  0.353406969  0.241479867 -0.283840028 -0.3060725803 #> 163  0.417534558  1.046811414  0.102382826  0.935882417  0.0970395934 #> 164  0.523561310  0.099029740  0.201902285 -0.098123930  0.1690682048 #> 165  0.364214335 -0.791075727  0.196069000 -0.150014780 -0.0940847455 #> 166 -0.276453138 -0.042756229  0.013348852  0.697664341  0.7630101169 #> 167 -0.422454139 -0.039782026  0.602546796 -0.759796119  0.1725327513 #> 168  0.412576632 -0.128638572 -0.121064781  0.034380154  0.3742990897 #> 169 -0.935454349 -0.277025266  0.106140590  0.313415152 -0.0074731940 #> 170  0.422811505 -0.651321221 -0.207043313 -0.401020165  0.1210341650 #> 171  0.276225370  0.448595348  0.388725306 -0.364239873  0.5646754429 #> 172 -0.686901848 -0.811513926 -0.161082432 -0.681215373 -0.3228393435 #> 173  0.409399562  0.602786173  0.726245238  0.167565323  0.6924675590 #> 174  0.114645382  0.569442017  0.362790142 -0.218014364 -0.7706036228 #> 175  0.317666358 -0.241465842  0.158029209  0.939777122  0.5369461574 #> 176 -0.705053288  0.429826337 -0.459653695  0.004602391 -0.2457732199 #> 177 -0.038359957 -0.592968137 -0.009361008  0.131731639 -0.0145998385 #> 178  0.325838204 -0.540603889 -0.370674084  0.776800178  0.1151774630 #> 179 -0.152033660 -0.468933284 -0.115325562 -0.327800377 -0.0007973363 #> 180  1.157384627  0.107071451 -0.379603000  0.207382407 -0.2485053293 #> 181 -0.878721929 -0.078465626 -0.351221367  0.015699332 -0.5764539555 #> 182 -0.123533296  0.101754234  0.334047218 -0.241674837 -0.2653109909 #> 183  0.415984020 -0.121753165  0.044897619  0.327835789  0.2467183310 #> 184  1.549320122 -0.291162864  0.941082996 -0.470417767 -0.2352603067 #> 185 -0.150544089 -0.065631339 -0.065781392  0.587545120  0.4216532361 #> 186 -0.001271583  0.255950988  0.013810213 -0.123063738 -0.0814780581 #> 187  0.249140942  0.028786399  0.063083687  0.014342086  0.1006376677 #> 188  0.180220369  0.805454231  0.090032415 -0.359759263 -0.0531357151 #> 189  1.341288010  0.168629798 -0.375673958 -0.305757476  0.3737573001 #> 190 -0.363459946 -0.294445134 -0.237241856 -0.109050928  0.7886315312 #> 191 -0.489530780  1.222179642 -1.150534331 -0.603155678  0.3480263296 #> 192 -0.617657004 -0.427736330 -0.133716447  0.463838570 -0.5348833040 #> 193  0.549019377  0.206166560  0.284563592 -1.279177233  0.6300995197 #> 194 -0.759614960 -0.098968008  0.295298148  0.143927283  0.0981641914 #> 195 -0.142528674  0.187447922  0.315517883 -0.477465975  0.5876630592 #> 196 -1.054103832 -0.152845519 -0.148553227 -0.745987712 -0.9137263478 #> 197 -0.175289122 -0.038197906  0.271998831 -0.838963674  0.2752436055 #> 198 -0.050720695  0.722027390  0.730889815 -0.364308536 -0.2424290262 #> 199  0.136660804 -0.807180115  0.647019973  0.383185695 -0.4279640098 #> 200  0.770841384  0.276786527  0.004761105 -0.451697027 -0.0332275394 #>              pc80         pc81          pc82         pc83         pc84 #> 1   -0.2279834741  0.414178038 -5.354220e-01 -0.376937408  0.567553919 #> 2    0.2875348117  0.768538410 -5.519172e-01 -0.367151882  0.626686489 #> 3   -0.5742426527  0.324151322 -1.048716e+00 -0.149567582 -0.158339929 #> 4   -0.4412525339 -0.906430457 -3.011273e-01  0.400129605  0.950761933 #> 5    0.1099379424 -1.105762888  6.439570e-01 -1.576673227  0.024451937 #> 6    0.7607012241 -0.531111533  8.090244e-02  0.689247300  0.697897964 #> 7   -0.0864555578  0.088893064 -1.326128e+00  0.729612468 -0.575998898 #> 8    0.1979811163 -0.050797272  1.887524e-02  0.498524995  0.975549782 #> 9   -0.3941616933  0.417190688  7.566734e-01 -0.227153734 -0.891071810 #> 10   0.0264898077  0.544222833  2.536532e-01 -0.306408410 -0.331103198 #> 11  -0.9907356591  0.700766805  4.040397e-01 -0.540173368 -0.639960901 #> 12   0.2016210816  0.016942500  9.177468e-02  0.381931251 -0.498761087 #> 13   0.3894563040  0.134225764 -2.328092e-01  0.146745648 -0.356299891 #> 14  -0.2649513747  0.396304253 -4.051614e-01 -0.664904712 -0.909553754 #> 15  -1.0255384300 -0.059257518 -5.818170e-01 -0.235543258  0.293984006 #> 16  -1.0000517413 -0.683309486  3.541917e-01 -1.300945713  0.203182807 #> 17   0.5564799133 -1.050038737 -3.303065e-01  0.234615905  0.215641814 #> 18  -0.0728894175  0.521532576  1.242461e-02 -0.124052192 -0.153841180 #> 19  -1.0116408697  0.895042871  2.853010e-01 -0.002643041 -1.048886106 #> 20  -0.3709499490  0.050150629 -1.241261e+00  0.454385017  0.067014224 #> 21  -0.5262159348  0.885040330  1.122119e+00  0.097154740  0.000341881 #> 22   0.7165451742 -0.184882541 -7.390951e-01 -0.513429107  0.418984693 #> 23   0.4093793647  0.466357868 -4.532849e-01  1.324292122  0.215650376 #> 24  -1.3011002270  0.409143164 -1.577985e-01 -0.033206566  0.346794592 #> 25  -1.5364134320 -0.296235978  3.872378e-01 -0.945221308 -0.439928870 #> 26  -0.6481248309 -0.661284197 -5.267785e-02  0.175392066  0.027425896 #> 27   0.3539359226 -0.109307150  4.191214e-01  0.328964115 -0.927913519 #> 28  -0.3173724053  0.024568903 -1.022798e-01 -0.373357726  0.558645396 #> 29   0.6378844761 -0.662222396 -7.172121e-01 -0.269045074 -0.050316711 #> 30   0.0358117536 -0.183739371  6.005623e-01  0.073210797 -0.570790748 #> 31   0.6885475594 -1.399666666 -6.552514e-02  0.031430697 -0.393919679 #> 32  -0.3771787497 -0.798026859 -2.809569e-01 -0.782763956  0.675549007 #> 33  -0.0439337778 -0.455880202  1.181994e+00  0.471470283  1.107259357 #> 34   0.3434179315 -0.751610303 -2.000840e-01 -0.245591590  0.384647593 #> 35   0.0037713771  0.233635879  3.561525e-01  0.395089087 -0.365876270 #> 36  -0.9786088657 -0.635234628  4.920231e-01 -1.343362978  0.412850737 #> 37   0.3730246857  0.459653271 -1.324509e-01  0.208009452  0.908299561 #> 38   0.3210842828  0.143974804  5.310311e-01 -0.232079251  0.620125546 #> 39   0.6614512556  0.144941858  3.080874e-01  0.160608002 -0.298547473 #> 40   0.3122046888  0.427420633  5.152635e-01 -0.482838195 -0.202027216 #> 41  -0.6666998792  0.374256797 -3.309065e-02  0.130504981 -0.204696068 #> 42   0.1296659580  0.214245054  3.798189e-01  0.407572391 -0.611284994 #> 43   0.8463446010 -0.641803550  2.267966e-01  0.982156266  1.935607625 #> 44  -0.5196992243 -0.825746212  3.522798e-01  0.482214417 -0.595041925 #> 45  -1.1889609869 -0.036554952 -1.368745e+00  0.619513186 -0.164002762 #> 46   1.4128578498  0.343634231 -5.478062e-01  1.239840257 -0.026717485 #> 47   0.7444525421  0.080567445 -2.562990e-02  0.638570235  0.366439637 #> 48  -0.7090893088  0.726063334  1.631103e-01  0.689591404 -0.114138292 #> 49   0.9300871410  0.043298040  3.798806e-01  0.125975260 -1.495256090 #> 50  -0.4477302329 -0.917697116 -6.368533e-01  0.627417147 -0.050710438 #> 51   0.0462545386 -0.195479624  5.162813e-01 -0.262763373 -0.723599773 #> 52   0.7685758071  0.431365999  5.621503e-01  0.689362548 -0.295371913 #> 53   0.9871855830 -0.595858498 -3.029599e-01  0.357187197  0.171146252 #> 54   0.4300817602  0.371720044  5.297188e-01  0.390607962 -0.156576519 #> 55  -0.1944420672 -0.772304486  2.076499e-02 -0.599953224  0.092657522 #> 56  -0.4686090570  0.439612870 -9.294769e-01 -0.340247348  0.189898309 #> 57  -0.2156690778 -1.133304260  1.266333e-01 -0.286911645 -1.028145082 #> 58  -0.1864112959 -0.296245032 -4.280110e-01  0.051539482 -0.547099514 #> 59   0.5002856222  0.050704981  9.645161e-01 -0.517274628  1.510965893 #> 60   1.1636598714 -0.314479593  4.839820e-01 -0.422219594  0.427490686 #> 61  -0.0982396363  0.942955191  3.740281e-01 -0.670050325  0.998894019 #> 62   0.3472801380 -1.501616567 -1.163497e+00 -0.406917224 -0.128691162 #> 63   0.1957172275  0.319756700  1.063717e+00 -0.238086307  0.611532818 #> 64   0.2908940812 -0.026111327  6.010461e-05  0.079306526  0.769304363 #> 65  -0.6799459701 -0.084193841 -5.484049e-01  0.939817838 -0.444302583 #> 66   0.7264462263  0.441650803  9.194901e-01 -0.166770974 -1.203755212 #> 67   0.7592498941  0.358135006 -1.857836e-01 -0.291194060  0.737934378 #> 68   0.4819702635  0.699894946 -1.350553e+00  0.333812198 -0.127461869 #> 69  -1.1036024199 -0.122235537  1.846225e+00  0.027169122 -0.375921018 #> 70   0.3781430328 -0.365643615 -9.080508e-01 -0.113486555  0.365665342 #> 71   0.8151735875  0.796423738  7.743512e-01 -0.955466229 -0.719735469 #> 72  -0.9826327201  0.767480208 -9.303359e-02  0.374368943 -0.392647657 #> 73   0.5720260707  0.723794458  2.683715e-01  0.315752242 -0.679804769 #> 74   1.2097158748  0.159908432 -8.730077e-01  0.388629812 -0.339414626 #> 75   0.0434880770 -0.130623754  2.579391e-01 -0.751167713  0.141330840 #> 76   1.0661869424  0.287346815  1.032930e+00  1.020401239 -0.743531058 #> 77   0.2577738804  0.285644597 -7.881767e-01  0.047668338 -0.582467999 #> 78  -1.2866674758  0.933741127  9.617438e-01  1.068257322  0.222368877 #> 79  -0.2677422908 -0.083222746  3.169963e-01  0.577718233  0.046778449 #> 80   0.1215750639  0.535949957  3.130653e-01 -0.433445866  0.375392879 #> 81  -0.2174304094  0.636825932 -2.493216e-01  0.157791919 -1.189766064 #> 82   0.2926912143  0.049802761  1.528606e-01 -0.098377846  0.441352806 #> 83   0.6465089651  0.419317113 -1.023332e+00 -0.755390857  0.436273310 #> 84  -0.0600663271  0.065156903 -4.458354e-01 -0.109559497 -0.121674753 #> 85   0.3525434912  0.371384212 -9.820260e-02  0.698361926  0.552302531 #> 86   0.5507533831  0.465720259  7.780467e-02  0.151507319 -0.533219336 #> 87   0.2572766049 -1.228639751 -8.445201e-01 -0.895402058  0.983982777 #> 88  -0.9730992222  0.564136732  4.758166e-01  0.303608898  0.407492281 #> 89  -0.0412353767 -0.712236371 -9.648408e-01 -0.913138849 -0.868295403 #> 90   0.4838001144 -0.696302479 -8.651854e-01 -0.393846412 -0.270562169 #> 91   0.2136343255  0.273164294  3.687331e-01 -0.391990329  0.161732578 #> 92   0.1770577434 -1.054990701 -6.308036e-01 -0.613129761  0.140024018 #> 93  -0.2044839115  0.025089117  1.277050e-02 -0.211989744  0.389395610 #> 94  -1.0787095099  0.021220676  1.664559e-02 -0.402627075 -0.283804331 #> 95  -1.2012262004  0.462845124  5.567510e-01 -0.216627490  0.931844187 #> 96  -0.1091286465 -0.044798613  6.561313e-01  0.589058908  0.611823725 #> 97   0.0119311716  0.152606726  3.221932e-01 -0.209776692  0.313351843 #> 98  -0.0709267052  0.663334372 -3.850763e-01  0.488729040  0.346439958 #> 99  -0.5970907299 -0.079327933 -1.346984e-01  0.440942874 -0.164705486 #> 100 -0.0365985380 -0.704030482  5.678853e-01  0.117306919 -0.820831091 #> 101 -0.4188910269  0.656160519  5.944306e-02  0.047947359  0.311010491 #> 102 -0.1308625764 -0.372240927  5.666009e-01 -0.310696644  0.021864328 #> 103  0.4779220583  0.891830501 -8.603200e-02 -1.099104951 -0.024244418 #> 104  0.0303026455  0.983830525  5.188236e-02  1.086207752  0.196909678 #> 105  0.3687427489 -0.362811319  4.257189e-03 -0.645370552 -0.500113719 #> 106  0.5003517499  0.226018219  2.492015e-01  0.338176053 -0.460599412 #> 107  0.2606644014  0.981969745  8.324291e-01 -0.352601923  0.062539705 #> 108  0.1523540232 -0.515940832  5.265067e-01  0.707408976 -0.464535233 #> 109  0.9825443667  0.528037404 -5.312524e-01  0.341067768 -0.474923957 #> 110  1.0129258697  0.013224727  6.600298e-01 -0.799593477 -0.331774052 #> 111  0.2203434338  0.392416526 -5.770969e-01 -0.755906268  0.039610409 #> 112 -0.0655118269  0.234651753  7.620642e-02 -0.505440945  0.245061234 #> 113  0.3836126412 -0.033288076  3.949299e-02 -0.004606055  0.245247403 #> 114 -0.1874541212  0.120051438 -8.174228e-01  0.774892886 -0.226860817 #> 115 -0.1374805279  0.335794212 -2.436097e-02  0.042582523 -0.442384387 #> 116 -0.2317808926  0.355241381  3.080658e-01 -0.270379164  0.766674502 #> 117 -0.1991212933 -0.061818733 -4.827446e-01  0.044106187  0.593817993 #> 118  0.1463088024 -0.663409504  1.575027e-01  0.097538334 -0.014587523 #> 119 -0.5357727642 -0.328143859 -4.578548e-01  0.347230813 -0.083129720 #> 120 -0.3308584477 -0.713135314 -4.658849e-01  0.659322161  0.378019916 #> 121 -0.0463320226 -0.517085852 -1.915704e-01  0.110319095 -0.028290319 #> 122 -0.3358927135  0.408716606 -4.905010e-01 -0.044987387  0.387004000 #> 123  0.7168711073 -0.085140131  8.317073e-02 -0.004062574  0.449100728 #> 124 -0.9718144185  0.297354250 -5.517565e-01 -0.097492040 -0.045419899 #> 125  0.1031388907 -0.333401541 -2.388014e-02  0.368546735 -0.256515187 #> 126 -0.5561529463  0.206418896 -5.230364e-01 -0.096702009 -0.741679076 #> 127 -0.6563150081 -0.962123368 -2.675873e-02  0.405398353  0.117972853 #> 128  0.4813366432 -0.072010770 -4.565925e-01 -0.105768624  0.059347169 #> 129  0.8365837183  0.050604850 -8.677078e-02  0.292176124  0.176235880 #> 130 -0.5391851057 -0.350011984  5.068939e-02 -0.028085366 -0.104879190 #> 131 -0.5052946408 -0.021401387  2.412377e-01  0.377034391 -0.141397784 #> 132  0.0344256112  0.976836581 -4.969386e-01 -0.192473162  0.552860140 #> 133  0.8018888624  0.633657038  8.173454e-02 -0.474218725 -0.032044343 #> 134 -0.2331317479 -0.018261174 -6.153469e-01 -0.880091373 -0.084790388 #> 135  0.1859898632 -0.010956394 -6.828416e-01 -0.794202978 -0.558354957 #> 136  0.0065305084  0.057583898  4.313849e-02  0.404023336  0.317821994 #> 137  0.0007258212  0.076154089  2.529202e-02  0.031246125 -0.549302919 #> 138  0.1848157766 -0.548340821  1.986111e-02 -0.334631107 -0.203908148 #> 139 -0.3513285955 -0.249070509 -3.190318e-02 -0.378982542 -0.327509845 #> 140 -0.2878845135  0.146849828 -5.360748e-01  0.501254834 -0.270538188 #> 141  0.4668335398 -0.307156739 -7.299323e-02  1.434303707 -0.770342812 #> 142  0.6251223374 -0.631632548  7.140429e-02  0.365116786 -1.069370263 #> 143 -0.3839203841  0.788039807 -3.373851e-01  0.090654342  1.060970090 #> 144  0.3727681166 -0.623235248  7.907952e-02 -0.352224673 -0.679574990 #> 145 -0.1001776289  0.619612069 -6.307405e-01 -0.290554859  0.071354863 #> 146  0.7940442130  0.244899973  2.104486e-01 -0.810182343 -0.053004555 #> 147  0.8298064559  0.266861209 -1.086456e-01  0.400965940  0.218407034 #> 148  0.5694076142 -0.118437894  4.103002e-01 -0.240362258  0.286797752 #> 149 -0.4760218251  0.556997052 -5.601884e-01  0.031348458  0.416353385 #> 150 -0.0402400314  0.008462669  4.800222e-01 -0.248802587 -0.289256851 #> 151 -0.3244577486  0.646387916  5.941333e-01 -0.293440267 -0.140625212 #> 152 -0.8052182977  0.342693197  2.013078e-01 -0.796369514  0.340423470 #> 153 -0.4462721839  1.010067055 -9.793463e-01  0.507157184  0.689316526 #> 154 -0.1836954355 -0.114548405  3.106159e-01  0.455096736 -0.810171677 #> 155 -0.4503617785  0.121487719  6.414115e-02  0.837096603  0.019805774 #> 156  0.0726775863  0.525400639  5.408730e-03  0.079462922 -0.364523801 #> 157 -0.6538353282 -0.227993763  2.070599e-01  0.164438190  0.141873091 #> 158  0.1529698962  0.642501611 -3.514699e-01 -0.380460246  0.377979225 #> 159  0.8411294520  0.414527515  3.547795e-01 -0.204917749  0.115356689 #> 160 -0.3622192891 -0.140369106  3.508119e-01  0.516675853  0.458583166 #> 161 -0.2558052960 -0.755799272  2.408569e-01  0.118351327 -0.380088974 #> 162  0.0485963167 -1.362055733  2.744483e-01  0.056817150 -0.436958236 #> 163 -0.5617019883  0.923316974 -4.390853e-01 -0.295677146  0.186478017 #> 164 -0.2268845833 -1.610900520  5.666498e-01  0.468880303  0.291125187 #> 165  0.8500055296 -0.001280908 -6.987374e-03  0.161342061  0.388676280 #> 166 -0.0000602411 -0.365973432  2.522407e-01 -0.345165479  0.025306067 #> 167 -0.0516836832 -0.355662304  8.000131e-01 -0.708496489  0.381643485 #> 168  0.2823053919  0.055279198 -1.275210e-01  0.319963738  0.221838930 #> 169  0.4305830311  1.077108488  2.401245e-01 -0.696868708  0.449300999 #> 170 -0.2498996640 -0.316657170 -2.953710e-01 -0.042756981  0.486729571 #> 171 -0.0024895408  0.628628048  1.597019e-01 -0.562333913  0.021196348 #> 172 -0.2417470579  0.596153011 -5.072151e-01 -0.519915583 -0.235214852 #> 173  0.4191330031 -0.483950253  1.171633e-01 -0.534253162 -0.055931755 #> 174  0.2662847477 -0.308994701 -1.610426e-01  0.664652429  0.037238650 #> 175 -0.9237664840 -0.575237384  1.589622e-01  0.567355433 -0.171767505 #> 176  0.1149198682 -0.624431398  3.576190e-01  0.222450392  0.355164713 #> 177 -0.0706142063  0.165416340  2.941411e-01 -0.405263959 -0.160460127 #> 178 -0.6131031283 -0.094059279 -6.596876e-01  0.167281433 -0.678591369 #> 179 -0.1601393261 -0.468980508  9.573927e-01  0.985747675  0.114234583 #> 180 -0.4637265697 -0.269743797 -3.114469e-01  1.017248699  0.145599052 #> 181 -0.0122446054 -0.170599773 -1.092769e-01 -0.222461946 -0.049864004 #> 182 -0.6212985957  0.141165768  1.298926e-01  1.041792324  0.093095387 #> 183 -0.0845587803 -0.605273256  9.933599e-01  0.585458322  0.726863929 #> 184  0.5709451712  0.072235658  1.069981e+00  0.026983417  0.315151345 #> 185 -0.2887458439 -0.515765526 -4.131884e-01 -0.351739266  0.093441224 #> 186  0.7888828513  0.399018893 -6.379156e-01 -0.575183838 -0.259341990 #> 187 -0.4131512302  0.261409061 -2.566209e-01 -0.303127001 -0.242288585 #> 188  0.5117663575  0.815571949 -1.561935e-01 -0.464561083 -0.403477820 #> 189  0.5854156266  0.207843759  5.360476e-01  0.182675429  0.438214997 #> 190 -0.2004049482 -0.424503854  2.205777e-01  0.272217600 -0.276205659 #> 191 -0.3352174822 -0.078904393 -1.017050e+00  0.457460335  0.494485289 #> 192 -0.2025528596  0.388498665  7.774437e-01  0.621186911  0.151173008 #> 193  0.7118822509  0.486423171 -1.303183e-01 -0.625271111 -0.074952108 #> 194 -0.2371804613 -0.030484982 -4.524398e-01 -0.589209054 -0.956753825 #> 195  0.2441498631  0.091521642  4.189554e-02 -0.314036617 -0.249155614 #> 196  0.2801797692 -0.535280938  4.780990e-01  0.131794262  0.061324520 #> 197 -0.1142436724 -0.774826021  1.945508e-01  0.093769810  0.099359396 #> 198 -0.6054937131 -0.800541456  8.877217e-01  0.137250087  0.219534087 #> 199 -0.2329982547 -0.577376412  5.988234e-01 -0.344365004 -0.186765580 #> 200 -0.4036017207 -0.459068815 -4.621120e-01 -0.058290910  0.284624215 #>             pc85         pc86         pc87         pc88         pc89 #> 1   -0.088842978 -0.165076383 -0.228030907  0.401050819 -0.280754709 #> 2    0.401636435  0.755117136  0.182364596 -0.386436320  0.644729558 #> 3    0.337230214 -0.025035075  0.243800810  0.469191183 -0.243499890 #> 4   -0.119239289  1.035811173 -0.362592179  0.118719879 -1.254764466 #> 5   -0.752359246  0.581406381  0.231065707  0.230734203 -1.277525292 #> 6    0.374728032 -0.979429677 -0.328623277  0.622538451  0.101898919 #> 7    0.028981333  0.872008178  0.009570060 -0.895645586 -0.201509484 #> 8   -0.959021291  0.166739846 -0.058497633 -0.614367008 -0.055286419 #> 9    0.261415991  0.614821267  0.028853523  0.153701696 -0.544192716 #> 10  -0.175381881 -0.177262672  0.023381493  0.107955550  0.393102812 #> 11  -0.234951414 -0.233897807 -1.263352818  0.013937872 -1.032651366 #> 12  -0.734476242 -0.331508874 -0.539552208 -0.238057616  0.198349321 #> 13   0.160558045 -0.476836667 -0.216355193  0.395553508  0.078041595 #> 14  -0.603953254 -0.384098520 -0.205937233 -0.654770630  0.261136944 #> 15   0.590943380 -0.597703720  0.009461335  0.112684821  0.086952964 #> 16   0.428735322 -0.364757744 -0.398922202 -0.271286885 -0.089622103 #> 17   0.883790491 -0.149315492  0.849437657 -0.271906359  0.204437958 #> 18   0.319453597  0.553556957  0.633938930 -0.020061249  0.068426730 #> 19  -0.487091704  0.953787710  0.657764454 -0.869270982 -0.656424082 #> 20   0.528087134 -0.288098239  0.658977995  0.068673695  0.332103448 #> 21  -0.600916137 -0.523414203 -0.457294250  0.148039795  0.726793504 #> 22  -0.363436781  0.078651008  0.625974994  0.766749565 -0.294911865 #> 23  -0.380918281 -0.079264446 -0.070625935  0.687245865 -0.726252166 #> 24  -0.026321642  0.071142523  0.585940648  0.690551900  0.021159888 #> 25  -0.656959217 -0.279591204  0.398423527 -0.556362938  0.265819079 #> 26  -0.528860295 -1.029383757 -0.571474229 -0.139820731  0.939591395 #> 27   0.032130459  0.438616682 -0.108020582 -0.329488014 -0.012129010 #> 28  -0.116478283 -0.736402883  0.187674798 -0.243702103 -0.078189284 #> 29  -0.244931191  0.359549037 -0.280507648  0.382936552  0.209428039 #> 30   0.348597195 -0.322440694 -0.026992230 -0.375333052 -0.368208753 #> 31  -0.299535479 -0.896192432 -0.514555458  0.705831880 -0.228640623 #> 32  -0.364192686  0.838825940 -0.333566752  0.004451723 -0.056098729 #> 33  -0.647885401 -0.244131335  0.063980906  0.323156415 -0.602563284 #> 34  -0.662693827 -0.058590480  0.159213341  0.150995851 -0.222546978 #> 35   0.049734764  0.089719961  0.086350588 -0.098169565 -0.416233568 #> 36   0.254099575  0.090381199  0.336705723  0.350690678  0.056663910 #> 37   0.728726800 -0.072609817 -0.575677933  0.113559420  0.259194830 #> 38  -0.106962410 -0.085409139 -0.824502013 -0.178585659  0.194106458 #> 39  -0.629074061  0.082473467 -0.581619395  1.177804128 -0.165082221 #> 40   0.448706377  0.598860536  0.403159272  0.922752190  0.010934009 #> 41  -0.505386480  0.217352854 -0.653040354 -0.443374619  0.370813246 #> 42   0.033596500  0.513768607  0.247442100  0.283342265  1.697000104 #> 43  -0.095581553  0.207378647  1.388707290  0.548309486 -0.183654937 #> 44  -0.144974153 -0.459928893  0.110057111  0.169971538 -0.089453578 #> 45   1.014127588 -0.427886470  0.056318212  0.693662012  0.096349491 #> 46  -0.063320933  0.135580070  1.072051303 -0.263452153 -1.327294588 #> 47  -0.384650988  0.374540727 -0.067779602 -0.652099238 -0.056426001 #> 48  -0.217025391  0.554874481  1.085110477 -1.404154485 -0.152895847 #> 49   0.163058849  0.466292170  0.119477424  0.541358459  0.042456756 #> 50  -0.290803540 -0.745817178  0.415631317 -0.471354587  0.259092869 #> 51   0.079979988  0.217253301 -0.043081219  0.394908112 -0.183345221 #> 52  -0.046396216  0.479052739 -0.082765346  0.305573006  0.244627340 #> 53  -0.882117049  1.011534805 -1.131998281  1.252057803  1.094103577 #> 54  -0.702425677  0.650638198 -0.659119174 -0.329391875  0.024532517 #> 55   0.403901682  0.293670199  0.413262541  0.883162289 -0.478201801 #> 56   0.945574726 -0.713369802 -0.172495349 -0.126766408 -0.317971671 #> 57  -0.073924631  0.171761971 -0.798694751 -0.054247335  0.177140449 #> 58   0.013192091  0.426713066 -0.347069044  0.411979098 -0.383522090 #> 59  -0.332625778 -0.284577608  0.022602549 -0.601444428  0.300893911 #> 60   0.771122713  1.038042765  0.358062209  0.179040025 -0.179099630 #> 61   0.518125876 -0.108123471 -0.062251547  0.340381962  1.329639111 #> 62   0.751227461  0.322251408  0.112338831 -0.707241349  0.119160311 #> 63  -0.443397716  0.548994664 -0.496594790 -0.420233173 -0.148895428 #> 64   0.382636132  0.301940154  0.189014695 -0.135861721  0.384921337 #> 65   0.919880045  0.212189026  0.686647968 -0.533131025  0.735848927 #> 66  -0.364578032 -0.394879565 -0.318591513 -0.209941678 -0.140597845 #> 67  -0.208350167  0.413944650  0.070879013  0.177430325 -0.055107875 #> 68   0.790738462 -0.185550048 -0.020769126 -1.768606060  0.287818657 #> 69  -0.305742914 -0.187192366  0.464938913 -0.832362299  0.047418655 #> 70   0.826513291  0.158699571 -0.134057278 -0.017876146  0.083139012 #> 71   0.855953867 -0.098436930  0.223174803  1.307863905  0.095627022 #> 72  -0.497801911  0.017316494  0.779564791 -0.313888216 -0.140113413 #> 73  -0.156143761  0.922270150  0.304123133 -0.687166614  0.076312191 #> 74  -0.429395904  1.336143344  0.146447466 -0.455313737  0.532506813 #> 75  -0.115465910  0.175162382 -0.099629827 -0.182085803  0.028173392 #> 76  -0.278771434 -0.653018116  0.188636810  0.252613311 -0.039570254 #> 77  -0.009015165  0.089528347 -0.323423564  0.429220536  0.269048394 #> 78   0.762215336 -0.725720686 -0.047284211  0.169635178  0.153587787 #> 79   0.497972002  0.119665781  1.337445985  0.392492933  0.618014607 #> 80  -0.117231934  0.003417941 -0.264306579 -0.316510867 -0.266576614 #> 81   0.392325583 -0.981390362 -0.749534598  1.028366025  0.231997775 #> 82   0.352302453  0.180467886  0.128783899  0.195718936 -0.265842879 #> 83  -1.046437603 -0.584827607 -0.396055260  0.204354242  0.085917401 #> 84   0.129134732  0.191064422  0.007614345  0.270934657  0.072568713 #> 85   0.288693741 -0.598638188 -0.662470179 -0.816608111 -0.557880014 #> 86   0.249834951 -0.918134924 -0.509676148 -0.062110116 -0.639875175 #> 87  -0.373790664 -0.464778800 -0.527635863  0.023110518 -0.368551218 #> 88   0.340623119 -0.098404139  0.585102420 -0.388737292  0.180153752 #> 89   0.735671576 -0.019477740 -0.087750654 -0.513264531  0.124882353 #> 90  -0.738893178 -0.117855816 -0.750209883 -0.214634741 -0.703215118 #> 91  -0.451148138  0.095654668 -0.933383786  0.224593714  0.782203422 #> 92   0.955230063 -0.374709899 -0.233528960  0.829414373 -0.056322693 #> 93  -0.752138526 -0.126577938  0.188302716 -0.238661869 -0.008215670 #> 94   0.115738401 -0.841814770  0.108491097 -0.891951094 -0.235258298 #> 95   0.451540973  0.499813196 -0.081847549 -0.185915298 -0.161408333 #> 96  -0.238953101 -0.294376302  1.790600337 -0.350523584  0.085489541 #> 97  -0.329518826  0.002328003 -0.074945227 -0.089575358 -0.011904082 #> 98   0.082892175  0.026130195 -0.561731919 -0.156503326  0.035945536 #> 99   0.031705574 -0.776521292  0.380714303  0.006523374  0.347084957 #> 100  0.056392459 -0.848549378  0.029184856  0.618216092 -0.077597510 #> 101  0.323066683  0.263647676  0.247395943  0.361497887 -0.948118766 #> 102 -0.350487786 -0.270453152 -0.358281468 -0.831331059  0.005870531 #> 103  0.991158663  0.214775464 -0.551868871  0.024532475  0.352744555 #> 104 -0.453421589  0.012771749 -0.886847356 -0.033459822 -0.041824188 #> 105  0.056532041  0.764280196  0.651047365 -0.167739555  0.182690871 #> 106 -0.642114111 -0.957315917  0.681582927 -0.527409461 -0.553013135 #> 107  0.322776046 -0.343111420  0.772569264 -0.142944494  0.198660399 #> 108  0.784174053 -0.205570936  0.005619220 -0.556596931 -0.035703204 #> 109 -0.989728493 -0.396937279  0.063626465 -0.328166445  0.067532639 #> 110 -0.116323664 -0.538906088  0.102805097 -0.137152493 -0.192790159 #> 111 -0.227836620 -0.615805005  1.316273991 -0.595222179 -0.348856509 #> 112  0.110368263  0.281422308 -0.622385470 -0.329930998  0.972121210 #> 113  0.604500875 -0.502002026  0.035040334  0.109373569  0.153826583 #> 114 -0.079864414 -0.274981655  0.304596784  0.193241755  0.434620876 #> 115  0.691722990  0.390879418 -0.052662523 -0.314858941  0.292242109 #> 116 -0.145648794 -0.324240962  0.331034135  0.262402527 -0.823341284 #> 117 -0.877200878 -0.957810129  0.310364279  0.541266567 -0.388544568 #> 118  0.266975141  0.547294265 -0.237484086 -1.096152602 -0.377981915 #> 119 -0.266655922  0.154801524 -0.298514025 -0.190787158  0.056872232 #> 120 -0.463632796  0.033223304 -0.763564952 -0.115128405  0.407471835 #> 121 -0.756046487  0.040664979  0.096677084 -0.009980605 -0.257544255 #> 122 -0.636990664  0.318791084 -0.125446568  0.111037747  0.219634873 #> 123 -0.066568949 -1.102776737  0.013430096 -0.993335176  0.095792337 #> 124 -1.321554378  0.253082499 -0.416638787  0.491248205  0.592940798 #> 125  0.330592385 -0.608009168  0.447469138  0.509525518  0.719300007 #> 126 -0.993285530 -0.466203908  0.680140671  0.943519597  0.073973249 #> 127  0.401858199 -0.130926558 -0.307747664  0.120729217  0.490308700 #> 128  0.411476131 -0.162972372  0.045891845 -0.542944952  0.089957972 #> 129  0.028389652 -0.834236266 -0.276230982 -0.166018269 -0.619766929 #> 130  0.027299607  0.341201116  0.147364091  0.579462784  0.221875925 #> 131  0.040957229 -0.177005529 -0.928242105  0.891131336 -0.482584913 #> 132  0.939738641  0.281556194 -0.454040437 -0.193238220  0.827414380 #> 133 -0.152467521  0.197064595  0.582607954 -0.421584400 -0.281885829 #> 134 -0.582509263 -0.374615020  0.685957493 -0.008196758  0.067033912 #> 135 -0.922413807  0.897937266  0.704616282 -0.703461607  0.348317005 #> 136 -0.445100133  0.180186269  0.119481786  0.342183323  0.138697223 #> 137 -0.302646805  0.204467439 -0.010668064  0.158659163  0.455295021 #> 138  0.425787866  0.358416157  1.221772390  0.617858465  0.037492471 #> 139 -0.552041235  0.794208174 -0.096293418  0.225756008  0.371322531 #> 140 -0.271368854  0.124946633 -0.825888365 -0.665509472 -0.722450479 #> 141  0.356088825  0.131301456  0.299054328  0.572062116 -0.171881754 #> 142  1.059895188  0.292914683 -0.246227279 -0.691279445  0.127539456 #> 143 -0.047886960 -0.006047448 -0.062297620  0.614997950  0.307842337 #> 144 -0.098023034 -0.257106158  0.055423885 -0.045510717 -0.097235566 #> 145 -0.660225036 -0.129311530 -0.007926283  0.038725741  0.056043862 #> 146 -0.155396616  0.878334570 -0.077672400 -0.255665235  0.204374516 #> 147  0.003735371 -0.840101759 -0.696910318 -0.196230903 -0.375284751 #> 148 -0.456094082  0.116211422 -0.398669962 -0.346504068 -0.115162386 #> 149  0.918234599  0.219169449 -0.161791495  0.167877704  0.024789771 #> 150 -0.282334190  0.450513399 -0.097466447  0.364116876  0.040426584 #> 151  0.156885045  0.349438270  0.352134729  0.708708484 -0.556658860 #> 152  0.105777624  0.886275248  0.235021743  0.625314422 -0.322573688 #> 153 -0.852774165  0.147136562  0.765157015  0.747689874  0.733173899 #> 154 -0.128253267  0.455755088  0.111507834  0.940573425  0.231212773 #> 155  0.013859911  0.189652467 -1.110115197 -0.208173277 -0.186915680 #> 156  0.472392484 -0.433988275 -0.514395706 -0.254549703 -0.306767796 #> 157 -0.296758481  0.793971928 -0.138884505  0.278279841  0.244776995 #> 158  0.177277578 -0.637704588  0.054559025 -0.158286727  0.347844730 #> 159  0.097586431 -0.440289868 -0.189376400 -0.225923471 -0.206679963 #> 160 -0.908315929  0.236588904 -0.108428571 -0.183469018  0.491464543 #> 161 -0.479480977 -0.178917397  0.335732073 -0.580879787 -0.159208446 #> 162 -0.527293436 -0.081601609  0.541999578 -0.096152928  0.943869398 #> 163  0.767902385  0.540704931 -0.752082532  0.466194436 -0.353747537 #> 164  0.600001093  0.783866953 -0.275747604 -0.646091317  0.515816015 #> 165  0.410165007 -0.376912347  0.738737596  0.500565638  0.046758536 #> 166  0.499463658  0.436168631 -0.229576982 -0.219720744 -0.079966599 #> 167  0.199706830 -0.308800743 -0.018840394 -0.325106422 -0.003454208 #> 168 -0.564383712 -0.025698520  0.389838725 -0.070516527  0.524185136 #> 169  0.636158574 -0.331374252 -0.611846871 -0.807264573 -0.510571084 #> 170 -0.872423834  0.631748759  0.565633005 -0.118274587 -0.207386364 #> 171 -0.233768650 -0.538543405  0.278075968  0.125802921  0.081382123 #> 172 -0.463540536  0.214518044 -0.045923333 -0.070965469 -0.193443200 #> 173  1.143609548 -0.287154826  0.358309510 -0.103867094  0.927516806 #> 174 -0.137959976 -0.665820410 -0.351161009  0.193137649 -0.405533185 #> 175  0.234898317  0.436944996 -0.784421294 -0.239715102  0.309794225 #> 176  0.151069042 -0.084843657 -0.692534017 -0.308701336  1.654398677 #> 177  0.128486071  0.067750404 -0.154251147  0.395321710 -0.319877241 #> 178  0.188890926 -0.581538326  0.012251718  0.012954111 -0.337564922 #> 179  0.588253398  0.383613891  0.345114238  0.136120735  0.142509311 #> 180  0.365395966  0.533276358 -0.102177682  0.744753671 -1.184938325 #> 181 -0.013133531 -0.381000291  0.463227174 -0.306953306 -0.961383830 #> 182 -0.216997078  1.306078640 -0.224351890  0.606658725 -0.074115640 #> 183 -0.135075862 -0.326968244 -0.540697788 -0.311549642  1.208273297 #> 184  0.670758760 -0.467535240  0.213971046  0.244324642  0.160453637 #> 185 -0.160036990 -0.188159647 -0.313738474 -0.143735242 -0.259333240 #> 186 -1.110567828 -0.883020059  0.594152421  0.294376508  0.760873140 #> 187  0.599357321 -0.179813954 -0.070026089  0.532623056 -0.444614435 #> 188  0.536961494 -0.217086144 -0.120365907  0.297767149 -0.084105960 #> 189  0.897818699 -0.073608380 -0.030004270 -0.087358478  0.043707823 #> 190  0.277756458  0.514417240 -0.408122138 -0.115070543 -0.204948187 #> 191  0.141780021  0.104882140 -0.358472710 -0.295208967 -0.634644363 #> 192 -0.083691341  0.009176546 -0.070654923  0.418177998 -1.040298013 #> 193  0.442365180  1.079756349 -0.177940747 -0.266721794 -0.016171424 #> 194 -0.262584626 -0.329057464  0.654857109  0.159492471  0.399497546 #> 195  0.270253711  0.130856644 -0.582936288  0.125840673 -0.349299188 #> 196  0.350023315  0.591979989 -0.092181350  0.124385416 -0.856440690 #> 197  0.087836956  0.112841350  0.641456284  0.123565575 -0.457374099 #> 198  0.246679769 -0.573479824 -0.317521034 -0.339056884 -0.140868519 #> 199 -0.025394378 -0.754255584  0.722365480  0.263825820  0.190266111 #> 200  0.524635905  0.116260126 -0.095748938 -0.493496147 -0.931402713 #>             pc90         pc91         pc92          pc93         pc94 #> 1    0.779428325 -0.433432753 -0.025507137  0.8472879217 -0.174868923 #> 2    0.864691813  0.261503529  0.338507747 -0.3178872378  0.008471486 #> 3    0.109159559 -0.184101908  0.445715070  0.4105523970  0.098105244 #> 4   -0.471946254  0.373955350  0.466469607  0.5719139727 -0.536835492 #> 5   -0.048370636 -0.051207821 -0.818108578  0.5751954900 -0.054803372 #> 6   -0.498280620 -0.310011421 -0.608564174 -0.0389776278  0.220326530 #> 7    0.200236302 -0.111615033 -0.591169008  0.7955565271 -0.197620075 #> 8   -0.357067987  1.049383015 -0.262865643 -0.4307877488  0.287788051 #> 9   -1.014041798 -0.661838461  0.475987074 -0.0382938173  0.370323511 #> 10   0.073668691  0.157835126 -0.100284202  0.0439979772  0.047337964 #> 11  -0.262602427 -0.404745542  0.379758755  0.3775518303 -0.097721545 #> 12  -0.405507919  0.211836456 -0.588238284 -0.4691312458  0.401899444 #> 13   0.075952781  0.082264025  0.156822403  0.1022902489  0.151021716 #> 14   0.768120680  0.369274767  0.178297296 -0.2057548143 -0.180224191 #> 15  -0.933263575 -0.600913981 -1.148325207  0.5662770004 -0.091052198 #> 16  -0.598657576  0.400434097  0.727792417 -0.0286984851  0.131686887 #> 17   0.651633363 -0.319278433  0.101159170 -0.8338358827  0.289077277 #> 18   1.021031892 -0.373412142 -0.295574390 -0.3755157850 -0.608485082 #> 19   0.465657327  0.092717719  0.173465964  0.1569563113 -0.408001027 #> 20  -1.120472550  0.533337944 -0.415541103 -0.3074125183  0.433301545 #> 21  -0.579229838  0.377025962 -0.247024926 -0.4754074348 -0.667483475 #> 22   0.395178392 -0.101686750  0.457923345  0.4907250436  0.235713521 #> 23  -0.171303319 -0.303831550  1.060700460  0.0211690315  0.061579728 #> 24   0.025384183 -0.904319101  0.853706469 -0.0604703723 -0.834962337 #> 25   0.689128896  0.191092395 -0.471967191  1.0163820559  0.575040513 #> 26  -0.216162128  0.139314504 -0.448638140 -0.5361392800  0.311608622 #> 27  -0.412470425  0.119432912  0.617146246  0.1761251148 -0.770188793 #> 28   0.260172384  0.257683518 -0.471958763  0.4339357858 -0.400858918 #> 29   0.532091395  1.309825289  1.119558332  0.6046117603  0.381568720 #> 30   0.057785266 -0.220400184 -0.402888112 -0.1553115447  0.797591841 #> 31   0.180288237  0.309676837  0.205404756 -0.7531392463 -0.285861620 #> 32  -0.175694368  0.149432085 -0.574942991  0.7319810340  0.445968266 #> 33  -0.480796581 -0.060651004 -0.256550528  0.0628940436  0.181281097 #> 34   1.134472517 -0.378620772  0.107366971  0.3039900141  0.242260919 #> 35   0.322751163  0.132984732  0.570530741  0.0389378783  0.196487171 #> 36  -0.210117694  0.028696016 -0.093854483  0.6533342689  0.097197375 #> 37  -0.489991372  0.016224136  0.699934734  0.0532346412 -0.044370818 #> 38   0.489115550  0.453809823  0.791689874 -0.4982657802 -0.388443389 #> 39   0.207331115 -0.123136784  0.041931287  0.2855529431  0.626840500 #> 40   0.039163333 -0.576576509  0.091056500  0.3324263034 -0.189295811 #> 41  -0.238993798  0.379581464 -0.409402459 -0.8167895106 -0.868906121 #> 42   0.139433320 -0.632862079  0.080635884 -0.2295904561 -0.502442472 #> 43   0.423643278 -0.824934254  0.999749820  0.0100648043  0.154918852 #> 44   0.349228096 -0.107289806 -0.286654639 -0.6221888704 -0.054403945 #> 45  -0.027678119  1.062818346  0.189372156  0.3586904061  0.687242307 #> 46   0.251866134 -0.347119288 -0.649738124  0.5529774800  0.827354507 #> 47  -0.375698551 -0.045183534  0.135540238 -0.6063168737  0.368456559 #> 48  -0.050017982  0.181011937 -0.501657693  0.8504261794 -0.235009536 #> 49   0.239341168  0.910293016  0.645605279  0.3995779266 -0.098614104 #> 50  -0.003650095  0.200650465 -0.318508105 -0.1493765705  0.831418713 #> 51   0.402213574  0.027092651 -0.257430116 -0.1952545331 -0.209975657 #> 52   0.043309040 -0.658674244 -0.378462756 -0.2951226740 -0.892128478 #> 53   0.115636612  0.116069940 -0.879514473  0.2011234739 -0.633528568 #> 54  -0.245669388  0.337250058  0.040728512 -0.2780276606  0.079386443 #> 55  -0.853095074 -0.501677867  0.165629244  0.9248929647  0.231946474 #> 56  -0.401282788  0.460566087  0.331121604 -0.1640450243  0.302111869 #> 57   0.109565862 -0.082429675 -0.239160630 -0.4823320389 -0.135239872 #> 58  -0.420483197  0.234442008  0.183055288 -0.0895897530  0.293280399 #> 59   0.544652150  0.046670504 -0.503164288  0.1276589637  0.231292539 #> 60  -0.829105907 -0.426273160 -0.300180141 -0.4820788558  0.144018625 #> 61  -0.079888738  0.436526847 -0.284999321  0.0577369827 -0.506843278 #> 62   0.139150790 -0.615278478 -0.252342257 -1.0239634894 -0.247942416 #> 63   1.013836840 -0.857048593  0.435961022 -0.5118460338 -0.035174555 #> 64  -0.756143033  0.844260618 -0.053313946 -0.0754274191  0.008389622 #> 65  -0.041722879 -0.798889103 -0.011968691  0.2393985747 -0.023364458 #> 66   0.235551879  0.091811344 -0.219944751  0.1095728815  0.781094622 #> 67   0.358166299  0.170754378  0.497981921  0.4232100642  0.275692127 #> 68   0.685373322 -0.131319506  0.472048791 -0.0607970802  0.407016935 #> 69   0.627244791  0.588870145 -0.167313851 -0.1526416643  0.051450054 #> 70  -0.162819993 -0.111968512  0.257541804 -0.0263412807  0.104321168 #> 71  -1.011731330 -0.025716734  0.089104210 -0.3499661919 -0.239383683 #> 72   0.423294434 -0.006327756  0.226310789  0.0506420135 -0.505150633 #> 73  -0.009663915 -0.214676003  0.082987336 -0.2821744167 -0.658989272 #> 74   0.932987737  0.533689484  0.180431271  0.4922687384 -0.341485021 #> 75   0.439596214  0.419362824  0.100189549 -0.5791140139 -0.055224013 #> 76   0.596410713  0.036838548  0.076806324 -0.4485759030  0.158856931 #> 77  -0.924938173 -0.135206281  0.336925894 -0.0451817483 -0.403072085 #> 78  -0.699245052  0.757386846  0.282779921 -0.3815517230 -0.078537198 #> 79  -1.086939461  0.281701139 -0.534382546  0.1585233791 -0.204750044 #> 80  -0.270041636  0.044664365 -0.112002100  0.2509542850  0.204586466 #> 81  -0.433817043  0.658742912  1.052102693  0.6768347934  0.136352258 #> 82  -0.182004071 -0.265275235 -0.012620116  0.1761369222  0.184535843 #> 83   0.538884217 -1.586090644 -0.771760728 -0.9375703812 -0.414677381 #> 84  -0.871755536 -0.247435313 -0.491241537 -0.1240704653 -0.038089455 #> 85  -0.043368861 -0.269136577 -0.097202304 -0.2365924505  0.162031028 #> 86   0.441308712 -0.187027799 -0.106736863 -0.1046355138 -0.036352038 #> 87  -0.102753230  0.146482564 -0.461722692  0.1869540531 -0.226847984 #> 88  -0.590703529 -0.626524955 -0.251210267  0.2533512597  0.607043409 #> 89   0.390527441  0.106837524  0.088573351 -0.6201756495  0.278612447 #> 90   0.160729320  1.043477745 -0.031460248  0.4509746167  0.659728641 #> 91  -0.133489738 -0.370488178 -0.535990424 -0.0541835604 -0.116852483 #> 92   0.297965208 -0.699428306  0.427186668 -0.4733263588 -0.194764369 #> 93  -0.201531001  0.535704119 -0.168976005 -0.2880028089 -0.694465935 #> 94   0.711805914 -0.814868614 -0.253813755  0.0258268423  0.004356622 #> 95  -0.705735292  0.582207195  0.658367958  0.5311906838 -0.223146650 #> 96   0.108308099 -0.933117412 -0.142665349  0.0006573896  0.121717131 #> 97   0.258349872  0.024490408 -0.119588555  0.2501687242  0.237948794 #> 98  -0.947172685  0.013602014  0.029402761 -0.1413028882 -0.034938296 #> 99   0.330870273  0.324209693 -0.035015306 -0.1094086649 -0.258401186 #> 100  0.638633600 -0.262246558 -0.534133786 -0.7809858125 -0.148305511 #> 101  0.822176803  0.093620719 -0.215939978 -0.9440507288 -0.115474746 #> 102 -0.378152246 -0.310122524  0.588733965  0.0728280794 -0.243638817 #> 103  1.001822819  0.221376599 -0.042307195 -0.1680178262  0.363723209 #> 104 -0.258959234 -0.135915189 -0.195609794  0.4993745804 -0.290414058 #> 105 -0.144799192  0.184212478 -0.421628446 -0.0640191277  0.607279754 #> 106 -0.844893630 -0.164770530  0.939782908  0.0027240972  0.764918192 #> 107  0.315553023 -0.064499287 -0.310633763  0.0329560585  0.570531217 #> 108 -0.061331774  0.135890516 -0.002949391  0.2658615671 -0.432254344 #> 109 -1.056551313 -0.087575017 -0.650416640  0.5321671005 -0.140665229 #> 110 -0.835886686 -0.038238627  0.574979075 -0.0819822006  0.374946061 #> 111 -0.827136227  0.325272376 -0.328837690 -0.1679060061  0.579533717 #> 112 -0.345757657 -0.062293544  0.422233228  0.6505298246  0.427501139 #> 113  0.028572694 -0.134189134 -0.284840863  0.3662048050  0.206566007 #> 114  0.542339029  0.500897378 -0.675560766  0.1102355882 -0.114798990 #> 115 -0.436368624 -0.448333322  0.245660632  0.1525767327  0.803688947 #> 116 -0.027593656 -0.374284782  0.216697602 -0.9961759230 -0.127841185 #> 117  0.067285364  0.378616513  0.424333219  0.7510298175 -0.486771992 #> 118 -1.019182173 -0.091633158  0.183060881 -0.2734723136 -0.670947546 #> 119  0.474946272  0.093984122  0.024475991  0.6836767860 -0.544497451 #> 120  0.331989761 -0.462590790  0.063246918  0.4633512927 -0.359322506 #> 121 -0.389398151 -0.377452608  0.323190834  0.3116320629  0.138656629 #> 122 -0.103885386  0.308556381  0.874586217 -0.5587524044  0.885260440 #> 123 -0.173139918 -0.797955266  0.845281320  0.6837093972 -0.921602557 #> 124 -0.263968745 -0.159647494  0.828615023 -0.6784375153  0.234303797 #> 125  0.361035854  0.123209141 -0.850049146  0.8035645924  0.010910633 #> 126 -0.177492381 -0.362374244 -0.701463814 -1.2480947086 -0.011118994 #> 127  0.733369917 -0.663418187  0.421912041 -0.6221500978  0.697502417 #> 128 -0.274304777  0.218857565  0.064081390  0.0459432531 -0.192186093 #> 129  0.161352290 -0.213672306 -0.221687409  1.0145149023 -0.435945969 #> 130  0.478946931  0.681974811  0.106221373  0.1598664621 -0.195931888 #> 131  0.407147406 -0.341597154  0.286366102  0.7904294614  0.050769462 #> 132  0.144153412 -0.318465612  0.343818714 -0.5468456086 -0.051682855 #> 133 -0.090139715  0.833988267  0.172716141 -0.0878985522 -0.222968326 #> 134 -0.119752349 -0.489754492  0.494104373 -0.0230435051 -0.580740095 #> 135 -0.930276444 -0.178488800  0.311375258 -0.2122020310 -0.448088546 #> 136  0.203018822 -0.281191530  0.239994361 -0.3556948184  0.442005373 #> 137  0.160880802 -0.799503941  0.349945669  0.2159823660 -0.036183139 #> 138 -0.156468151  0.257973701 -0.056184026 -0.3145699680 -0.060547075 #> 139 -0.445328084 -0.514637739  0.018205202  0.2144464570  0.023507204 #> 140  0.022610261 -0.019740028  0.174360829  0.0121876571  0.508358369 #> 141 -0.371690222 -0.113055265 -0.022118823 -0.1534119884  0.232143441 #> 142  0.216937089  0.499311936  0.308919628  0.2594106257 -0.017828296 #> 143  0.464604371  0.286408187  0.583940087 -0.6085543236 -0.355700168 #> 144 -0.011416261 -0.085476222  0.125846867 -0.4185925296  0.386090863 #> 145 -0.010600181  0.343033915 -0.275121025  0.0718440149 -0.522464039 #> 146 -0.366354130  0.315925283 -0.366124291 -0.5368848921  0.491981048 #> 147 -0.041602970  0.119008236 -0.606195323  0.1458103827 -0.289006148 #> 148  0.246849082  0.263597439  0.344538299 -0.3289100277  0.858357406 #> 149  0.041802114  0.748034087 -1.000276796 -0.7498333579  0.531884836 #> 150 -0.463442002 -0.697937449 -0.270247574  0.1982111665  0.054959899 #> 151  0.408895296  0.401839708 -0.262306156  0.2170047020  0.474623170 #> 152  0.521844171 -0.115016667  0.202894502 -0.4352438303  0.246030753 #> 153  0.117650366  0.489450462 -0.457613483  0.0142135519  0.044034739 #> 154  0.257943589 -0.441742838 -0.744310410  0.2800333445  0.368013516 #> 155  0.378797864  0.120639657 -0.411589833 -0.3119509132  0.025786457 #> 156  0.403163091 -0.119773313 -0.477785388  0.6048313017 -0.191047754 #> 157  0.224425006  0.076582274  0.151128278 -0.0978396250 -0.109882341 #> 158 -0.108545913 -0.181783060  0.057767308 -0.0485873680 -0.133177982 #> 159  0.004253113 -0.030533089  0.240900244 -0.2011106356 -0.602912710 #> 160  0.529125284 -0.113829299  0.186967293  0.3536885911  0.891992364 #> 161 -0.708947530 -0.156452947  0.342346563  0.0706818474 -0.724632999 #> 162 -0.157406031  0.285950636  0.241275340  0.8909664243  0.235608716 #> 163  0.020511989 -0.165382139 -0.464330374 -0.0088581439  0.195376236 #> 164  0.194676932  0.321980300  0.505299147 -0.1620410126  0.286941659 #> 165  0.272400165  0.621934523 -0.754546680  0.2306606634 -0.747582930 #> 166  0.102437935  0.367084016 -1.216439365  0.6834804126 -1.152162403 #> 167  0.013787310 -0.225177780  0.431198552  0.4911985936  0.586096358 #> 168  0.280160084 -0.138189850  1.247757253 -0.0945729147  0.041465691 #> 169  0.004482631 -0.192884307 -0.557587393 -0.0147067810  0.050724519 #> 170 -0.109996482  0.352325745 -0.514884125 -0.4595808305 -0.562493616 #> 171  0.244534577  0.588615653  0.333871941 -0.5035346686  0.449400511 #> 172  0.167254531  0.112122987 -0.277146398 -0.0477425907  0.825072301 #> 173 -0.153982361  0.221118625  0.703214151  0.2664088828 -1.077730086 #> 174  0.028830895  0.233035434  0.141493407  0.2697059796 -0.903808270 #> 175  0.296353867 -0.594084128 -0.019445983 -0.2614929803  0.023363524 #> 176 -0.509120631 -0.629482727  0.119067397  0.1964443183  0.653350347 #> 177  0.236098895  0.208632482 -0.315619902 -0.3679641625  0.365301758 #> 178  0.376175027 -0.577705098  0.172591834  0.5478169216 -0.482720807 #> 179  0.253595738  0.361708998 -0.335722886 -0.2140751182  0.478159875 #> 180 -0.185294237 -0.001948913  0.071668936 -0.7705769794 -0.113799067 #> 181  0.077634763  0.451664510  0.320158784 -0.5610577393 -0.444020462 #> 182  0.076770665 -0.372063772 -0.281518616  0.4805129500  0.560806807 #> 183 -0.237867992 -0.524701110 -0.076380695  0.6311064177  0.305156107 #> 184  0.945941245  1.203852324 -0.154545564  0.3915724807 -0.466110449 #> 185  0.010840042  0.337430566 -0.742813844 -0.2215481819 -0.214191381 #> 186 -0.817556877  0.156493970 -0.120085648  0.0894785796  0.243576808 #> 187  0.816581859  0.115529535 -0.128569137  0.6237123918 -0.303613536 #> 188  0.399171065 -1.264486339 -0.164860631  0.6631223546  0.467846534 #> 189  0.413534415  0.372244699 -0.335879214  0.2574202339 -0.028965579 #> 190 -0.046039129  0.586709319 -0.441853076 -0.3887826658  0.138258314 #> 191 -0.333627103  0.559927875 -0.173301239 -0.6048262386  0.148216817 #> 192 -0.097883557  0.161458091  0.379379649 -0.1012049603  0.015995013 #> 193 -0.326957746 -0.347606546 -0.250881980  0.6589151614  0.183274095 #> 194  0.225300341 -0.213895684  0.945851883 -0.1959511523 -0.482905582 #> 195 -1.104310999 -0.498569646 -0.548803310 -0.5625356132 -0.005692128 #> 196 -0.468512695  0.686443971  0.205604893 -0.0906451780 -0.955708563 #> 197  0.113185347  0.600825658  0.004093026 -0.8012618146 -0.208019756 #> 198 -0.187311477 -0.113636941  0.063282064 -0.0508262679 -0.127855729 #> 199  0.232975533  0.520962570 -0.039578954 -0.0186805284 -0.119722493 #> 200  0.159294386 -1.354066619 -0.133227378 -0.3564627233 -0.402030922 #>             pc95         pc96          pc97         pc98         pc99 #> 1   -0.232497859  0.085707974 -0.2048052286  0.827272909  0.352311912 #> 2    0.092277416 -0.276128386  0.8152047829 -0.118392363  0.676843029 #> 3    0.428273595 -0.073082457  0.4252585099 -0.755403301 -0.367702900 #> 4    0.506344671  0.179840767 -0.8884427620  1.169477069 -0.366232655 #> 5    0.742488670  0.830659739  0.5370999459 -0.137701031  0.310325992 #> 6   -0.110591998 -0.128332264 -0.0978266867  0.726200084  0.084416150 #> 7    0.792595677  0.576295662 -0.8292365268  0.391746165  0.238375861 #> 8    0.479749064 -0.461110247 -0.1259111314  0.124092524  0.071874528 #> 9   -0.100356297 -0.105978487 -0.4695564463  0.385470320  0.683529438 #> 10   0.071732453 -0.281383728  0.2983609494 -0.677169778  0.068571672 #> 11   0.236349773  0.397515716 -0.2546482960  0.088169252 -0.048984760 #> 12  -0.125741039  0.560925114 -0.2005618974  0.184483792 -0.245851564 #> 13  -0.205005267 -0.165829187  0.0379755407  0.116868700 -0.019687623 #> 14   0.316091756 -0.721204835 -0.4541385635 -0.366641181 -0.458936450 #> 15  -0.267339449  0.229124764  0.1779829930 -0.327391250 -0.642450235 #> 16   0.447230779  0.358465465  0.2865423384 -0.326796945 -0.156739809 #> 17  -0.421067921  0.089231723  0.3244456751  0.055262655  0.096993175 #> 18   0.648743440  0.001271902 -0.1267655026 -0.363588420  0.733415011 #> 19   0.583856167 -0.180209325  0.0120772854 -0.389732165 -0.248585892 #> 20   0.111970811 -0.412409856  0.5996245478  0.930950071  0.754962823 #> 21   0.355717235  0.226824893 -0.6299767496  0.426743153 -0.412363667 #> 22   0.599672006  0.172908724  0.5886928115 -0.074979788 -0.641599919 #> 23   0.589775678 -0.584667602  0.6131574877 -0.099623949 -0.043116973 #> 24  -0.044249704  0.182491320 -0.3304130259 -0.127258464  0.315691178 #> 25  -0.143039597 -0.875382879  0.0281290006 -0.149776004 -0.011903515 #> 26  -0.015658384 -1.298214401  0.5670002909 -0.275203949  0.252637559 #> 27   0.327442418  0.168130956 -0.5239991071  0.428100808 -0.391099069 #> 28  -0.077395012  0.125016724  0.0225201440 -0.784980860  0.037195426 #> 29  -0.659616007 -0.934714848 -0.6231987349 -0.225833198 -0.433812841 #> 30   0.425919247 -0.346012392  0.7048520845 -0.299498934 -0.463503417 #> 31  -0.087185756 -0.119561838 -0.1377205792 -0.191861619 -1.040221895 #> 32  -0.437028363  0.608796632 -0.1339488158  0.544069699 -0.030519736 #> 33  -0.426956553 -0.357140014  0.2839484761  0.269807615 -0.835267774 #> 34   0.522002930  0.270608715  0.7385838075 -0.194006300 -0.245420120 #> 35   0.375954438 -0.176571394 -0.1868896320 -0.378588814  0.307497913 #> 36  -0.132168969 -0.735971234 -0.2697302626  0.324738704 -0.117955588 #> 37   0.140262444  0.098647399 -0.2536987811 -0.437799997 -0.090778800 #> 38  -0.547831618  0.284130687 -0.4807557673 -0.776470429  0.177413232 #> 39  -0.240388355 -0.152558568  0.7684262963 -0.470323183  0.202357549 #> 40   0.028096467  0.247485866  0.0517500119 -0.052209967  0.080909772 #> 41   0.093505303  0.151936119 -0.3733453319  0.141232552 -0.399029470 #> 42  -0.228691775 -0.691032011 -0.0102378510  0.458452425  0.804581312 #> 43  -0.501385565 -0.023853136 -0.5571811364 -0.372713097  0.086149004 #> 44   0.766617331  0.050572077 -0.0674485020 -0.280467625 -0.127997099 #> 45   0.173460698  0.019306142 -0.1588544341  0.333566390  0.343222967 #> 46  -0.446459971  0.018514707  0.0915398742  0.293618408 -0.106166982 #> 47  -0.032108917 -0.088611286 -0.0390775575  0.630389842  0.224618217 #> 48  -0.184666011  0.730861673 -0.4455526274  0.154539414 -0.441833883 #> 49   0.128360512 -0.361581963  0.2613099516 -0.028265121 -0.461200828 #> 50  -0.309047296  0.398747350  0.5421006622  0.236008954 -0.256220865 #> 51   0.085218871  0.212512303 -0.4616345383  0.111116781  0.406135137 #> 52  -0.134907369 -0.101015849 -1.1244091173  0.549060010  0.510418237 #> 53  -0.039307741  0.220087244  0.4455641901 -0.149076546  0.104630133 #> 54  -0.196403617  0.118415752 -0.1090341175 -0.018468019 -0.008742167 #> 55  -0.099654009  0.063192390  0.3878808936 -0.194545496  0.125489473 #> 56   0.334296298 -0.101514539 -0.1395412035 -0.253943253 -0.325415511 #> 57  -0.006064755 -0.409397048 -1.0397595585 -0.617321248 -0.339883077 #> 58  -0.377738344 -0.881215258  0.0056991009  0.125923399  0.269274271 #> 59  -0.450143449  0.039259304 -0.3519644700  0.258580205 -0.347013884 #> 60   0.499848097 -0.010533057  0.1061173002  0.324092275  0.027563021 #> 61  -0.214972590 -0.312370916  0.0386023804 -0.521564028  0.417488329 #> 62  -0.131157907  0.170822676  1.0259924354  0.293751316  0.313414079 #> 63  -0.279477814 -0.006154912  0.2470757038  0.662118946  0.378383526 #> 64  -0.328989468  0.176752195  0.0171659988 -0.191089359 -0.298683051 #> 65  -0.046455580 -0.805175627 -0.1088336109 -0.135125586  0.166051863 #> 66   0.099783752 -0.186539270  0.7001930183 -0.270605356  0.410886608 #> 67  -0.262028879 -0.529923004  0.1145815777  0.272019504  0.586305250 #> 68  -0.558467892  0.137659196  0.3491292919  0.320420054  0.281996639 #> 69  -0.300694985 -0.596206647 -0.1616983452  0.484614362  0.551813230 #> 70   0.264978902 -1.128675767 -0.4262056819 -0.188869171  0.414970116 #> 71   0.299313664 -0.359861565  0.4691734598  0.259897433  0.124239018 #> 72   0.195940817  0.303650570  0.1782087745 -0.461111580 -0.217221101 #> 73   0.240918844  0.817666068 -0.0075854302 -0.427861353 -0.196233771 #> 74   0.165339684 -0.859925698 -0.0792181349 -0.699203138  0.345326710 #> 75   0.380120147  0.125666775  0.2232230003 -0.880929662  0.089832291 #> 76  -0.217287344  0.706802623 -0.1021168437  0.575297178 -0.012113772 #> 77   0.208529033  0.451329315  0.0783395442 -0.334348008  0.282756877 #> 78   0.076494893 -0.381980256  0.0978635761 -0.572680993 -0.303288650 #> 79   0.510951766  0.032965486 -0.3950244499  0.044423834 -0.896616795 #> 80  -0.027321619  0.249928586 -0.1964508027  0.410163067 -0.093355241 #> 81  -0.964513802  0.279637015 -0.3803317453  0.335482048 -0.051579300 #> 82  -0.060007482 -0.015143422  0.1424300357  0.154107978  0.216622941 #> 83   0.469037331  0.328642436 -0.2301344781 -0.939167278 -0.023547181 #> 84   0.141044951  0.427757603  0.3736749116 -0.611408696  0.722714801 #> 85  -0.728099024  0.655162279  0.5646856919  0.163649907 -0.502922010 #> 86  -0.262351017  0.486869307 -0.0870241451  0.337287978  0.477900263 #> 87   0.172981896  0.115695449  0.0528821152 -0.525268709 -0.566136836 #> 88  -0.713383857  0.718404356 -0.0285517661  0.382414358 -0.146759444 #> 89   0.140872783  0.356642231 -0.4501177765  0.586438194 -0.507664568 #> 90   0.045322581  0.323737961 -0.0917648009  0.074166449 -0.330392116 #> 91  -0.193193254 -0.388264132 -0.1572316716  0.759988524  0.563062822 #> 92  -0.316564497  0.228343434  0.0379923082 -0.301460935 -0.017673356 #> 93  -0.317539151  0.353521839 -0.0288888225  0.143062520 -0.200420662 #> 94   0.103264298  0.129550788 -0.0294386381 -0.080091256  0.639819986 #> 95  -0.161703416  1.457612768  0.1797225403  0.047799453  0.494353283 #> 96  -0.304148396 -0.710906804  0.4277435872 -0.097291671 -1.020934434 #> 97   0.075432475 -0.033828275  0.2778123370 -0.012611311  0.149389338 #> 98  -0.040821821 -0.210086139 -0.1580882211 -0.057849591  0.094951203 #> 99   0.026855035  0.203675996  0.6841561440 -0.173120627 -0.388332502 #> 100 -0.689953373  0.411003704 -0.5743530668  0.537168744 -0.341141500 #> 101 -0.680645892  0.022914966  0.3558158322 -0.047951613 -0.249572628 #> 102 -0.129079595 -0.528710036  0.9496821856  0.380716798  0.294926891 #> 103  0.078114255  0.322479531  0.1515893913  0.172115470 -0.647577806 #> 104 -0.468589962 -0.334747428  0.6041733723 -0.884287463 -0.428319740 #> 105 -0.814307311 -0.741451632 -0.4681444790  0.443030434 -0.322271917 #> 106  0.182929269 -0.131399524  0.0839893390 -0.623128184  0.601204572 #> 107  0.015446638 -0.059126274  0.0640130416  0.102895638  0.444151085 #> 108  0.738420124  0.259228899  0.7932724993 -0.225653300 -0.224033650 #> 109  0.324629280 -0.293114680  0.2540746312 -0.639751981 -0.323169709 #> 110 -0.516257167  0.105248084  0.3686392358  0.095184832 -0.128476274 #> 111  0.185452915 -0.045298745 -1.2509312945 -0.788719564  0.406726696 #> 112 -0.464794021 -0.044526997 -0.2595485088 -0.028845270 -0.663819761 #> 113  0.888305178 -0.206127635 -0.9243656611 -0.110964807  0.595547873 #> 114  0.315035978  0.299496673  0.0757143162  0.085387774  0.336450012 #> 115  0.652873172  0.084386509  0.2543687616 -0.171172125 -0.219535637 #> 116 -0.164372036 -0.432987207 -0.5125392566 -0.201267085  0.267205473 #> 117  0.018735665  0.077654110  0.1205528203  0.002225580  0.644134999 #> 118 -0.818505871  0.264676552  0.0337365186 -0.835012945  0.325365803 #> 119 -0.407828653 -0.008728897  0.5210778220 -0.142374582 -0.110637133 #> 120  0.112035623  0.090972673  0.0139875359 -0.150745509 -0.154116481 #> 121  0.540330464 -0.056161983 -0.0248941290  0.693165599 -0.017721884 #> 122 -0.162649513  0.577192176  0.1084931229 -0.051272370  0.136685474 #> 123  0.688810370 -0.527548265 -0.2570993724  0.169308768 -0.277034998 #> 124  0.152724074 -0.035263276  0.1661110144  0.834103790 -0.123287076 #> 125  0.282814448  0.562010182 -0.4060745136 -0.017946978  0.293693033 #> 126  0.143712787  0.113118837  0.5662675890  0.380394053  0.301336915 #> 127 -0.115275223  0.696916670 -0.4840026349 -0.399742153 -0.011548265 #> 128  0.307453129  0.349654877  0.3445626170  0.527845366 -0.031397396 #> 129 -0.338179013  0.172270219 -0.5400246791 -0.394144032  0.853540871 #> 130  0.109609535  0.383552172 -0.1054774985  0.123583633  0.859695191 #> 131  0.294461097 -0.175062180 -0.2221285110  0.038806387  0.132179909 #> 132  1.369019948  0.210588171  0.2905281655  0.847767930 -0.548491193 #> 133 -0.127931396  0.251254689  0.0985900047 -0.479632380 -0.513292593 #> 134 -0.343904266 -0.004038101  0.3309753868  0.626623119 -0.482794597 #> 135 -0.218968988 -0.092706922  0.3799358603  0.082548923 -0.083856402 #> 136  0.093244109  0.737838466 -0.4164200049 -0.053182497  0.180828226 #> 137 -0.537158924  0.006936728  0.3617700553  0.276056597 -0.251966882 #> 138  0.391073691 -0.372492010 -0.0579576238  0.348630220  0.121364259 #> 139 -0.529892530 -0.141398491 -0.1076113907  0.094329103 -0.261370059 #> 140 -0.985775673 -0.113861502  0.0892682385  0.184602544  0.645406787 #> 141 -0.092707003  0.104846331 -0.5804718858 -0.279888517 -0.126766238 #> 142 -0.426155695  0.625885020  0.1587545166 -0.034268056 -0.196450035 #> 143  0.564179878 -0.104269697 -0.2542423514 -0.115795353 -0.375156317 #> 144 -0.450466617  0.452791897 -0.7484308032 -0.360646028 -0.164002124 #> 145 -0.367514557 -0.486352226  0.0838824398  0.520108940 -0.204205684 #> 146 -1.095108679 -0.129517746 -0.6194313695 -0.230777150 -0.041959514 #> 147  0.868937492 -0.189380741 -0.1409671475  0.495352144  0.391017204 #> 148  0.443701904 -0.116920143 -0.4842784078  0.423930198 -0.259254443 #> 149 -0.269025101 -0.397202222  0.0472757562  0.182262673 -0.109816110 #> 150  0.726928427 -0.179276355  0.1501432016 -0.297234003  0.046497261 #> 151 -0.101716251 -0.050120806  0.1831195736 -0.510233393 -0.021009570 #> 152 -0.243491540  0.158758645 -0.0650810780 -0.113888317  0.067885247 #> 153 -0.663081738  0.163950751 -0.1723552945 -0.223558724  0.020136231 #> 154  0.057052393 -0.053549650 -0.0582133170 -0.085367779 -0.798783608 #> 155  0.151661569  0.141115768  0.8555965753  0.308845848  0.252928251 #> 156 -0.151935330 -0.374065532  0.3678671993  0.424722536 -0.311151640 #> 157 -0.357498916  0.011735051  0.2965463844 -0.004126028 -0.302363336 #> 158 -0.308750050 -0.604503567 -0.7113187923  0.458220511 -0.690042066 #> 159  0.023958994  0.340193291  0.0487010566  0.468339043 -0.429852536 #> 160  0.816573643  0.209278156  0.1409586089  0.293217506  0.108478127 #> 161 -0.018193761 -0.338834128  0.6186237073  0.099349509 -0.384105799 #> 162 -0.298059950  0.318381253 -0.3498334422 -0.165239252  0.582339727 #> 163 -0.341050128 -0.046978211  0.4277271219 -0.260556538 -0.254943520 #> 164  0.177156169 -0.324284733  0.1292936512 -0.414122003  0.141612074 #> 165 -0.653074647  0.420782246  0.1896861523 -0.122900272  0.060121215 #> 166 -0.764078707 -0.488108978  0.7740328192  0.217982304  0.134780810 #> 167  0.492725421 -0.089124416 -0.0588309641 -0.045504129  0.602512458 #> 168 -0.041080102  0.368826130 -0.1160484227  0.002757212 -0.446918138 #> 169 -0.267795375 -0.109723328 -0.2288664362 -0.553401710 -0.453275756 #> 170  0.216172097  0.266937781  0.1164631470  0.133833838 -0.072771290 #> 171 -0.479411608  0.320949273 -0.0009904119 -0.472829033  0.118742762 #> 172  0.756177836  0.207967857 -0.3673499808  0.253074543  0.340066571 #> 173 -0.072516515  0.669653146  0.2863519924 -0.016433996 -0.141724943 #> 174  0.135444649 -0.553800694 -0.6058294198 -0.615970558  0.444270362 #> 175  0.041560647  0.425641463 -0.0380109652 -0.613529594 -0.264614062 #> 176  0.761518024  0.683360177  0.2751913516  0.094953075  0.069346806 #> 177  0.647724916 -0.442169504  0.1113214303  0.197062757 -0.063562836 #> 178 -0.695300401 -0.150451203 -0.1541002333  0.641032764 -0.261342542 #> 179  0.122763157  0.182041057  0.0888239532 -0.543009722 -0.346168965 #> 180 -0.157822760  0.435111537 -0.1315204982 -0.066561090 -0.233980293 #> 181  0.725453022 -0.454421989 -0.1083711592  0.259056649 -0.210444668 #> 182 -0.223036514 -0.283168320 -0.2347198830 -0.545320920 -0.351768229 #> 183  0.090507048 -0.420967706 -0.2190658351 -0.147784310 -0.170825942 #> 184  0.927141003 -0.354172331  0.1667611269  0.975212371 -0.385507109 #> 185 -0.148219995 -0.169403941  0.0776386442  0.277310856  0.434302940 #> 186  0.282016438  0.850428673 -0.0375666498 -0.144426534  0.639481484 #> 187  0.019397574 -0.108070423 -0.1761921546 -0.013329954 -0.267307764 #> 188 -0.160861413 -0.007808747 -0.3854758487  0.002622274 -0.582857628 #> 189  0.006779931  0.398216720  0.1022112673 -0.316116842  0.422638718 #> 190  0.159291685  0.410734428 -0.2735459485 -0.250701364  0.461277829 #> 191  0.166456465 -0.525201035 -0.2208589347  0.201852896  0.528555009 #> 192  0.142277626 -0.178317631  1.0535601849  0.486823378  0.169374301 #> 193  0.493961142 -0.027393011 -0.2475564784  0.187370520 -0.382410041 #> 194 -0.762213715 -0.006878923  0.5119696945  0.472042502  0.217834628 #> 195 -0.079099845 -0.530958143 -0.0461295614 -0.479467061 -0.018100835 #> 196 -0.541002285 -0.117072905  0.6420930417 -0.164590320  0.778157613 #> 197  0.527250824 -0.380379466 -0.4772275378  0.085491385 -0.493453547 #> 198  0.192496570 -0.144178925 -0.1143495319 -0.211410658  0.856882489 #> 199 -0.350857138  0.642869703 -0.3646118434  0.058141111  0.502258239 #> 200 -0.338462881 -0.903794314 -0.6658918205 -0.122123275  0.230818881 #>            pc100         pc101        pc102        pc103         pc104 #> 1   -0.180939558 -0.2542083884 -0.652363238  0.063784799  2.075391e-04 #> 2    0.415830840  0.6591219382  0.234978622 -0.507196211 -7.644672e-02 #> 3   -0.048011838  0.7122756660 -0.027308446  0.858986179  5.772008e-01 #> 4   -0.148651404  0.3706034702  0.016904464 -0.472961423  1.302589e-01 #> 5    0.492364052 -0.4449471318  0.484495380  0.213658317  4.365991e-01 #> 6    0.219909013 -1.0584209546 -0.029224444  0.486975466  2.204046e-01 #> 7    0.845859921  0.0032339655 -0.033056711  0.371105631  5.747944e-01 #> 8    0.170370648  0.1459335535  0.321065031  0.363202792  3.196587e-01 #> 9   -0.929756808 -0.1634058688 -0.505339039  0.701629495 -5.203913e-01 #> 10   0.450704135 -1.6238451488 -0.023695052 -0.194517687  9.839336e-02 #> 11   0.151657120 -0.2084982323  0.102311608  0.437730044 -3.762597e-01 #> 12  -0.214070527 -0.0984515729  0.525576394 -0.216292511 -6.459162e-01 #> 13   0.143617718  0.1120057681  0.144234258  0.094677230  9.718156e-02 #> 14   0.416003800 -0.3417380198  0.353745386  0.974027954  8.295157e-01 #> 15   0.724169489  0.5981466257 -0.503195142 -0.098812438  2.701258e-01 #> 16  -0.481918220  0.2270573401  0.510342020  0.218301703 -3.149385e-01 #> 17   0.081870672 -0.4271130958  0.468437262 -0.627261337 -3.383824e-01 #> 18  -0.217362593  0.0563326777 -0.593825428  0.325237322  5.100953e-01 #> 19   0.131022154 -0.1604570663 -0.273214812 -0.373509705 -6.727753e-01 #> 20  -0.174076305 -0.0814515327  0.473776975 -0.973952880  3.081986e-01 #> 21  -0.340870247  0.1576198127  0.230838427  1.059908424 -1.713776e-01 #> 22  -0.772022921  0.0763282110  0.016266679 -0.433844114 -2.667401e-01 #> 23  -0.314421834 -0.1966130344  0.170808088  1.081725025  1.237875e-01 #> 24   0.710991720 -0.2418331507  0.862878762  0.358250102 -3.041971e-01 #> 25   0.161348793 -0.0897292665 -0.635425935  0.474276564  3.062130e-01 #> 26  -0.015148652 -0.4995860444  0.409504970  0.462955722 -1.492953e-01 #> 27   0.478595878 -0.1368236511  0.138811852 -0.347750790  2.014617e-01 #> 28   0.273444500 -0.4557512255 -0.236761745 -0.116209619 -1.411746e-01 #> 29  -0.295366451 -0.4167969124 -0.157047085 -0.811299953 -8.612511e-02 #> 30  -0.383575955  0.2686072105  0.451330981 -0.249856228 -5.713592e-01 #> 31  -0.134902667 -0.0910389278  0.226739566 -0.050321052 -2.228210e-01 #> 32  -0.031844508 -0.1587079068 -0.193669006  0.224762628  2.014883e-01 #> 33   0.237699585  0.2063010987 -0.413274653 -0.476253630 -1.207776e-01 #> 34  -0.374615121  0.4248388154  0.021295818  0.390272435  4.077378e-01 #> 35   0.303658368  0.0376412932  0.149916443 -0.094283739  2.517641e-01 #> 36   0.395059596  0.0348218914  0.320727924 -0.708350277  2.580859e-01 #> 37   0.326930700 -0.0661072723  0.258772283  0.148875532 -7.238829e-02 #> 38   0.282556534 -0.4805073913  0.220220487  0.663994419  2.507026e-01 #> 39   0.862465398  0.1833395314  0.494662577 -0.147154493  4.981461e-01 #> 40   0.482553141  0.1616742306 -0.254813390 -0.293893968  2.323319e-02 #> 41   0.190978451  0.0425781053 -0.459136001 -0.756141875  1.731428e-01 #> 42  -0.115281801  0.1475439531  0.170038749  0.355178586  4.767337e-01 #> 43  -0.264666383 -0.0466240809 -0.355395736  0.669356011 -1.068381e-02 #> 44   0.128212798  0.2329734461  0.185149253 -0.350331481  2.563785e-01 #> 45  -0.408086972 -0.0570222519 -0.275631423  0.485117382  1.193646e-01 #> 46   0.894151174  0.0364032559  0.022216451 -0.951626979  1.957902e-01 #> 47   0.250123254 -0.3479040533  0.353590707  0.028251062  2.649417e-01 #> 48  -0.727731758 -0.0009314222 -0.418119071  0.099982000 -4.070578e-01 #> 49  -0.387646564  0.1571526732  0.235243636 -0.072596629 -3.060084e-02 #> 50   0.099568092  0.7429692107  0.457751957  0.329096370  2.529902e-01 #> 51   0.318873049  0.0168512316 -0.534055954 -0.429515076 -2.919797e-01 #> 52   0.559981315 -0.3943032973 -0.444996330 -0.229744451  3.191955e-02 #> 53  -0.270566403  0.4407757397 -0.914930701  0.108657548 -7.777439e-01 #> 54  -0.246233999  0.4480665971 -0.063160519 -0.295022819 -6.524841e-01 #> 55   0.248020376  0.3291560467 -0.350577772  0.013157135  4.363954e-01 #> 56  -0.155557860 -0.8810253361  0.129705842  0.256624932  1.368615e-01 #> 57   0.935051888  0.5921741042 -0.340770615  0.512151146  3.825607e-01 #> 58  -0.401240703  0.8165946363 -0.958730137  0.338455732  4.188994e-01 #> 59  -0.064615031 -0.2145517440  0.299646378  0.156544842  2.869541e-01 #> 60  -0.553359293  0.0043612334  0.091050867  0.246154905  6.027587e-01 #> 61  -0.005720400 -0.3428293464 -0.197242836 -0.387777863 -1.983703e-01 #> 62  -0.398258128  0.5051479367  0.248430078 -0.660532608 -1.331740e-01 #> 63  -1.072689578 -0.5352664211  0.010696385  0.332685567 -4.449543e-01 #> 64  -0.017307743 -0.0125669969  0.321113186 -0.095443797 -1.520276e-02 #> 65   0.004629383 -0.0048819908 -0.474978015  0.310715429 -4.881227e-01 #> 66   0.181737750  0.3925540530  0.177034649 -0.036564484  1.054765e-01 #> 67  -0.103770998  0.0667944694 -0.758524831  0.279647628  3.657830e-01 #> 68  -0.709061128 -0.1046064952  0.163363414  0.050543878  1.034653e-01 #> 69  -0.175754030  0.2433038151  0.198459000 -0.483635169 -2.545161e-01 #> 70  -0.005772597 -0.2493543097  0.253248811  0.043207906  3.020683e-01 #> 71  -0.545301798 -0.0996070208 -0.400010050 -0.705714192 -3.545049e-01 #> 72  -0.555962141 -0.0899336449 -0.462459537 -0.008365673 -3.308574e-01 #> 73   0.242033021  0.6537216793 -0.001239313  0.118212614  1.355528e-01 #> 74   0.220900033  0.0566583787 -0.642116434 -0.518941932  2.625589e-01 #> 75  -0.381410577  0.8405909379 -0.038190306 -0.101390497 -1.787264e-01 #> 76  -0.292025979  0.2929128517  0.184113362 -0.326087836 -1.653447e-01 #> 77  -0.022219258 -0.0302501878  0.639778554 -0.161972965 -8.556144e-02 #> 78  -0.076448344 -0.1160183695 -0.368179257 -0.807670499  3.027328e-01 #> 79  -0.033330684  0.1756317593  0.061483577  0.289741172 -6.317438e-01 #> 80  -0.220336791  0.6064045326 -0.021292842  0.384437019  1.272462e-01 #> 81   0.963334770  0.1162177509  0.406767674 -0.189774088  4.180788e-01 #> 82   0.247098169 -0.0952642929  0.124594064 -0.273070888  2.381628e-01 #> 83   0.387887027  0.0468558862  0.626297986  0.268569903 -4.157257e-01 #> 84   0.328988927  0.3085031947  0.420589507  0.605969204 -3.793706e-01 #> 85   0.364249047  0.7008257099 -0.166649880  0.336367025  3.510495e-01 #> 86   0.044287858 -0.5747747757 -0.257054031 -0.511660426 -4.762893e-01 #> 87  -0.030552328 -0.3454196666 -0.258953563 -0.446206951 -3.171707e-01 #> 88  -0.093242753  0.3514957026  0.076897752 -0.539623391 -2.158750e-01 #> 89  -0.450782762 -0.5164631156  0.125436363 -0.076598651 -5.044615e-01 #> 90  -0.026693956  0.0169750122 -0.009326511 -0.125366751 -3.925982e-01 #> 91  -0.151425756 -0.8912494071  0.393811111 -0.164987198 -3.244372e-01 #> 92  -0.406946998  0.5893187996 -0.621551073  0.056229290 -3.498022e-01 #> 93  -0.247990688 -0.3036024003 -0.137605104  0.568516431 -2.165132e-01 #> 94   0.350988666  0.2668008503  0.023996880 -0.318274312  2.294527e-02 #> 95  -0.110659497 -0.0524089091  0.036300772  0.061164984  3.996731e-01 #> 96  -0.478729812 -0.1278985298 -0.296298205  0.181484118  1.663326e-01 #> 97  -0.120561146  0.1308535594  0.021518248  0.021910170  6.450703e-02 #> 98  -0.059379268 -0.5272641101  0.575643047 -0.083287572 -3.860387e-01 #> 99  -0.170522909 -0.9588995941  0.472176435 -0.303629922 -3.280690e-01 #> 100 -0.080182904  0.7112886028 -0.215814669 -0.173333635  5.241456e-01 #> 101  0.253830801 -0.5232399518 -0.259732819  0.110193482  4.659927e-01 #> 102  0.637059870  0.3063556054  0.332430423  0.002334901 -2.100569e-01 #> 103  0.422844700 -0.2793528847 -0.399272954 -0.089334238 -3.085879e-01 #> 104 -0.408215382  0.4524714079  0.135161054 -0.491539572  3.997412e-01 #> 105  0.155566901  0.2139420134  0.859329009  0.387062791  3.379848e-01 #> 106  0.016309433  0.1363012871 -0.276525521  0.127658793 -5.577186e-01 #> 107  0.738432622  0.1989100055 -0.122849634  0.292688196 -1.167543e-01 #> 108  0.200719355 -0.4428527603 -0.320572480  0.097050350  6.246089e-01 #> 109 -1.005776632 -0.1115700154 -0.001228445  0.140113679  2.497087e-01 #> 110  0.027312982 -0.1504898777 -1.059285926  0.474341661 -9.584367e-02 #> 111 -0.048284407  0.2786408435 -0.477477312 -0.280941419 -1.604520e-01 #> 112 -0.471466387 -0.0302400747 -0.192097123  0.004831276  4.728536e-01 #> 113 -0.414043642  0.3114182515  0.217159023 -0.055105235 -6.376113e-01 #> 114 -0.188457066 -0.0967054009 -0.218193251  0.205934802  1.002292e-01 #> 115  0.109087281  0.0755473098 -0.252630911 -0.129800270 -2.537338e-02 #> 116 -0.616044659  0.5513868195  0.316395000 -0.182787798  6.736451e-01 #> 117  0.144214354 -0.0075569717 -0.442979786 -0.199995499 -4.053629e-01 #> 118  0.399454525 -0.1674923312 -0.107481367 -0.034811366  5.933097e-01 #> 119 -0.070674363 -0.2604244823 -0.086845400  0.222419352 -6.561383e-01 #> 120 -0.118797620  0.1771572291  0.382317936 -0.230831024  4.495431e-02 #> 121  0.024569814 -0.9109296518 -0.833377202 -0.295661873 -4.927384e-02 #> 122  0.688399651 -0.1455656203 -0.356117114  0.354662239 -1.158108e-01 #> 123 -0.022913747  0.2970837763  0.132638159 -0.182969587 -3.504976e-01 #> 124 -0.149793102  0.6082262146  0.224475162 -0.071118454  1.062170e-01 #> 125 -0.328087139 -0.1954450964  0.370013453  0.745983752 -8.535911e-02 #> 126  0.140148476  0.1517637883 -0.419860677  0.166471563  3.555631e-01 #> 127  0.352244074 -0.5907475963 -0.780118490 -0.304185994  4.131287e-02 #> 128  0.253880432  0.0293566944 -0.488080489  0.449436818 -6.382115e-01 #> 129 -0.601520458 -0.1026917693  0.444384695  0.027976421 -1.882026e-01 #> 130  0.195955049  0.4917070037  0.512063259 -0.227248765  2.133217e-01 #> 131 -0.230262061  0.3659987673 -0.107563896 -0.109199842 -4.912256e-03 #> 132  0.030906225  0.3371434377  0.142511339 -0.295200972  4.751216e-01 #> 133  0.374011895  0.1957311395  0.128181651 -0.037407270 -1.498038e-01 #> 134  0.369093772 -0.5011537142 -0.012584683 -0.209237687 -6.037796e-02 #> 135 -0.235385398 -0.3211885380  0.183464200  0.010786152  4.162213e-01 #> 136  0.407825473  0.0546964498  0.599960487 -0.298696703 -4.185941e-01 #> 137  0.350374524  0.1350924928  0.075790127 -0.120684594 -1.082343e-01 #> 138  0.138983762 -0.4383034511  0.374696532  0.556095723 -5.294332e-03 #> 139  0.008924129 -0.2169298537  0.319937955 -0.051706943  5.560583e-02 #> 140 -0.175489348 -0.0830086266  0.006367759  0.237811867  1.223087e-01 #> 141 -0.081603287 -0.0730408983 -0.162721171  0.018259612  5.039580e-02 #> 142 -0.269678228 -0.0936335312 -0.038115601  0.504400402 -6.424312e-01 #> 143 -0.079306309  0.9821404893  0.131875024 -0.640980695 -2.540708e-01 #> 144 -0.647591805 -0.0329799630 -0.225099553 -0.116838575  2.966868e-01 #> 145 -0.516667939  0.0557678573 -0.490236370  0.034000306  8.302676e-02 #> 146 -0.192474300 -0.2569141015  0.201858462  0.107123609  8.189589e-03 #> 147 -0.128532149 -0.0786796617 -0.297119062 -0.256260140  5.903203e-01 #> 148  0.492472814  0.4800250691 -0.362513810 -0.026451960 -3.902820e-01 #> 149  0.636899111  0.5782594153 -0.438494001  0.562525085 -7.647305e-01 #> 150 -0.190382041  0.0121273729  0.329472788 -0.122979128 -1.241742e-01 #> 151 -0.610584771  0.0440148193  0.264972974 -0.192590508  2.937777e-01 #> 152  0.102800454 -0.1313633422 -0.087652609 -0.067397702 -2.329109e-02 #> 153  0.231397137  0.0605748981  0.270212315 -0.538536571 -3.368788e-01 #> 154  0.431436043 -0.6813433194  0.174378558 -0.337831992  9.479816e-05 #> 155 -0.136687834 -0.1018964405 -0.313635402  0.029781752  3.936223e-01 #> 156  0.142135150 -0.0254994052  0.244024591  0.101738754  3.258013e-01 #> 157 -0.380093044  0.0111067329  0.184524353 -0.568662978  4.316729e-01 #> 158  0.394499091  0.6397913745  0.100707572  0.461412461 -2.689255e-01 #> 159  0.085749636  0.0154108974  0.019408367  0.025975825  6.922800e-01 #> 160 -0.566387438 -0.3890357386  0.288270710 -0.040714985  3.095849e-01 #> 161  0.429575331 -0.4227297727 -0.024595332 -0.146864880  2.577978e-01 #> 162  0.529617529  0.4497144362 -0.072496641 -0.227020182 -1.618017e-01 #> 163 -0.057228851 -0.3632183041 -0.429220645 -0.113695911 -3.033932e-01 #> 164  0.443094982 -0.3738018638 -0.359119647  0.365821967 -9.115046e-01 #> 165  0.224101349 -0.1383371845  0.011843762  0.632899159 -4.263262e-01 #> 166 -0.250267473  0.7446986566  0.063234253  0.363947613 -4.918837e-01 #> 167  0.130007910 -0.1951074398  0.390671780 -0.138216507  5.237708e-02 #> 168  0.365905467  0.5549051743  0.080263147  0.325441968 -3.119942e-01 #> 169  0.194430885  0.0484018901 -0.430040387 -0.579019206  2.412372e-01 #> 170 -0.015894605 -0.6862874204  0.042334581  0.153197498  3.312373e-01 #> 171 -0.234961631 -0.2604298898  0.031419629  0.178295173  4.972209e-01 #> 172 -0.620530532 -0.2833668790 -0.143621707 -0.436688558  1.649441e-02 #> 173 -0.223057697 -0.1071565675  0.185427425 -0.157460498  6.059824e-01 #> 174 -0.476953274 -0.1584924037  0.093644268 -0.738301140  2.779575e-01 #> 175 -0.356723552 -0.4335657077 -0.412080180 -0.466179596  3.888404e-01 #> 176  0.259624463 -0.1356057730 -0.874597730 -0.190792238  2.385700e-02 #> 177  0.159226733 -0.1139469115 -0.243659476  0.259402930 -6.174449e-01 #> 178 -0.167453593  0.1793106412  0.323876722  0.129942276 -2.345512e-02 #> 179 -0.083340589 -0.2215124541  0.423270167  0.174425291  1.655395e-01 #> 180 -0.256239778 -0.3992664525 -0.166020728  0.445387584  2.736576e-01 #> 181  0.463866927  0.1353350514  0.321457449 -0.158711758 -6.311534e-01 #> 182  0.075190903 -0.1404505220  0.907673982  0.132325319 -5.991876e-01 #> 183 -0.115157498  0.4984758493 -0.053170920  0.041971780  6.975798e-02 #> 184  0.338754031  0.3363242759 -0.208865890  0.508709170  2.722422e-01 #> 185 -0.213080428  0.1586174477  0.169370265  0.227550807 -1.137922e-01 #> 186  0.258352891  0.1951842207 -0.622658233 -0.142782122  8.006915e-02 #> 187 -0.605754755 -0.0245595209  0.494072771 -0.051324528 -2.391628e-01 #> 188 -0.142540625  0.1027808917  0.516543442  0.295870897 -1.487858e-01 #> 189  0.116024946 -0.3762687657  0.308575381  0.167738111  3.868732e-01 #> 190 -0.747456968  0.3556274968  0.459481517  0.328489572  4.934805e-01 #> 191  0.541431519  0.1455752000  0.178882426 -0.014702739 -2.127218e-01 #> 192  0.677321859 -0.2331256569 -0.079770288  0.210101017 -4.449678e-01 #> 193  0.218973901 -0.1598226022  1.009224102 -0.160651489 -3.527078e-02 #> 194 -0.136476034 -0.1985896209 -0.192925206  0.087716504  1.388515e-01 #> 195 -0.679601586 -0.0148672119 -0.455739496  0.021022405  2.966639e-01 #> 196  0.320739113  0.2840800450  0.278840619  0.219879977 -7.556792e-01 #> 197  0.215233547 -0.2766353722 -0.583422757  0.044207440  2.104250e-01 #> 198  0.120357531  0.2279314533 -0.353969189 -0.365507124  1.313944e-01 #> 199 -0.881417050  0.3425030231  0.634983174 -0.415828944  3.889331e-01 #> 200  0.085770229  0.2504189010  0.304781601 -0.165813427 -2.546406e-01 #>            pc105        pc106        pc107        pc108         pc109 #> 1   -0.607324999 -0.223595396  0.149548540  0.090675583 -0.1318380101 #> 2   -0.142078112 -0.094594992 -0.041418543 -0.128043178  0.4788098657 #> 3   -0.210594181 -0.082523558 -0.198615059 -0.048586761  0.5443623013 #> 4   -0.350115939 -0.067562805 -0.321135270  0.064078830 -0.2261058503 #> 5    0.301039677 -0.243990797 -0.185501140 -0.651922273  0.1988664097 #> 6    0.522767615 -0.392952458 -0.071358580 -0.238581773 -0.3169224932 #> 7   -0.375891868  0.020743044 -0.045856191 -0.453610121  0.1246993245 #> 8    0.637617103 -0.159127612 -0.209066052  0.051432796  0.1230272453 #> 9   -0.465197358  0.263920950  0.336140478  0.185013146 -0.2981404392 #> 10   0.788955288 -0.016777192 -0.149122948 -0.368815562  0.0083493951 #> 11  -0.582280784 -0.111254631  0.531432797  0.041750063  0.6248936442 #> 12  -0.051434240  0.269415569  0.271789730 -0.232124227  0.2748132868 #> 13  -0.126466886 -0.032217153  0.161637078 -0.022238313  0.0681384536 #> 14  -0.047656601  0.218698011 -0.091032534  0.281244067  0.0646007355 #> 15  -0.695136141  0.243134183  0.147471294 -0.569557525 -0.2035668058 #> 16  -0.176737351 -0.157764715 -0.808800986  0.234237416 -0.3396062258 #> 17  -0.331300843  0.128286293 -0.081069441  0.331901105 -0.1209149290 #> 18   0.045539488 -0.887398760 -0.288564892 -0.178895137  0.3969798853 #> 19  -0.125821299 -0.279552924 -0.614623686 -0.367093340 -0.3866111153 #> 20   0.358840660 -1.010450825 -0.177918439 -0.533567310  0.0239060840 #> 21   0.131930118 -0.136967724 -0.154786943 -0.321202456  0.0903788972 #> 22   0.302834433  0.177988944 -0.126065234 -0.395774424  0.3661902800 #> 23  -0.595887069  0.552791604  0.249661709  0.355357168 -0.3647498968 #> 24  -0.296409606 -0.368643547 -1.102183325  0.407910250  0.1697896261 #> 25  -0.038763343 -0.352500771  0.721558372  0.069483810 -0.6391328052 #> 26  -0.353087056  0.547235928  0.253430993 -0.274393660  0.2205820665 #> 27   0.146523150  0.550647979 -0.476931757  0.085181684  0.2652759464 #> 28  -0.219172924 -0.257570553  0.093844525 -0.157137194 -1.3658856988 #> 29   0.028470858  0.157886609  0.176550700  0.021876820 -0.0320909369 #> 30  -0.327117330 -0.154034031  0.140991250 -0.204680394  0.1408645347 #> 31  -0.170620627 -0.012095967 -0.041432771 -0.012500482 -0.2446855027 #> 32   0.165635248  0.393209118  0.574337976  0.009291753  0.2310887369 #> 33   0.181303937  0.179322127 -0.217740427  0.012130162  0.1202916914 #> 34   0.356456623  0.249143802  0.189606433  0.076749190  0.1044493591 #> 35   0.296021045  0.386587718 -0.374057513  0.061392628  0.4985228248 #> 36  -0.696568411  0.230282176 -0.719890681  0.093701829 -0.1337315901 #> 37  -0.188311529 -0.094630228  0.176352105  0.017530031  0.3882336942 #> 38   0.620223484  0.036486886 -0.133699142  0.539039161  0.0031190329 #> 39  -0.315146750 -0.138170765  0.157085707  0.093194250  0.1477350953 #> 40  -0.323086156  0.094462958  0.174463705  0.011740266  0.0124717725 #> 41   0.624118332  0.324717478 -0.194214270  0.328781720  0.0139524938 #> 42   0.073053286 -0.348405596 -0.036249888  0.412848327 -0.0889599533 #> 43  -0.080038156 -0.435426140  0.242670492  0.244928813  0.3660617957 #> 44   0.486434496 -0.326297657 -0.618890545 -0.069960706 -0.0199526560 #> 45   0.665874600 -0.389149724 -0.312929350 -0.243428029 -0.0602549733 #> 46  -0.919173844  0.001542269 -0.003711636 -0.205063404 -0.2804990873 #> 47   0.642166258 -0.820037345 -0.278372942 -0.127713860  0.0870305406 #> 48  -0.232459134 -0.010387663  0.350167964 -0.339050227 -0.5374642721 #> 49  -0.159607590  0.328585437 -0.178801210  0.106555822 -0.0951783955 #> 50   0.404503072 -0.166857620 -0.014879689  0.528161567 -0.0402234714 #> 51   0.511266278 -0.266145229 -0.036880735  0.014820376  0.3126713199 #> 52   0.283654934  0.011948953  0.210204979  0.121739428 -0.0036739012 #> 53  -0.300568727 -0.131751686  0.326652936 -0.116063790 -0.1578359764 #> 54   0.432200953 -0.152155643  0.390251273  0.283934455  0.0151316042 #> 55   0.247653849 -0.334444266 -0.156227959  0.253555333 -0.5211843661 #> 56   0.021264009  0.454043442  0.098238166  0.199506699 -0.2332163594 #> 57  -0.159030234  0.111389988  0.581160544  0.055821207  0.2134981792 #> 58   0.181505926 -0.263386368  0.018929767  0.064843163 -0.0910930971 #> 59  -0.024928312 -0.229368554 -0.351657334  0.276881488 -0.0668738905 #> 60   0.610643192  0.230745723 -0.189810743 -0.344193211  0.0487519959 #> 61   0.191374183  0.613827859  0.051619064 -0.114793540 -0.1439206240 #> 62   0.231131688  0.267407507 -0.090894289  0.226655507  0.7895760298 #> 63  -0.632852834 -0.115886202  0.446353736 -0.160112712 -0.1384491699 #> 64  -0.218596774  0.171149372  0.234448448  0.009844411 -0.0658627892 #> 65  -0.160217993  0.414686513  0.119236444 -0.042090922 -0.3041091919 #> 66   0.063213592 -0.449215773  0.188412563 -0.529667517 -0.0511319378 #> 67   0.225354850  0.074128355 -0.013504718  0.199762494 -0.4217656066 #> 68  -0.033936826  0.340198955  0.229906468  0.098141354 -0.1405063863 #> 69  -0.010111355  0.074941537  0.062655224  0.150937289  0.2639522607 #> 70  -0.141898347 -0.161454094 -0.076582892 -0.135177004  0.3323036389 #> 71  -0.071131794  0.031247092 -0.040200087 -0.342280097 -0.0723477043 #> 72   0.175599584  0.406653111  0.133345927 -0.345893856  0.2369615181 #> 73  -0.119588860  0.197359654  0.200566820  0.175914798  0.0310879908 #> 74   0.172501989  0.369874837 -0.341455496 -0.461882781 -0.1682400950 #> 75  -0.368023090 -0.092901375  0.077212384 -0.029692802  0.0737538267 #> 76   0.245590301 -0.220603892 -0.282344954  0.413169876 -0.0380840528 #> 77  -0.545901186  0.273140373 -0.086777419 -0.290396945  0.1750339919 #> 78   0.248590210 -0.342031418  0.516981831  0.217052932  0.1715605146 #> 79   0.049162549  0.724493824 -0.266032942 -0.431318337  0.7521101308 #> 80  -0.272306054  0.050549571 -0.069092782 -0.097875926  0.0879900771 #> 81  -0.117612253  0.215932740 -0.130014270  0.768250202 -0.5271910880 #> 82  -0.055019954 -0.041929298 -0.044088891 -0.140083474 -0.0591956222 #> 83   0.241025303  0.070585539 -0.562049376 -0.064664587 -0.0270637285 #> 84  -0.078850130  0.190807825  0.643729261  0.197205193 -0.4230130407 #> 85   0.503826315 -0.278457083 -0.248366149  0.912580829 -0.0367816399 #> 86  -0.860381316  0.155705117  0.401278340  0.102033532  0.0274348449 #> 87   0.328670164  0.378160056  0.135649211  0.033050036 -0.4604411855 #> 88  -0.266733883 -0.701407740  0.264097695  0.035753221 -0.2538510581 #> 89   0.167716993 -0.044050708  0.219406434 -0.393583738  0.4814319679 #> 90  -0.122014474  0.080703212  0.007721369  0.072563664 -0.4229296273 #> 91   0.082426098  0.128060359  0.096928449 -0.457767719  0.0520042422 #> 92   0.188214752 -0.628018987 -0.013570638  0.106623885 -0.0006088876 #> 93  -0.130941121  0.023793677  0.108048708  0.109917334  0.0226103349 #> 94  -0.167227864 -0.265306899 -0.408557811  0.697145513 -0.2474613386 #> 95   0.895535156  0.096399967  0.160393618  0.312449487  0.5644872525 #> 96   0.488882021  0.631919130  0.226578851  0.086076642 -0.3276833140 #> 97   0.042592462  0.046690063  0.001368336 -0.069056619  0.0634380233 #> 98  -0.630400788  0.029584931 -0.359271784 -0.217686735 -0.0138101335 #> 99   0.207537931  0.245695657  0.396570878 -0.236299779  0.1078725813 #> 100 -0.324951926 -0.127766233  0.343054848  0.158585759  0.4694572819 #> 101 -0.025550777 -0.035847964  0.153489399 -0.323408434 -0.0082450469 #> 102  0.240969073 -0.180884205  0.262992188 -0.454222545 -0.2320281123 #> 103  0.159889439 -0.425817866  0.195564788  0.013878448 -0.0678003487 #> 104 -0.263388421 -0.516861399 -0.768737056 -0.476841514 -0.1018393665 #> 105 -0.115105768  0.495688966  0.805718482  0.152706940  0.3012187237 #> 106  0.036871528 -0.386109098  0.294012929 -0.257238487  0.3421420646 #> 107  0.486370133  0.509875664 -0.185089586  0.231221489  0.1737479375 #> 108 -0.108919037  0.590486523  0.315504494 -0.091552081 -0.1667969472 #> 109 -0.255985138 -0.637898470 -0.151909116  0.510724001  0.1187254621 #> 110 -0.096682586  0.161885908 -0.442336911 -0.417240429  0.3746740277 #> 111  0.123930489  0.110437037  0.025563109  0.192918620  0.5792549914 #> 112  0.309441101 -0.607589413  0.093980791 -0.228541555  0.1900517510 #> 113  0.092705841  0.173410971 -0.454345322  0.158851149 -0.2497680976 #> 114  0.267282044  0.251474552  0.021681087  0.169126371 -0.3213642892 #> 115 -0.081182013  0.160460999 -0.091405204  0.903605083  0.4224679722 #> 116 -0.090836406  1.224533097 -0.133696413  0.033759109 -0.7065391292 #> 117 -0.281460095  0.348197479 -0.285492409  0.292528925  0.7143597801 #> 118  0.043880199  0.270370164  0.345402894 -0.517931147  0.2608527912 #> 119  0.281489961 -0.016355426  0.282919451  0.442252599  0.2661983786 #> 120 -0.149878898  0.108337863  0.214845085  0.152898677  0.5636310747 #> 121  0.142805781 -0.105702506  0.131780797  0.732834305  0.8506650484 #> 122 -0.060591187 -0.100789873  0.179152594 -0.600290777 -0.0040566002 #> 123  0.659231460  0.311920934  0.270241060 -0.338299402 -0.2400848064 #> 124  0.193137460  0.047537943  0.495170831 -0.761926371 -0.1132012499 #> 125 -0.524157133 -0.431571362 -0.272340888  0.028507107 -0.0920047921 #> 126 -0.124007773  0.099454967  0.052382242 -0.090979770 -0.6035585153 #> 127 -0.016091340  0.479172142 -0.049231212 -0.393443279 -0.1790421672 #> 128  0.031811916  0.073570639 -0.345191494  0.188964904  0.0242504645 #> 129  0.187706391 -0.169004948  0.264479895 -0.083402233 -0.1305502398 #> 130  0.124066291 -0.039795664  0.622839139  0.061842659  0.1007740806 #> 131  0.664717747 -0.218170043  0.114505955 -0.549617782 -0.0076431442 #> 132 -0.280513475 -0.025436171  0.292342424 -0.158806714 -0.2142535940 #> 133  0.110176314  0.144364068  0.028173956  0.130828458 -0.4104249140 #> 134 -0.249468206 -0.075479790 -0.494447464  0.367686692 -0.3123304668 #> 135 -0.200487083 -0.124931030 -0.389628501  0.627611597 -0.2626929839 #> 136 -0.045447603  0.428381294  0.232642766 -0.098768502 -0.1022243903 #> 137  0.734745599  0.110882954  0.356628614 -0.011682852 -0.3567556905 #> 138 -0.121361014 -0.234547686  0.133758719  0.287861714 -0.0213320559 #> 139 -0.224091533  0.252238090 -0.078605657 -0.040024380  0.0279600422 #> 140 -0.024093831  0.740325488 -0.895113204 -0.584576399  0.2418121591 #> 141  0.512608038 -0.110798865  0.042243645  0.043224986 -0.2755705910 #> 142  0.330480817 -0.084260548 -0.162579190  0.322452851 -0.4262162617 #> 143 -0.416708934  0.181817871  0.686983735  0.205349596 -0.1662235685 #> 144  0.003076363 -0.144547205 -0.283524903 -0.296067203 -0.2748482804 #> 145 -0.145421675 -0.370835718 -0.453456031 -0.150786858  0.6041174309 #> 146 -0.528929949 -0.085326849 -0.515783649  0.799539614  0.0718342961 #> 147 -0.027706366  0.509066785 -0.217614815  0.302747537 -0.2956864596 #> 148 -0.137905887  0.029102407 -0.608187350 -0.075770128 -0.1720217290 #> 149  0.017079537  0.312525364 -0.544225368  0.340279443 -0.1376278910 #> 150  0.398457621 -0.253758591  0.508792904  1.021915788  0.1994325450 #> 151 -0.371650573  0.201474847  0.315071965 -0.033501739  0.7171177876 #> 152  0.155988483  0.420742847  0.065777592 -0.277405205 -0.3056406007 #> 153  0.298254391  0.037794590 -0.068457225  0.173363293 -0.0850387251 #> 154  0.315056961 -0.024760818 -0.174615123  0.257001980 -0.0531815703 #> 155 -0.814009739  0.022395753 -0.286314501  0.148639624  0.0045658434 #> 156  0.394936962 -0.068616404  0.549825658 -0.004050018  0.4275597852 #> 157 -0.130385356 -0.050815055 -0.473834164  0.214658767  0.0436131264 #> 158 -0.304658284 -0.952798575 -0.188941029 -0.998761779  0.1059020547 #> 159 -0.243892174 -0.100712347  0.285905646 -0.496249890 -0.3583243287 #> 160 -0.551369220  0.457644144 -0.284079995  0.369429660  0.1279795408 #> 161  0.023536358 -0.770566467  0.131806713  0.432834457  0.1102764448 #> 162 -0.123140913  0.471627546 -0.012443908 -0.233633478  0.4235473312 #> 163  0.396523159 -0.094201565 -0.030441033  0.637173701  0.0409015618 #> 164 -0.448841216 -0.851166741 -0.398876001 -0.195402269 -0.0705990172 #> 165 -0.228729749 -0.343047715 -0.302193980 -0.288174358  0.7366959923 #> 166  0.185415625  0.389347874 -0.434600017  0.486790893  0.0956890047 #> 167  0.491929786  0.118227845  0.333821601 -0.385191584 -0.0727151463 #> 168  0.147599695 -0.331243160 -0.044910277 -0.510199349 -0.3149767772 #> 169  0.157593545 -0.303866004  0.082192947 -0.352936971  0.5104799993 #> 170 -0.233108442 -0.272174635  0.584532933  0.104830944 -0.2146155722 #> 171 -0.490648234 -0.487401057 -0.323830783 -0.015857446  0.3316364810 #> 172  0.443846836  0.027946405 -0.387569891  0.461125246 -0.3470795333 #> 173 -0.417054874 -0.206528808  0.497396874  0.037781285 -0.3640137645 #> 174 -0.493155739 -0.521464232 -0.071578692  0.330249562  0.0808978094 #> 175  0.094827212 -0.215023740 -0.311503191 -0.112768430  0.0400898085 #> 176 -0.594732824  0.190919675 -0.327445734  0.167642932 -0.1495798962 #> 177  0.022554671 -0.059861461 -0.424441997  0.207476391  0.0926670329 #> 178  0.425049337  0.621287165 -0.590102809 -0.836856122  0.6469778637 #> 179 -0.565390816  0.022878938 -0.237611723 -0.366508952  0.1232108701 #> 180  0.326622332  0.432472887 -0.113335161 -0.137861626  0.1713682098 #> 181 -0.166149934 -0.643063410  0.676283021  0.555347603 -0.2610289280 #> 182  0.270228897 -0.489907573  0.163454080 -0.260097851 -0.4117525843 #> 183 -0.034261338  0.087261164  0.038028187  0.235924553  0.3002375911 #> 184  0.051230018  0.383187870 -0.217594078 -0.164917719 -0.1809636662 #> 185 -0.349761025  0.179263828 -0.057062317 -0.028296196  0.3642236976 #> 186  0.451688314  0.072596681  0.469731191  0.062139856 -0.0114072232 #> 187  0.594828593 -0.467881431  0.624349148  0.225236294  0.3094815495 #> 188  0.419481927  0.502133442 -0.257289986  0.172445005 -0.4800938971 #> 189 -0.541877766  0.175893970  0.395422564 -0.129559605  0.4120873113 #> 190  0.274307494 -0.390964303 -0.184571875 -0.456201762 -1.0596368589 #> 191 -0.025937370  0.125309240  1.119316530  0.153131730 -0.0076625486 #> 192  0.052202529  0.247570042 -0.199470726  0.073333958  0.2576433760 #> 193 -0.049177219 -0.325748825  0.170106967  0.107937480 -0.1781844205 #> 194 -0.162935378 -0.102737721 -0.048982782 -0.348903498 -0.1666703166 #> 195 -0.093820273  0.306169223  0.184308722  0.015867667 -0.0556587112 #> 196  0.368234585  0.161669771 -0.163635633 -0.295189579 -0.7724092962 #> 197 -0.598250097 -0.513048863  0.546734094  0.014483406  0.1501431740 #> 198 -0.035049024  0.302736068 -0.291471119 -0.103445984 -0.4206267164 #> 199 -0.098824984  0.188991637 -0.138599798 -0.186585480 -0.2195880683 #> 200  0.447184009 -0.152835442  0.257444818 -0.087471129  0.0552519221 #>            pc110        pc111         pc112        pc113         pc114 #> 1   -0.321519476 -0.111340667  0.0697127454 -0.315829904  0.0875216557 #> 2    0.270169466  0.427345822 -0.7780070603 -0.050629381  0.3263771819 #> 3   -0.132293694  0.489017158 -0.0454966414  0.001479244  0.3347950749 #> 4   -0.420473737  0.024653155 -0.0696480280  0.160485843 -0.4175243433 #> 5    0.127847804 -0.376123591  0.1086159610 -0.168270980  0.3287481856 #> 6    0.253254134 -0.230382714 -0.5235107220 -0.222427914 -0.2033288730 #> 7   -0.278992499  0.096528587  0.0390061052 -0.042637642  0.0943935144 #> 8    0.070396722 -0.462294248  0.1519651964  0.338825847 -0.1232093062 #> 9    0.386239663  0.011041151  0.3232583081  0.520242521 -0.3138900919 #> 10   0.634790850  0.247138530 -0.0488291421  0.147846919 -0.4363925221 #> 11   0.428601254  0.237156278 -0.0833041771  0.127695394  0.1471628094 #> 12   0.029145443 -0.135466411  0.1708043444 -0.082443967  0.3301642105 #> 13  -0.097180218 -0.010521352 -0.0741537090 -0.096572552  0.1092872953 #> 14  -0.381397537 -0.301179071  0.8394848578 -0.327749172 -0.3025601430 #> 15   0.471695141 -0.009797783 -0.7420531513 -0.049670228  0.1768329250 #> 16  -0.323837477 -0.411965430 -0.0760165214  0.155017884 -0.3376833463 #> 17   0.182152570 -0.101322315 -0.0234222727  0.244699644  0.0856344783 #> 18  -0.142180007  0.046463350  0.3855065964  0.271125282  0.2022169639 #> 19   0.459944822 -0.605829109  0.3505110520  0.351340839 -0.0960807020 #> 20  -0.458825004 -0.407001213 -0.3612865759 -0.121338334  0.3499170024 #> 21  -0.327359170 -0.011669320 -0.2351738670 -0.220588226  0.1712016501 #> 22  -0.368893137  0.646268832  0.0404661705  0.027589949  0.0876728859 #> 23  -0.110663106 -0.107686688 -0.0443439483 -0.205115310 -0.1148291882 #> 24  -0.248365730 -0.858903748 -0.3830086972  0.712136907  0.0891369679 #> 25   0.133274455 -0.126184226  0.2191836326 -0.360270610 -0.0857292911 #> 26   0.469675210 -0.191227350 -0.2537399162 -0.157823366  0.0493086104 #> 27   0.211846662  0.256690510 -0.2420035378 -0.635504246  0.1994134672 #> 28  -0.416166337 -0.193049424 -0.1936297843 -0.353962552  0.0839675899 #> 29  -0.535627167  0.171802623  0.4036188090  0.054338197  0.2270464647 #> 30   0.086194344  0.051621583 -0.2585825868  0.170893676 -0.2972627825 #> 31  -0.346492281  0.041756390  0.3527856393 -0.479701015  0.1588914097 #> 32   0.488959514 -0.017059777  0.4126840309  0.287861286 -0.2396730050 #> 33   0.406315690  0.509195365 -0.1857116123 -0.115368728  0.4178850731 #> 34  -0.282600860  0.186146944 -0.0631556880 -0.384326009 -0.0013463963 #> 35   0.421599130 -0.111268777 -0.3997692373  0.339893910 -0.1683690112 #> 36  -0.231981107 -0.359595926 -0.0291467141  0.207689151 -0.0392373289 #> 37  -0.045621529  0.229662247  0.2589799280  0.217877018  0.0003457698 #> 38   0.062240468  0.063106749  0.0148434699  0.095809161  0.3036426156 #> 39  -0.270345168  0.215249415 -0.0564282796  0.039136277 -0.3204265353 #> 40   0.124560117 -0.143904870 -0.3377247791  0.151511338  0.0542984165 #> 41  -0.351272708 -0.156875864 -0.1124190841 -0.196815174 -0.0147249099 #> 42  -0.568110354 -0.109685489  0.2806618051 -0.517651561  0.4914100689 #> 43   0.215156741  0.144334835  0.4189549443  0.458586775 -0.0168935661 #> 44  -0.037141677  0.223014997  0.2010817374 -0.065350095 -0.0237581745 #> 45  -0.244184532 -0.112569624 -0.1278677661 -0.043004651 -0.0651441771 #> 46   0.144843818 -0.148289317  0.2340418401  0.217665464  0.3169952200 #> 47   0.111683330 -0.192408147 -0.1192208015  0.348229063 -0.1907963968 #> 48  -0.450642325  0.092914080 -0.0064935104 -0.251869454  0.1928275680 #> 49  -0.033177894 -0.293487646  0.2555809171  0.203313486 -0.8210156686 #> 50  -0.034197234 -0.196451736 -0.1285911736  0.037847213 -0.4286265224 #> 51   0.581881409  0.216739328  0.0378298943  0.059260552  0.0727907691 #> 52   0.390861794 -0.193265580  0.3000434911 -0.196566385 -0.0983960955 #> 53  -0.291758788 -0.119641169 -0.6933732852 -0.154831402 -0.2562981362 #> 54   0.026612043  0.090491153  0.7406464896  0.107536174  0.2468024618 #> 55  -0.035555189 -0.203673865  0.3439804824 -0.033813110 -0.2714783580 #> 56   0.031386921  0.212826073  0.3922419973 -0.236501878  0.4991177088 #> 57  -0.241761233  0.659623893 -0.1817171061 -0.108983106  0.3505202515 #> 58   0.060291723 -0.073641421 -0.3842604512 -0.168333073  0.2228830894 #> 59  -0.074011257 -0.271639866 -0.1524515187  0.144907793 -0.0008689855 #> 60  -0.507434145  0.113924397  0.0156691492 -0.173782041 -0.4702521466 #> 61   0.194598710  0.344735714 -0.2438414057  0.309038219 -0.2987068159 #> 62  -0.239921059 -0.385768727  0.5771816205 -0.276184581  0.6265624744 #> 63  -0.461105066  0.036929090 -0.2909016347 -0.328066328  0.1779884298 #> 64  -0.258188390  0.442453129 -0.1336371690  0.083732396  0.2475030218 #> 65   0.726168647 -0.390112325  0.1675606459  0.408581874  0.2999894259 #> 66   0.255144108  0.089830819 -0.3884271685 -0.059376019  0.0573262724 #> 67   0.193575959 -0.621461605 -0.1029865038 -0.058827381 -0.1788584535 #> 68  -0.304141380 -0.290954749 -0.5249431017 -0.121225203 -0.1145109733 #> 69  -0.309410163 -0.183844095  0.2374741543 -0.242965584 -0.0918846640 #> 70  -0.076260286  0.589234015  0.4691332086  0.030013787  0.1605344087 #> 71   0.114134688  0.240221465  0.3287068598 -0.388113271  0.4290500160 #> 72   0.059285340  0.116020356 -0.1984448293  0.085261313 -0.2794569509 #> 73   0.023792667  0.234261691 -0.0502560448 -0.117512610  0.2183261045 #> 74  -0.230899413 -0.039604572 -0.1535190718 -0.064163943 -0.1897023710 #> 75   0.238226787  0.510946977 -0.0197311616  0.382074066 -0.0739916109 #> 76  -0.227295753 -0.272842882 -0.0173667456  0.331834507 -0.6276676608 #> 77  -0.502679414 -0.148765693 -0.1266147239  0.188061663 -0.0366865596 #> 78   0.071255917  0.737819871  0.9206998662  0.181824549 -0.1289314975 #> 79   0.169353140  0.142442599 -0.0461574029  0.216641797 -0.3652025285 #> 80  -0.054913614  0.020469711 -0.2449813132  0.028444498 -0.0802484686 #> 81  -0.075839314 -0.337259467 -0.1900525220  0.136081515 -0.1353225628 #> 82   0.139820772  0.038940426 -0.1930467360  0.047976150 -0.0207533155 #> 83   0.183612087  0.058972189  0.0962961118  0.208929783 -0.2089274041 #> 84   0.144982197 -0.318770563  0.1048722824 -0.166399652 -0.2988565066 #> 85   0.590069331  0.113223881 -0.1539228726 -0.077640299  0.0682367053 #> 86  -0.082538624 -0.235676112  0.3107639906 -0.305891531  0.3837362330 #> 87   0.427873359  0.195567491  0.3734404089 -0.176540660 -0.2020946179 #> 88  -0.740846461  0.645313183  0.5799080612  0.264773773 -0.2185052479 #> 89  -0.216132061 -0.101635522  0.5402612800 -0.148016586 -0.2454578939 #> 90   0.108876446 -0.099969315  0.2137823049  0.055908155 -0.1142578654 #> 91   0.599498424  0.248140083 -0.5941301793  0.085254135  0.0215924533 #> 92   0.347604169 -0.032794169  0.0440871990  0.172549741  0.6243398608 #> 93  -0.044556115 -0.447297238  0.5024061678 -0.108666703  0.3204575200 #> 94   0.660797572  0.005261631  0.0723958007 -0.101290715  0.0977045728 #> 95   0.033896936  0.577290221 -0.6378051855 -0.305135867  0.2711062199 #> 96   0.301034905 -0.007233624 -0.2463895429  0.308343460 -0.4819392786 #> 97  -0.094748247  0.053441586  0.0196331918 -0.120595872 -0.0270251202 #> 98  -0.312081122 -0.140074871  0.0001150918  0.356914448 -0.0123040485 #> 99   0.200698261 -0.103287508 -0.2843346692  0.045628356  0.1052974501 #> 100 -0.318288797  0.421874289 -0.6086284947 -0.367286656 -0.4561874433 #> 101 -0.129048051 -0.198669795 -0.0720325867 -0.826570684  0.0272513064 #> 102 -0.600529894  0.433278534  0.2355018454  0.497976458 -0.2336931339 #> 103 -0.186469087 -0.195189205 -0.1148083709  0.237170987 -0.3076179166 #> 104  0.231003917 -0.227300514  0.5688899110 -0.401434820  0.1369285386 #> 105  0.155996931  0.031275945 -0.0280160476  0.133400948 -0.0867666781 #> 106 -0.133078860 -0.253354446 -0.1964616668 -0.332526983  0.1772930628 #> 107 -0.319962466  0.135636999  0.2614964183 -0.022590393  0.4375999216 #> 108 -0.650986925 -0.200944666 -0.0465806280  0.199267008  0.9868823322 #> 109  0.319428808 -0.282348604 -0.0186935231 -0.039291814 -0.1071850162 #> 110 -0.053235637 -0.603633004  0.0277456831  0.027047289 -0.3027336697 #> 111 -0.394062476 -0.135114747 -0.6196143173 -0.261780874  0.0718595169 #> 112  0.144424059 -0.031258722  0.2913093795  0.179145443  0.0788828938 #> 113  0.084932267  0.233104436 -0.3747967626 -0.461858307 -0.2531273503 #> 114 -0.140631827  0.610956614 -0.2823483377  0.483773176 -0.0201366790 #> 115  0.083502991 -0.302597298 -0.0867367131 -0.493765110 -0.3480691639 #> 116 -0.184693061  0.036260145 -0.1603421927 -0.348520693  0.2052555406 #> 117 -0.041481459  0.148597875  0.2169132395  0.104710335  0.0651512555 #> 118 -0.276025608 -0.366204463 -0.1148651858 -0.009661162 -0.6644145342 #> 119 -0.506070659  0.000598506 -0.6917009545  0.252549077 -0.0324765112 #> 120 -0.105089557 -0.147547024  0.2417413068  0.447676788 -0.2202452297 #> 121  0.168416897 -0.249563566 -0.0038880768 -0.514622718 -0.0535136846 #> 122  0.116415734  0.188464124 -0.0004245159 -0.559348975 -0.0436816543 #> 123 -0.320756510 -0.351803528 -0.2120415312 -0.125956932  0.5255455988 #> 124 -0.049682676 -0.141119098  0.1557933801  0.834480896  0.2913034990 #> 125 -0.290697054  0.741869727  0.3741524888 -0.221386371 -0.2305072521 #> 126 -0.419252740  0.271743892  0.3191207317  0.223305780 -0.2029010242 #> 127 -0.444858859  0.027687935  0.0340452249  0.422950136  0.0939780164 #> 128 -0.040795697  0.153720139 -0.0013276175 -0.242552214 -0.3946708624 #> 129  0.071113444  0.586153241  0.3861972220  0.423960279  0.0215132508 #> 130  0.622206279  0.059859360  0.2968597759  0.051499145 -0.1139229060 #> 131 -0.205251618 -0.304783130 -0.3189145722  0.170890421  0.2675018557 #> 132  0.566074391 -0.035386117  0.0255038086  0.062256984 -0.5589714705 #> 133 -0.017750656  0.323917308 -0.5972109264 -0.223903346 -0.3405186422 #> 134  0.102455433  0.869817257 -0.4414220592  0.216889049  0.3136275294 #> 135  0.195316609  0.426703685  0.0533651928  0.013567979  0.2462462961 #> 136  0.026208861  0.139324534  0.4305484400 -0.624865336 -0.0305913730 #> 137  0.260227586 -0.198881737 -0.1229558077 -0.314625262  0.0356516249 #> 138  0.497367185  0.319853112  0.4613035057 -0.030914217  0.3205855367 #> 139  0.225156004  0.203204406 -0.3956682646 -0.313739023  0.1235292010 #> 140  0.400138509  0.681965119 -0.1446876523  0.020163246 -0.3701755341 #> 141  0.458807289  0.450082117  0.0480848621 -0.137229912  0.0012809761 #> 142  0.322672950  0.024310722 -0.2510252444  0.262032658  0.4569898358 #> 143  0.516705049 -0.837047399  0.0671155243 -0.169278835 -0.4067313808 #> 144  0.126605483 -0.268460736 -0.1889041930  0.639955910 -0.1115470452 #> 145  0.455945040  0.207353691 -0.1372529598  0.323836344 -0.1074229682 #> 146 -0.633882138  0.033856797 -0.5788551098  0.222647970  0.4993663473 #> 147 -0.142930250  0.325370173  0.1117828624  0.379896665  0.1961114837 #> 148  0.475992735  0.316958142  0.0827475372  0.497645142  0.7265037007 #> 149 -0.256785913  0.358850778  0.2826568432  0.191371014 -0.3053365893 #> 150 -0.267809834 -0.321894741 -0.3294270974 -0.018360335  0.1608849243 #> 151 -0.148513426 -0.313918102  0.0107689561 -0.231958093 -0.0275761821 #> 152 -0.321185481 -0.038656281  0.2190837736  0.100546055 -0.2387534120 #> 153 -0.093294597 -0.022651909  0.2313647687 -0.612408326  0.1259091171 #> 154 -0.535909598 -0.506604907 -0.2829932585  0.374561845 -0.0393205515 #> 155  0.562370529  0.271086154  0.2283169778  0.110557337 -0.0791954833 #> 156 -0.074504932  0.201827259  0.0061862955  0.668078634 -0.0092709701 #> 157  0.326406074 -0.560866262  0.1369435800 -0.046184535 -0.1869015804 #> 158  0.228002344 -0.137853656  0.1580895786 -1.003400259  0.0240048305 #> 159  0.093067585  0.090703122 -0.0327779249  0.428047293 -0.0948691872 #> 160 -0.009024683  0.256357015 -0.1392960680 -0.140762485  0.1993973996 #> 161 -0.045030136  0.575240488  0.2159440062 -0.040707424 -0.3282055995 #> 162  0.339264228 -0.079580843  0.0990376354  0.077071942  0.1216337551 #> 163 -0.120840019 -0.277395394  0.2464394358 -0.402073010  0.0945168781 #> 164  0.073902138  0.138882562 -0.4474282000 -0.496918532 -0.1814999199 #> 165 -0.206475180 -0.512097886  0.3856013903  0.233529202 -0.1385222881 #> 166  0.165556323 -0.094524890  0.4013037165 -0.132480465  0.1591481880 #> 167 -0.031181967  0.094048170 -0.0172199053 -0.222470913 -0.0599996571 #> 168  0.171866741 -0.283932458 -0.0187900708 -0.165811120  0.0489649271 #> 169 -0.326564232 -0.212058746  0.2351331122  0.466084003  0.2668136565 #> 170  0.010985305  0.222389663  0.1581351945  0.371277713  0.1325712931 #> 171  0.338828310 -0.156049880  0.2635430842 -0.126758613  0.1292155531 #> 172  0.334109887  0.226244174 -0.3074393706 -0.535364453 -0.1183652383 #> 173  0.239860270  0.047867299 -0.2258194631 -0.323174575 -0.1019616020 #> 174  0.219646658  0.365203582 -0.4195677036 -0.312295424 -0.3852252339 #> 175 -0.289729937 -0.064993021  0.1268243792  0.105220127 -0.1120934624 #> 176  0.091948134 -0.190954652  0.5343693383 -0.210840605 -0.3566916088 #> 177 -0.554030109  0.572710472 -0.2157834205  0.497421712 -0.3112452527 #> 178 -0.003042621 -0.091349147  0.0969579450 -0.467106428 -0.2073413896 #> 179  0.180613528 -0.271611618 -0.1331398183 -0.162868828  0.6819148958 #> 180  0.507251730 -0.568087659  0.0170264828 -0.181785638  0.4375330125 #> 181 -0.040405302  0.065687638 -0.3534204871  0.115549193  0.0126638364 #> 182 -0.464794027  0.330493305 -0.2839724427  0.142136249  0.5692540815 #> 183 -0.111322525 -0.118467340  0.3453711151 -0.099324126  0.1346575456 #> 184  0.054591358 -0.315563699  0.0870353033  0.242513507  0.5291108167 #> 185  0.122636695 -0.391963785 -0.0596487072  0.214441725  0.1476264205 #> 186 -0.452385929 -0.537136247  0.2882508240  0.367465176  0.0720721983 #> 187  0.223191373 -0.506669687 -0.4599957540  0.282319550  0.1391281537 #> 188  0.076502231  0.079769873  0.2614357983  0.257279272  0.2219993431 #> 189 -0.233629749 -0.147284394 -0.0082327848  0.009571340 -1.0205723146 #> 190  0.173250812  0.127967134 -0.0791271068 -0.063382522 -0.0030813538 #> 191  0.225110266 -0.408525299 -0.0023698627  0.374924355  0.1464556512 #> 192 -0.683774253  0.283279500  0.2137273842 -0.618531084 -0.0787890301 #> 193  0.380299835  0.066116897  0.4247623125 -0.403287346  0.1169144786 #> 194  0.003600889  0.683062264  0.0008556725  0.439561115 -0.0770886953 #> 195 -0.210767892 -0.202689564 -0.1325063772  0.402519212  0.3015616697 #> 196  0.218360557 -0.059304362  0.4526814078 -0.144610396 -0.1776714709 #> 197  0.225115863 -0.255653313 -0.7640308677  0.199513979 -0.1234509175 #> 198 -0.634532950 -0.307397355 -0.1062645217  0.331758556  0.1626761108 #> 199  0.688642793 -0.101406667  0.0213600209 -0.103796894  0.0799081880 #> 200 -0.405351656  0.293292591  0.1251843410 -0.446009278 -1.0944100376 #>            pc115        pc116        pc117         pc118         pc119 #> 1    0.017442872 -0.149423580  0.035134991  0.1232310136 -0.3326979977 #> 2    0.045188781 -0.028790217 -0.312933099  0.2219949560  0.3382170941 #> 3    0.141611341  0.064109570  0.213564731  0.2124302926  0.1811560030 #> 4   -0.013093678 -0.314011958 -0.392698154  0.2881197312  0.1054932257 #> 5   -0.061338655  0.534318005 -0.116656017 -0.0447808301 -0.2603801264 #> 6    0.133325689  0.182220059 -0.223148134 -0.2022691430  0.0510680527 #> 7    0.212739388  0.439867977  0.006610783 -0.3012753884  0.1804680495 #> 8    0.240370059  0.007988079 -0.133880660  0.0767975053  0.4247928195 #> 9   -0.350067691 -0.026439068 -0.245181623  0.0702323415  0.4248816944 #> 10  -0.510724044  0.014781020  0.279836069  0.0464829279 -0.0871970008 #> 11   0.013730308  0.244304477 -0.230712020  0.0367451563  0.1767572571 #> 12   0.051623122  0.015742484  0.220906806 -0.4190328764  0.1616463773 #> 13   0.032317523  0.023992175 -0.070822351  0.0178805876  0.0289189765 #> 14  -0.003570677 -0.043960550  0.041388778 -0.3692983005 -0.1378106156 #> 15   0.218207513 -0.097029572  0.211176083 -0.2647665704  0.0230254728 #> 16   0.082669736  0.099434424 -0.014111544 -0.1068199544  0.4316543527 #> 17   0.273904361  0.114067358  0.134341674 -0.1756691439  0.2525368059 #> 18  -0.043388909 -0.538932632  0.221840699  0.4084496706 -0.2462956425 #> 19   0.274257971  0.231749054  0.082405842  0.2650090575  0.2292792079 #> 20   0.066750484  0.349370305 -0.659643513  0.0410217316  0.0696475006 #> 21   0.380527832 -0.195763787  0.125006074  0.1936791422 -0.2515558373 #> 22   0.024428614  0.172479821 -0.040010104 -0.0610146618  0.2508956344 #> 23  -0.015785158 -0.034459775 -0.601277961  0.3301812531  0.0006554776 #> 24   0.240494127 -0.020163295  0.249338830  0.2468533512  0.1498551595 #> 25   0.197271830  0.038884757 -0.552701382  0.1388677164 -0.1868540712 #> 26  -0.242145193 -0.428979851 -0.377078726  0.0653225132 -0.2650719986 #> 27   0.105465140 -0.073820861 -0.528015621 -0.2933364945  0.0419116071 #> 28   0.348691467  0.018924337  0.259821995 -0.0314784286 -0.3094909641 #> 29   0.146640372 -0.034217006  0.065010035 -0.0007520890  0.0816789545 #> 30   0.865921687 -0.268969098 -0.066008487  0.5350959868 -0.1048629295 #> 31   0.450980101  0.237548461 -0.125304867 -0.0527783335 -0.1263619630 #> 32   0.090439399 -0.405964145  0.715476684 -0.2709153667 -0.0189623432 #> 33   0.142125737 -0.011008493  0.061152288  0.0018077480  0.4229990010 #> 34  -0.022735124 -0.008114271 -0.427228931 -0.0763030425  0.0486197145 #> 35  -0.133480695 -0.011325309  0.019756839  0.1146649533  0.0099914594 #> 36   0.257962556 -0.454935817  0.364518283 -0.0454229298  0.1774594709 #> 37   0.106463990 -0.020467193 -0.015448814  0.2565904215 -0.1348004887 #> 38  -0.033348618  0.057767988  0.285765044 -0.0364575003  0.0738839731 #> 39  -0.268312794 -0.062625062  0.121109111  0.2584629205 -0.0225212132 #> 40   0.194042003  0.054949532  0.104910850 -0.0238206051 -0.1313137335 #> 41  -0.040213782 -0.151415572  0.048971147 -0.0639660566 -0.3367054951 #> 42   0.326608447 -0.118042323 -0.226066134 -0.2507771806  0.1931365600 #> 43  -0.150781211  0.403142890  0.324605901 -0.2148536666 -0.2030041776 #> 44   0.128231508 -0.334636430  0.184450937 -0.1956092001  0.0055233558 #> 45  -0.071667782 -0.308008096 -0.012046819  0.3725000703 -0.2545766320 #> 46  -0.159894584 -0.186566704  0.210636954  0.1182982883 -0.0354014190 #> 47  -0.340797105  0.085141994  0.086160103 -0.0194235939 -0.1309577699 #> 48   0.324315447  0.138114433  0.255342883 -0.1290649379  0.0054755718 #> 49  -0.136778886 -0.058029864  0.125572510  0.1998679036 -0.0877164899 #> 50  -0.075624903  0.075349737  0.146556970 -0.0277828937 -0.2944587798 #> 51  -0.276177876  0.071428781 -0.065807749 -0.1447515706 -0.0408004980 #> 52  -0.097030668  0.110820309 -0.126591307 -0.1446019715 -0.1792472325 #> 53   0.515489581  0.057521378 -0.012990991  0.2670550416  0.2098899736 #> 54   0.095380895  0.123229507 -0.060752246 -0.0079879556  0.0069197609 #> 55  -0.159975972 -0.043474731 -0.175100497  0.1512066055 -0.0377236345 #> 56   0.263047797 -0.667739428  0.071342555  0.2389673587  0.1345294662 #> 57  -0.011070848  0.375544341  0.103900580  0.3082345451 -0.0262219404 #> 58   0.376782535 -0.242825521  0.383807529 -0.0817000058  0.1110243658 #> 59   0.419126381 -0.062547411  0.118090046 -0.3431647631  0.5048543634 #> 60  -0.161318017 -0.350778554 -0.111778880 -0.0317007950 -0.3920365428 #> 61  -0.236990437 -0.406298701  0.064353689 -0.0210121657  0.2537319789 #> 62  -0.135810700 -0.085289399  0.055965913 -0.5342639563 -0.4777038686 #> 63   0.138091940  0.127624152 -0.031635510  0.0675940540  0.0238583072 #> 64   0.182800931 -0.008863666  0.182376331  0.4011266435 -0.0927727874 #> 65   0.175565309  0.147744450 -0.030112159 -0.2824279550  0.4092878550 #> 66  -0.109612904  0.310472550 -0.212705228 -0.1941631246  0.4215341263 #> 67  -0.271005414  0.073853294 -0.233608071 -0.1863707721 -0.0395756266 #> 68  -0.164445125 -0.060598443 -0.249635473  0.1330490805 -0.1890345372 #> 69  -0.168066904  0.009804801 -0.310877029 -0.0402336014  0.3737435784 #> 70  -0.173286048 -0.141507348 -0.067388906 -0.0259598645  0.0345825641 #> 71   0.136802132 -0.258867936 -0.092616087  0.1570501339 -0.2493492775 #> 72  -0.361270549  0.115146900 -0.173894771  0.0316594306 -0.2615760964 #> 73   0.066164916  0.163206820 -0.036273603  0.1882598603  0.0689579314 #> 74  -0.491483097 -0.059827675  0.215575353 -0.0323806310 -0.0578915478 #> 75  -0.069028940 -0.052147868 -0.021430522  0.4101213204  0.0469351187 #> 76  -0.463336066 -0.076964842  0.174266657  0.0906110074 -0.1433971528 #> 77  -0.169766699  0.038502664  0.238730160 -0.0191312286  0.0064944008 #> 78  -0.083862748  0.182724047 -0.143407955  0.0069034865 -0.3467881554 #> 79   0.021135005  0.219313574  0.341153151 -0.2811013846  0.0348029237 #> 80   0.064725906 -0.302856974  0.095163368 -0.0425747877  0.1383022357 #> 81  -0.083730338  0.027841303 -0.121223805  0.0746272252  0.0541124571 #> 82  -0.068642544 -0.060053819 -0.015620605  0.0107345758 -0.0492090415 #> 83  -0.709294035  0.239012865  0.184955464  0.2130137603 -0.0437428356 #> 84  -0.285902336  0.718283233 -0.106167149 -0.3565912202 -0.0907097704 #> 85   0.059896543 -0.053464577  0.221250573  0.0960505923  0.1715569491 #> 86  -0.139863582  0.114706542  0.207617002 -0.2788415691 -0.2195631833 #> 87  -0.003410706 -0.055919181 -0.226312088 -0.0403209818 -0.3369661860 #> 88  -0.754425103  0.321553504  0.162057117 -0.0013026451  0.0695982006 #> 89  -0.159330289  0.564976436 -0.076375346 -0.6532620087  0.2284917861 #> 90  -0.107863212  0.212617589  0.467194600 -0.1746137467  0.1796965148 #> 91   0.070651132 -0.593200959 -0.018525256  0.1313535483 -0.1229345158 #> 92  -0.008791581  0.475316445  0.039730500 -0.1925382710  0.1638705890 #> 93  -0.133077402  0.225051719 -0.242537956  0.1184778306  0.1912169847 #> 94  -0.388079967 -0.366534195 -0.555757697 -0.1832581268 -0.1120252544 #> 95  -0.185575237  0.029265955 -0.079829034 -0.0328604802 -0.4413472429 #> 96   0.035212366 -0.143137980 -0.103557364  0.0768252591  0.1878532693 #> 97   0.015640132 -0.031529935 -0.059492668 -0.0520527905 -0.0225308571 #> 98   0.248738144 -0.018387812  0.561758424  0.1090076635 -0.0373936624 #> 99   0.236524160  0.436464789 -0.240273426  0.1335135600 -0.0794612834 #> 100 -0.065271810 -0.596782157  0.171753367  0.0482953221 -0.5954684543 #> 101  0.127865816 -0.179941616  0.719115360  0.2006552749  0.2405656216 #> 102  0.303659683 -0.177195571  0.500772107 -0.0300433470 -0.3237843388 #> 103  0.480046486  0.286985754  0.031501866  0.3574837276 -0.1572555634 #> 104 -0.035740581 -0.450444357  0.110938733 -0.5929649336 -0.1881296723 #> 105 -0.315008301  0.135776630  0.405282250  0.3717831337 -0.1452251178 #> 106  0.504377341  0.105035811  0.301754523  0.3295711008 -0.5641559936 #> 107  0.382522709  0.035824215  0.270786341  0.2240632672 -0.1600163427 #> 108 -0.738538557 -0.540140847  0.227878062 -0.1587158036  0.7283013184 #> 109  0.143739671 -0.108604523  0.025446050 -0.2692155490 -0.0006840531 #> 110 -0.574438812 -0.065567293 -0.063763255 -0.3276494026  0.0603067790 #> 111  0.160616269 -0.436996514 -0.417186967 -0.2849001284 -0.2711459065 #> 112 -0.409474184  0.681489853 -0.086133684  0.2716059287  0.1193855255 #> 113 -0.220687230  0.397725771  0.270527118  0.3966438120 -0.0273971975 #> 114  0.306219501  0.260743408 -0.037279789 -0.2453629352 -0.0090536359 #> 115  0.549007602  0.141597363  0.182121272 -0.5004775282 -0.1423320282 #> 116  0.230728264  0.831205579 -0.272422572 -0.1625234809 -0.0878196505 #> 117 -0.319839966 -0.222431697 -0.226419128 -0.4068089225 -0.1360478129 #> 118  0.267377057  0.161737856 -0.204668132 -0.0561155179 -0.0577463740 #> 119 -0.627130450 -0.389325258  0.010827783 -0.2459162344 -0.0248957455 #> 120  0.338870826 -0.160420050 -0.764039401  0.2672756118  0.1245214860 #> 121  0.008641238  0.357031079  0.207601961  0.8163319578  0.1619205818 #> 122  0.262955138 -0.157014359 -0.121011347 -0.2178042527  0.3387653921 #> 123 -0.308206061  0.025215061  0.540934954  0.1185163207 -0.0938363692 #> 124 -0.139339820 -0.225061224  0.541537210  0.0396999708 -0.3700589181 #> 125 -0.321730519 -0.318986712  0.116138675 -0.0435140584 -0.0530797123 #> 126 -0.082206695 -0.082372190  0.200808238  0.2270574496  0.3854243405 #> 127  0.334154262  0.037731574 -0.181059134  0.3554277506  0.1752768230 #> 128 -0.216096916 -0.695825392 -0.168790901  0.0848338804 -0.1129727075 #> 129  0.252263470 -0.460693482 -0.348410498 -0.0001876739 -0.2465608918 #> 130  0.491363215  0.058675832  0.256964598 -0.2370113043  0.2369312940 #> 131 -0.146547171  0.089958927  0.181110369 -0.5001074299  0.2720720553 #> 132  0.274382115  0.011777225 -0.242917423 -0.2520531282  0.1396657553 #> 133 -0.283746534  0.046845024 -0.132876597 -0.0318429590  0.2647290720 #> 134  0.178560233  0.117873553 -0.423338284 -0.0870507179 -0.2439351464 #> 135  0.214674145 -0.325373350  0.422055260 -0.0777409392 -0.2087407304 #> 136  0.057007730 -0.621925947  0.043850374  0.3334396525  0.8458408358 #> 137  0.585972685  0.032665842 -0.179794496  0.2317219527  0.1016032007 #> 138  0.479016940  0.137364810  0.355695497 -0.0102519111 -0.0503118310 #> 139 -0.614921375  0.162400525 -0.208960918 -0.1054869387 -0.3374035978 #> 140  0.426550232  0.511412484  0.407322802 -0.0802116973 -0.1080618918 #> 141  0.454871067  0.134163478 -0.396607542  0.0870544546  0.2334812609 #> 142 -0.013717162 -0.337333086 -0.003802199  0.2434553574 -0.3102476882 #> 143 -0.239917917  0.057369435  0.132338359 -0.1126317711 -0.3682875052 #> 144 -0.344652354 -0.340236196  0.194908004  0.5540408744 -0.3800512296 #> 145  0.577020105  0.702139302  0.219308205 -0.1986108206 -0.6784830830 #> 146  0.145528055  0.135884072 -0.210123971 -0.2225584220  0.2680487667 #> 147 -0.131093221  0.386645134  0.089318087  0.0671740124  0.3298585254 #> 148  0.075160038 -0.229981728 -0.591944560  0.2143671223  0.0224214646 #> 149 -0.467830282  0.108895187 -0.406793588 -0.5184542140 -0.0610216419 #> 150  0.254529599 -0.161954909  0.360901385 -0.5409541999  0.3276994292 #> 151 -0.225181438 -0.281693278 -0.130833773 -0.0800003479 -0.1884335089 #> 152 -0.085072572 -0.251653475 -0.489279810 -0.4086258132 -0.2725972086 #> 153 -0.283831343  0.236484216  0.282114890  0.4558519536 -0.1010001757 #> 154 -0.084094791  0.098398562 -0.139129648 -0.0363125491 -0.3752196457 #> 155  0.012750993  0.018015838  0.243830346 -0.2242007231 -0.3213764288 #> 156 -0.038431667 -0.399024340 -0.168622346 -0.2497194902  0.5112366245 #> 157  0.089347389  0.408749432 -0.422441690  0.2200135032  0.0159653762 #> 158 -0.708519390 -0.085255689 -0.071837647 -0.1149272804  0.2602905177 #> 159  0.003044902 -0.214300971 -0.090067004 -0.2913225591  0.1436579571 #> 160 -0.339123390 -0.013963304  0.274047056 -0.2086020438  0.0190836218 #> 161 -0.308201423  0.330664635  0.023462868  0.2990069324  0.1537843131 #> 162  0.041013498 -0.437305459 -0.234533993 -0.0958586417 -0.1260503619 #> 163 -0.232783449 -0.012474466  0.483017013  0.1240091822  0.5445786020 #> 164  0.006815078 -0.159458248  0.375150804 -0.0134790838 -0.1516803397 #> 165  0.425784613  0.088691061 -0.557056100  0.3886467285  0.3921756140 #> 166 -0.147005048  0.182873842  0.009956119  0.9064221821  0.0633012187 #> 167 -0.092679755  0.210581603  0.278393057  0.1546506849  0.2553317953 #> 168  0.134071485 -0.457316661 -0.367943406 -0.3331246929 -0.2681507640 #> 169  0.184918031 -0.010392925 -0.424963189  0.2005604982  0.1445070583 #> 170  0.081210341 -0.595623326 -0.413972151  0.0150284759 -0.1200261179 #> 171 -0.004139883 -0.046949557 -0.110187556 -0.3085923699 -0.0293385313 #> 172 -0.028544337  0.221776177  0.490326685  0.0971584258  0.1985060442 #> 173 -0.604221355  0.614185589 -0.049861140  0.1724860917  0.2805515105 #> 174  0.205418022  0.270598215  0.165986189 -0.2755426851  0.3722300186 #> 175  0.428656077 -0.105996427 -0.273977736  0.2841688160  0.0317757174 #> 176 -0.357141181 -0.189457462  0.103927191  0.2131919061 -0.1040630511 #> 177  0.058722946  0.164934715 -0.395285410 -0.6257355425  0.3034091393 #> 178 -0.152445405  0.049010538 -0.040020020  0.5152629699  0.5049896608 #> 179 -0.439615379 -0.062753669  0.366311356  0.2234744145 -0.0098379444 #> 180  0.124715077 -0.535978854 -0.095438654 -0.1532015840 -0.0980615599 #> 181 -0.270272771 -0.405168693  0.042140543  0.0368568430 -0.0436302352 #> 182 -0.504766341  0.443601655 -0.463049750 -0.5846311005 -0.1515820422 #> 183  0.098201361  0.264160949  0.035437559 -0.2234275818 -0.0124841838 #> 184  0.102866125  0.564939396  0.488126414 -0.1058820500 -0.4062456164 #> 185 -0.372532997  0.309190460 -0.269059219  0.6900122269 -0.0453202045 #> 186  0.460428762 -0.122680983 -0.106190882  0.1666310198  0.6448529595 #> 187  0.071815584 -0.444414448  0.455418863 -0.4215526787 -0.0742337609 #> 188  0.232087471  0.050225717 -0.343042006  0.0630530578 -0.7313665380 #> 189  0.719719583  0.272606720 -0.050875493 -0.3501098883 -0.2822794301 #> 190 -0.204106654 -0.043051827 -0.077171257  0.3996211243  0.1666227345 #> 191 -0.164504294  0.263919295  0.075873219  0.4161270102 -0.2564608589 #> 192 -0.069198276  0.322933450 -0.216115945  0.2693684264 -0.1797548532 #> 193  0.206069077 -0.236216740 -0.371291050  0.4034780448 -0.5790704828 #> 194  0.249413145  0.271078778  0.353579998 -0.3545063197  0.2120626727 #> 195 -0.388565876  0.033768352  0.001769478  0.0503328677  0.2171373812 #> 196  0.154890178 -0.351209331  0.080730858 -0.7464554791 -0.0146224860 #> 197 -0.569155434  0.127681875 -0.149526160 -0.1101086689  0.0458575227 #> 198  0.099748382  0.567278933  0.090826769  0.0541057244 -0.8547686359 #> 199  0.001023429 -0.006457090 -0.139788660  0.0628732234  0.4427704977 #> 200  0.278606948 -0.352474514  0.412575422  0.1110028644  0.4918936003 #>            pc120         pc121         pc122         pc123         pc124 #> 1   -0.103280181  0.4951392190 -0.0262973327  0.0440347050  0.0984869640 #> 2    0.145303044 -0.0139437594  0.1090998529 -0.0313006723 -0.0105461802 #> 3    0.121803506  0.0389726054  0.0627039404  0.0787057231  0.2238539900 #> 4   -0.418218299  0.1959774713 -0.0553119477  0.3670379289  0.0152505820 #> 5   -0.196874065  0.1551007324  0.3094368026 -0.4133006902  0.1486609615 #> 6    0.050308163 -0.1610275204 -0.2798782450 -0.4453793143  0.2825113165 #> 7    0.052074349 -0.1630535792 -0.0006956669 -0.4896292438  0.2813003154 #> 8   -0.009084155  0.0447365745 -0.0421711927  0.1898165528 -0.0016963946 #> 9    0.477302130 -0.2506700311  0.2961730367  0.1767628555  0.0268799124 #> 10  -0.118481225 -0.4323506053 -0.3172612082  0.5072343571 -0.0466014530 #> 11  -0.159609872  0.3446510398  0.2804137044 -0.3043403942  0.2164798800 #> 12   0.291930632  0.0164344144 -0.0338299614  0.2702150620 -0.2740801968 #> 13   0.051577898  0.0862204634 -0.0160108401 -0.1176464229  0.0590447133 #> 14   0.062118256  0.1486600365  0.0126031705  0.2230144284  0.0418280256 #> 15   0.002043663 -0.1984168419 -0.1063697470  0.5191818319  0.2075333206 #> 16   0.113948692 -0.1527476699 -0.1639179838 -0.0214209907 -0.0396838274 #> 17   0.155203681  0.0262637457  0.3862606141  0.2101917129 -0.1421949492 #> 18  -0.212361570 -0.0215841463  0.2306892797 -0.0395910330  0.2738583678 #> 19  -0.104334838  0.0513344031  0.1139375184 -0.0937632779  0.1219040216 #> 20  -0.303847762 -0.2226853465  0.1843631277 -0.0695164450  0.3871007413 #> 21  -0.129814631  0.0108360489 -0.1224887209 -0.0314570512 -0.0119232546 #> 22   0.256840971  0.2073962359 -0.3212067278  0.1376935445  0.2501345012 #> 23   0.434429575  0.0373045022  0.0597933094 -0.1157537281  0.0189697015 #> 24  -0.175195688  0.1928943719  0.1121808831  0.2374879706 -0.1139565147 #> 25  -0.105054887 -0.2199173686  0.0430923575  0.0700285686  0.1298346006 #> 26  -0.042960120  0.0932790916  0.0137092053 -0.4002750773 -0.2611206485 #> 27   0.303721922  0.1025010385 -0.0451628239 -0.0039171045  0.0478509591 #> 28  -0.251614029 -0.0723483147  0.1209728172 -0.0393579397 -0.2100604146 #> 29  -0.089999804 -0.1412319575  0.6357941392  0.0097781165 -0.0811264017 #> 30  -0.516358417  0.1798026715  0.2097745415 -0.1949603823 -0.0398640253 #> 31  -0.221666878 -0.1798010153  0.0919852958 -0.0635393525  0.1399847105 #> 32  -0.216604801  0.4324934603  0.0801884199 -0.2005670227  0.0507673633 #> 33   0.619004266 -0.1050038528  0.0126104828  0.1764107151  0.1247482431 #> 34   0.353456941  0.0885987851  0.1184770833 -0.1437053264 -0.0466033945 #> 35  -0.082369076  0.1288766454  0.1142691435 -0.1165614436 -0.0305989539 #> 36   0.390715735  0.0310764868  0.0207567094  0.4283873085 -0.2010358196 #> 37  -0.137759833 -0.1824871947  0.0197262529  0.3992150400  0.1978917478 #> 38   0.137134018  0.0097234259  0.2538566781  0.1236541899 -0.1408085092 #> 39   0.051782781 -0.2031700478 -0.2663500550 -0.2782137576 -0.1295099002 #> 40  -0.185149316  0.0995151343  0.0665511588 -0.0960484908  0.0440107766 #> 41   0.028953586  0.3111539120 -0.2169471244  0.3011045021  0.0049811618 #> 42   0.484863507  0.0345594664  0.2176299842 -0.3152761656 -0.1662880347 #> 43  -0.004594447 -0.0304935411 -0.0363592829  0.0599176764  0.0112027084 #> 44   0.002025629 -0.0900168061 -0.1455191842  0.6409434282 -0.1130574914 #> 45  -0.144788433 -0.2397906963 -0.3011673299  0.3031403140 -0.0584736521 #> 46  -0.002133310  0.0001648910  0.2626735010  0.0787061383 -0.0117951133 #> 47  -0.373302732 -0.1094994336 -0.1138041818  0.1376805567  0.1719615670 #> 48   0.024529915 -0.2729635075  0.2316253892  0.0226587703 -0.0047630162 #> 49  -0.349217322  0.2147831368 -0.1665892079 -0.4788126346 -0.0483013497 #> 50   0.031097142 -0.1756182256  0.1385050887 -0.1057825487 -0.3229029290 #> 51  -0.029705924 -0.0447174950 -0.0873659564  0.1325185502  0.1513480823 #> 52   0.131814825 -0.0003422204 -0.2354548872 -0.3267754383  0.1703092818 #> 53   0.124648170 -0.3200017019 -0.2872003437 -0.1585715899  0.0202523782 #> 54  -0.345553969  0.2671040647  0.1858163047 -0.0159698571 -0.0129283385 #> 55   0.218382405 -0.1967017074 -0.3343140995 -0.0474812288 -0.0073611426 #> 56   0.389015410 -0.0302131087  0.2001976635  0.1189832397 -0.1247334006 #> 57   0.323082849 -0.2175204885 -0.1162021284 -0.0160405589  0.2852272855 #> 58  -0.098176452  0.0192508244 -0.2138797043  0.2944821895  0.0002431065 #> 59   0.059025267 -0.0381979203  0.0802800437 -0.3263838265 -0.1078792043 #> 60  -0.330648014 -0.0272607829 -0.1317191685 -0.0219579715 -0.0440034886 #> 61   0.138208396  0.0500292034 -0.1438932184 -0.3766696164 -0.1441333659 #> 62   0.135345438  0.6498244341  0.1194418627 -0.2231591848 -0.1146197954 #> 63  -0.117162513 -0.0609070092 -0.0786733359  0.3647821569  0.0052485452 #> 64   0.091361436 -0.3780825717  0.4529317097 -0.3780130756 -0.1717480533 #> 65   0.154834913  0.3082026033 -0.2543041483 -0.2894341787  0.0420080371 #> 66   0.042957333 -0.2986585819 -0.1513642412  0.4036422785  0.0176249560 #> 67   0.035855626  0.1584942492 -0.3857335442  0.1240811745  0.1912848258 #> 68  -0.097229720  0.1521180494 -0.1241085969 -0.0737048487 -0.1029970907 #> 69   0.422816031  0.0174860456 -0.3808403172  0.0404333797 -0.1515430243 #> 70   0.044377069 -0.0413517095  0.1028990658 -0.2327681998  0.0675906647 #> 71   0.063337597  0.0393322898 -0.0278653091  0.5084431863  0.1888306440 #> 72  -0.354868670  0.2862041006 -0.1179315939 -0.2011723619  0.0667283117 #> 73   0.099196797 -0.3086961402  0.2630637730  0.2575253032 -0.0593046019 #> 74   0.050138287 -0.2760930099 -0.2558343784  0.2527549431  0.0562644075 #> 75  -0.084517529 -0.0662441715  0.3934305930  0.0524339004 -0.2531554888 #> 76  -0.135256307 -0.1213830325 -0.2244253288  0.1066614564 -0.3099464721 #> 77  -0.087093820 -0.0914140051 -0.0127123446 -0.0923304197 -0.1055492826 #> 78  -0.545793617  0.3870260247 -0.0656331814 -0.1086438319  0.4213488810 #> 79   0.239827658 -0.1484655093 -0.3018262776 -0.3770227199  0.0028707706 #> 80   0.030559913  0.0053361972 -0.0204874710 -0.0285007720 -0.1033421552 #> 81  -0.012927675  0.3456155160 -0.0668684522 -0.2806620684 -0.0571863573 #> 82  -0.089610219  0.0515313518  0.0394011573 -0.0281012166  0.0164170704 #> 83  -0.064421652 -0.2733190690 -0.0689321731  0.1201349283 -0.2349996025 #> 84  -0.276956966 -0.2776142032 -0.4357696918  0.4084921191 -0.2812518791 #> 85   0.194291829  0.4208439461 -0.0067901255 -0.2103785897  0.0531407751 #> 86   0.019450979 -0.0849064149  0.0062127067 -0.1503943636 -0.2471098481 #> 87  -0.070012924  0.0250920020  0.2600769756 -0.1843072291 -0.1003164107 #> 88  -0.142890236 -0.3667067055 -0.3155084789 -0.3937926859 -0.2880073249 #> 89   0.071004608 -0.1863769431 -0.6087842127  0.0600418592  0.1572243626 #> 90   0.201438785 -0.2322231865 -0.1045654458  0.1357572693 -0.1013912117 #> 91  -0.318686145  0.1343900656  0.5368234107 -0.0324475851 -0.0687873832 #> 92   0.004896505  0.2143658347  0.1386112029 -0.2649989802  0.2618700945 #> 93   0.327358603 -0.0479013005  0.1943120970 -0.2475857109  0.1688129248 #> 94  -0.047275130 -0.0173718466  0.5099413284  0.3578014274 -0.2193742863 #> 95   0.061178433 -0.0855957260  0.3892265258  0.1384735410  0.0864292995 #> 96   0.041762775  0.6598395257 -0.5230645718  0.0002286462 -0.0834507493 #> 97   0.030946511 -0.0233824256  0.0133324504 -0.0301199068 -0.0518565923 #> 98  -0.171986606 -0.0998589030  0.0507126737  0.0210604653 -0.0324457554 #> 99  -0.223050774  0.1036182285  0.1388462184  0.1499180539  0.2046553774 #> 100 -0.241287202 -0.1026698118 -0.0417223702 -0.0241550702 -0.1187639709 #> 101  0.117537389 -0.0031066606 -0.0853522049 -0.0699068032  0.0161221538 #> 102  0.077759589  0.2768938515 -0.0437403544  0.1706528633  0.3158912109 #> 103  0.285512219  0.3351563491 -0.1343662131  0.3335876143 -0.0739703519 #> 104  0.248209200  0.0899392183 -0.0478653477 -0.3814640541  0.1192908296 #> 105 -0.096054049 -0.0120115874  0.1773468126  0.7696927838  0.1263053446 #> 106  0.530492759 -0.0664543874 -0.2152732990  0.1340780274 -0.2540068529 #> 107  0.412609720 -0.4519453704 -0.0518424002 -0.4536929375  0.0249065809 #> 108 -0.537057886 -0.0300375631 -0.2503759972 -0.0115078564 -0.1259308964 #> 109 -0.192258374 -0.0569497311  0.2998695415 -0.0528113650  0.2181080613 #> 110 -0.028959955 -0.1737601641  0.7316557414  0.1888204986  0.4283496376 #> 111  0.021151049  0.1172258406 -0.0329974641 -0.0496619011 -0.2119665521 #> 112 -0.019454389  0.0885888763  0.0752531535 -0.0415589108 -0.4939462069 #> 113 -0.074940574  0.3229394298  0.3132038654 -0.1433587986  0.0655657151 #> 114 -0.334246691  0.1433042221  0.4381973686  0.1817723694 -0.5150440042 #> 115 -0.290031512 -0.0473205953 -0.1825883512 -0.0064769097 -0.2960926859 #> 116 -0.758701298 -0.3192083084 -0.1926121093  0.1631904664  0.4509714980 #> 117 -0.274766486  0.0457173552 -0.1171020711  0.0106959614  0.0322932963 #> 118  0.127887309  0.0411845463  0.1556210438  0.2982265654 -0.0090071486 #> 119  0.097797228 -0.0818234300 -0.1237402765 -0.2044304348  0.3534692241 #> 120 -0.092933111 -0.3332216759 -0.2148035341 -0.0433574486  0.3140355052 #> 121  0.100142950 -0.5058109014  0.1341023852 -0.0081593946 -0.8974093719 #> 122 -0.493347398  0.3684295766 -0.4009238173 -0.0619477404 -0.3335852420 #> 123 -0.085072593  0.1396729880  0.0442102659  0.2463746251 -0.0175285606 #> 124  0.439795213 -0.2091579766 -0.2088709608 -0.1062788957  0.0083655191 #> 125  0.088970034  0.1118519056 -0.1557705343  0.2064772565  0.0300306415 #> 126  0.085922124  0.8122194721  0.2921348537  0.2208489706 -0.1487834399 #> 127  0.053792095 -0.1077409218 -0.1663608207  0.0283109091 -0.0429041001 #> 128  0.749578567 -0.4893905783  0.0154854181 -0.4133028069  0.0323111833 #> 129  0.313157956 -0.1284550026 -0.2346095402  0.5631319984 -0.3742235724 #> 130 -0.149677117 -0.1373409715 -0.1594156026 -0.0232340930 -0.2235585894 #> 131 -0.169013082  0.4169414452  0.0424920055  0.0396928885 -0.3433003136 #> 132  0.717038668 -0.1414939884  0.4008302204  0.2690924679 -0.1632256761 #> 133 -0.239907267  0.1812355153  0.0140764492 -0.4077588181  0.0779220366 #> 134 -0.203703776 -0.2659841396 -0.6306257162  0.0812034423 -0.1370498009 #> 135 -0.045418585 -0.2606550311 -0.3907279206 -0.1725608996 -0.0987313906 #> 136 -0.418624406  0.3257825897 -0.3174825450 -0.4453070328  0.3608268060 #> 137 -0.199901257 -0.0953702820  0.1333484659  0.1879812144  0.3353674685 #> 138 -0.312225669  0.1753466602 -0.2620672277 -0.1985206007 -0.0277884946 #> 139  0.126765799  0.3930253342  0.1081418449 -0.1611246705 -0.1781931312 #> 140 -0.047280134  0.2539074364 -0.3561205190 -0.1081460401 -0.0148058646 #> 141 -0.162516570  0.0390632516  0.4709641353 -0.0340528637 -0.2382102067 #> 142  0.059158133 -0.2915736155 -0.0974352794  0.3844643583  0.6669401006 #> 143  0.098668271 -0.1637138218  0.0332684212 -0.1590794183  0.3063210963 #> 144  0.322173476  0.0237683869  0.2600585467 -0.3078352239  0.3127140008 #> 145  0.363446911  0.3679883974  0.1063256273  0.0170386185 -0.4997825529 #> 146 -0.374134497  0.3974180277 -0.2617736978  0.1062615140  0.4688419868 #> 147  0.036344200 -0.1564429091  0.1591471465 -0.0309844900 -0.0040675573 #> 148 -0.223522728  0.1635653877 -0.4240134688 -0.1615562865 -0.2233121981 #> 149  0.060926591 -0.2262995016  0.3520073624  0.1315364384  0.0440036474 #> 150 -0.082978769 -0.2213636539 -0.0399675186 -0.0522835840  0.0653736377 #> 151  0.173577115  0.1729379668  0.0591583770  0.0144706620 -0.4410340727 #> 152  0.037952828 -0.4651906430  0.0542275416 -0.2012252757 -0.3095815360 #> 153  0.399795119 -0.0292586237  0.4134377725  0.1641667576  0.5431461767 #> 154  0.337710589  0.2476691523  0.4798299456  0.0328312962  0.1860241616 #> 155 -0.278709460 -0.4356537998 -0.3030740455  0.0587389093  0.3046812925 #> 156 -0.358572883 -0.5617242496  0.3920243947 -0.1627943377  0.0330161162 #> 157 -0.065877023 -1.0048913732  0.3702333593 -0.2843135608 -0.1269738023 #> 158 -0.382543658 -0.0928057902  0.0311791191  0.1148444681 -0.2215861109 #> 159  0.606538729  0.1301764928  0.1213742351 -0.0131202335 -0.1625915995 #> 160 -0.252390571  0.0541829338  0.0702946552  0.4452012489  0.1204542656 #> 161  0.499659719  0.4449850542 -0.0059845400  0.0036149062  0.3492734983 #> 162 -0.126754290  0.1389821521  0.1038926017  0.0635569249 -0.0891386627 #> 163  0.057134627  0.1391355541 -0.2423178204  0.3740080758 -0.0003612941 #> 164 -0.141907822 -0.0627318498  0.0539109392 -0.2805020027 -0.1872017359 #> 165 -0.018868674  0.1458351795  0.0153764658  0.3807888767 -0.1139492022 #> 166 -0.714488671 -0.0096670902 -0.1916177403 -0.1011800831 -0.3500797926 #> 167  0.054497464 -0.0543032438 -0.0386149536 -0.3344166041  0.1930242169 #> 168 -0.387133972 -0.1331034524  0.1132929747  0.1781785658  0.1386520034 #> 169  0.051437243  0.0313408093 -0.4909623451 -0.1846327226 -0.1276658513 #> 170 -0.007158134 -0.1047307650 -0.1245967114 -0.0035292095  0.2194962971 #> 171 -0.235339502 -0.0881623201 -0.1220656713 -0.4049807304  0.1514177343 #> 172  0.126791184  0.1014043741  0.3301091807 -0.1117702247  0.5058083815 #> 173 -0.128356628  0.3562301604 -0.1753537316  0.1588145629 -0.5246451578 #> 174  0.304598076  0.0753750720 -0.4420245337  0.0575408277 -0.1089570863 #> 175  0.165252123  0.0039908365 -0.3867564992 -0.0298217818 -0.3608434583 #> 176 -0.181818974  0.3232594927  0.2116320439  0.1289872283  0.4536714714 #> 177  0.135717206  0.2771696843  0.0475203491 -0.0446480070  0.1616612623 #> 178  0.004698297  0.1808001860  0.4119224405 -0.0806640286 -0.0150967710 #> 179  0.232372807  0.0326309286 -0.1934506737 -0.0098215471  0.1838287221 #> 180 -0.114878923 -0.3275943523 -0.0376741673  0.2172652905 -0.3762972867 #> 181 -0.020484667 -0.1048248123 -0.0691543532 -0.2397942491  0.1933309784 #> 182  0.511279720  0.2484902384  0.1166726452  0.1809110053 -0.3587956824 #> 183 -0.466923938 -0.0766230963  0.3701393471  0.5634643424  0.2972627994 #> 184 -0.201225970 -0.2521914966  0.0307822025 -0.1080759476 -0.3767921641 #> 185  0.371855346  0.1701286316 -0.6100031636  0.3420958973  0.5999646943 #> 186 -0.177847304  0.2078058164 -0.0236067099  0.0157145207 -0.1172531060 #> 187  0.049511439 -0.1421998454 -0.2338614949 -0.2916470531  0.4005165319 #> 188 -0.196677180 -0.1665249129 -0.1040928590 -0.1689315302  0.1258633677 #> 189  0.268835414  0.4268746560  0.2127190030  0.2434314288  0.5275594715 #> 190  0.305363729  0.7468969457  0.1969857662 -0.2792859604 -0.1727738054 #> 191  0.137904228  0.1599091821 -0.1615544686 -0.0771429601 -0.0738954144 #> 192  0.022532203 -0.2308320286  0.1628527177  0.1095559288  0.0343953879 #> 193  0.062116918  0.2339785784 -0.4782481893  0.0406004288 -0.2806112262 #> 194 -0.355491727 -0.4817749965  0.4237874606 -0.2288697776  0.0828604797 #> 195 -0.247223346 -0.3119113816  0.2274152328 -0.2948513833 -0.3116068157 #> 196  0.141248957  0.2509255264  0.2687423993  0.2342855293 -0.1478276988 #> 197 -0.227523588  0.2047370383  0.3205097003  0.0838765029 -0.2107103306 #> 198  0.357493556  0.0396279325 -0.0571901217 -0.5482850321  0.0625606350 #> 199  0.559270497 -0.5949137966 -0.3642119231  0.0425727357  0.4226795399 #> 200 -0.164554198 -0.4395553537  0.3031805734 -0.1979767193  0.0396352235 #>             pc125        pc126         pc127         pc128         pc129 #> 1    3.559606e-02  0.059301986  0.0444452660 -0.1097469675 -0.0347855301 #> 2   -1.144441e-02  0.052121672 -0.0590603875 -0.0668074826 -0.1093829676 #> 3   -4.304435e-01 -0.243953336 -0.0187697274 -0.0952110552  0.0322545164 #> 4    1.795252e-01 -0.170945770 -0.3554946584 -0.1582900348  0.0822740291 #> 5   -3.521667e-01  0.198229841  0.1446908538  0.1867963625 -0.0431432027 #> 6    5.674927e-02 -0.099870439  0.3833649543  0.0660003961 -0.3160904471 #> 7    2.449501e-01  0.103979210 -0.1348109007  0.0113615135 -0.0471228969 #> 8    4.540551e-02  0.130272366 -0.1100359637  0.0569816489  0.0909881493 #> 9    2.518675e-01 -0.265209461  0.0632514600  0.4030066930  0.0097580165 #> 10  -1.056697e-01  0.089507969  0.4956787647  0.1970904916  0.1951937373 #> 11  -1.056483e-02 -0.021079286 -0.0478384080 -0.1908984420 -0.1899825882 #> 12  -4.034305e-01 -0.138415602  0.1208034616  0.0492663655  0.2293050814 #> 13  -3.704644e-02 -0.060393494 -0.0029726656  0.0112271550 -0.0269391908 #> 14  -2.470871e-01 -0.168424572 -0.2091274351 -0.1339473760  0.1716099329 #> 15   1.681784e-01 -0.545546221 -0.0192145248 -0.0740080183 -0.1031211895 #> 16  -2.512484e-02 -0.017127814  0.1855662330  0.1220878956 -0.0001790651 #> 17   2.601162e-01  0.245345075 -0.2061776368 -0.0220195492  0.3431670735 #> 18  -2.562414e-02  0.291593127 -0.3430155629  0.0312069442  0.0394184675 #> 19  -1.360608e-01  0.334579210  0.2989145336  0.1174970934 -0.3088209000 #> 20  -1.274690e-01  0.123833114  0.1341954712 -0.2294325714  0.2115478123 #> 21   1.624382e-02  0.011111944  0.0699816786 -0.0444484282 -0.1602552185 #> 22   2.108671e-01  0.114953548 -0.0476125502  0.1191016578  0.4776604683 #> 23   3.461391e-01 -0.017768881  0.2172495127  0.0567709206 -0.0093608587 #> 24   2.027634e-01  0.231400800 -0.0618039701  0.1944017443 -0.2129787723 #> 25   6.075907e-01  0.186731494 -0.1207818832 -0.2247106137 -0.1483947527 #> 26  -1.177295e-01 -0.173637129  0.0001433843 -0.0410973004 -0.2373687129 #> 27  -1.524242e-01 -0.215564893  0.6056678130 -0.1329139143  0.2870348041 #> 28   2.253763e-01  0.521674866 -0.0955408721 -0.3898900771  0.1533056556 #> 29  -1.533810e-01 -0.097098417 -0.0208360556  0.0405942653 -0.1126391061 #> 30   1.740909e-01  0.461620507  0.0935904372 -0.1283483355 -0.3579617851 #> 31   2.371231e-01 -0.107105238  0.0168213988 -0.3108392403 -0.1559470378 #> 32  -4.739867e-01 -0.267436057 -0.5877476831  0.2664543831 -0.1560015474 #> 33  -7.781872e-02  0.047925058  0.2814750146  0.1068282711  0.2686356638 #> 34   2.088464e-01 -0.037590542 -0.1049369774 -0.0001955761  0.0797138689 #> 35  -2.376581e-01 -0.212615253  0.1527955870  0.1775947516 -0.3978631356 #> 36  -3.702261e-01 -0.103184186  0.0313842569  0.0179957932  0.0300020620 #> 37   6.049241e-01  0.020528545 -0.0679026327  0.2906667382 -0.0598410547 #> 38  -6.836312e-02 -0.194947927  0.0347536013 -0.0639990553 -0.0635416254 #> 39  -2.468678e-01  0.350353400 -0.0866073708 -0.2181488171  0.3512056713 #> 40   2.271180e-01  0.008856765 -0.0418112085 -0.2384224568 -0.3429166452 #> 41   1.056851e-01  0.149987085  0.2022088302 -0.1239196505  0.1198207226 #> 42  -4.188297e-01  0.228644743  0.0765530139 -0.2126608986  0.0363221506 #> 43  -1.120763e-01  0.136287646  0.0481326402 -0.0764468392 -0.1144932387 #> 44  -1.322698e-03 -0.028243782 -0.0178540072 -0.0295287110  0.1699494213 #> 45  -1.569921e-01  0.255799749  0.0336838308  0.3985467842  0.1767939550 #> 46  -1.450669e-01 -0.092775192 -0.2343991890  0.0398400726  0.1135950207 #> 47   1.032901e-01 -0.025949643  0.1009438048 -0.0150297188  0.0568778374 #> 48  -4.193162e-01  0.105438943  0.1063362733 -0.1325290243  0.3953353703 #> 49  -1.166394e-01 -0.172502362 -0.2783276619 -0.2281960667 -0.3344148184 #> 50   3.221220e-01  0.177244779  0.1189019399 -0.0596111102 -0.0700592508 #> 51   1.558233e-01  0.102378188 -0.0802329858  0.2688528848 -0.0874992681 #> 52   1.959073e-01  0.348027204  0.0005908893  0.0352620179  0.1089430534 #> 53   2.535711e-01  0.611200445  0.1411982646  0.1916589791 -0.1568927783 #> 54   6.977914e-02  0.042579230 -0.2809439757 -0.2092217678 -0.0877877789 #> 55  -1.292885e-01  0.156075777  0.4172755834  0.2142088417  0.0691196420 #> 56  -1.488987e-01  0.037808800 -0.1592844607  0.2771449829  0.0997583496 #> 57   1.397553e-01 -0.009872550  0.1571094426 -0.1422474917  0.1344324607 #> 58  -1.867748e-01 -0.221163577  0.0164218298 -0.4378106950 -0.1612052013 #> 59  -1.932205e-01  0.116374801 -0.1469053551 -0.1159606670  0.0555715805 #> 60   1.818608e-01 -0.515391013 -0.1369074775 -0.2795590756 -0.1823256923 #> 61   1.488979e-01  0.093100309 -0.5617505279  0.1273567650  0.0959179182 #> 62   3.094248e-02 -0.131216122 -0.2706509361  0.1983457116 -0.3760673318 #> 63  -3.574966e-02 -0.193606807  0.2231219662 -0.3171793223  0.1107603520 #> 64  -2.153474e-01  0.194961892  0.0994146098  0.1663933103 -0.1545919464 #> 65   1.837252e-01 -0.213997746 -0.0358589971  0.1578805895 -0.3051802454 #> 66  -2.650045e-01 -0.306673168  0.3331740843 -0.0238172789 -0.0711515863 #> 67   2.239910e-01 -0.184447621  0.1093359190  0.0303446721  0.1122165727 #> 68  -4.075385e-02 -0.094827323  0.3430490086  0.1769378553  0.0548066901 #> 69  -1.986295e-01  0.051869592 -0.1849044681  0.0850908285  0.2403201547 #> 70  -1.712348e-01  0.087312835 -0.1236834579 -0.0862693725  0.1550626660 #> 71   1.438627e-02  0.067920036  0.2577106050  0.3406880771  0.1723126084 #> 72   7.098735e-02 -0.153519532 -0.0778585979 -0.1298589710  0.2382533250 #> 73   1.710716e-01  0.172369124 -0.0757446507  0.0743810907  0.0959362114 #> 74  -7.912708e-02 -0.401485990 -0.1671573861  0.0968430156 -0.0179216003 #> 75   2.657886e-01  0.139680400 -0.1002663480  0.0278772860  0.0590016423 #> 76   2.306178e-01  0.232241310 -0.1083412943  0.3478095035 -0.0566822296 #> 77  -2.623076e-01 -0.228243880 -0.0265038657 -0.0413148027  0.1248366141 #> 78   4.737168e-02 -0.039325543 -0.1782074603 -0.4106423526 -0.0322919839 #> 79   5.975559e-02  0.057221558 -0.1108140754  0.1255531863 -0.2572549663 #> 80  -2.634761e-02 -0.326691585 -0.1807743657  0.0288582849 -0.1611240642 #> 81   2.441094e-01  0.091236867 -0.1434527285  0.0550539431  0.1433610750 #> 82  -2.339534e-02 -0.007402182  0.0298917767  0.0205103796 -0.0255249471 #> 83  -3.079698e-01 -0.289503196  0.0905145437 -0.3833802166  0.1267434167 #> 84   1.610635e-01 -0.004404328 -0.1222780492 -0.2089522734  0.2087175832 #> 85  -1.206506e-01  0.105360160  0.2742677115  0.0817152509 -0.0365206786 #> 86  -2.345322e-02  0.109829657  0.2620505757  0.0058903820 -0.2166511289 #> 87   1.714814e-01  0.190923751  0.1162470455  0.1682568698  0.0111991278 #> 88  -2.088569e-01 -0.127856508  0.1466586558 -0.2354364765 -0.1815812870 #> 89   3.510498e-01 -0.122242916  0.0461002501  0.1767170691 -0.2451617549 #> 90  -1.567931e-01 -0.078652679  0.1131905529  0.0962695063 -0.0214295802 #> 91  -6.692825e-03 -0.452212375 -0.3581102408 -0.0960845550 -0.2289321403 #> 92  -5.577845e-02  0.033080929 -0.0026446007  0.1708043483 -0.2762897805 #> 93  -9.823342e-02  0.110389233 -0.1969374250  0.3551380095  0.2141353746 #> 94   3.325641e-01 -0.109530037  0.0302466490  0.2106033924  0.1990432650 #> 95   4.448745e-02 -0.139967378  0.1525331836  0.1265561787  0.0649049343 #> 96  -3.066995e-01 -0.038539806 -0.0662456683 -0.2709449941  0.2013567829 #> 97   2.435642e-02  0.053615934  0.0029305701  0.0132514734  0.0154258007 #> 98  -3.071161e-01 -0.034300777  0.1653701527 -0.1563858938 -0.0080201201 #> 99   1.825246e-01  0.158251827 -0.0869489072  0.0578411477  0.1010528929 #> 100 -1.063755e-02 -0.065397052 -0.3721261622 -0.1503977836  0.1455832571 #> 101  5.404194e-01 -0.359955358  0.2530782996  0.2661542752 -0.3653044701 #> 102  4.042890e-01  0.127102277  0.0314893776 -0.0435326124  0.0281911602 #> 103 -3.834646e-01  0.031250787 -0.1336341449  0.0872144545  0.0591705650 #> 104  5.762784e-01 -0.274822285  0.1344089497  0.4623011472  0.0250275420 #> 105  1.582670e-01  0.330092298  0.1831886367  0.2800666194 -0.1898958014 #> 106 -1.055825e-01 -0.164546995 -0.4806259904  0.1561313315 -0.1027095427 #> 107 -6.775531e-02  0.087797207 -0.2330996989 -0.0767494610  0.1785055197 #> 108  1.461916e-01  0.106195873  0.1841711415 -0.2001591681 -0.1965568960 #> 109 -2.854321e-03 -0.122796663 -0.3767211230 -0.0174708019  0.1670073008 #> 110  3.597480e-02  0.117941253 -0.1704368642 -0.1844556225  0.2184039730 #> 111 -5.629776e-02  0.368118933  0.0882827859  0.1212067421 -0.2396479695 #> 112  1.209175e-02  0.119585047  0.1571727260 -0.2397150235 -0.1481404157 #> 113  1.884903e-01 -0.224429262 -0.1522751573 -0.0638420093  0.4490943113 #> 114 -4.004410e-02 -0.236559205  0.2373647090  0.1842596673 -0.3176133990 #> 115  2.107016e-01  0.097715128 -0.1479899245  0.0063379601  0.2002381872 #> 116 -5.354228e-01  0.310648216 -0.2576380277  0.6248953249 -0.1160665757 #> 117  5.500435e-02  0.136133641  0.1980974812 -0.2699020820  0.1858109591 #> 118 -2.134812e-01  0.123803981 -0.0531502115 -0.2278666348 -0.2158472719 #> 119 -4.057480e-01  0.141412426  0.1278478260  0.0122291855 -0.1244296699 #> 120 -3.114797e-01  0.108721435  0.0622800955 -0.0509337621  0.1206439201 #> 121  2.033467e-02 -0.036694751 -0.1665599871 -0.2626797702 -0.1170926348 #> 122 -1.270066e-01  0.148930087 -0.2052409997  0.2164894418 -0.0046344311 #> 123  1.019099e-01  0.251142371  0.0137797014 -0.0432151396 -0.1764174360 #> 124  2.870797e-01  0.269513453  0.0374574249  0.2501009847  0.0673175697 #> 125  3.975574e-01 -0.240333786 -0.0033221451  0.1902455411 -0.0154615186 #> 126 -4.104628e-01 -0.058109346  0.0507844913  0.1588545555 -0.1792959115 #> 127 -8.114914e-03 -0.135167438 -0.0121504971 -0.0830374213  0.0212976110 #> 128 -2.207246e-01  0.074992642  0.0832200148 -0.0195288411 -0.2196627610 #> 129 -2.967444e-01 -0.110895517  0.0824473576 -0.0655159551 -0.3408654434 #> 130  2.011098e-01 -0.215386945  0.1552186495  0.1435666555  0.1286619078 #> 131 -1.180317e-01  0.192921247  0.1139996341 -0.4026331792  0.0236569180 #> 132  9.360377e-02  0.228084218 -0.0003333327 -0.4918612111  0.0441491008 #> 133  3.472504e-01 -0.076054404 -0.1683611754  0.2718411529 -0.1657124905 #> 134  1.029681e-01 -0.233712559 -0.4082139289 -0.2284398996 -0.1684170800 #> 135  3.431269e-01  0.274343089  0.2649761378 -0.2844570442 -0.0688619325 #> 136 -1.235942e-01 -0.353085726  0.4244123698  0.1262624148  0.2885801727 #> 137 -4.557731e-01 -0.319460051 -0.3654050893  0.4228589851 -0.0309201699 #> 138  1.824784e-01  0.038561315  0.4373128482 -0.1062926073  0.2341572444 #> 139  1.145884e-01  0.691759970 -0.2336038842  0.3687551961  0.3782862905 #> 140  1.243164e-01  0.410217265 -0.1926526691 -0.2328939548  0.1197134111 #> 141 -4.136083e-01  0.263766990 -0.0178452859 -0.0466486931  0.3464927189 #> 142 -3.258476e-01  0.145245450 -0.0665946309 -0.2542493673 -0.2385497938 #> 143 -2.243865e-01 -0.069592788  0.3363821756 -0.2022403015  0.2408159069 #> 144  2.213271e-01  0.091448697  0.2003447677  0.0382570703  0.1406069062 #> 145  2.760420e-02 -0.170971944  0.3630933353  0.0332373420  0.3012690053 #> 146  3.965037e-01 -0.083016920  0.2728160196  0.1089581405  0.1866814080 #> 147  3.013257e-01  0.380140670 -0.1929180975  0.2496911089 -0.1659421212 #> 148  6.877899e-02 -0.031747094  0.1719134904 -0.3223629105 -0.0863598767 #> 149 -1.843070e-01  0.196420116 -0.0159893385 -0.1309397054 -0.1850904145 #> 150 -6.267394e-02 -0.084411353 -0.1452907987  0.1738775613 -0.0748401128 #> 151  2.093352e-01  0.205305198  0.5590636778  0.2457113227 -0.1180578246 #> 152 -2.667338e-01  0.207781382  0.1790945261 -0.1545477096 -0.2504514459 #> 153  7.420874e-02 -0.389485163  0.3875431814 -0.4308310027 -0.6884108466 #> 154  9.117880e-02  0.067519824 -0.2827502386  0.0459915164 -0.0684721534 #> 155 -5.643436e-01  0.227746374 -0.2672110820  0.2657933550  0.0418335538 #> 156  1.894983e-01  0.055286749 -0.0402335100  0.1681120805  0.1179210292 #> 157  1.666676e-01 -0.514496072 -0.2735711013  0.0074856685 -0.0965742724 #> 158 -1.484715e-01  0.423477513 -0.4527802010  0.4492859676 -0.1664736410 #> 159 -6.121735e-02  0.113994444 -0.0737839614  0.1003961028  0.1455246485 #> 160  4.109562e-01  0.194677243  0.1978796782 -0.0512344606 -0.3725633877 #> 161 -7.749098e-02 -0.190759390 -0.0684998680 -0.0014386452 -0.3091772134 #> 162  7.723778e-05  0.215157231  0.4407378110 -0.2557822649 -0.0723259612 #> 163  9.945529e-02  0.162343636 -0.3707033507 -0.2461112523  0.1394292121 #> 164  1.625507e-01 -0.437015189 -0.2315772977  0.2594156129  0.7209897364 #> 165  6.217797e-02 -0.110276311 -0.0626094779 -0.2892938901 -0.0137412148 #> 166 -2.427641e-01 -0.280250069  0.3042637860  0.2213523013  0.3047079030 #> 167  7.696782e-02  0.272590914 -0.3340944276 -0.2332761549 -0.1113600001 #> 168 -2.725415e-01  0.001021965  0.0061724452  0.1885276778 -0.1844100883 #> 169  4.209512e-01 -0.277926429  0.0979099364  0.0222960858  0.0690803200 #> 170 -5.250632e-02  0.036828437 -0.0312900092  0.4014602200  0.0940487914 #> 171 -1.530923e-01 -0.056179157  0.1496593886 -0.3253315677 -0.0625072144 #> 172 -8.998933e-02 -0.109959004 -0.1267674310 -0.3535884727 -0.1503494070 #> 173 -3.430259e-01  0.187736301 -0.1382451354 -0.0089485989 -0.0718976927 #> 174 -3.958830e-01  0.290111750 -0.1860355070  0.3047891587 -0.4791986098 #> 175 -9.878201e-03 -0.233314095 -0.0515804782  0.4757560340 -0.2169394976 #> 176 -3.078049e-01  0.014448152  0.2737919256 -0.1595803230  0.1215059789 #> 177 -2.403136e-01  0.280593909  0.0957071800 -0.0446901961 -0.1933540884 #> 178  2.503811e-01  0.032026165  0.0114798762 -0.1646704467  0.2610821144 #> 179 -5.854122e-02  0.345371834 -0.1762720652 -0.1950346650  0.0687840542 #> 180  2.090661e-01  0.153201999 -0.3101327660 -0.4745502162  0.1327342147 #> 181 -7.985279e-02 -0.486078174 -0.0894661361  0.0359429750  0.2054162104 #> 182  2.577965e-01 -0.503554149 -0.3775876593 -0.0850090388  0.1090284944 #> 183  2.779987e-02 -0.018402906  0.1711450175  0.4581551352 -0.0641329386 #> 184  1.070857e-01 -0.397214791  0.1894587450  0.0469015206 -0.0477863918 #> 185  1.951374e-02  0.154860904 -0.2467897457 -0.2552169797  0.0978823194 #> 186  2.638661e-01 -0.469199623 -0.1521050565  0.1470184696  0.2216244813 #> 187 -2.099177e-01  0.140173639  0.0599439746 -0.1174635730  0.3740664602 #> 188 -1.639359e-01 -0.153348138  0.0277633803  0.1235744029  0.1024442142 #> 189  2.407762e-02 -0.159573183  0.1901226571 -0.0378362330  0.2751785686 #> 190  5.987776e-02  0.013475584  0.1634392867  0.0842843602 -0.0415571939 #> 191  1.212624e-01 -0.065055223  0.0238524566  0.0001134558  0.2097013782 #> 192 -6.159042e-02 -0.133610160 -0.2684390900  0.2984840720 -0.2020507742 #> 193 -2.536986e-01  0.001083603  0.0905629236 -0.0553391081 -0.1489178983 #> 194  8.404467e-02 -0.209661240  0.1526683111  0.0470661163  0.4005975166 #> 195 -7.378300e-02 -0.020588827  0.0822254876 -0.2970264347  0.2886221996 #> 196  2.203675e-01  0.098016341 -0.1230351057 -0.4781847836 -0.0946087889 #> 197 -3.210263e-01 -0.349115004  0.3016578260  0.1068883910  0.0095503642 #> 198 -1.694143e-01 -0.521803234  0.0059237132  0.2173072284  0.1224168850 #> 199  2.376260e-01 -0.204794295 -0.5083932692 -0.4447863953 -0.2483761422 #> 200  1.742152e-01  0.101296927  0.6546758494  0.0108410493 -0.0787686413 #>             pc130         pc131         pc132         pc133        pc134 #> 1    0.0553906636  0.0052337341  0.0489975092  0.0502165191 -0.106904339 #> 2   -0.2069313347  0.0357500787 -0.1097227898  0.2281606796  0.054515466 #> 3   -0.0107486816  0.0060880045 -0.1191599971 -0.0234156659  0.109405448 #> 4   -0.4391603907 -0.1286593399 -0.2084986070 -0.0328352414  0.034710276 #> 5   -0.1595602789  0.0003298392 -0.0911347954  0.0701829685  0.230737373 #> 6    0.0505040795  0.1189318380 -0.1886561577 -0.1223050360  0.090518085 #> 7   -0.1495812502 -0.0611591536 -0.0999598796 -0.0956705839  0.104075835 #> 8    0.0609121751 -0.0866834324 -0.0241942881  0.0409306526  0.088250029 #> 9    0.1411971476  0.1607440977  0.2122787231 -0.0457617060 -0.555151060 #> 10   0.0148853770 -0.0059544458  0.1635312173  0.0554964710  0.088862077 #> 11   0.0500051286  0.0885508585 -0.0580823802  0.1534931518 -0.188155685 #> 12  -0.0679738638  0.1186447800  0.0087353995  0.0445932986 -0.004885663 #> 13  -0.0428870246  0.0266049079 -0.0308656112  0.0010202368  0.007789578 #> 14   0.1772390217 -0.0025686719 -0.0562114631 -0.0462696861 -0.244350449 #> 15  -0.2472655358 -0.2301809990 -0.0934233935 -0.2055874136 -0.057558617 #> 16   0.1678513074  0.2352614676 -0.1523342549 -0.0741959085  0.123975962 #> 17   0.0927649417 -0.1557783590  0.1820652519  0.0972451924 -0.184340208 #> 18  -0.0004859914  0.1157928480  0.0921486170 -0.2345299273  0.221734457 #> 19   0.2836929657  0.1705676142 -0.0400047694  0.0413892985  0.163109560 #> 20  -0.0281420036 -0.0783038506 -0.0519105270 -0.0216197114 -0.244551155 #> 21  -0.2691822305 -0.0496510839  0.1275863139 -0.2545791317  0.326377037 #> 22   0.0209889949 -0.0752630819  0.1348075106 -0.0069162531  0.130273225 #> 23  -0.0670095673  0.1031452570  0.0430821738  0.0289488217 -0.162177265 #> 24   0.2451179012 -0.1471340264  0.2792874837 -0.1198343436 -0.066817533 #> 25  -0.0818463381 -0.3028016954  0.1158241500 -0.0411634557 -0.082340684 #> 26  -0.5217303365  0.1901266877 -0.0008069224  0.0131061558  0.117353510 #> 27  -0.2071642577  0.2612490431 -0.1577469561  0.0302540156 -0.125002305 #> 28  -0.0018276309 -0.0530436865  0.3884181180 -0.0007363535  0.094826472 #> 29   0.2105862197  0.0503902541  0.1802288804  0.0872636628 -0.240876397 #> 30   0.4316971439  0.0259604916 -0.1673051104  0.2254373559  0.235651010 #> 31   0.0283427115 -0.1603833133 -0.0253001014 -0.1634954638  0.084153682 #> 32   0.2073724393 -0.0278899538 -0.2893269947  0.0142777700  0.258796795 #> 33  -0.1127661949  0.0985514874  0.2582696091  0.0546113120 -0.101505754 #> 34  -0.0787301132 -0.0215941228 -0.1188648104  0.0814189162 -0.031701774 #> 35   0.2382762836  0.0994780960 -0.3717174121  0.1637793858  0.114673377 #> 36   0.0872148472  0.0448618325  0.0173899636  0.1095420768 -0.069319430 #> 37  -0.0005590655 -0.2505073846  0.1255146128 -0.1734836231  0.101005516 #> 38   0.0445434411 -0.0654196021  0.1232722997  0.0869320423 -0.076673214 #> 39  -0.0189807648  0.1981673163  0.0340692342  0.0603565281  0.096653391 #> 40   0.0877477310 -0.1181335804 -0.0008471136  0.0134795801 -0.042659196 #> 41   0.3210023950  0.0543943021  0.0470146217 -0.0058154706  0.094894640 #> 42   0.0132856204  0.2412361226  0.0391431804  0.1427001255 -0.018447968 #> 43  -0.0327959324 -0.1120125232  0.0489493935  0.2085461155  0.113825967 #> 44  -0.1211645560 -0.0436866187 -0.0220707478  0.0102524919  0.340998126 #> 45  -0.0768985495 -0.0794290050 -0.0752313751 -0.0509823474  0.253790506 #> 46  -0.2500662322 -0.0134203321  0.0923659257 -0.3148367942  0.023894558 #> 47  -0.1699861219 -0.1071987751  0.3097056965 -0.2055770846  0.073397889 #> 48   0.1355291791  0.0707329912  0.0641149889 -0.0831649549 -0.171241534 #> 49  -0.2007748233  0.0444396091 -0.1520734586  0.0993705571  0.010474606 #> 50   0.0920772903 -0.1283427091  0.0300529890  0.1523279694 -0.252521438 #> 51  -0.0868585396  0.0009649868  0.0333362168 -0.0288367787  0.072893555 #> 52   0.1860816219  0.0462548205 -0.0328848214  0.0929123459 -0.100621525 #> 53   0.5065974607  0.2755743492  0.0316434873  0.1967289757 -0.033066219 #> 54   0.0279800631 -0.1824241496 -0.0077774090 -0.0157608240  0.021314519 #> 55   0.1068652587  0.1908817745 -0.1950330579  0.0720229454 -0.082109860 #> 56  -0.0783169398  0.0157876655  0.0018989802 -0.0381242462  0.265207892 #> 57   0.0187095461 -0.0401746707  0.2825126309 -0.0858775144  0.189760209 #> 58   0.2616069375 -0.1460465407  0.2684488622  0.0271814985  0.046668115 #> 59   0.0257675853  0.0139452913 -0.1078093400 -0.0331207979  0.080070375 #> 60   0.1367141074 -0.0438874883  0.1000147920 -0.2003458871 -0.243882780 #> 61   0.1388135282  0.1460016743 -0.0309093187  0.0746939459 -0.233365577 #> 62   0.0304075757  0.0258858311  0.0779464884  0.0524960131 -0.122224931 #> 63  -0.1192318748 -0.1841817909  0.1988057004 -0.0506314696  0.188889560 #> 64  -0.1186204293  0.0795865175  0.0225845615  0.0621827756  0.005261503 #> 65   0.0041304651 -0.1530356938 -0.1708540991 -0.1915749940  0.335050401 #> 66   0.0257323811  0.1051503085 -0.1277872679  0.0738381436  0.018504753 #> 67   0.1488831850 -0.0951226963 -0.0042457402 -0.1451484081 -0.184082079 #> 68   0.1772131267  0.1025706994 -0.1405918558  0.0330224984 -0.027544127 #> 69  -0.0291047897  0.1095357291 -0.2216569630  0.2181633620  0.070784467 #> 70  -0.0952231651  0.1281997846  0.2314287055 -0.0548700902 -0.056682182 #> 71  -0.1310267900  0.1661648341  0.2703627970 -0.2415833618  0.108892181 #> 72  -0.0660998892  0.0349108081  0.0831495280 -0.0088558080 -0.206068105 #> 73  -0.2261938019 -0.1005807447  0.1100112912 -0.0222010314  0.118552605 #> 74   0.0250588075 -0.1236906364 -0.1191882833 -0.1162851297  0.139247368 #> 75  -0.1525917078  0.0419693119  0.0970446943  0.2207166828 -0.046180739 #> 76   0.0790992638 -0.0302801580 -0.1153441014 -0.0721703405  0.085037146 #> 77   0.0118287326  0.0717869234 -0.0413628200 -0.0418474527 -0.035911781 #> 78  -0.2047725262 -0.1385236226 -0.2215619352  0.1147682342  0.103702834 #> 79   0.1474566599 -0.0235222479 -0.0606537681  0.0907880581 -0.204427963 #> 80  -0.1321152246  0.0566645948  0.0065674760 -0.0889442068 -0.017479219 #> 81  -0.1774363795 -0.0990968815 -0.0330618919  0.0118417140  0.057791389 #> 82  -0.0652437087  0.0009906543 -0.0148024751  0.0210119291  0.022296035 #> 83   0.0258197868 -0.0609218293 -0.0029799816 -0.2274362685 -0.151929696 #> 84   0.2662802686 -0.4659622096 -0.1670147866  0.1116805398 -0.373986518 #> 85   0.1191077536  0.2235595434 -0.0273521011  0.0834494214  0.067076969 #> 86  -0.0315090329  0.0926282371 -0.1145129735 -0.0005667519  0.104169364 #> 87   0.1480185638  0.1195976880 -0.0391760940  0.0209753354 -0.172056607 #> 88  -0.3237532233  0.2825204633  0.0120529511 -0.0383145258  0.042780677 #> 89  -0.0680905834 -0.0085477413  0.0902798275 -0.0728074310  0.058639033 #> 90   0.1635820629  0.0012066991 -0.1333466215  0.0552130911  0.016601579 #> 91  -0.1485430878 -0.1476694157  0.0336629692 -0.0212033082 -0.133351844 #> 92  -0.0875588955  0.0819257378  0.1298427476 -0.1844441259  0.193345853 #> 93  -0.2880910607  0.1364514885  0.0231419565 -0.1428600119 -0.105721915 #> 94  -0.2678558719 -0.0331464430 -0.1963900641 -0.1313203314 -0.231447494 #> 95   0.0793560444 -0.0111373799  0.0923218140  0.2972029094 -0.442544715 #> 96  -0.0365935016 -0.0456769095 -0.0048940707  0.1123358232  0.166216478 #> 97   0.0175980299  0.0029451312 -0.0218057380 -0.0086534276 -0.005739305 #> 98   0.2112285001  0.0059706701  0.0753895703  0.0128555597 -0.015182143 #> 99  -0.1654562531 -0.3780603461 -0.0896156037  0.1110407357  0.049503612 #> 100  0.2487341869  0.0113919938 -0.2442510366  0.0795741890 -0.218282250 #> 101 -0.2809224131 -0.1104932999 -0.3898267647 -0.0828623949  0.133575803 #> 102  0.0883432153  0.3669762382  0.0379605683 -0.4150447741 -0.127100042 #> 103 -0.2270058464  0.1855947147 -0.3396181358 -0.2971782484 -0.615421828 #> 104  0.0231954419  0.0045328932  0.0615953968  0.1999762360 -0.205360529 #> 105 -0.1832741651  0.1540935384  0.1773859239  0.1358235116 -0.112622792 #> 106 -0.2099954107 -0.0371714408 -0.1124633715 -0.1277434660 -0.071224737 #> 107  0.1026382699 -0.3816604238 -0.0669992538  0.0695103936 -0.060492903 #> 108  0.0486935961 -0.0414347066  0.1160345479  0.2086949223 -0.253530373 #> 109 -0.2031864748  0.0987905010  0.2538612051  0.1782438001 -0.135316088 #> 110 -0.0437937690 -0.0812016900  0.0163178384  0.3153902581  0.180468533 #> 111  0.3863902349  0.1764348473  0.1171797904 -0.2023060908  0.009007636 #> 112 -0.0255840952 -0.1876674380  0.0751380909 -0.3118551433  0.215644103 #> 113 -0.0514711929  0.1383833251 -0.2415746870  0.2062093931  0.310195383 #> 114 -0.0048387020  0.3340169261  0.1733936675 -0.3445703171 -0.156818836 #> 115 -0.2338804064  0.3224078638  0.6007068981 -0.1349937702  0.135956313 #> 116 -0.2768990889 -0.0164378414 -0.1637171774  0.0862108755 -0.064831956 #> 117  0.1532272320  0.1092640305 -0.0503083755 -0.0826224330  0.142214945 #> 118  0.1629929715  0.2453045561 -0.1112694971 -0.0286737214 -0.078963061 #> 119 -0.3783385587 -0.0911828970 -0.0345622066 -0.3970547939  0.168314765 #> 120 -0.0456851824 -0.2546644287 -0.2047569026 -0.3215291679 -0.405264323 #> 121 -0.3420360032 -0.1263765254  0.0237058680 -0.0878019534  0.208965489 #> 122  0.0481936790  0.2116361948  0.1783354212 -0.1094520599 -0.120974402 #> 123  0.0364843951  0.2634503758 -0.3665112963  0.0708446119  0.058327788 #> 124 -0.0782519015 -0.2652644042 -0.1005342970  0.0410297716 -0.159653563 #> 125  0.0607755748  0.3674038196 -0.3659514934  0.2202588267  0.176827753 #> 126  0.0187876592 -0.0189670759  0.1482331367 -0.0607621740 -0.183859375 #> 127 -0.1108325273  0.1722921494 -0.2720955318 -0.0758023458 -0.186245904 #> 128  0.0980022424 -0.5676309043  0.3035290880  0.0532765807  0.121183846 #> 129  0.2272902015 -0.0440727145 -0.1564356927  0.0561937886  0.241523539 #> 130 -0.0811032869  0.0188700034 -0.0911425693  0.3480531981  0.163205572 #> 131 -0.1435767059 -0.0722382260  0.0272636768  0.2593575188 -0.185730950 #> 132  0.2178107798  0.0553428728 -0.3526190190 -0.0708915989  0.309818853 #> 133 -0.3615374656  0.0716464203  0.2125880512 -0.1102087743  0.079630284 #> 134  0.4283491612  0.3689070312  0.2337126028  0.1244019575  0.240432215 #> 135 -0.4621007101 -0.2005191702 -0.3702297716  0.4030467655 -0.071520587 #> 136  0.0592506726 -0.3750910787  0.4974431740 -0.0131243897  0.070257146 #> 137  0.2118375672  0.0877122167 -0.0254703373 -0.1217437164  0.035742321 #> 138  0.1738888991  0.0073632682 -0.2793543358  0.1278421905 -0.393898584 #> 139  0.1011987690 -0.0269172239 -0.2685523800 -0.3249730648  0.241109906 #> 140 -0.1607557552  0.3156869078  0.3281834109 -0.0810308224  0.023851277 #> 141  0.3139535719  0.0682821705 -0.3031110004 -0.4587018253 -0.037680786 #> 142 -0.1561299020 -0.1490112984 -0.0745699991  0.5005855508  0.056436995 #> 143 -0.1861085082  0.5250440918  0.0004715607 -0.2292999366  0.041329533 #> 144 -0.2302749108  0.0424344810 -0.0734183679 -0.1884220029 -0.219027049 #> 145 -0.1779667558 -0.4204830194 -0.1285952865  0.0737844346  0.032314213 #> 146  0.0215622499 -0.0299464760 -0.2862763678 -0.0556867304  0.379641258 #> 147 -0.0283821270  0.0143597703 -0.0818770322  0.0511665159 -0.216119197 #> 148  0.0114155123 -0.2060623637 -0.2649528071 -0.1581384858 -0.161446097 #> 149 -0.2025250058 -0.0840217377  0.1243725388 -0.1313699337  0.178005727 #> 150 -0.3026207207 -0.0029117914 -0.1675941158 -0.2423339115  0.158994480 #> 151  0.2175528099 -0.1798496303 -0.0400769862 -0.4264638873  0.217722187 #> 152 -0.2901107122  0.1813638554 -0.0324852957  0.1855676608  0.362733966 #> 153  0.2106570778 -0.0510979486 -0.3017078041  0.0152353505 -0.083971235 #> 154 -0.1749925475  0.0159639476  0.3038183714  0.1869334808 -0.074331911 #> 155  0.1782774438 -0.0030177382  0.3344382083  0.0617856166 -0.067080081 #> 156  0.3105981000  0.2891071125  0.1925177134 -0.0897371853  0.241184644 #> 157  0.1671049543  0.0212972928  0.0378569692  0.0081454516  0.172567070 #> 158  0.2235625552 -0.0647453227 -0.0664188507  0.4459953185 -0.117284448 #> 159  0.0589924776 -0.5566310620  0.0181498714 -0.0089032044  0.223971725 #> 160  0.2678739306  0.0858564547  0.0565895175 -0.1772747287  0.010280912 #> 161  0.2580721214  0.4576211028  0.1068699426 -0.3864785179 -0.032750614 #> 162 -0.2192986235 -0.1695547967  0.0839198617 -0.2824308825 -0.107896221 #> 163 -0.0320276053 -0.0186989225 -0.3131988983  0.0656055073  0.012411798 #> 164 -0.0337244170  0.1028201325 -0.3673370093 -0.2624430624 -0.205568882 #> 165 -0.4902762901  0.5280282332 -0.0639258693  0.1933876056 -0.145511238 #> 166  0.1142943472 -0.2671472334  0.2525180352 -0.2985575281 -0.037472768 #> 167 -0.0467883131  0.1812608728  0.0569528604 -0.1837572609 -0.115345344 #> 168 -0.2029379737  0.0759849941  0.0456046925  0.0793016468 -0.096655681 #> 169  0.2241586160  0.1541658723  0.0293302474  0.2100958052 -0.207741220 #> 170  0.1408770878  0.0788350665 -0.3083498229  0.0342209036  0.078036073 #> 171  0.3937249599 -0.0441702221  0.0415054430 -0.2050809868 -0.174386327 #> 172  0.1741735522  0.0444723939  0.0044772013  0.1060287178 -0.249838410 #> 173  0.1550965202 -0.2815223787  0.1976778198 -0.1515849907  0.073701266 #> 174 -0.4302716498 -0.3787465384  0.0132077945  0.1065400927 -0.264216982 #> 175 -0.1647447393 -0.2129884454  0.2301479543  0.2885773987 -0.164224652 #> 176 -0.0966492439  0.0244820989  0.1671771957  0.3763568623  0.258616872 #> 177 -0.1135533390 -0.6037453484  0.1219899528  0.0674532430 -0.347641029 #> 178  0.4392242282 -0.3294406199  0.2260178778  0.0995723287  0.094863859 #> 179  0.1774796314 -0.2761393103 -0.1153489185 -0.0542180218 -0.352769294 #> 180  0.1606081372  0.4829125146  0.0324749010  0.1185695271  0.014452444 #> 181  0.5720773051 -0.1791260766  0.0370949681 -0.0137938739 -0.035991162 #> 182  0.2098564497  0.2297603614  0.1636669001  0.2676130021  0.170376232 #> 183  0.2083086653 -0.0284792073 -0.2289436730 -0.0829734170  0.018302796 #> 184 -0.1882436748  0.4331374988  0.2542758560 -0.1163736650 -0.304319619 #> 185 -0.1577446586  0.4615006314 -0.0525413496  0.3274099156  0.029885735 #> 186 -0.1825522913 -0.0945456829  0.1076807677  0.3383857297  0.184946964 #> 187 -0.1905828561 -0.0559244771  0.1722946983 -0.1774033131 -0.188794783 #> 188 -0.1148932873  0.0314994088  0.1198387222  0.2277180051  0.066659538 #> 189  0.1218927982 -0.2932043595  0.0954735586 -0.0260953382  0.224416452 #> 190 -0.1155798936  0.0423259680  0.1222236272 -0.0584636746  0.116361830 #> 191  0.1235083567  0.0910380739  0.2516346886  0.1782500859  0.371059083 #> 192  0.2456524693 -0.3093461681 -0.3050198249 -0.1043488116  0.044841023 #> 193  0.0306203390 -0.1815744216  0.2068820702  0.1808975896 -0.090321904 #> 194  0.0493454672  0.0592270708 -0.3712701782  0.2646555409  0.157415885 #> 195  0.0724457119 -0.2384026027 -0.6339437144 -0.2307749918  0.089846526 #> 196 -0.1699782063 -0.1200275361 -0.1112352994 -0.1944746828  0.091830143 #> 197  0.1282758450 -0.0119217490  0.3495621497  0.4850008890  0.106435219 #> 198  0.2777673810 -0.2096730081  0.2482817883  0.2747688333  0.268755770 #> 199  0.1452464948 -0.0037160422  0.4438608583 -0.4538047495  0.097691751 #> 200 -0.3799699798  0.0366044312  0.1757782510  0.3021722119 -0.171037356 #>            pc135        pc136        pc137         pc138         pc139 #> 1   -0.224685024  0.035758600  0.155110692 -0.0164214164  0.2166142106 #> 2   -0.079403446 -0.124706729  0.067295281 -0.0016280673  0.1698066899 #> 3    0.119961037  0.046958201  0.038497802 -0.0305619617  0.0742344643 #> 4    0.255330462 -0.150734870 -0.024725445  0.0127844795 -0.0104232442 #> 5    0.157750379 -0.264822500  0.113863704 -0.0212235320  0.0462914480 #> 6    0.177809463  0.030521983 -0.094205604  0.0781977855 -0.0167468942 #> 7    0.095718169  0.004939731 -0.092876713 -0.0269446651  0.1350717639 #> 8    0.121853962 -0.052540498 -0.061757472  0.0947831728  0.0532392245 #> 9    0.123433703  0.109759144  0.008419559  0.0822769518 -0.1429108684 #> 10  -0.197002672  0.060571411  0.086415520 -0.0161480372  0.0890258613 #> 11  -0.144307229  0.134122951 -0.159429140 -0.0026719879 -0.0141102908 #> 12  -0.165303117 -0.051022058  0.012890972  0.0902211465 -0.1084134642 #> 13  -0.013562919 -0.009194248  0.021169119 -0.0063689370  0.0141543603 #> 14   0.163410581  0.152501962  0.079131448  0.1260431727 -0.0282851009 #> 15   0.038596634 -0.047725180  0.148557241  0.0733268344 -0.0337751311 #> 16   0.333089199  0.173120753 -0.199598522  0.1325822244 -0.1784376206 #> 17   0.089438131  0.066653849 -0.113281524  0.1646466415  0.0360260606 #> 18   0.020326551  0.271686326 -0.115769437 -0.0080221402  0.0137801645 #> 19  -0.205388571  0.007547123  0.101024838 -0.0811241018  0.0671197751 #> 20   0.304371962  0.109891166  0.025708033  0.0088577697  0.0514244241 #> 21  -0.019085304 -0.083597848  0.075070846 -0.1601790353 -0.1163785408 #> 22   0.130499787  0.034287416 -0.186036386  0.0983889305  0.0764795884 #> 23   0.272926406 -0.120104615  0.140346948 -0.0107164545 -0.0292162525 #> 24  -0.149868448 -0.089726587 -0.160302678 -0.1046288073 -0.0104074495 #> 25  -0.225119060  0.080614208  0.185744448 -0.0299240465  0.0062483836 #> 26  -0.082925841 -0.212323930  0.214232608 -0.2070601055 -0.0192158262 #> 27   0.056812106  0.009890276  0.013658858 -0.0410387458  0.0544481684 #> 28  -0.324232215  0.154645473 -0.087473376  0.0638900432  0.0148841293 #> 29  -0.113075392 -0.099852771  0.059234055 -0.0236689672 -0.0699526765 #> 30  -0.055815174  0.090796638 -0.276031147  0.0912245869 -0.0620765868 #> 31   0.225636486 -0.044570034  0.044350280 -0.0553831610  0.0159201009 #> 32   0.355093456 -0.328860996 -0.112544751  0.2314038818 -0.0505221070 #> 33  -0.306687855  0.061096098  0.032660744 -0.0980935039  0.1456127186 #> 34   0.146800073 -0.095785771  0.037460870 -0.0007172180  0.0693236002 #> 35   0.007374658 -0.148816346  0.008642494  0.0047901913 -0.1494688495 #> 36  -0.236971317  0.107345180  0.217322639  0.0371837812  0.0570929254 #> 37  -0.141044452  0.103777630 -0.187495573  0.0551990640  0.0218568302 #> 38  -0.137630065  0.110925256  0.029034359  0.0822331005 -0.0739266630 #> 39  -0.068705369  0.215984394 -0.190268644 -0.0517122130  0.0391174310 #> 40  -0.146302301  0.068387704  0.108776201  0.0384491910 -0.0845750939 #> 41   0.023366874  0.116126732 -0.052377489  0.0266017357 -0.0704923171 #> 42   0.083927820  0.098728682  0.142488446  0.1284695726 -0.0202790684 #> 43   0.176509116 -0.078831462  0.410420742  0.2186844729 -0.2136139899 #> 44   0.007833824 -0.013053568  0.068169611  0.1864795294 -0.0318573556 #> 45  -0.141863853 -0.373775170 -0.067888112 -0.0649370582  0.0384505270 #> 46  -0.157798870  0.028604774 -0.091321049 -0.1066284051  0.0156622032 #> 47  -0.128897770  0.133574124 -0.113273458 -0.0809067899 -0.0941821925 #> 48   0.122648874  0.018517585 -0.101502684  0.0212680823 -0.0696351162 #> 49  -0.039978112  0.129845164  0.248573570 -0.1795712609  0.0495559336 #> 50  -0.096522735  0.087248264  0.221040288 -0.1359592730 -0.0002113743 #> 51  -0.121033836 -0.108648572 -0.048264891  0.0289293541 -0.0731738550 #> 52   0.054371948 -0.037712736 -0.061186018  0.0776688084  0.1118094806 #> 53  -0.012561181 -0.031231448 -0.174735345  0.0280728811  0.0963182226 #> 54  -0.136579760  0.072045816 -0.072723361 -0.0435544570  0.0280399593 #> 55   0.024995529  0.138793194  0.095595093  0.0422631361  0.0982729723 #> 56  -0.369456863  0.001943008 -0.234938390  0.0587344492 -0.0155684501 #> 57   0.034259668  0.067822133 -0.122005712 -0.0784123964 -0.0761041959 #> 58  -0.393257339  0.053898305  0.095481930 -0.0003520045 -0.1297593732 #> 59  -0.074300361  0.230718265 -0.171316795  0.0839584552 -0.0430652639 #> 60  -0.195421595  0.236592464 -0.172356098 -0.1371047700 -0.0489226837 #> 61   0.071121246  0.024236572 -0.268821316 -0.0223328140  0.0986917831 #> 62  -0.497162015  0.032293542  0.153129131 -0.1634192968  0.0911352167 #> 63   0.061294458 -0.076116886  0.021677706  0.1372797499 -0.1065508464 #> 64   0.190059421 -0.112409114  0.134813788 -0.1451971726 -0.0298427804 #> 65   0.106435940 -0.170381649 -0.099727449  0.0529346800 -0.0909873413 #> 66   0.039872396 -0.073279638  0.107697442  0.1682051453 -0.0661386069 #> 67  -0.072487253 -0.003601426 -0.038779406 -0.0171070743  0.0137729004 #> 68   0.158590414 -0.089759759 -0.186897735 -0.0144102796 -0.0616291104 #> 69  -0.024643649 -0.159888727  0.004069467  0.0909655107  0.1259175586 #> 70  -0.033193795  0.137256893 -0.047166702 -0.0822318595  0.0568506387 #> 71   0.257709291 -0.099353870  0.103839610  0.0648646690  0.0063411787 #> 72  -0.027389123 -0.029297746 -0.062065540 -0.1534015921  0.0608435448 #> 73   0.240024280 -0.122639815  0.004613012  0.0468272160 -0.1196461884 #> 74   0.049916908 -0.292297647  0.045708073 -0.0177460335  0.0512819931 #> 75   0.055697617  0.001946588  0.138399553 -0.0076024500  0.0133890655 #> 76   0.123898354 -0.124912943 -0.054412401 -0.0832408092 -0.1290599775 #> 77   0.207532108 -0.030775914 -0.069519218  0.0134933380 -0.0138189455 #> 78   0.284598428  0.404010919  0.260319237  0.1858612350  0.0956064435 #> 79  -0.285829850 -0.003167297  0.233466465 -0.2566480585  0.1064408957 #> 80  -0.025121293 -0.069842415 -0.033384974 -0.0214277087 -0.0722960286 #> 81   0.142370248 -0.022363605 -0.147910867  0.0026690404  0.0318338978 #> 82   0.019041912 -0.056327143  0.013414335  0.0195004893  0.0120530935 #> 83   0.204668932  0.129214512  0.042101363 -0.2604834127  0.0224455439 #> 84  -0.101611676 -0.205969571 -0.051413606  0.0982309315  0.0107792525 #> 85   0.031518066  0.197019913 -0.038008260 -0.0369816150  0.1052335105 #> 86  -0.245861090  0.012597679  0.208469731 -0.0627961596  0.0148044825 #> 87   0.108185107 -0.056884618 -0.094703323 -0.0222395896 -0.0008144917 #> 88   0.042618093  0.268531788  0.158766081 -0.1624794836  0.0238548393 #> 89  -0.309549500  0.204163706 -0.041783709  0.0842812214 -0.1613305482 #> 90  -0.036863593 -0.041387874  0.091349966  0.0027146566 -0.0392847143 #> 91   0.062561279 -0.271315209 -0.048045778 -0.0465414185  0.0363225038 #> 92   0.197058191 -0.062151455 -0.002236014  0.0241084565 -0.1833842908 #> 93   0.241633642 -0.129009130 -0.018962847 -0.1156717615  0.1534884218 #> 94   0.058397121 -0.085939146 -0.064645991 -0.0281560783  0.0195417761 #> 95  -0.224935107 -0.018318491  0.137866612  0.0015747583  0.0282178939 #> 96   0.051441676  0.044012522 -0.084031332  0.0652435820 -0.0693118499 #> 97   0.010544675 -0.001474558  0.017239280 -0.0262826414  0.0205648786 #> 98  -0.065058871  0.188820943  0.040733147 -0.0228767755  0.0676754131 #> 99   0.147924172 -0.161804931  0.055868289  0.0873058292  0.1105860778 #> 100 -0.023857478 -0.133903302 -0.290101227  0.0428436135 -0.0414559764 #> 101  0.136674140  0.390277037 -0.077434284  0.0328563026  0.2173852202 #> 102  0.258085968 -0.567831928  0.232766844 -0.0147684037 -0.2263269287 #> 103  0.067737112 -0.014634578  0.132070494 -0.1044630707 -0.1828704807 #> 104  0.008187287  0.132478833 -0.141639586  0.0397062608 -0.3288134927 #> 105  0.291364309  0.133305539 -0.304515103  0.2997613878  0.0269894986 #> 106 -0.049253425  0.015097722 -0.189070170 -0.2116488372  0.1710866214 #> 107 -0.107700906 -0.288831829 -0.028220781 -0.1566319614 -0.2071553756 #> 108  0.070601850 -0.033069727 -0.224562805 -0.0115034511 -0.0844532664 #> 109  0.030556162 -0.082401105 -0.149669473  0.0260549526  0.1071707450 #> 110 -0.026675882  0.217331524 -0.068865126 -0.1198208552 -0.0594264806 #> 111  0.222650475 -0.075862814  0.060407212  0.1804689090  0.0192792012 #> 112 -0.242801844 -0.366423977 -0.256964381 -0.0252825938  0.2550607821 #> 113 -0.143065823  0.217250990  0.232805591  0.3110726380 -0.1302197226 #> 114  0.106816552  0.430195791  0.068711606  0.0195261087 -0.1498308062 #> 115  0.113455523 -0.377928307  0.022652358  0.2112347571  0.0676366007 #> 116 -0.335144561  0.066636383 -0.377660792 -0.4251063395 -0.1361652171 #> 117 -0.252684776 -0.003738271  0.055440604 -0.0206768720 -0.3464255829 #> 118  0.001917123  0.047683074  0.186911782  0.0119124853  0.2383798441 #> 119 -0.118275521  0.250747715 -0.124292642  0.2278281817  0.0829012681 #> 120 -0.377148449 -0.049408284 -0.005341550  0.2684551387 -0.0430083849 #> 121  0.092279323 -0.107095873 -0.141359980 -0.0384816903  0.1999123402 #> 122  0.026101610  0.099657541  0.159461183  0.0125217078  0.1296213297 #> 123  0.025114393  0.087805459  0.135077707  0.2085473759  0.0946954784 #> 124 -0.085014065  0.185683837  0.116511726  0.0932565285  0.3777567870 #> 125 -0.279050967 -0.130246714 -0.037715690  0.0786690449  0.0397540284 #> 126  0.011459422 -0.070830053 -0.181076796  0.2559477741  0.1476328631 #> 127  0.030888035  0.076297984 -0.042993966 -0.0356554609 -0.0325331461 #> 128  0.167609691  0.365394977  0.169043776 -0.0922474579  0.1417467644 #> 129 -0.006674142  0.025216862 -0.018818197  0.0104797975  0.3027140281 #> 130  0.043948247  0.140442109 -0.074336884 -0.0112112399  0.2598870618 #> 131 -0.062233474 -0.137344689 -0.084824747 -0.2264164644 -0.1704440470 #> 132 -0.307741387  0.102504272  0.131453879 -0.0848116411 -0.2657058633 #> 133 -0.305742686 -0.045455426  0.133528257  0.2522664644 -0.1294323142 #> 134  0.160711985 -0.140884596  0.179490232 -0.0569885906 -0.1100551267 #> 135 -0.106760350 -0.174285792 -0.180260462 -0.1380842091 -0.2462584734 #> 136 -0.119335473 -0.147129510  0.090381965  0.0978716715 -0.0876678535 #> 137  0.038665950  0.528716240  0.134741353 -0.2461005538 -0.0662430783 #> 138 -0.143806259 -0.048016321 -0.132604966 -0.0205499884  0.1175346289 #> 139  0.078392933  0.403249190  0.132192723  0.0466844547  0.0036953557 #> 140  0.024306229 -0.030099161  0.214249365  0.2544552023  0.0426433070 #> 141 -0.181507141 -0.222965968  0.124924310 -0.2949876965 -0.0294384273 #> 142  0.072000379  0.040885610 -0.093925856 -0.1398023094  0.0731166290 #> 143 -0.060958196 -0.276595810 -0.124447724 -0.0036816123  0.2250462790 #> 144 -0.181062592 -0.133678208  0.365692251  0.1858623197  0.0583474897 #> 145  0.143971366  0.019233679 -0.174726135 -0.0281669476 -0.2877523152 #> 146 -0.087791636 -0.156489817  0.327029417 -0.2031461214  0.2077907293 #> 147 -0.010822572 -0.008454008  0.340355995  0.0771601240 -0.0428251528 #> 148  0.158712046  0.114766905 -0.109580900 -0.0120631466  0.2288838599 #> 149 -0.020453876 -0.232140495 -0.264786851  0.1720853562  0.0387284109 #> 150 -0.051142423  0.214950020  0.166669536  0.4251752765  0.2749170111 #> 151  0.199885946  0.281928963 -0.268570159 -0.3695490831 -0.1045938437 #> 152  0.244833111 -0.112866062  0.038865537  0.0218696371 -0.1274137594 #> 153  0.198970337 -0.151256891 -0.045224696  0.3310736204 -0.1769499073 #> 154  0.094264182 -0.111853221  0.249419274  0.0417410121 -0.1223361064 #> 155  0.135857874 -0.011841133  0.114868301  0.1798372617 -0.0230656964 #> 156  0.120142318 -0.031551372  0.194664666 -0.1191822138 -0.1222562583 #> 157 -0.273098452  0.062291503 -0.050889354  0.1636475257 -0.0255730172 #> 158  0.152958429 -0.089656776  0.095713848 -0.0707095376  0.1144221480 #> 159 -0.100471107 -0.111347333  0.064037451 -0.0708633516 -0.0926517181 #> 160  0.061648342  0.124353310  0.188035539 -0.2747080519  0.3619788721 #> 161 -0.407848218 -0.315037858 -0.481494247 -0.1077169152  0.1098068670 #> 162  0.218301153  0.240310615 -0.218117002 -0.1233875614 -0.2968062777 #> 163  0.295816439 -0.213640607  0.262990061 -0.6448807659 -0.1481285159 #> 164  0.039520026  0.354186768  0.053395675  0.0071833343 -0.1287225594 #> 165 -0.067646995  0.097570714 -0.107600671  0.0746351831  0.0219397422 #> 166 -0.035527097  0.067435020  0.189822718 -0.0039495251  0.0426387155 #> 167  0.083391491  0.147284507 -0.187782894 -0.0195507576 -0.3080574487 #> 168 -0.340922788  0.104705148 -0.004216709  0.2492606038  0.0424486779 #> 169  0.133653639 -0.156495206 -0.191206697  0.2616655968  0.1512951475 #> 170 -0.097907313  0.099024146  0.071680259 -0.2175279699 -0.3306544711 #> 171  0.131081877 -0.321539403  0.171815877  0.0458723767 -0.0201575492 #> 172  0.173750326  0.221067284 -0.179511098 -0.0440161249  0.0605957100 #> 173 -0.053792871 -0.111341666  0.141664244  0.1068644641  0.0490730293 #> 174  0.137167697  0.167300155 -0.081209499 -0.0278402985 -0.1546421573 #> 175  0.291209963  0.004711587  0.083392261 -0.0710901423  0.0625588655 #> 176 -0.031501353 -0.185447377 -0.369558488 -0.1280758438 -0.0131127898 #> 177  0.022269341  0.029297783 -0.010255575 -0.0033220616  0.1955490912 #> 178  0.149142969  0.218162430  0.052955660  0.1122961285  0.0494539878 #> 179  0.061627441 -0.246332897  0.052827575  0.1322401843 -0.0856407448 #> 180  0.031370196 -0.141618791  0.047574880  0.1599635511  0.1099902462 #> 181  0.217165959 -0.191833231  0.121671486 -0.2031743693  0.2836652534 #> 182 -0.120052732 -0.001139343 -0.213966550 -0.2320891866  0.0112818755 #> 183  0.233648326 -0.116352418  0.065651999 -0.2949022794  0.0203937201 #> 184  0.002157455  0.064727413 -0.104817462 -0.0347949619  0.0897299741 #> 185 -0.160724093  0.231643593  0.083940183 -0.0968227137 -0.1676984092 #> 186 -0.144015512  0.110364733  0.213635109 -0.1361172103 -0.1681546954 #> 187 -0.045960116 -0.166926299 -0.057562980  0.0118384782 -0.1395737546 #> 188 -0.055128459  0.059508030 -0.073549298  0.0575975280  0.3988199622 #> 189 -0.142927994 -0.023768560  0.105582281 -0.2659642160  0.2904426359 #> 190 -0.312897673 -0.295411931  0.086837721  0.0130124110 -0.0078510479 #> 191  0.057690968  0.318106403  0.010056259 -0.1331968374 -0.3095499499 #> 192 -0.377670108 -0.199846024 -0.058101038  0.4465744234 -0.3029096373 #> 193  0.142853953  0.117943182  0.058126099  0.2194481566 -0.3702390982 #> 194  0.038159720 -0.085319710 -0.253168794 -0.0155441165  0.0962740803 #> 195 -0.269539843  0.060305637  0.050720996  0.3456208441  0.0639886257 #> 196  0.312064699  0.152231729 -0.155248288 -0.0932902714  0.2497173405 #> 197  0.059527668  0.154124098 -0.011728490  0.0152136449 -0.0196749870 #> 198  0.223451148 -0.089795819 -0.122963078  0.0559938379  0.0790032640 #> 199  0.135564116  0.005498392 -0.010264693 -0.1578540525  0.0411631044 #> 200 -0.091382568 -0.423964989  0.092559462 -0.2364720344 -0.0293739959 #>             pc140         pc141        pc142         pc143         pc144 #> 1    0.0633814544  0.0336544691  0.183942241  0.0375539097 -0.1357662968 #> 2   -0.1373805942  0.0370194496 -0.076001311 -0.0828603721 -0.1619134313 #> 3   -0.0262295193  0.1017286330 -0.010288029  0.0730191607 -0.1061615588 #> 4   -0.0714128771  0.1745412710 -0.025938766 -0.0523012862 -0.0658321633 #> 5    0.1478998050  0.0261735667  0.096986786 -0.0667238374  0.0541667930 #> 6   -0.0819614434 -0.0341354035  0.010744264  0.0560446147  0.0115656920 #> 7   -0.0945186767 -0.1349987909 -0.042297278  0.0235935951 -0.0327233468 #> 8   -0.1103177528  0.0058939822  0.047181590 -0.1191453982 -0.0595422569 #> 9   -0.1990106010  0.0396319044  0.027310896 -0.0557871712  0.0927503527 #> 10  -0.0935245425  0.0116069016  0.024094273 -0.1235574901 -0.0180340631 #> 11  -0.1830382440  0.1930020257  0.119717003  0.0464401800 -0.1246393661 #> 12   0.0724111539  0.0424050147  0.095699717 -0.0815747399 -0.0814543687 #> 13   0.0311553335  0.0060707758  0.005731378 -0.0010525209 -0.0105920071 #> 14  -0.0034948066 -0.0286944104  0.215614839  0.1345914171  0.0124355361 #> 15   0.0110795937 -0.1041387571 -0.011525803 -0.0570963054 -0.0800008024 #> 16  -0.0968468698 -0.1045218473  0.001061780  0.0673159191  0.0276552025 #> 17  -0.0032110949 -0.2188398969  0.059000745 -0.0506363458  0.0016367299 #> 18   0.0768100762 -0.0110090171 -0.052345230 -0.0864292538  0.0573988046 #> 19   0.0140757127 -0.0001802452 -0.041253710  0.0341855607  0.0489044672 #> 20  -0.1750703379  0.2066096220  0.140397540  0.0259980286 -0.0052909799 #> 21   0.2344450937  0.1120820599 -0.075917493 -0.0882072240  0.0870312328 #> 22   0.0367401023  0.0099516853  0.056454513  0.0816730720 -0.0578798323 #> 23   0.0417084498  0.0098076459  0.150322714 -0.0915533064  0.0195483273 #> 24   0.0601348963 -0.1634157736  0.063173941 -0.0112795560  0.0296383240 #> 25  -0.0294232071  0.0519646042 -0.043945953  0.0017127319  0.0840929843 #> 26   0.1912256008 -0.0478931533 -0.043133764 -0.2630906339  0.0079426120 #> 27   0.0980687874 -0.3302002157 -0.060133473  0.1565597807  0.0212146887 #> 28   0.1532300624 -0.2168476966 -0.128247504  0.0006609595 -0.0076975322 #> 29  -0.1609700051 -0.0349324431  0.018045376 -0.0154995073  0.0800608551 #> 30  -0.0989258723 -0.1490611866  0.024408588  0.0680825051  0.0912355170 #> 31   0.0650685606 -0.2568261083 -0.159040835  0.1659477429 -0.0053620901 #> 32   0.0897643647  0.0531383019  0.010312271  0.0465173212 -0.0368932602 #> 33  -0.0426690022  0.1637943356 -0.068105900 -0.0148435193  0.0127812058 #> 34   0.0670317612 -0.0068400678 -0.022320422  0.0212728645 -0.0705728474 #> 35  -0.0825716487 -0.0230332819  0.090104588 -0.0325653584  0.1059594488 #> 36  -0.0497776675  0.0441187235  0.107367996 -0.0219857959 -0.0124229949 #> 37  -0.1666463988  0.0591924380  0.032344170  0.0193267897  0.0035782551 #> 38  -0.0496352653 -0.1227256674 -0.026028729  0.0018181008 -0.0331298370 #> 39  -0.0117014149  0.1087881825 -0.003535260 -0.1303665678 -0.0798812996 #> 40  -0.0049807584 -0.1148869121  0.026467365 -0.0081733524  0.0436648205 #> 41  -0.0235789562  0.1200813009  0.229030177  0.0616332475  0.0262409153 #> 42  -0.0247178761  0.0727899179  0.033998038  0.0432564247  0.0244066873 #> 43   0.0954964442 -0.0769244489  0.114990506 -0.2494258238  0.1195320325 #> 44   0.0440176317 -0.1908782390 -0.099723174 -0.0036639426 -0.0211172682 #> 45   0.2045747016  0.1428029738 -0.119379826 -0.0708987477  0.0442647214 #> 46   0.0816808768  0.1107801917 -0.044664776  0.0082278585  0.0504857673 #> 47  -0.0038596969  0.0343252544 -0.061415399 -0.0687962861  0.0750962654 #> 48   0.1844916784 -0.0118884981 -0.054453798  0.1313323704  0.0316337900 #> 49   0.0413732644 -0.0393737284 -0.071837144 -0.0885528945  0.0742901217 #> 50   0.0197918490 -0.0052961978  0.039654192 -0.1352740916  0.0997276070 #> 51   0.0129087354  0.0896196391 -0.024008487 -0.0768952546  0.1123224839 #> 52   0.0359899243 -0.0015787935  0.036109396  0.0965477317  0.0379852137 #> 53  -0.1658729460  0.0464249633  0.103313973 -0.0909439842 -0.0799488982 #> 54  -0.0835400929  0.1357669600 -0.070276771  0.1784429499 -0.0318855888 #> 55  -0.0163490035 -0.0897124334 -0.023979056  0.0711326799  0.0493714208 #> 56  -0.0179906498  0.1722411548 -0.136616903  0.0663002820  0.0346362118 #> 57  -0.0813603576  0.2704354913  0.099751757  0.0078501731  0.0445025793 #> 58   0.0317251260 -0.1794838328 -0.130195103 -0.0216339350  0.0141809828 #> 59  -0.0398041830 -0.0789311657 -0.112505429  0.0066016711  0.0170229249 #> 60  -0.1309921650 -0.2368820799 -0.069934080  0.1463239162 -0.0001316557 #> 61  -0.0978756417  0.0857958025 -0.063851709  0.0755001102 -0.1074765424 #> 62   0.0002913639  0.0284733625  0.130935288  0.0944014666 -0.0006727493 #> 63  -0.0043197610  0.0099481050 -0.004033445 -0.0541914317 -0.1312704591 #> 64   0.0111548885  0.0675032258 -0.085473289 -0.1233321447  0.1551780625 #> 65   0.0332351546 -0.0018473620 -0.120669111  0.1466344684 -0.0034850087 #> 66  -0.1902924620 -0.0891586178 -0.041338414  0.0069038538 -0.1248492165 #> 67   0.0797000511 -0.0508913297  0.055479324  0.0805862011  0.0035034831 #> 68   0.0663487590 -0.1124260922  0.108470220  0.0464326807  0.0080038022 #> 69  -0.0137601101  0.0028080473 -0.010878586 -0.0818374215 -0.1246300084 #> 70  -0.0713645135  0.0568063005 -0.072506405  0.0884177792  0.0243367615 #> 71   0.2232011175 -0.1279862514  0.052294973  0.0081423115  0.0797555306 #> 72   0.2165651007 -0.2310174296  0.011607044 -0.0500261440 -0.0506359027 #> 73   0.0011170307  0.1203743315 -0.041647146 -0.1250721711  0.0956214596 #> 74   0.0046336078  0.0122641675 -0.113646880  0.0460824163 -0.0355118745 #> 75  -0.0118152554 -0.1819728410 -0.051982285 -0.2620933222 -0.0006275577 #> 76   0.0780241029  0.1996106387 -0.004407633 -0.1141843049  0.1515257379 #> 77  -0.0270259244 -0.0767488982  0.038790135 -0.0075192070 -0.1025816745 #> 78  -0.1718118007 -0.0155318751  0.133705760  0.0751543539 -0.0524193729 #> 79  -0.0209299111 -0.0038786968 -0.008302115 -0.0084188582  0.1024491696 #> 80   0.0262591328 -0.0870960591 -0.114658356 -0.0584125738 -0.0241330961 #> 81   0.0916737912  0.1018169782  0.018032966  0.0620343741  0.0321120496 #> 82  -0.0104162848 -0.0138940560  0.002458557 -0.0186712554  0.0083658371 #> 83   0.0068066172  0.2104714206 -0.060885672  0.1622906802 -0.1183319646 #> 84  -0.0717272615 -0.0348840282 -0.040512747  0.1791173263 -0.1818620857 #> 85   0.0933817713 -0.0088290668 -0.057489905  0.1370548810  0.0073710567 #> 86   0.0469636876 -0.0213253992  0.012246876 -0.0606394472 -0.0145809906 #> 87   0.0662998305 -0.0387750763  0.054299780  0.0977992725  0.1149051157 #> 88  -0.1911536936 -0.0062108141 -0.182205684 -0.0597216492 -0.1364490223 #> 89  -0.2721607271  0.0299355820  0.142413451 -0.0988533195  0.0058576039 #> 90  -0.0599005812  0.1346701049 -0.029122702  0.0539975781  0.0034302972 #> 91   0.0402288587  0.0171025784 -0.134097265  0.0715565230 -0.0516189660 #> 92   0.1195508415  0.0668809907 -0.048819674 -0.0270178058  0.0877263862 #> 93   0.0482462163  0.3129015911  0.067646607 -0.1228488801 -0.0785097994 #> 94   0.0597246774 -0.0243192670 -0.175310745  0.1694356544  0.0965437520 #> 95  -0.0275355588 -0.1740669969  0.084369632 -0.0067309274  0.0358298527 #> 96   0.1059521488  0.2150267217  0.043779736  0.0537600248 -0.0164695897 #> 97   0.0019606508  0.0142209936  0.029368288  0.0030982186 -0.0007360479 #> 98  -0.0470428143 -0.1205702619  0.068612018  0.0562567462 -0.0352989167 #> 99   0.0469189575  0.0965665794  0.143466249 -0.0981074741 -0.0419101292 #> 100  0.1049366141 -0.0736689781 -0.106445283  0.0556434037 -0.0162192705 #> 101 -0.2802498625  0.0803384104  0.235520662 -0.1293605169  0.0953977186 #> 102 -0.0206213933  0.0203771532  0.125564628  0.2206784508  0.0639839036 #> 103 -0.0303309906  0.1105129211 -0.235332102 -0.1804244517  0.1635643054 #> 104  0.0719248349 -0.0239949925  0.021319192 -0.1374139051 -0.0932360254 #> 105  0.0520752835 -0.0532998726 -0.117560681  0.0096859869 -0.0539443852 #> 106 -0.1277543865 -0.0091249497  0.087723156  0.2378207448  0.1605979437 #> 107 -0.1654369833 -0.1050297545  0.381466248  0.0668466774  0.0112619738 #> 108 -0.0255075803  0.1032002679 -0.095790350 -0.1147951716  0.1898094130 #> 109 -0.2144520262 -0.1016230890  0.142734715 -0.0613134421  0.1802866810 #> 110  0.1979917249  0.0033622844 -0.109212169  0.0564886116 -0.1577338175 #> 111 -0.1044069940  0.1281372907  0.006995506 -0.1165071211 -0.2611137954 #> 112  0.1952124937 -0.2726862458  0.267378443 -0.0245781456 -0.1659652254 #> 113  0.1267592666  0.0880435188  0.237063988  0.1152246585 -0.0076236027 #> 114  0.1842597674  0.1461541681  0.025052511  0.0389241130 -0.0132070525 #> 115 -0.1399134599  0.1064771106 -0.154747921 -0.1945820661 -0.1900210583 #> 116 -0.0434102731  0.0809962577  0.047306145 -0.0475123822 -0.0090501236 #> 117 -0.0643181433  0.1495484127 -0.035976499 -0.1445493218  0.0140239432 #> 118  0.3572413328  0.0378650931  0.094140764 -0.2184420685  0.1495305180 #> 119 -0.2265277884 -0.2391892904 -0.010535011 -0.0081066120  0.0223216904 #> 120  0.0048404567 -0.0295241316 -0.092107925 -0.2131763907  0.2024468144 #> 121 -0.2210134301 -0.2543377112  0.061949969  0.1132748170  0.1459259936 #> 122  0.0998073931 -0.0214301527  0.030653102  0.0422395230  0.2124623730 #> 123 -0.1586208530  0.0605758595 -0.297870788 -0.0288663459 -0.0908691394 #> 124  0.3958948968  0.0322577362  0.001554194  0.2930761990 -0.0780670486 #> 125 -0.1049804168 -0.0484382540 -0.007629238 -0.2133664762 -0.1127787720 #> 126 -0.3671282931 -0.0219510195  0.031594920 -0.0963399447  0.0306669983 #> 127  0.0037249291  0.0094406854  0.061048312 -0.1808558572 -0.1201025708 #> 128  0.1431082670  0.0547859067 -0.220583763  0.1121621603 -0.0428271971 #> 129 -0.0359403272  0.0678287404  0.117551767  0.0832390722  0.1407606334 #> 130  0.1630794583 -0.0254612560 -0.012995541  0.1397273226  0.1457033183 #> 131 -0.0429202696  0.1618778217  0.156912545 -0.1132653238 -0.0344110622 #> 132  0.0696799839  0.1837662658  0.101410522 -0.0718179925  0.0046371424 #> 133 -0.1446083082  0.1211475290  0.043896329  0.2821292737 -0.0119996904 #> 134 -0.0501943662  0.2151597859  0.314115988  0.1098971532  0.0578093898 #> 135  0.0026745388  0.0839429093  0.167133344 -0.0819160645  0.0191742971 #> 136  0.1213872845 -0.2504020529 -0.087874250  0.0003164829  0.0755567239 #> 137 -0.0564238940 -0.0048776591  0.059806482 -0.1795690078 -0.1567552386 #> 138  0.1556501540  0.1154812156 -0.332441033 -0.0905582195 -0.2741524336 #> 139 -0.2236455509 -0.2795343268 -0.209485854 -0.0595775097  0.1671784488 #> 140  0.0695706553 -0.0953287032  0.063520200 -0.0142193862 -0.0981879371 #> 141 -0.0597875571 -0.1229230082 -0.093601696  0.1289549844 -0.1263814808 #> 142 -0.0304069536  0.0484425217 -0.090710305  0.0301629353 -0.2446255668 #> 143 -0.2023627452 -0.2395831149 -0.121097132  0.0722915866  0.1105536631 #> 144  0.0268659132  0.0284599336  0.152840056  0.0277571273 -0.4187020525 #> 145 -0.3685023517  0.0421471180 -0.366652775  0.0487647612  0.0711061388 #> 146  0.1359947012  0.0419700659 -0.130713334  0.0234693133  0.0722205175 #> 147  0.0679197044 -0.2414121235 -0.104466944 -0.0700158795 -0.2414911420 #> 148 -0.0831849082 -0.0707551752  0.264335583 -0.0956156680 -0.1533719585 #> 149  0.1511924246 -0.2213849985  0.307914994 -0.1443961099  0.0323266662 #> 150  0.1381886651  0.0139464266  0.025201209 -0.0329074475 -0.0884522495 #> 151  0.3009382097  0.1770069232  0.128137295  0.1556096259 -0.2213990181 #> 152 -0.1439962265 -0.2311857331 -0.080817143  0.2445078815  0.0193241848 #> 153  0.0801003649  0.0799366375 -0.090480481  0.0809415328  0.1583084549 #> 154 -0.1592109393  0.0926444256 -0.042622017  0.0976844436 -0.0386018821 #> 155  0.0874789297 -0.0434108157  0.141216857  0.1163387096  0.1284197465 #> 156  0.1015397786 -0.0200789369  0.099879035  0.2833556351  0.0265454482 #> 157  0.1863463532  0.3009780298 -0.065369115  0.1159469182 -0.2954673768 #> 158 -0.0837749141 -0.0440961134  0.031476297 -0.0780717330  0.0185326545 #> 159 -0.2707075442 -0.1669125486  0.081334036 -0.0225633576  0.1500567062 #> 160 -0.1198423022  0.1326908892 -0.145862953  0.2184837080  0.0835066955 #> 161  0.2062745536 -0.0945204825 -0.091291497 -0.1802700518 -0.2573134565 #> 162 -0.0963002654  0.0038634738  0.147531301 -0.1158482874  0.1193951167 #> 163 -0.0010595110 -0.2961696040  0.103403648 -0.0332305522 -0.1564976933 #> 164  0.0837413161  0.1590499082  0.166899506  0.0432235408  0.1140074500 #> 165  0.1555689396 -0.2192449770  0.161826895  0.3645685877 -0.1255577964 #> 166 -0.2346635745  0.1870622321  0.098743795  0.1145866383  0.0181712779 #> 167  0.0528534014  0.0847794168 -0.199167327  0.2123293904  0.0102139715 #> 168 -0.0531165110  0.1250549447  0.095620761  0.0499270414 -0.0786686050 #> 169  0.2212121220  0.0656968342 -0.128055802 -0.0555028413  0.1725746780 #> 170 -0.2099951237 -0.2540447872  0.012965600 -0.1170353002 -0.2727131028 #> 171 -0.1849192298  0.1302077134 -0.489458367 -0.0562465757 -0.0103057667 #> 172  0.2736029457 -0.0337191913  0.083124794 -0.3646496254  0.1765369815 #> 173  0.0475517821  0.2014223078 -0.108229432 -0.0027632452  0.0556492050 #> 174  0.2596970869 -0.0481083251  0.076300313  0.1691669559 -0.1301371226 #> 175 -0.0097587197 -0.0740683530 -0.202626469  0.0325005064  0.0084193024 #> 176 -0.0343161394  0.1966874370  0.091140889  0.0608896267  0.0397746249 #> 177  0.2733293696  0.0846362026 -0.272488441  0.1575404309  0.0663051098 #> 178 -0.0875550998 -0.0873328146 -0.119810299 -0.2995486285 -0.0780639519 #> 179 -0.0756436426  0.0141068478  0.145715499  0.3175257933 -0.0441489035 #> 180 -0.2029278470  0.2424285639 -0.217309312  0.0901358881  0.0010935967 #> 181  0.0556886849 -0.1144597041  0.089426371 -0.2215646029  0.0976579886 #> 182  0.1586875955  0.0073351837 -0.073639270 -0.0879503893  0.2532736432 #> 183 -0.0207820673 -0.1898336521 -0.009215384  0.0539816542 -0.0389091994 #> 184  0.0747190664 -0.0854071752  0.078714196 -0.1591060475  0.0011310792 #> 185  0.0358369213 -0.0821237025 -0.280853702  0.1676541560  0.4768706073 #> 186  0.0754793912 -0.0390150459 -0.098267778  0.0359815728  0.0412622258 #> 187 -0.1276183581 -0.0212551042  0.105966232 -0.0184144768  0.0178651121 #> 188 -0.1696775473 -0.0118193684 -0.001817683 -0.1592340866  0.0992967279 #> 189 -0.1693734570  0.1972099902 -0.014076718 -0.0390430185  0.0647352668 #> 190 -0.2934189569 -0.0451674471  0.102795294  0.1982720343  0.0736826240 #> 191  0.1028889999 -0.1834766742 -0.176822168 -0.0838146371 -0.2943391192 #> 192  0.1395182706 -0.0158472317 -0.173010459  0.0162900118 -0.0121052885 #> 193  0.3204498595 -0.0069219705  0.045606843 -0.1724980578 -0.0570705051 #> 194  0.1333217263 -0.1008946798 -0.036526578  0.0642624031  0.1268001100 #> 195  0.2303484756  0.1134096114  0.150770080 -0.1598804700  0.3500822474 #> 196 -0.1007985696  0.1517674597 -0.067141205 -0.3072760688 -0.1046290602 #> 197 -0.0008391796  0.0053841678  0.170446659  0.2138722308 -0.0377462153 #> 198 -0.1323250800 -0.0023470411 -0.139854239 -0.1152629608 -0.1138014041 #> 199  0.0239311758 -0.0662211217  0.176171739 -0.1103471949  0.0834898872 #> 200  0.0301822779  0.2599805993  0.049304678  0.0836911220  0.0279326186 #>            pc145         pc146         pc147         pc148         pc149 #> 1    0.196808156 -4.125044e-02  0.0557312853  0.0899513797  0.0048183153 #> 2   -0.005989975 -1.097927e-01 -0.0512747455  0.0740862232 -0.0454946553 #> 3    0.103633525  2.037002e-02 -0.0567894057  0.0210267213 -0.0295646302 #> 4    0.032190671 -2.301847e-02  0.0519288408  0.0212837765  0.0794932703 #> 5   -0.005349945 -1.142150e-03 -0.1272184935 -0.0255526427  0.0158953556 #> 6    0.004736607 -7.413207e-02  0.0301950908 -0.0129919837 -0.0615261517 #> 7   -0.131107303 -1.784225e-01  0.1214381007  0.0266805066 -0.1374526074 #> 8    0.051290759 -4.891464e-02  0.1447455502  0.0091674627 -0.0330395959 #> 9   -0.088787508  5.358383e-02  0.0203891383 -0.0449472737  0.0959691462 #> 10   0.039989995 -4.453903e-02  0.0286977524  0.1181922661 -0.0035329337 #> 11   0.136314628 -3.447685e-02 -0.0334372732  0.0027593809 -0.0233113807 #> 12   0.066185226  8.664348e-02  0.1477961123 -0.0799831264 -0.0255334808 #> 13  -0.002243971  3.644420e-03  0.0124226244 -0.0053266645 -0.0025635969 #> 14   0.136370210  6.452327e-02  0.0303113370 -0.0956752062  0.0440350857 #> 15   0.172333367 -8.474509e-03  0.1946100140 -0.0970957543 -0.0203505025 #> 16  -0.025516025 -4.142854e-02  0.1065561301 -0.0309388787 -0.0047402117 #> 17   0.032225078  1.540566e-02  0.1943033063 -0.0350385255 -0.0421483972 #> 18   0.071906681 -5.100448e-02  0.0547738549 -0.1416868221 -0.0565634812 #> 19   0.045375333 -1.365388e-01 -0.1164147429  0.1428122345  0.0600357933 #> 20   0.161749030  2.726590e-02 -0.1074302029 -0.1459575464  0.0677428569 #> 21  -0.066594960  3.868709e-02 -0.0054386006 -0.0095359316  0.0303458876 #> 22  -0.025747456  4.324040e-03  0.0791064627  0.1226443715 -0.0216916485 #> 23   0.120810864 -7.353582e-03  0.0380255597 -0.0406327393  0.0534264827 #> 24   0.006614370 -1.182030e-02  0.0489120694  0.0575862209 -0.0004473009 #> 25  -0.063105517 -8.985762e-02 -0.1371539082 -0.0607545971  0.0910163087 #> 26  -0.060838915 -5.135201e-02  0.1616589844 -0.0728424464 -0.0089229149 #> 27  -0.182096503 -8.624858e-02  0.1626195594  0.1519349882 -0.0074302040 #> 28  -0.081497622 -4.249589e-02  0.0078410015 -0.0489528360 -0.0910065174 #> 29  -0.022031635 -3.556728e-02  0.0261439430  0.0481212481  0.0948098716 #> 30   0.018958143 -3.439065e-02 -0.0786236973 -0.0225313824  0.0553372980 #> 31  -0.157318142 -8.797892e-02 -0.0666269706  0.1004521340  0.0213151412 #> 32   0.056601647  7.901379e-02  0.0576701934  0.0657034958  0.0030518668 #> 33  -0.031967931  2.509560e-02 -0.0776504287  0.0948963011  0.0246728145 #> 34  -0.024530961 -8.458741e-02 -0.0019682528  0.0628696908 -0.0080254657 #> 35   0.113984359  3.802065e-02 -0.0364477162 -0.0850082210  0.0399418151 #> 36   0.154322092  1.161084e-01 -0.0266813379 -0.0517429155  0.0277074577 #> 37  -0.004065103 -2.462136e-02 -0.0100580839 -0.0200929861 -0.0065196872 #> 38  -0.050845342 -5.541880e-02  0.0645693877  0.0302986112 -0.0196141285 #> 39   0.083000137  2.378480e-02 -0.0524819078 -0.1612454893 -0.0916333416 #> 40   0.098882970  7.709522e-03 -0.0088819287 -0.0882572619 -0.0188521946 #> 41   0.236472099  5.115813e-02  0.0582494962 -0.0122281460  0.0426595226 #> 42  -0.089973071  1.110839e-02 -0.1109381253 -0.0011576650  0.0096040991 #> 43   0.040160392  1.628338e-01  0.0035491325 -0.0879568070  0.0056951284 #> 44  -0.057565166 -5.211538e-03  0.1353370426  0.1089234589  0.0073940607 #> 45  -0.148129212  5.261802e-02 -0.1265415177 -0.0282790983  0.0406420485 #> 46   0.036079222  6.913984e-02  0.0488021907 -0.1017766579 -0.0014861325 #> 47  -0.085185686 -1.048798e-02  0.1108108293  0.0143060066  0.0183725707 #> 48  -0.071858718  7.933720e-02 -0.0162770883  0.0078064139 -0.0024245037 #> 49  -0.028294147 -1.296347e-01  0.0272373508 -0.0473698724  0.0417351796 #> 50  -0.003177317 -4.885714e-02  0.0595548463 -0.0106305793  0.0753312413 #> 51  -0.049949316  3.897067e-02 -0.0264213048 -0.0825500708  0.0449732559 #> 52  -0.060260746  3.923393e-02 -0.1427418796 -0.0072108173 -0.0259178082 #> 53   0.057929374 -2.612135e-02  0.0907927901  0.0389621443 -0.0109960189 #> 54  -0.118611158 -3.632833e-02 -0.1070786132  0.1280594970  0.0380459100 #> 55  -0.075727190 -2.436253e-02 -0.0946394632  0.0160664035  0.0183761259 #> 56  -0.081336351  5.067300e-02 -0.2012443951 -0.1043259213 -0.0190481972 #> 57   0.046461236  9.470104e-02  0.0416259882 -0.0259724072  0.0582479090 #> 58   0.005617949  1.196312e-01  0.0236467319  0.0246633860  0.0074005329 #> 59  -0.114611032 -4.160856e-02  0.0485097813 -0.0641246981 -0.1116731288 #> 60  -0.085908002 -6.280872e-02  0.0098441734 -0.0243299866  0.0197809057 #> 61  -0.023977124 -1.043338e-02 -0.0446547819  0.0255911898 -0.1041913535 #> 62   0.089050611 -6.471827e-03 -0.0965045106 -0.0200699511  0.0087446715 #> 63   0.051556401  4.723478e-02  0.0137596451  0.0462939329 -0.0139233052 #> 64  -0.127728242  2.646313e-02 -0.1722437840 -0.0214993439  0.0348997144 #> 65  -0.081724454 -3.141257e-02  0.0163115364  0.1429238479 -0.0910335342 #> 66   0.023637971  1.462516e-02  0.0347064925  0.0699664621 -0.0125259501 #> 67   0.068891803  2.826536e-02  0.0515563241 -0.0652098639 -0.0135603606 #> 68   0.020875244 -1.821205e-02  0.0634383581 -0.0046280752  0.0044159368 #> 69  -0.006136892  5.275510e-02 -0.0596682407 -0.0094918307 -0.0488534291 #> 70  -0.160510721  2.022768e-02 -0.1111366045  0.0925191822 -0.0124986252 #> 71   0.026035151  1.569260e-01  0.0291656170  0.0513588508  0.0098530554 #> 72   0.037039988 -4.884828e-02  0.1935208981  0.0079714559 -0.0623391611 #> 73  -0.045478135  2.569383e-02 -0.0579324482 -0.0702325092  0.0458341345 #> 74  -0.039051526 -6.706954e-03 -0.0605653491  0.0254641444  0.0278341742 #> 75  -0.064569065 -8.093882e-02  0.2318283553  0.0359856672  0.0177396368 #> 76  -0.019984259  9.135384e-02 -0.0930270728 -0.0664439804  0.0714321283 #> 77   0.076110676  3.644347e-02  0.0697624153 -0.0389434522 -0.0806865497 #> 78   0.223244159 -6.146151e-02  0.0270027210  0.0034515324 -0.0746346390 #> 79  -0.070933490  7.229852e-02 -0.1644490398 -0.0259239194 -0.0054502062 #> 80  -0.073113250  5.609065e-03  0.0979132329 -0.0026081635 -0.0165045104 #> 81  -0.060102075 -3.389891e-02  0.0551177203 -0.0007146004 -0.0109031672 #> 82   0.007471390 -6.334156e-05 -0.0046312966  0.0023032411  0.0002250081 #> 83   0.020571122  1.843397e-02 -0.1879922492  0.0472274644  0.0438338892 #> 84  -0.038659681  1.507933e-01 -0.3121585205 -0.0511883350 -0.0441422403 #> 85  -0.027893286 -4.129973e-02 -0.0125929638  0.2162603226  0.0186508746 #> 86   0.062473920  5.518053e-02 -0.0738796116 -0.0283408265 -0.1248702356 #> 87  -0.058375422 -5.619067e-02 -0.0131567142  0.0511745861  0.0853226825 #> 88  -0.185642206 -1.921103e-01  0.0177158464  0.1722384104 -0.0679405950 #> 89   0.010445997 -6.871977e-02  0.1684736289 -0.0835267122 -0.0379213364 #> 90   0.007060873  4.259181e-02 -0.0710353963  0.0277949278  0.0572858216 #> 91  -0.068565814 -2.607398e-02 -0.0336332597  0.1198272947  0.0858058923 #> 92  -0.023033379 -8.146712e-04  0.0266432857 -0.0266365804 -0.0156423659 #> 93   0.040424497 -3.416588e-02  0.0431514661 -0.0860052633 -0.0323884934 #> 94  -0.154974584 -3.757757e-02 -0.0282975046  0.0074048024  0.0644762534 #> 95   0.001564509  4.786614e-02 -0.0059338185 -0.0293404070  0.0426354066 #> 96   0.107688828  1.105594e-01 -0.0458496093  0.0502974167 -0.0173743398 #> 97   0.004898193 -1.222314e-02 -0.0084925517  0.0032921465 -0.0022233149 #> 98   0.070168843  5.873081e-02  0.0175266622  0.0320985504 -0.0257713414 #> 99   0.171206627 -6.508327e-03 -0.0953444748 -0.1196201653 -0.0345322674 #> 100 -0.016775427  1.611574e-01 -0.0796201064 -0.1170569360  0.0093844419 #> 101 -0.216231829  2.508302e-01  0.0529022381 -0.0015733686  0.0513936446 #> 102 -0.097363482 -8.139589e-03 -0.0837834870  0.0624162007 -0.2127636402 #> 103 -0.003214657 -1.532737e-01  0.0380205923 -0.1569978659 -0.0249415893 #> 104  0.006789121 -2.687261e-02 -0.0975031995 -0.0662598636 -0.1052711298 #> 105  0.064042987 -4.191197e-01 -0.1629898821 -0.0081369300 -0.2262830589 #> 106 -0.090552708  4.989576e-02  0.0246057941  0.0588233851  0.0123076882 #> 107  0.103282719 -2.189007e-01  0.2746765938  0.0807045052  0.1346567690 #> 108  0.010382678  2.856478e-02 -0.0586159011  0.0822161072  0.0892533001 #> 109 -0.138416886  1.987099e-01 -0.0269282441  0.0080458304 -0.1325715072 #> 110  0.053917928 -1.696857e-01 -0.1378637791  0.0187119908 -0.0859339726 #> 111 -0.108820757 -8.246920e-02  0.0603362786 -0.0584247744 -0.0132083950 #> 112 -0.023363429  1.593119e-01  0.0008930751 -0.0336642123 -0.0034062766 #> 113 -0.152851252 -2.758380e-02 -0.1113670902  0.0250603122 -0.0034316721 #> 114  0.244054966  9.335325e-02 -0.0450548206  0.2035165945  0.1157728121 #> 115  0.050498990  2.916339e-02 -0.0763204020  0.1392483013  0.1697350826 #> 116 -0.023460042 -8.852484e-02  0.0185376938  0.0141432251  0.0116306924 #> 117 -0.215330537  5.631249e-03  0.0513415948 -0.1088723185 -0.1185252090 #> 118 -0.110789496  1.588982e-01 -0.1158839740  0.0986297853  0.0063870572 #> 119 -0.118366564 -7.642185e-02 -0.1824571485 -0.0525655278  0.2334622577 #> 120 -0.021926017  1.077910e-01 -0.0231463065  0.1482022673 -0.2092730427 #> 121  0.124428343  7.261546e-02  0.0271033542  0.0829704911 -0.1482541649 #> 122 -0.083814053  4.332333e-02  0.0969381497 -0.0669536889 -0.0607962061 #> 123  0.036052717  9.451879e-02  0.0964037861 -0.1875492191  0.0051444183 #> 124 -0.045046465 -7.190601e-02  0.1001556723  0.0416138889  0.0122869747 #> 125  0.203394762 -7.062887e-02 -0.0682700521  0.1898592737  0.0686137185 #> 126 -0.120564307 -7.286909e-02 -0.0926404608  0.1223399928 -0.0267386766 #> 127  0.058986783  1.032763e-01 -0.0522387702 -0.0006819818  0.0623256208 #> 128  0.326405838 -1.498509e-01  0.0631546716 -0.1345636580 -0.0005129855 #> 129 -0.037284104 -2.454844e-01  0.1297707721 -0.1735782015 -0.0438685849 #> 130  0.031274753  5.917143e-02  0.0727948540 -0.0391846918 -0.1425235715 #> 131 -0.084566407 -1.468447e-01  0.0717589338  0.0391351961  0.0210172938 #> 132 -0.240832434  2.269123e-02 -0.0928201435 -0.1354210156  0.0101147888 #> 133  0.118517131  1.967417e-01  0.0094580544 -0.1053286055 -0.0592438317 #> 134 -0.262531659 -5.349338e-02  0.0038391537 -0.0753462797 -0.1749382429 #> 135  0.088492187 -3.826438e-02  0.0869549958  0.0528997982  0.0560344744 #> 136  0.140746974 -1.343938e-01 -0.1640994559 -0.2035840980  0.0545003750 #> 137 -0.160719650 -1.811020e-01  0.0311979010  0.0095025349 -0.0265713009 #> 138 -0.099342538 -3.889288e-02  0.1883268525 -0.0566263178  0.1088646845 #> 139  0.139095682  1.470178e-01  0.1122682973  0.0659278642  0.0428831724 #> 140 -0.148285830 -2.296781e-01 -0.1093029332 -0.2077166386  0.2417713666 #> 141  0.265185417 -9.206148e-02  0.1907374790 -0.1321618740 -0.0348304107 #> 142  0.021657091  2.247719e-01  0.0795095725 -0.0983314070 -0.1672446861 #> 143  0.026425177 -5.550259e-02 -0.0099591715 -0.1148188581  0.0893460076 #> 144 -0.078634869 -7.090494e-02 -0.0402302345 -0.0004383494 -0.0837154952 #> 145  0.150578079 -9.998350e-02 -0.1722495380 -0.1236995130  0.0840580624 #> 146  0.200730334 -1.290871e-01 -0.2127001027  0.0727330570  0.0229291273 #> 147  0.046209258  1.314673e-01  0.0970840957  0.0373814884 -0.0167249284 #> 148 -0.137620573  1.721496e-01 -0.1702362174 -0.0071255367  0.0054567149 #> 149  0.078223546  6.724305e-02 -0.0665330903  0.1229298968 -0.1778551962 #> 150 -0.097734289 -1.726098e-03 -0.0173573979 -0.2351195833  0.0966582127 #> 151 -0.048627144 -2.156456e-02  0.1171779180  0.1472403381 -0.1266631824 #> 152  0.101231654  1.501735e-01 -0.0118312728 -0.1371851737 -0.0615232807 #> 153 -0.115704370 -3.681569e-02  0.1027814754  0.0087171536  0.0680382318 #> 154 -0.109232417  5.228289e-02  0.2514803928  0.1240711104 -0.0085547766 #> 155 -0.011804696 -1.381210e-01  0.1008586553 -0.0362145377  0.1016853070 #> 156 -0.020884002  1.846661e-01  0.0153882136  0.0157663961  0.0961720985 #> 157  0.042305656  1.517510e-01  0.0940494939  0.0602721527  0.0043065260 #> 158  0.103469449  7.060642e-02  0.1677700629  0.1552563685  0.1859344038 #> 159  0.256408756 -1.285444e-01 -0.2280356307  0.0635367592  0.0378897923 #> 160  0.049637094  8.028882e-02 -0.0168351646 -0.0931948811  0.0347839038 #> 161  0.152408383  2.386798e-02  0.0408513519 -0.2028604956  0.0447520920 #> 162  0.037592000  1.070670e-01 -0.0832217295  0.0939093452 -0.0116959356 #> 163 -0.110901788  2.848744e-02 -0.1316560754 -0.0284212944 -0.0025300374 #> 164  0.157549843 -5.010338e-02 -0.0602838673  0.0878693806 -0.1083895374 #> 165  0.055810609  9.468560e-04 -0.1001194678  0.0004295906  0.3141593361 #> 166 -0.087519325  4.192859e-02  0.1961551286 -0.1810092712 -0.0296214112 #> 167  0.256598634  1.527196e-01  0.0356889877  0.0426530364  0.1507475375 #> 168  0.128516898  6.820165e-02 -0.1137707266  0.2043975821  0.0023037492 #> 169  0.022275437 -3.254939e-02  0.0797229351 -0.0798910500  0.1132260228 #> 170 -0.122526166  7.679848e-02 -0.0411315607 -0.0152992787  0.1105198570 #> 171  0.023846766  1.919937e-01  0.1179478882  0.0831019616 -0.0635794025 #> 172  0.067174550  5.291086e-02 -0.0899517605  0.0318955874 -0.1569442165 #> 173 -0.003314746 -1.467336e-01  0.0841911044  0.1714745947  0.0172301826 #> 174 -0.048741483  1.938099e-03 -0.0852812565  0.0712083202  0.0216033854 #> 175 -0.028595355 -2.869208e-02 -0.1885828194 -0.0909428649 -0.0694945715 #> 176 -0.135539277 -1.024170e-01  0.1367519791 -0.0945834419  0.1467911666 #> 177 -0.034743797  1.913154e-01  0.1017089455 -0.0820626099 -0.0314622618 #> 178 -0.203986334  1.266100e-01 -0.1652684927 -0.0926884961 -0.0934197710 #> 179 -0.297730472  5.981496e-03  0.0512392512 -0.0693653237  0.0818717078 #> 180  0.200988322 -3.068507e-01 -0.1031832768  0.1213353043 -0.1530633503 #> 181  0.024588638 -4.171533e-02 -0.1103933936  0.1362537453  0.0002067081 #> 182  0.083455691 -1.062458e-01  0.0213585837 -0.1833176553  0.0518538789 #> 183  0.083369541 -9.775034e-02 -0.0898438486 -0.1420460061 -0.1091398974 #> 184  0.054601927 -2.641180e-02 -0.2103037077 -0.0249234582 -0.1745502008 #> 185  0.075355806  1.555913e-01  0.1297967359  0.1397458132 -0.1217763981 #> 186 -0.008510108 -8.167814e-02  0.0274443613 -0.0200103055 -0.0788768865 #> 187 -0.011553055 -1.119468e-01 -0.0609324194  0.1632519716 -0.0206752886 #> 188 -0.023920830  2.176658e-01  0.0847652460  0.0691592406  0.0773940383 #> 189 -0.260815661  1.041403e-01  0.1081145102  0.2155386401  0.0338296440 #> 190  0.062534833  2.022992e-01  0.0305866180 -0.0865871139 -0.1889646937 #> 191 -0.057828712  2.279412e-01 -0.0214160841  0.1405905283  0.1493796483 #> 192 -0.084455931 -1.476005e-01  0.0151972225  0.1178947918 -0.0601803290 #> 193  0.029016635  3.111632e-02 -0.0562159624  0.0791225163 -0.0255227570 #> 194 -0.030005958  1.761568e-01 -0.0308730570 -0.0386550522  0.0871013911 #> 195  0.005334806 -2.523429e-01  0.1085470131  0.0971975116  0.0970326545 #> 196 -0.027799504  4.188259e-02  0.1586219312 -0.0582055825  0.0847895732 #> 197 -0.283158913 -1.839015e-01  0.0369268643 -0.1897310693 -0.0240967991 #> 198  0.092959377 -7.479042e-03 -0.0268775415  0.0846147268  0.0636660811 #> 199  0.140079921 -1.627186e-01 -0.0839040935  0.0524249081  0.1411289433 #> 200  0.189110228 -1.033145e-03  0.1038308204  0.0074630995 -0.0896742575 #>             pc150         pc151         pc152         pc153         pc154 #> 1    0.0299425868  0.0811486402  0.0161134836  0.0648726615 -0.0509236407 #> 2   -0.0146435066 -0.0226090957 -0.0276971644  0.0329506568 -0.0301287437 #> 3   -0.0069708650  0.0063601674  0.0067718989  0.0075165935  0.0109704299 #> 4   -0.0808905097 -0.0518374505  0.0133408251  0.0477236247 -0.0235231502 #> 5    0.0285050924  0.0170443209  0.0003412403  0.0299213651  0.0472249452 #> 6    0.0207895122 -0.0036661826  0.0029599186 -0.0466933539 -0.0185206807 #> 7    0.0715084548 -0.0257213591 -0.0234404828 -0.0032863909  0.0406635261 #> 8    0.0113839558 -0.0020143338 -0.0288299041  0.0143686630 -0.0249193841 #> 9   -0.0424120245  0.0491365736  0.0617204034 -0.0577616572 -0.0564437317 #> 10  -0.0262449353  0.0316835972  0.0060537028 -0.0179555717 -0.0201723221 #> 11  -0.0165208271  0.0293161587  0.0154282239 -0.0096762487 -0.0621797754 #> 12   0.0298785720  0.0572694927  0.0245674905 -0.0314574128  0.0132696612 #> 13   0.0014318432  0.0002785885  0.0005704101  0.0002316529 -0.0006795869 #> 14   0.0364242200  0.0301646113  0.0340302229  0.0378017060  0.0050930222 #> 15  -0.0367542734  0.0196855421  0.0358507688 -0.0252070249  0.0200382582 #> 16   0.0333914908 -0.0082198967  0.0033677754  0.0014709865 -0.0016512015 #> 17   0.0018276485 -0.0031100883 -0.0319676174  0.0270043469  0.0463236132 #> 18   0.0398380316  0.1004934800  0.0379061127 -0.0376218491 -0.0157134161 #> 19  -0.0367051680  0.0148294011  0.0043198470  0.0301543894 -0.0328596967 #> 20  -0.0236791032 -0.0274306350  0.0109799188  0.0178323871 -0.0272699404 #> 21  -0.0115067698 -0.0316921722 -0.0061516909 -0.0101019888  0.0074326660 #> 22  -0.0829103454 -0.0067571700 -0.0458167574  0.0446355312  0.0222917500 #> 23   0.0133763843  0.0047914657  0.0277889888 -0.0103808853 -0.0291313118 #> 24  -0.0291509795 -0.0055156351 -0.0403492113  0.0674555948  0.0109507001 #> 25  -0.0852183933  0.0181648913  0.0357089284 -0.0466825526 -0.0437201638 #> 26   0.1162603395 -0.0086587729  0.0392482778 -0.0420013761 -0.0398766405 #> 27   0.1156899404 -0.0698971574 -0.0240608061  0.0432074031  0.0223789466 #> 28   0.0577190993  0.0469841544 -0.0140377949  0.0169266415  0.0295147300 #> 29  -0.0109399512 -0.0492738628 -0.0110999108  0.0125720287 -0.0337744618 #> 30   0.0144225518 -0.0623602088 -0.0043118354 -0.0297614792  0.0185988090 #> 31  -0.0934037858 -0.0946717878 -0.0377773732  0.0233439247  0.0424241377 #> 32  -0.0177183273  0.0058230297 -0.0255298886  0.0219351656  0.0308754133 #> 33  -0.0517408732 -0.0012747954 -0.0179150930 -0.0335909846 -0.0325456856 #> 34  -0.0406345677  0.0158590671 -0.0026422711  0.0240325004 -0.0225641547 #> 35   0.0761662331 -0.0162705825  0.0165285092 -0.0307427446  0.0113460834 #> 36  -0.0039296876  0.0109852781  0.0165732524 -0.0122793930 -0.0098618958 #> 37  -0.0673396342 -0.0222051477 -0.0133072226 -0.0452024885 -0.0013950553 #> 38  -0.0502170971  0.0534328340 -0.0184303804  0.0006438092 -0.0125624701 #> 39   0.0616331685  0.0352117553  0.0302680854 -0.0648579870 -0.0202277375 #> 40  -0.0101678480 -0.0104301780  0.0002246206 -0.0027372307  0.0122521291 #> 41   0.0443810458  0.0226451335 -0.0101751381  0.0434397567 -0.0374067221 #> 42   0.0060913544 -0.0116606963 -0.0440886586 -0.0096181297  0.0031221371 #> 43   0.0145233344 -0.0092081458 -0.0269909020 -0.0120186763  0.0472093543 #> 44  -0.0287541017  0.0041592325 -0.0257624202  0.0145603698  0.0192005845 #> 45   0.0165737823  0.0228481920  0.0116727336 -0.0165219842  0.0356901482 #> 46   0.0418859254  0.0163197969  0.0673135300 -0.0524526359 -0.0254248753 #> 47  -0.0380042982  0.0165894118  0.0055831231 -0.0320549589 -0.0493337884 #> 48   0.0529473044  0.0168981167  0.0180204985  0.0359685607  0.0368610687 #> 49   0.0290034142 -0.0072430913  0.0640270146  0.0148287560 -0.0173180474 #> 50  -0.0114052361  0.0403185171  0.0255506993 -0.0027400073 -0.0223629242 #> 51   0.0208944865  0.0062103042  0.0106171004 -0.0238781076  0.0019298440 #> 52   0.0152711897 -0.0311563420 -0.0473982449 -0.0022815667  0.0386719515 #> 53   0.0902207620  0.0480489920  0.0119658027  0.0264236192 -0.0368360792 #> 54  -0.0888809744 -0.0352836964 -0.0252174540  0.0382555185 -0.0104964216 #> 55   0.0412633194  0.0230873315  0.0214014072 -0.0115276102  0.0095796658 #> 56  -0.0127933507  0.0220290574  0.0145369937 -0.1300577320  0.0186679652 #> 57   0.0390866963 -0.0331650245 -0.0160127990 -0.0573516926 -0.0457086694 #> 58   0.0038185811  0.0006864218 -0.0223816255 -0.0425088005 -0.0008334010 #> 59   0.0089198585  0.0115972896 -0.0358317447 -0.0506530578  0.0051814383 #> 60  -0.0115120083  0.0261787177  0.0566427466 -0.0427660566 -0.0427173522 #> 61  -0.0295028396 -0.0002620601 -0.0324867092  0.0362692505  0.0094770825 #> 62  -0.0129793412  0.0431885164  0.0126337661  0.0138741768 -0.0040453547 #> 63  -0.0794824288 -0.0567389863 -0.0304998895 -0.0125160676 -0.0332400474 #> 64   0.0206220142 -0.0549205780  0.0115797893 -0.0163055145  0.0421599984 #> 65  -0.0726283928 -0.0721448258 -0.0724375499 -0.0253225667  0.0125628232 #> 66  -0.0161612948  0.0070221991 -0.0082503852  0.0093468170 -0.0277084650 #> 67   0.0257900358  0.0283867541 -0.0022127857  0.0042341594 -0.0001711591 #> 68   0.0622359269  0.0155717679  0.0148711655  0.0063053214  0.0174914369 #> 69   0.0264525501 -0.0254974734 -0.0442036227  0.0044246147  0.0245022782 #> 70  -0.0119274294 -0.0372566945 -0.0327104846 -0.0004393796 -0.0098194141 #> 71   0.0465121927 -0.0413081273 -0.0173339340  0.0580647855  0.0859844672 #> 72   0.0855733896  0.0480968745  0.0127380772  0.0465830751  0.0154045833 #> 73  -0.0053382232 -0.0464708789  0.0038335372 -0.0110102181  0.0285139140 #> 74  -0.0226135278 -0.0273718459  0.0119218268  0.0096320007 -0.0034912645 #> 75   0.0384888277  0.0280660589  0.0083487977  0.0137359049 -0.0135642239 #> 76  -0.0126503386  0.0087374106  0.0132471537  0.0007026123  0.0038080379 #> 77   0.0479383002 -0.0273943149 -0.0165446414  0.0111204089  0.0325060774 #> 78  -0.0219192225 -0.0250805931 -0.0284415633  0.0450749669  0.0442359655 #> 79   0.0589688176 -0.0120582457  0.0163541350  0.0139662664  0.0571294771 #> 80   0.0098542624 -0.0048958421  0.0187890571 -0.0278645269 -0.0158423991 #> 81  -0.0076372694 -0.0481106459 -0.0520585087  0.0191065519  0.0226716214 #> 82   0.0040253370 -0.0112741157 -0.0021358644  0.0048275596  0.0002908795 #> 83  -0.0848764648 -0.0040332483  0.0428498283  0.0249589006 -0.0460739681 #> 84  -0.0674201139 -0.0269636740 -0.0200256469  0.0389599499  0.0850048894 #> 85  -0.0115832010  0.0350248443 -0.0232837935  0.0530868091 -0.0279206579 #> 86   0.0693761534 -0.0259052673 -0.0353371487 -0.0301814565  0.0385366532 #> 87   0.0128175731  0.0035610224  0.0298217551  0.0121931311  0.0017556278 #> 88  -0.0435457460  0.0285524270  0.0247657789 -0.0162535855 -0.0730742107 #> 89  -0.0307400183  0.0331942580  0.0230989913 -0.0882691772 -0.0154611749 #> 90  -0.0326509743 -0.0046980355  0.0369194065  0.0003195318 -0.0151757917 #> 91  -0.1241067535 -0.0445030785  0.0122871737  0.0243017949 -0.0483062551 #> 92   0.0032865442  0.0234936674 -0.0166907129  0.0159668023 -0.0044948932 #> 93   0.0269315201  0.0516800334  0.0268045299  0.0022242930 -0.0222715606 #> 94  -0.0006814833 -0.0585482425  0.0119272713  0.0191495520 -0.0075441230 #> 95   0.0455947964  0.0742736239  0.0107014988  0.0263587089  0.0340920530 #> 96  -0.0627932061  0.0003420018 -0.0246943111  0.0135337456 -0.0045218832 #> 97   0.0101165388 -0.0044892071  0.0022656207  0.0043989491 -0.0029288087 #> 98   0.0176072506 -0.0236626182 -0.0058721312  0.0006429286  0.0220774390 #> 99  -0.0695254719 -0.0046100991 -0.0202338895  0.0203018629  0.0622910296 #> 100  0.0477070542 -0.0104933099  0.0124922253 -0.0186406489  0.0332916390 #> 101 -0.0579695081 -0.1084487260 -0.0272463045  0.0823900201  0.0413216643 #> 102  0.0465271873  0.0846365634  0.0336870934 -0.1503769298  0.0327542201 #> 103 -0.1189660887 -0.0771207868 -0.0804436986  0.1057531992 -0.0158491839 #> 104 -0.1161846033 -0.0405703847  0.0701000587  0.0766405427 -0.0161380253 #> 105  0.0656475282 -0.0130522425 -0.0133495536  0.1100159000  0.0868256596 #> 106  0.0984380950  0.1130408034 -0.0512507214  0.1530601824 -0.0751222221 #> 107 -0.1640648912 -0.0525278625  0.2388310196 -0.1255696229  0.2080034062 #> 108  0.0225765687  0.1853587005 -0.0983169839  0.0608262412 -0.0281140586 #> 109 -0.0974346089  0.0362899097  0.0338334825 -0.0180350727  0.0051518653 #> 110  0.0072678107 -0.0872896659 -0.0228228962 -0.0371498390  0.0699682511 #> 111 -0.2183035444  0.0041529382 -0.0888031838 -0.0261458221 -0.0347188478 #> 112  0.1117834513 -0.1587370808  0.1035011221  0.0215035861 -0.0107832314 #> 113  0.0756670186  0.0506818291  0.1640667645 -0.0840970239 -0.0077278592 #> 114  0.1324056475 -0.0940295995 -0.0358012341 -0.0920426214  0.0257970848 #> 115  0.0199496782 -0.0531911903  0.0962686777  0.0307363932  0.0206995118 #> 116  0.0432933432  0.0043764847 -0.1353118851 -0.0569928356 -0.0435431734 #> 117  0.0458589663 -0.1595292424  0.0684181519  0.1081252898 -0.0882882715 #> 118 -0.2337534333 -0.1652728097 -0.0478353815  0.0023112851 -0.0734303101 #> 119 -0.0775486963  0.0055670088 -0.0026386532 -0.0312929816  0.1329068630 #> 120  0.0441107459 -0.0265141993  0.0055726817 -0.0092515615  0.0293889832 #> 121  0.0312455975  0.0989023790  0.0422876940  0.0330182355 -0.0014241610 #> 122 -0.1080177561 -0.0293116097  0.0535575503  0.1033398556 -0.0002664906 #> 123  0.0120834080 -0.0051881816  0.0941034757 -0.1366272174 -0.0613217884 #> 124 -0.0199125835  0.0817580051  0.0116621068 -0.0469823455 -0.0268692861 #> 125 -0.0698542980 -0.0306999756 -0.1068645921  0.0774159706  0.0079664863 #> 126  0.0342489605 -0.0658163385  0.1108720193  0.0100180735  0.0620460179 #> 127 -0.1627247164  0.0514381144  0.0481977416  0.0023963771  0.0125948560 #> 128 -0.1190927720 -0.1370238474 -0.1153741052  0.0134228279  0.0390690708 #> 129  0.0507963379 -0.0301189795 -0.0270877708  0.1360176549  0.0541580736 #> 130 -0.0698014561  0.0023314098  0.0252513508 -0.1423823521 -0.1501861188 #> 131 -0.1012475280 -0.1268695018 -0.1217642543 -0.1063397022  0.1316312680 #> 132  0.0138166974  0.0609597594  0.0235028853  0.1669839221 -0.0138327812 #> 133  0.0894921640  0.0737420736 -0.0595272268 -0.0270455417 -0.0502138711 #> 134 -0.0351647404  0.0128266717  0.0378542180  0.0494970632 -0.0783453602 #> 135 -0.1193600402 -0.0767167744 -0.0238170738 -0.1017096787  0.0155256055 #> 136 -0.0300992855  0.1403966094  0.0314052222  0.0351856182 -0.1286308751 #> 137  0.0948543756  0.1345213578  0.0688028811  0.0150451647  0.1343665006 #> 138  0.0755059396 -0.0652621687  0.0368851140  0.1045448045 -0.0666165446 #> 139 -0.0935531403 -0.1348797006  0.0801845333 -0.0254669183 -0.0382551273 #> 140 -0.0378200127  0.0685309259 -0.0817214086  0.0371286272 -0.0296180506 #> 141 -0.1839884900 -0.0197538963  0.0483720543 -0.0259036598 -0.1092289660 #> 142 -0.0920239057  0.0564053055  0.0973202377  0.0723460173 -0.1075934365 #> 143 -0.1672624955  0.1048831664 -0.0949237653 -0.1131076956  0.0876904326 #> 144  0.0442088685 -0.0264277128 -0.1139126438 -0.0226025265  0.0542952597 #> 145  0.1536987443  0.1222140857 -0.1225921390 -0.0286190492 -0.0431076042 #> 146 -0.0189258775  0.1330941447  0.1865550725  0.0723075556  0.0395258437 #> 147 -0.0449717672  0.0820728390 -0.1201387606 -0.0706704784  0.0361627120 #> 148  0.1258812172  0.1004274953 -0.0309526799 -0.0911664562  0.1579651809 #> 149  0.1247376031  0.0250931890 -0.0322947391 -0.0027092371 -0.1797351778 #> 150 -0.0431298018 -0.1003238008 -0.0326872778  0.0578350166 -0.0619239185 #> 151 -0.1245247498 -0.0304039709  0.0442219103 -0.0925751267 -0.0675553416 #> 152 -0.0177299065  0.0837836304 -0.0175671462 -0.0070029390 -0.0242839056 #> 153  0.0824086550  0.0591102016  0.0304003524 -0.0241046155 -0.0479167297 #> 154  0.0289966846  0.1176272720 -0.0241177575  0.0237246159 -0.0857643978 #> 155  0.0077067949 -0.2076085149 -0.0365864915 -0.0638700457 -0.0215317865 #> 156 -0.0803807620  0.1368754208 -0.0094679444  0.0678926405  0.0626427490 #> 157  0.0147469514  0.0186089188 -0.0570428812  0.0276075708  0.0780898970 #> 158 -0.0612006552  0.1643444780 -0.0850844043  0.0281601851 -0.0144924354 #> 159  0.0784621864 -0.1734389997  0.0441731405  0.0647841060 -0.0834501702 #> 160  0.0617828821 -0.0772779528 -0.1009967047 -0.0549909599  0.0728004816 #> 161  0.0182746387  0.0459940523 -0.1414101731 -0.0187497997  0.0310848884 #> 162 -0.0908809324  0.1190930900 -0.0922142145  0.0577700327 -0.0168933249 #> 163  0.1912155693 -0.0418716718 -0.1436416905 -0.0442735297 -0.0428620248 #> 164  0.0958159756 -0.0073081591 -0.1037877468 -0.0232349014  0.0564978191 #> 165 -0.0825398966 -0.0326514098  0.0188315235 -0.1768020334 -0.0813048757 #> 166 -0.0155244377 -0.0855272708 -0.0740082805 -0.0073915254  0.0675394898 #> 167  0.1864470370 -0.0843908196 -0.0267174305  0.1284555705 -0.0362439230 #> 168  0.2243193628 -0.1888748505  0.0806154120 -0.0255458226  0.0178290964 #> 169  0.1356939176 -0.1385091526  0.1482653727 -0.0754049900  0.0246625127 #> 170  0.1032711402 -0.0518375472  0.1177033165  0.0201565140  0.0062138773 #> 171  0.0214804094  0.0457478489  0.0140990686  0.0298435876  0.1716414097 #> 172 -0.0568871753 -0.1624716183  0.0436891550 -0.1379240147 -0.0252449035 #> 173  0.0516342030 -0.0237160694  0.1406470211 -0.1768730648 -0.0331461521 #> 174 -0.0658273318  0.1834992982  0.2085741022  0.0476224115  0.1051634767 #> 175  0.1239778908  0.0508655934  0.0367977115 -0.1054710215 -0.0679723920 #> 176 -0.0710925090  0.0681469342  0.0652835960  0.0449535173  0.0771434139 #> 177  0.0616163876  0.0574689139  0.1059450623  0.0243379989  0.0433054172 #> 178 -0.0021481488  0.0369715153  0.0461005679 -0.0312784874 -0.0146967483 #> 179  0.0989936525 -0.1491935746 -0.0491469452  0.0308057524 -0.1818761483 #> 180  0.0745883078  0.0899392979  0.0714339031 -0.0941502196  0.0421997452 #> 181 -0.0462204592 -0.0146822750 -0.0765188778 -0.1235126582 -0.0564977367 #> 182 -0.0297733486 -0.0346599283 -0.0148446471 -0.0100919687  0.1334634266 #> 183  0.0546975702  0.0221340286  0.0741308878 -0.0001824812 -0.0777823190 #> 184 -0.2466215341  0.0302303332  0.1073509639  0.1798649549 -0.0243864110 #> 185 -0.0949362148 -0.0614172422  0.0413791188  0.0042706880  0.0705541107 #> 186  0.0967637698 -0.1513674681 -0.1951996595 -0.0140183894 -0.0040989940 #> 187  0.0493485853 -0.0330315552  0.0542253693  0.0111107169 -0.1062079197 #> 188  0.0977583139 -0.1008223848 -0.1051510698  0.0535012670 -0.0350790116 #> 189  0.0693812245  0.1862283951 -0.0791433114 -0.1017463828 -0.0021483118 #> 190 -0.1492527708  0.0003307910 -0.0214166615  0.0740829800  0.0771176727 #> 191  0.0226973171 -0.0473456837  0.1129319642  0.1502998782  0.0631104405 #> 192 -0.0734330170  0.0062133739 -0.0354678779  0.0030544855  0.0045338540 #> 193 -0.0417583988  0.2050199130 -0.1959628156 -0.1303302834  0.0137256746 #> 194 -0.0855985946  0.0919854316 -0.0359688079 -0.0550581730 -0.0468053506 #> 195  0.0485930892  0.2381148014 -0.0645583768  0.1462153933 -0.0405603528 #> 196  0.1555277500  0.0810024478  0.1016207718 -0.0592958158  0.0202593252 #> 197  0.0488451406 -0.0571269554 -0.0485620378  0.0118913762  0.0628722721 #> 198 -0.0654422611 -0.0286611879  0.0227149633  0.0372460119 -0.1231524472 #> 199  0.1509209430  0.0222124879 -0.0360066188  0.0877468753  0.0240981640 #> 200  0.0897307595 -0.1118232042  0.0222730658  0.1303909958  0.0836626545 #>             pc155         pc156         pc157         pc158         pc159 #> 1    0.0080916865 -0.0024587159 -0.0175695179  1.975474e-02  4.054061e-02 #> 2   -0.0245039248  0.0240808543  0.0067839877  6.952233e-03 -7.464743e-03 #> 3   -0.0055538102  0.0188989764  0.0071788528  3.841205e-03 -4.621311e-03 #> 4    0.0264543848  0.0056439178  0.0069923577 -1.388992e-03 -1.021652e-02 #> 5    0.0181315974  0.0091122332 -0.0291267723 -3.932854e-04 -2.559073e-02 #> 6   -0.0244219632 -0.0194395466  0.0001897197  6.332072e-05 -1.234631e-03 #> 7   -0.0303379928  0.0063252782 -0.0140994536  4.867212e-03 -2.510303e-02 #> 8   -0.0314213133  0.0118874948 -0.0059027595 -4.960322e-03 -1.356628e-04 #> 9    0.0149145130 -0.0414773514 -0.0360154079  5.354249e-03 -1.473462e-02 #> 10   0.0117486943  0.0016456429  0.0027774449  7.621446e-03  1.878038e-02 #> 11  -0.0273430162 -0.0161337228 -0.0092306277  7.213766e-03 -2.286798e-03 #> 12  -0.0325491959 -0.0240954721  0.0138825582  6.716437e-03  7.426573e-03 #> 13   0.0006424257 -0.0036823487 -0.0012063464  1.055997e-05  7.049517e-06 #> 14  -0.0015073014  0.0008643930 -0.0228896868 -1.554342e-02 -2.105819e-02 #> 15  -0.0204850627 -0.0397725211  0.0251804536 -4.886580e-03  4.102145e-03 #> 16  -0.0358624761 -0.0138963956 -0.0059496039 -7.163673e-03 -8.967480e-03 #> 17  -0.0359358744 -0.0122790448  0.0045513203 -1.081910e-02 -1.543721e-02 #> 18  -0.0506371748 -0.0327391281 -0.0426208686 -1.301505e-02  8.896360e-03 #> 19   0.0264770359  0.0242770844 -0.0206804754  3.284588e-03  3.821903e-02 #> 20   0.0038236208 -0.0135732843 -0.0015360479 -6.180257e-04  3.810738e-04 #> 21   0.0410563246 -0.0057665176  0.0327165456 -1.123362e-02  1.485681e-02 #> 22  -0.0138416907 -0.0198328468  0.0157360819  2.144759e-02 -2.501668e-02 #> 23   0.0184318089 -0.0131514882 -0.0044313394 -4.642861e-03  1.690899e-02 #> 24   0.0109639845  0.0107957520  0.0063875659 -5.565511e-03  1.061376e-04 #> 25   0.0215154436 -0.0133852445 -0.0106549836  5.003818e-03 -4.646280e-03 #> 26   0.0103071597 -0.0188430137 -0.0138088812 -6.784932e-03  2.531604e-02 #> 27   0.0325117483  0.0011516974  0.0141057608 -8.809747e-03  2.897132e-02 #> 28  -0.0140499521 -0.0067072607 -0.0192334443 -1.765579e-03 -1.462899e-02 #> 29   0.0278694816  0.0038265617  0.0039816181  1.022507e-04  2.292995e-02 #> 30  -0.0184483673  0.0018217247  0.0102956514 -1.219728e-03  1.017179e-02 #> 31   0.0385527242  0.0314735144  0.0223180201 -9.768528e-03 -2.103761e-02 #> 32  -0.0258980405  0.0073839699  0.0021773324  1.281452e-02 -3.495682e-02 #> 33   0.0006602662  0.0007927793  0.0096262281  1.103144e-02  9.786054e-03 #> 34  -0.0021264577  0.0034123087 -0.0181679654  7.076958e-04 -9.979322e-03 #> 35  -0.0093418988  0.0173546856 -0.0017449779 -1.995801e-02  1.627536e-02 #> 36  -0.0033558692  0.0282773838 -0.0083665459 -5.172021e-03  9.238634e-04 #> 37  -0.0251421946 -0.0137241041  0.0184741668 -5.765232e-03  1.289649e-03 #> 38  -0.0175378234  0.0031820429 -0.0082727958 -1.366236e-02 -1.620311e-02 #> 39  -0.0576923983 -0.0048905140 -0.0094468871 -3.396818e-03 -1.201095e-02 #> 40   0.0011251153 -0.0050810085  0.0240573389 -9.223012e-03  7.601967e-03 #> 41  -0.0057130939 -0.0092305677  0.0101596821 -6.805442e-03  4.860027e-02 #> 42  -0.0116915061  0.0219280071 -0.0025992900  3.482713e-04 -2.414825e-02 #> 43   0.0254499067  0.0111974906  0.0464395105 -7.202920e-03 -1.352723e-03 #> 44  -0.0068939543  0.0062594412  0.0117624470 -4.315248e-05 -5.389291e-03 #> 45   0.0229453574  0.0017854475 -0.0006305655  1.993032e-02  2.086689e-04 #> 46  -0.0172003523 -0.0234110717 -0.0066155531  5.016438e-03  2.074358e-02 #> 47  -0.0030084761 -0.0299093830  0.0077776243  4.038158e-03  1.059800e-02 #> 48   0.0218946487 -0.0200078460 -0.0003132565  1.251709e-02 -3.509786e-03 #> 49   0.0454908921 -0.0011734320 -0.0190700943 -1.460294e-02  2.554881e-03 #> 50   0.0331310496  0.0009478783  0.0023676985 -8.049397e-03  2.868680e-02 #> 51   0.0029429419 -0.0332389111  0.0095749846 -1.627910e-03  7.023541e-04 #> 52   0.0041684701  0.0226933358 -0.0049627383 -2.266575e-03 -2.127265e-02 #> 53  -0.0272407574 -0.0195469195 -0.0306736716  3.206390e-02  2.360591e-03 #> 54   0.0175338894  0.0149577499  0.0024776260  6.801375e-03 -6.104608e-03 #> 55   0.0200221555  0.0097813860 -0.0230476987  6.565503e-03  4.113384e-03 #> 56  -0.0501558861  0.0046129937 -0.0118581924 -6.316922e-03 -1.694434e-02 #> 57  -0.0162696183 -0.0117683825  0.0356401322 -1.754507e-03  2.110972e-02 #> 58   0.0079762652  0.0141575118  0.0333301476  7.480867e-03 -5.018109e-04 #> 59  -0.0578445608  0.0086475048 -0.0155626572 -1.358226e-02 -3.660539e-02 #> 60   0.0075916073 -0.0117879370 -0.0301045606 -9.699924e-03 -2.226910e-03 #> 61  -0.0320964089  0.0083267899 -0.0423513457  4.342332e-03 -5.479006e-02 #> 62  -0.0078774755  0.0045762047 -0.0191491867  4.839621e-03  3.046652e-02 #> 63   0.0001405987  0.0119642480  0.0640787765  1.236368e-02  1.809995e-02 #> 64   0.0362316981  0.0163019700  0.0039572083 -8.011001e-03 -2.617822e-03 #> 65  -0.0293518799  0.0173935748  0.0377836508  5.006595e-03  1.627380e-02 #> 66  -0.0254533852  0.0063310873  0.0119777824  1.151919e-02 -1.499324e-03 #> 67  -0.0048006365 -0.0132584358 -0.0050408783  1.692572e-03  9.233453e-03 #> 68  -0.0070177039 -0.0121692284 -0.0077208341  6.496295e-03  1.913317e-02 #> 69  -0.0245626393  0.0453789046 -0.0051118300 -3.197781e-03 -1.752039e-02 #> 70   0.0132074775  0.0108501750 -0.0135802742  7.776344e-03 -2.307832e-02 #> 71   0.0503145530 -0.0254208707  0.0190892926  7.709820e-03  6.728792e-03 #> 72   0.0132838988 -0.0193524493 -0.0227452981  2.311583e-03  1.269827e-02 #> 73   0.0090373789 -0.0116087959  0.0344345890 -9.020418e-03 -3.670482e-03 #> 74   0.0049581434  0.0313950920  0.0031087832  5.987686e-03  3.728468e-03 #> 75   0.0004724147 -0.0087713547 -0.0199889107 -1.090625e-02  1.097656e-02 #> 76   0.0227927875  0.0014234455  0.0035634339 -1.014469e-02  1.203331e-02 #> 77  -0.0218229834  0.0161470793  0.0131502652 -3.551938e-03 -1.574211e-03 #> 78  -0.0089708176 -0.0033693698  0.0082508643 -1.026495e-02 -6.886224e-03 #> 79   0.0618012265  0.0304147674 -0.0160155101  2.432639e-04 -3.993731e-03 #> 80  -0.0063600501 -0.0079786184  0.0046586128  2.164607e-03 -7.376279e-03 #> 81  -0.0169453133 -0.0051998509  0.0140730353 -8.680315e-03 -2.255233e-02 #> 82   0.0014772076 -0.0011099896  0.0008913755  1.283090e-04 -8.811396e-04 #> 83   0.0431345604  0.0428043526  0.0044876515 -4.026731e-03  6.777247e-03 #> 84   0.0263318495  0.0619862239  0.0275780092  1.327220e-02 -4.372464e-02 #> 85   0.0147218837  0.0119148873 -0.0196166007  1.742217e-03  1.324673e-02 #> 86  -0.0093544584  0.0354486008  0.0333936958 -1.792609e-02  3.091316e-02 #> 87   0.0340543439 -0.0209324999 -0.0279525204  2.255732e-03  4.467031e-04 #> 88   0.0069290030  0.0110948277 -0.0115848412  1.934162e-02  1.658919e-02 #> 89  -0.0451756721 -0.0516970858  0.0151158878  6.972703e-03 -1.350654e-02 #> 90   0.0233610958  0.0180219705  0.0081763477  7.192609e-03  1.042528e-02 #> 91   0.0361861406  0.0052249101 -0.0084629957  4.808748e-03 -1.108724e-02 #> 92  -0.0119966430 -0.0452504198  0.0161081712  1.617568e-03  6.611700e-03 #> 93  -0.0215137634 -0.0207842192 -0.0456188863  2.705496e-03 -1.085883e-02 #> 94   0.0296675241  0.0126834645 -0.0114749364 -1.206988e-02  3.646001e-02 #> 95   0.0279808902 -0.0126686182 -0.0327602795 -2.850405e-03 -2.255620e-02 #> 96  -0.0058628586  0.0008141301  0.0154205501  9.972937e-03 -1.286264e-02 #> 97  -0.0020579988  0.0010414306  0.0002977102  4.992646e-04 -1.141434e-04 #> 98   0.0057750130  0.0268275485  0.0076183406  6.783269e-04  6.612492e-03 #> 99  -0.0115885629 -0.0060555689  0.0200146918 -1.407238e-02 -2.066616e-02 #> 100 -0.0079441023  0.0057412558  0.0075124084 -3.429845e-04 -1.095837e-02 #> 101  0.0484516847  0.1233783866 -0.1554474737  2.582026e-02  7.242865e-04 #> 102 -0.0091078984  0.0490121818 -0.0913977550 -1.155865e-02  8.539336e-03 #> 103  0.0141507563  0.0201339776  0.0869592036  5.129826e-02 -2.747024e-02 #> 104 -0.0027720601 -0.0196141207  0.0515921625 -2.284936e-02 -6.808318e-02 #> 105  0.0682446687  0.0091816266  0.0044618994  1.902666e-02  1.230010e-01 #> 106 -0.0366300016  0.0460415710  0.0698569218 -1.443604e-02 -1.148502e-01 #> 107  0.0582154380 -0.0034057169  0.0422382786  8.793022e-02  2.536539e-02 #> 108  0.0051630510  0.0035452214  0.0667933145 -3.625316e-02 -3.978017e-02 #> 109  0.0361481450  0.0042844704 -0.0195636735 -5.063831e-02  9.919463e-02 #> 110 -0.0778455225  0.0126780629  0.0257298634 -4.155620e-02 -5.273884e-02 #> 111  0.0816378963  0.0150409094 -0.0279892561 -6.128050e-02  3.116746e-02 #> 112  0.0302431303  0.0113813736 -0.0676342714  1.574937e-02 -1.014501e-02 #> 113 -0.0995102843 -0.0442329789  0.0184227371  3.277016e-02  2.880233e-02 #> 114 -0.0617899201  0.0379816359 -0.0352828347  8.506316e-02 -5.992208e-02 #> 115 -0.1154434147  0.0762137524 -0.0648675693 -6.778414e-02  9.877846e-03 #> 116 -0.0338451853 -0.0210616484  0.0010171936  4.665445e-02  4.725334e-02 #> 117 -0.0505037907  0.0792016084  0.0676145569  3.962079e-04  1.265160e-02 #> 118 -0.2298050670 -0.1948717332 -0.0280327477  1.172715e-02  4.996827e-02 #> 119 -0.0296337743 -0.1112162611  0.0653456878 -1.047973e-02 -2.542112e-02 #> 120  0.1063129303  0.0281626207  0.0308101671 -2.464821e-03  5.170244e-02 #> 121 -0.0198607994 -0.0246152087  0.0017350849 -4.025508e-02 -2.735438e-02 #> 122  0.0105790998  0.0984851445  0.0807052570  2.917656e-03  7.472660e-02 #> 123  0.1160397029 -0.1003675706 -0.1039602643 -4.255652e-02 -4.901383e-02 #> 124 -0.1314466119  0.0401228545  0.0042601153 -2.612840e-03  7.542823e-02 #> 125 -0.0676388699 -0.0650311097 -0.0471056642 -4.639965e-02  2.648406e-02 #> 126  0.0648877672 -0.1228059131  0.0121061037 -3.207498e-02  5.144130e-03 #> 127  0.0703119775  0.0464086107 -0.0655835959 -9.962541e-02  2.049312e-03 #> 128  0.0248082467  0.0476965590  0.0476067225 -4.570408e-02  6.469904e-02 #> 129  0.0366569909 -0.0939091754  0.0123564217  7.175858e-02  5.311128e-04 #> 130  0.1097745306 -0.0651121370  0.1042899308 -1.430205e-02 -3.255510e-02 #> 131  0.0497808185  0.0383178294 -0.1232973966 -1.380036e-02  4.850149e-02 #> 132  0.0730359123 -0.0537990846  0.0053436966  4.542853e-02 -5.295398e-02 #> 133  0.0288657202  0.0602202824  0.0299552436  2.540214e-02  2.982684e-02 #> 134  0.0097290359  0.0351938789 -0.0421615731 -8.223207e-03  3.050276e-02 #> 135 -0.0364005224 -0.0462428435  0.0178957356  1.351015e-01 -4.004857e-02 #> 136  0.0131647877 -0.0626517216 -0.1237263960  4.210922e-02 -2.824985e-02 #> 137  0.0774733769 -0.0237593760  0.0534928353 -7.564294e-02 -7.525858e-02 #> 138 -0.0460630859 -0.0520610863  0.0489141262 -7.663324e-02 -6.725493e-03 #> 139 -0.0010550380 -0.0185982791 -0.0157388176  6.576419e-02 -1.182200e-02 #> 140  0.0232942054 -0.0914084659  0.0697882190 -5.595982e-02 -3.843033e-02 #> 141 -0.1215252270  0.0545297700 -0.0832269143  7.242957e-03 -2.631800e-02 #> 142  0.0497863180  0.0291229336 -0.1474575885  1.752367e-02  2.168419e-03 #> 143 -0.0402525898 -0.0129206613 -0.0456742128  6.891647e-03  4.965003e-03 #> 144 -0.0658484838  0.0565490946  0.0321027357  1.011940e-02 -5.564324e-02 #> 145 -0.0167430413 -0.0072616653 -0.0739318838 -1.006130e-03 -1.769913e-03 #> 146  0.0769940156 -0.0008958497 -0.0051835940 -1.584053e-02 -5.301719e-02 #> 147  0.0870385637  0.1249333584  0.0134034406  4.971022e-03  2.798121e-02 #> 148 -0.0283916250 -0.1006684873 -0.0025276150 -7.961628e-02  2.067677e-02 #> 149  0.1260418306 -0.0332716528 -0.0059955047  3.397912e-02 -4.822324e-02 #> 150  0.0680559657  0.0509611357 -0.0538726464  6.927293e-02  5.612179e-02 #> 151  0.0970815892 -0.0204721310 -0.0165095848 -3.430659e-02 -3.034581e-02 #> 152  0.0304073508 -0.0449037887  0.0581953202 -6.057337e-02 -2.776313e-02 #> 153 -0.1008847825  0.0369347920  0.0157762335 -7.646348e-02  4.581198e-02 #> 154  0.0068796594 -0.0897755134  0.0280584352  6.049398e-02 -8.398588e-02 #> 155  0.1426002968  0.0515799334 -0.1030985640 -9.960613e-03 -1.192288e-01 #> 156 -0.0845226107 -0.0573107274  0.0491472801 -1.829326e-03  7.011058e-02 #> 157  0.0494702461 -0.1155660569  0.0323845912 -3.365664e-02  2.674585e-02 #> 158 -0.0082364718  0.0055850353  0.0458684157 -3.930518e-02 -2.288139e-02 #> 159 -0.0060685962 -0.0375197063 -0.0507959575 -9.983090e-02  8.095394e-02 #> 160 -0.0321864911 -0.0257452954  0.0584616951  2.039570e-02 -1.180166e-01 #> 161  0.1456048820  0.0295008384  0.0581308779  2.318207e-02 -1.345011e-02 #> 162 -0.0505863830  0.0154367125 -0.0222874339  2.041611e-02 -4.706909e-02 #> 163 -0.0603130297 -0.1100878441  0.0228780521  1.965616e-02  7.194775e-02 #> 164  0.1149746809 -0.0521663931 -0.0295675833  1.068687e-02  7.508040e-02 #> 165  0.0595538402  0.0788706400  0.0626085265  5.254606e-02  1.090660e-02 #> 166 -0.0784897649 -0.0300595005 -0.0019741764 -1.001062e-01  7.303334e-03 #> 167  0.0548979015 -0.0040091855  0.0493057305  4.766413e-02  1.253745e-01 #> 168 -0.0042490298 -0.0284421408 -0.0117119554  2.294318e-02 -6.201862e-02 #> 169  0.0045525142  0.0338593528  0.0322744758  9.758222e-03 -6.204127e-02 #> 170 -0.0743539260  0.0899664891  0.1031051600 -5.479985e-02  3.104718e-02 #> 171  0.0236397376 -0.1071098307 -0.0608385658  1.570840e-01  4.231900e-02 #> 172 -0.0162058953  0.0257586414  0.1005459355 -8.686227e-02 -5.024912e-03 #> 173 -0.0162110803  0.0315495325  0.0424288854 -6.972627e-02 -2.677538e-02 #> 174  0.0114700246 -0.0942496465 -0.0141669421  2.789903e-02  3.605417e-02 #> 175 -0.1426996053  0.0646799256  0.0265806829  8.474843e-02  3.727632e-02 #> 176 -0.0241948321  0.0458546454  0.0356684326  5.939664e-02  5.345964e-02 #> 177 -0.0911656838 -0.0150405938 -0.0568973820 -5.179049e-02  1.876765e-02 #> 178  0.0661887242  0.0680307475  0.0350527441  1.550677e-01  4.345455e-03 #> 179  0.0525902034 -0.1238741211 -0.0182729078 -3.153698e-02  2.831882e-02 #> 180  0.0796938709 -0.0298252031  0.0443966537  1.833155e-02  5.348902e-02 #> 181 -0.0601662881 -0.0701797679  0.0553020470  1.102358e-01 -5.772793e-02 #> 182  0.0072186826  0.0324602117 -0.0474451621 -5.653992e-02  2.241793e-02 #> 183 -0.0395606357  0.0801875092  0.0370108621  1.926724e-02 -4.875471e-03 #> 184 -0.0930495405 -0.0683149832  0.0099451881  3.921919e-02  1.684439e-03 #> 185 -0.0296637471  0.0414297678 -0.0602680716 -2.996471e-02 -5.342380e-02 #> 186  0.0805772606 -0.1152706271 -0.0772312136 -1.481558e-03 -5.317926e-03 #> 187 -0.0132778712  0.0907181709  0.0646581796 -6.466455e-02 -1.629328e-02 #> 188 -0.0893058782  0.0269949924  0.0175193685  2.793617e-02  4.167106e-02 #> 189  0.0731213000  0.0236944436  0.0004419551 -4.860869e-02  4.537516e-02 #> 190 -0.0029752998  0.0508951781  0.1230130537 -4.480136e-03 -9.830016e-03 #> 191  0.0230399401 -0.0066047768 -0.0679153148 -8.224257e-04 -4.680980e-02 #> 192 -0.1531317877  0.0050315182 -0.0851521863  4.841808e-03 -7.294203e-03 #> 193 -0.0121048803  0.0625796183 -0.0519299325 -2.168536e-02 -1.887734e-02 #> 194  0.0456273738  0.0483572977 -0.0476216300 -6.307611e-02  2.877310e-02 #> 195  0.0135189882  0.1047938410  0.0144983865  2.252552e-02 -4.450965e-02 #> 196 -0.0371002403  0.1017251236  0.0375735152  5.239253e-02  1.592523e-02 #> 197 -0.0692463555  0.1009882404 -0.0389158979  6.961920e-02 -4.585855e-03 #> 198  0.0973769459 -0.0180710102  0.0787799825  7.463065e-03  2.688538e-02 #> 199 -0.0919287566  0.0895379937 -0.1100234253  9.582082e-04 -1.736164e-02 #> 200 -0.0204998334 -0.0180510803 -0.0082403820 -5.043748e-02 -1.032594e-01 #>             pc160         pc161         pc162         pc163         pc164 #> 1    2.264410e-03 -8.822654e-03  2.132636e-02 -0.0009745258  8.392234e-03 #> 2    1.479435e-02  1.342200e-02  1.824962e-03  0.0065951344 -9.046735e-04 #> 3    1.543723e-02 -1.430824e-02  1.382779e-03 -0.0089694348 -9.331237e-04 #> 4    9.935398e-03  2.471079e-03  5.955469e-04  0.0087774170 -1.999942e-03 #> 5    3.789217e-05 -7.035392e-03 -8.903051e-03 -0.0013377840 -4.275573e-03 #> 6   -7.051095e-03  5.413675e-03  5.935123e-03  0.0132234454 -5.572011e-03 #> 7   -1.382006e-02  1.635934e-02  1.916469e-03  0.0114193503 -1.603313e-02 #> 8   -3.475875e-03  9.575119e-03  6.262859e-03  0.0098986006 -5.512273e-03 #> 9   -4.539998e-03  7.451346e-03 -1.354768e-02  0.0002502175  5.978193e-03 #> 10  -4.983759e-04  1.335024e-02  8.927946e-03  0.0110337387  1.494246e-03 #> 11   1.651264e-03  3.671189e-03 -5.724608e-04  0.0006988603  7.631381e-03 #> 12   1.297016e-03  1.368712e-02 -1.669649e-03 -0.0080537760  3.838310e-03 #> 13   1.670777e-03  1.620068e-03  1.744477e-04 -0.0002962991 -4.847111e-05 #> 14   1.016401e-02 -1.095866e-02  5.769218e-03 -0.0089036889  5.184635e-03 #> 15   7.641511e-03  1.776057e-02  4.454628e-03  0.0054419491  3.441142e-04 #> 16  -1.445571e-02 -8.770730e-03  3.672359e-03  0.0032462655 -4.178944e-03 #> 17  -1.534335e-02  1.399443e-02 -5.173906e-04 -0.0030814401  2.262994e-03 #> 18  -7.673039e-03  4.626288e-03 -2.217175e-03 -0.0114144691  4.220984e-03 #> 19   4.785871e-03 -2.321338e-02  7.989115e-03  0.0033624657  9.473989e-03 #> 20  -2.838443e-04 -1.451277e-02 -3.043487e-03 -0.0075819270  4.169035e-03 #> 21   7.025293e-03  4.731684e-04 -4.751936e-03 -0.0011536662 -7.080173e-03 #> 22  -2.027268e-02  8.261327e-03  1.025782e-03  0.0062310473  5.282714e-03 #> 23   5.231230e-03 -1.875699e-02  2.992305e-03  0.0029651061 -5.311051e-03 #> 24  -5.757487e-03 -2.630912e-03  8.777973e-04 -0.0055491693  1.053518e-02 #> 25   1.198511e-02  1.242274e-02 -6.848264e-03  0.0143759603  2.019693e-03 #> 26  -5.747990e-04  1.074846e-02  3.833308e-03  0.0086995164 -1.887908e-02 #> 27  -2.096210e-02 -1.388565e-02  1.106169e-02 -0.0034849598 -1.325799e-02 #> 28  -1.610340e-02  5.872996e-03 -2.984793e-03  0.0058381886  1.324272e-03 #> 29  -1.476000e-03 -8.735456e-03  5.601924e-03  0.0035797084  5.424968e-03 #> 30  -1.154727e-02 -2.038498e-02  1.660791e-03  0.0062851109  7.022580e-04 #> 31   5.800011e-03 -1.179826e-02 -5.718316e-03  0.0111077457 -6.970089e-03 #> 32   6.897534e-03  4.935364e-04  1.219016e-03  0.0055291279  6.474879e-03 #> 33  -7.738511e-03  3.543887e-03  2.036192e-03  0.0003166061  6.385963e-03 #> 34   2.794487e-03  1.971758e-03  2.379652e-03  0.0075956228 -1.608701e-03 #> 35   9.041603e-03 -1.815042e-02  4.842970e-03 -0.0073196104 -2.375388e-03 #> 36   1.795355e-02 -6.882326e-03  9.237136e-03 -0.0146129188  1.172004e-02 #> 37  -6.607949e-03  1.361772e-02 -2.687116e-03  0.0048088187  5.528233e-03 #> 38   8.488703e-03  1.845983e-02 -3.564850e-03  0.0045061188  2.879537e-03 #> 39   2.757886e-03  7.512103e-03 -6.438410e-03 -0.0091139904 -3.306265e-04 #> 40   8.746808e-03  2.179819e-03  2.366483e-04 -0.0006047986  1.969828e-03 #> 41  -6.981606e-03 -1.698492e-02  1.742994e-02 -0.0074432214  1.035824e-02 #> 42   1.204745e-02 -4.537056e-03  6.670348e-05 -0.0052415020  3.086775e-04 #> 43   2.985726e-02 -2.503684e-03 -2.297174e-04 -0.0060211062 -7.167330e-03 #> 44  -3.033257e-04  3.101364e-03  9.243047e-03  0.0074530231 -7.718265e-04 #> 45  -1.469760e-04  2.116785e-03 -8.007789e-03 -0.0030406211 -9.794763e-05 #> 46  -3.627380e-03 -1.832943e-03 -7.480010e-03 -0.0169958771  1.470398e-03 #> 47  -1.248176e-02  1.668492e-02 -1.068237e-03  0.0062397092 -3.863443e-04 #> 48  -7.896979e-03 -1.758175e-02 -9.425218e-03 -0.0187010225  1.335797e-03 #> 49   2.221120e-02  1.095957e-02 -6.924533e-05  0.0091313339 -9.022986e-03 #> 50   1.641738e-02  1.299455e-02  5.435960e-03  0.0066952379 -1.785511e-03 #> 51  -4.640166e-03  1.911517e-02 -7.457601e-03 -0.0011936685  1.592262e-03 #> 52  -7.751068e-03 -2.497231e-03 -3.712545e-03 -0.0031631269  3.106838e-03 #> 53  -1.830920e-02 -1.270965e-03  7.813529e-03  0.0129052857 -3.054442e-03 #> 54   5.243963e-04 -1.648520e-03 -8.488178e-03  0.0023137576  6.264736e-03 #> 55  -1.630337e-03 -6.250630e-03  2.729406e-03  0.0011290695 -2.716834e-03 #> 56  -3.160968e-03  1.562705e-03 -1.276416e-02 -0.0067788492  6.873471e-03 #> 57  -7.707962e-04 -6.380321e-03  5.350489e-03 -0.0063010484 -2.484144e-03 #> 58   9.238105e-03 -7.048903e-03  5.914332e-03  0.0021932171  2.098324e-03 #> 59  -8.077202e-03  1.975529e-02 -4.486066e-03  0.0047072009 -5.286592e-03 #> 60  -9.279241e-03 -3.676012e-03 -3.968232e-03  0.0049964096 -7.146418e-04 #> 61  -1.939433e-02  1.026041e-02 -4.602521e-03  0.0051559066  6.579511e-03 #> 62  -1.061048e-03  2.766124e-03  3.405460e-03 -0.0098694697  1.113227e-02 #> 63   1.495747e-02 -9.585707e-03  6.014873e-04 -0.0008812750 -1.826190e-03 #> 64   1.211387e-02 -6.875824e-03 -1.609381e-02 -0.0090878504 -8.893714e-03 #> 65  -9.143368e-03 -5.497347e-03  5.584891e-03  0.0041802225 -1.991663e-03 #> 66   7.972238e-03 -8.028320e-03  4.665017e-03  0.0032424366 -1.792175e-03 #> 67  -1.468948e-02  1.677508e-03  6.059241e-03  0.0008261570  1.002012e-03 #> 68  -1.489276e-02 -1.255455e-02  5.501165e-03  0.0011154185 -5.612357e-03 #> 69   5.250682e-03 -5.452651e-04  6.618661e-04 -0.0056853898 -2.790573e-03 #> 70  -7.899104e-03 -3.629869e-03 -5.330207e-03 -0.0037304927  1.588546e-03 #> 71  -2.192727e-02 -1.889641e-02  4.853612e-04 -0.0122867194 -1.234316e-03 #> 72  -2.421550e-02  3.587927e-05  5.466840e-03  0.0034644854 -7.011334e-03 #> 73   1.266566e-02  2.869640e-03 -1.329158e-02 -0.0051767216 -6.052658e-03 #> 74   1.167549e-02 -1.468799e-02  1.910595e-03  0.0021019137  1.953854e-04 #> 75  -1.867365e-03  1.428697e-02  2.868913e-03  0.0074596086 -9.787012e-03 #> 76   5.840260e-03  1.914242e-03 -4.969492e-03 -0.0071845085  2.073281e-03 #> 77  -1.069057e-03 -1.239126e-02  1.525843e-03 -0.0073781884 -2.694831e-03 #> 78   9.364803e-03  1.632191e-03  1.350397e-02  0.0057001501 -6.616914e-05 #> 79   5.870775e-03 -5.370875e-03 -5.595248e-03 -0.0062419050 -2.955522e-03 #> 80   7.992802e-04  6.963902e-03 -1.595360e-03  0.0032177465 -5.716325e-03 #> 81  -7.507500e-03  2.009286e-02  4.252134e-03  0.0072088908  1.327286e-03 #> 82  -6.994976e-04 -3.552789e-04  1.068260e-04  0.0004924037 -4.224218e-04 #> 83   2.858078e-02 -2.286026e-02 -8.975620e-03 -0.0140241929  5.810414e-03 #> 84   1.429735e-02 -5.782586e-03 -2.298169e-02 -0.0036687059  2.938110e-03 #> 85  -7.398996e-03 -8.246356e-03  1.220784e-02  0.0021842477  1.368103e-03 #> 86   1.454804e-02 -5.231847e-03  8.469033e-03 -0.0128557691 -8.341748e-03 #> 87  -1.601082e-02 -3.954173e-03 -1.955611e-03  0.0089002637  3.236059e-03 #> 88   1.273957e-02  1.248137e-02  4.477880e-03  0.0134494103 -1.097775e-02 #> 89  -1.394388e-03  4.282506e-02  2.563034e-03  0.0169859361 -7.337577e-04 #> 90   1.705130e-02 -4.763753e-03 -2.636078e-03 -0.0033175816  3.880103e-03 #> 91   3.141432e-03 -2.753227e-03 -7.621442e-03  0.0059559326  1.130504e-02 #> 92  -4.033747e-03  1.019190e-02 -4.738254e-03 -0.0043987772  2.728536e-03 #> 93  -1.042462e-02  1.003832e-02 -8.848189e-03 -0.0051212251 -3.179352e-03 #> 94  -2.049933e-02 -9.125340e-03  1.414101e-03 -0.0078975472 -5.002908e-05 #> 95  -5.991260e-03  6.828208e-03 -5.550140e-03 -0.0022419416  5.430619e-03 #> 96   5.118307e-04 -5.528820e-03  6.141037e-03 -0.0001060328  6.380724e-03 #> 97   2.487722e-03  9.080038e-04  2.256639e-04 -0.0008974325 -6.413898e-04 #> 98   1.023712e-03 -2.026416e-02  3.996468e-03 -0.0061641714  1.019742e-04 #> 99   1.098360e-02  1.584340e-02 -1.075365e-02  0.0024569262  2.081025e-03 #> 100 -4.399122e-03 -1.168119e-02 -7.765665e-03 -0.0098431378 -1.221628e-04 #> 101 -2.472770e-02 -8.616731e-02 -3.530866e-02  0.0122604709 -1.775913e-02 #> 102 -2.583613e-03  2.025924e-03  4.772123e-02  0.0055460640  8.473308e-03 #> 103  1.028239e-04 -1.992887e-03  5.355811e-02  0.0064331729 -2.162802e-02 #> 104 -1.417983e-03 -7.583182e-02 -7.413377e-02 -0.0134666809 -4.544615e-02 #> 105 -1.195799e-02 -2.615217e-02 -1.678996e-02 -0.0054143799  2.176606e-02 #> 106 -2.638229e-02  3.084999e-02  4.546434e-02  0.0622015853  1.077875e-02 #> 107 -9.135378e-03 -1.782004e-02 -1.700288e-02  0.0264456981 -4.003145e-02 #> 108  5.642329e-02  4.006075e-02 -7.348355e-03  0.0353714547  2.747686e-02 #> 109 -6.374303e-03 -2.574221e-02  3.678472e-02 -0.0228160029  1.304689e-02 #> 110 -2.221721e-02  1.074869e-02  8.922682e-02 -0.0271358258 -4.729920e-02 #> 111  3.337885e-02 -2.148569e-02  8.534645e-03  0.0050440071 -7.864296e-02 #> 112 -2.080736e-02  2.117067e-02  2.482295e-02 -0.0708825743 -3.960529e-02 #> 113 -3.509973e-03  7.495769e-03  9.711558e-03  0.0178125103  2.211584e-02 #> 114  1.743870e-02 -2.471482e-02 -4.452137e-03  0.0586319113 -1.422783e-02 #> 115 -3.757384e-02  2.889334e-02 -5.129341e-02 -0.0021041899  1.690401e-02 #> 116  1.352660e-02 -7.093972e-02  3.069261e-02  0.0353478551  9.749953e-03 #> 117 -7.029865e-02 -4.627101e-02 -8.302409e-03  0.0738381349  2.058256e-03 #> 118  4.725704e-02  2.447075e-02  7.552869e-03  0.0291629103  8.100458e-03 #> 119  5.109055e-02 -2.919610e-02  4.294370e-02 -0.0608777639  2.527978e-02 #> 120 -1.456438e-02  6.294104e-03 -4.168699e-02  0.0049535844  3.191466e-02 #> 121  6.198154e-02 -6.097559e-02 -6.374515e-03  0.0375586895  2.016050e-02 #> 122  7.614702e-03 -5.223301e-03 -1.938025e-02 -0.0257387380  4.423580e-02 #> 123 -1.815756e-02 -2.376388e-02 -5.703713e-02 -0.0020814370  3.989281e-03 #> 124  1.933655e-02 -3.583532e-02 -3.901357e-02  0.0608776644 -2.075531e-02 #> 125 -2.209367e-02 -9.600927e-03 -6.671161e-03 -0.0049244833  3.552326e-02 #> 126 -6.384587e-02  4.860980e-02 -4.352053e-02  0.0135449475 -4.563973e-02 #> 127 -8.184365e-02 -1.641903e-02  3.621245e-02 -0.0360496296 -4.722148e-02 #> 128 -5.426305e-02 -1.017470e-02 -1.343916e-02 -0.0072246297  5.592078e-02 #> 129  2.778108e-02  1.633557e-03 -2.575262e-02 -0.0227502284 -5.129809e-02 #> 130 -6.806992e-02 -5.781761e-02  1.288021e-02 -0.0152437890 -4.975786e-03 #> 131 -2.467529e-02 -3.129750e-02  1.395439e-02 -0.0402747313  3.607566e-02 #> 132  3.392881e-02 -1.070612e-02  2.910329e-02  0.0213770445  6.325975e-03 #> 133 -5.722747e-02  1.950606e-02  4.879076e-02 -0.0381021926 -1.124346e-02 #> 134  7.267019e-02  1.754331e-02 -2.954697e-03 -0.0567422725 -1.487545e-02 #> 135 -2.744666e-02  1.109868e-02 -2.603916e-02 -0.0533538787  2.253256e-02 #> 136  4.480445e-02 -4.830314e-02  2.074771e-02  0.0102508845 -3.014312e-02 #> 137  2.517991e-02 -8.739741e-03 -1.986978e-02 -0.0268308316  4.275528e-02 #> 138  1.041195e-01 -3.872261e-02  6.135393e-02 -0.0575819378 -3.693118e-02 #> 139  1.021311e-01 -2.548348e-02  4.373887e-02  0.0060800471 -1.166537e-02 #> 140 -4.470973e-02 -2.819838e-02 -8.102726e-02 -0.0540924722  3.658927e-02 #> 141 -5.044060e-02  4.647356e-02 -6.421347e-02 -0.0042670076  3.442300e-02 #> 142  1.318425e-02 -3.456039e-02 -1.793455e-02  0.0080536859 -8.692759e-04 #> 143  8.365397e-02  4.263500e-02 -1.100438e-02 -0.0051649791 -7.518063e-03 #> 144 -1.329913e-02 -6.851308e-02  2.197835e-02  0.0536797945  2.235861e-02 #> 145 -8.187208e-03 -1.488576e-02  1.940118e-02 -0.0072739914  1.273086e-02 #> 146 -1.025110e-02  5.327634e-02 -1.980731e-02  0.0605701264 -1.351139e-02 #> 147  7.228305e-02  6.473175e-02 -4.132218e-04 -0.0481662843  1.368489e-04 #> 148 -2.971569e-02 -2.456777e-02  1.729063e-02 -0.0013248281  4.649200e-02 #> 149  5.232011e-02 -8.746739e-02  1.458923e-02 -0.0012463897  1.865636e-02 #> 150 -7.852481e-02  1.638245e-02  5.940104e-02  0.0321005637  1.778493e-02 #> 151  4.654720e-02  1.189713e-01 -1.036363e-03 -0.0581815930  8.133959e-02 #> 152 -7.008798e-02  2.240464e-02 -4.322134e-02  0.0270096636  2.852194e-02 #> 153 -3.132587e-02  9.565097e-02  2.789863e-02 -0.0294277287  2.000565e-02 #> 154  2.220959e-02 -6.141567e-02 -2.088817e-02 -0.0322737572  2.090210e-02 #> 155 -2.217086e-02  7.533860e-02  7.691283e-02  0.0310661604 -8.282446e-03 #> 156  3.362688e-04 -6.939404e-02  5.085693e-03  0.0294543206 -1.565613e-02 #> 157 -3.154579e-02 -6.225049e-03 -3.073079e-02  0.0044472944 -5.470863e-02 #> 158 -1.176844e-02 -1.308016e-03  1.598230e-02 -0.0070330069 -4.152060e-03 #> 159 -1.219857e-02  1.863405e-02 -2.000286e-02  0.0246324270 -2.639865e-02 #> 160 -1.089100e-02  6.713523e-03 -8.494217e-03 -0.0063839638 -5.023713e-02 #> 161 -1.959736e-03  7.865261e-03 -3.826166e-02  0.0565430123 -1.163539e-02 #> 162 -4.629204e-03  6.406608e-03 -1.402451e-05  0.0143804333 -6.292027e-02 #> 163 -1.510496e-02  5.309103e-02 -7.556159e-02  0.0402850301 -4.322803e-02 #> 164  8.756508e-02  2.637806e-02 -5.353938e-02  0.0050713213  4.230058e-03 #> 165  2.847846e-03 -2.122701e-02 -1.187686e-02  0.0139322526 -1.383605e-04 #> 166 -2.888560e-03  2.342706e-02  3.305576e-02  0.0265321449 -3.910253e-02 #> 167 -3.796899e-02  1.912969e-02 -2.595998e-02 -0.0552492694 -4.329883e-02 #> 168 -3.760340e-03  9.422484e-02 -3.863079e-02 -0.0194168844 -2.457300e-02 #> 169  1.191880e-01 -9.013619e-03 -1.095684e-02  0.0238315579  4.743465e-02 #> 170 -3.189171e-02  2.443526e-02  3.419342e-02  0.0037546063  5.011490e-02 #> 171 -4.236377e-02 -4.887384e-02  5.127721e-03  0.0361813622  6.350310e-02 #> 172  2.969514e-02 -3.165550e-02 -6.991446e-03  0.0298489555 -2.674609e-03 #> 173 -6.422988e-02 -1.285996e-01 -3.956314e-03  0.0215868457  2.176713e-02 #> 174  1.030388e-02  6.574154e-02  4.090501e-02  0.0335736772 -7.260286e-03 #> 175 -2.086089e-02 -1.939184e-02  5.230291e-02 -0.0821059520 -3.009769e-02 #> 176  3.033220e-02 -2.638578e-03  1.701849e-02  0.0077367929 -2.511797e-04 #> 177  3.020290e-02  5.751916e-03 -3.707941e-02 -0.0035011706 -2.873115e-02 #> 178 -2.592781e-02  9.489202e-02  3.037842e-02  0.0357757356  4.238981e-03 #> 179 -2.981604e-02  1.812304e-02  3.576008e-02  0.0353535023  3.782296e-02 #> 180  3.438681e-02  2.728846e-02  7.362910e-02  0.0055976768 -4.037958e-02 #> 181 -1.193006e-01 -2.417027e-03  1.595977e-02 -0.0798962766 -1.713524e-02 #> 182 -5.492192e-02 -2.508526e-02  7.519177e-02  0.0479034555  2.475196e-03 #> 183 -7.439274e-03 -3.311084e-02 -2.569175e-02 -0.0289623877  2.490575e-02 #> 184 -7.256795e-02  4.062252e-02  2.161975e-02 -0.0111088080  2.348717e-02 #> 185 -6.306639e-02  1.147044e-02 -5.535232e-02 -0.0382728338 -9.984144e-03 #> 186  6.363277e-02  1.072124e-03  8.074490e-03 -0.0217674129  4.371170e-02 #> 187  6.190051e-02 -2.878446e-03 -4.373240e-02  0.0041418212 -5.359768e-02 #> 188  3.145013e-02  6.442277e-02 -1.520443e-02  0.0137854357  1.290807e-02 #> 189 -2.860270e-02 -1.743457e-02 -8.742177e-03 -0.0364721607 -1.955327e-02 #> 190  9.241240e-02  2.378619e-02  1.196588e-02 -0.0204552758 -5.232727e-03 #> 191 -1.106502e-02 -1.516402e-02  3.605173e-02 -0.0257730931 -8.216805e-03 #> 192  7.207184e-02 -3.241877e-02 -1.003657e-02 -0.0413902977 -1.029194e-02 #> 193 -3.682686e-02  2.565059e-02 -9.009293e-03  0.0653197467 -2.518582e-02 #> 194  4.726994e-02  5.859114e-02  2.166676e-02  0.0319229926 -3.188648e-03 #> 195 -8.699722e-02  1.758184e-02 -2.959728e-02 -0.0622750491 -9.532510e-03 #> 196  2.726286e-02 -1.893554e-03 -7.028039e-03  0.0008724636  1.010048e-02 #> 197  2.876372e-02  2.468198e-02 -1.210022e-01  0.0106106910 -4.427070e-06 #> 198  2.163919e-02  4.415681e-02 -2.403022e-02  0.0248211604  2.255519e-02 #> 199  6.756713e-02 -2.480827e-02  6.135717e-04 -0.0243529845  3.731367e-02 #> 200 -1.212853e-02  1.492237e-02  4.816139e-02  0.0100598221  4.109071e-02 #>             pc165         pc166         pc167         pc168         pc169 #> 1   -0.0056330234  5.987809e-04  2.643384e-03 -6.027446e-03 -1.048051e-03 #> 2   -0.0062331735 -1.022621e-03 -3.422594e-03 -1.244059e-03 -1.444361e-03 #> 3    0.0003718584 -2.793399e-03  1.012864e-03 -1.650707e-03 -4.475769e-04 #> 4   -0.0030704400 -5.103840e-03  8.228242e-03 -2.140295e-03 -5.664118e-04 #> 5    0.0030067802 -1.168194e-03 -2.510170e-03  1.284117e-04  6.213757e-04 #> 6    0.0054725331 -1.817995e-03 -4.423015e-04  1.637526e-03  1.081586e-03 #> 7    0.0014624982 -3.861239e-04 -2.866022e-03  6.370571e-03  2.481097e-03 #> 8   -0.0030711548  1.373499e-03  5.609419e-04  1.422561e-03  9.397074e-04 #> 9   -0.0027760217  4.536675e-04 -1.546458e-03 -2.269982e-03 -1.140363e-03 #> 10   0.0042704866  4.328586e-04 -1.124045e-03 -1.102416e-04 -1.511245e-03 #> 11  -0.0019722381 -2.103605e-03  4.486967e-03 -2.363569e-03 -3.427211e-03 #> 12   0.0084832027  3.682749e-03 -4.554683e-03 -2.089498e-03 -2.115860e-03 #> 13  -0.0002233072 -6.403198e-05 -3.810081e-04  1.316623e-04  1.173252e-04 #> 14   0.0036035580 -4.091031e-03  1.043196e-03 -3.001907e-03  8.840852e-04 #> 15   0.0082752630 -5.146217e-03 -3.466968e-03 -2.751006e-03 -6.682349e-04 #> 16   0.0036638002  9.162941e-04  2.124225e-03  2.391041e-03  1.166593e-03 #> 17   0.0043890358  9.326302e-04 -1.076423e-03 -9.572402e-04 -3.513139e-04 #> 18   0.0006189989  9.012899e-03  6.023523e-05  5.154583e-03 -1.016597e-03 #> 19  -0.0077802739  3.940977e-03  1.078224e-03  2.419451e-04  1.106159e-04 #> 20  -0.0058653039  1.920684e-03  1.416236e-02  1.042961e-03 -2.560032e-03 #> 21   0.0044358393  2.136427e-04 -8.349289e-04 -1.245732e-03  8.886317e-04 #> 22   0.0085850923 -1.340985e-03  7.500254e-03  7.034088e-04 -3.510979e-03 #> 23  -0.0085648041 -5.075756e-04  3.696568e-04 -2.428327e-03  1.966823e-03 #> 24  -0.0005004430  4.973780e-04  4.470392e-04 -3.661601e-03 -4.430797e-04 #> 25  -0.0020290823 -3.866492e-03  1.173328e-03 -2.692946e-04 -4.760641e-04 #> 26  -0.0046962509  3.828035e-03 -7.899300e-03  1.660895e-03  2.007569e-03 #> 27  -0.0047628075  5.990066e-03 -4.259783e-03  2.675903e-03  4.326176e-03 #> 28   0.0038186809  2.585578e-04 -4.041734e-03  2.568490e-03  7.753427e-04 #> 29  -0.0067148861  1.678932e-03  5.283136e-03 -1.927712e-03  1.976237e-03 #> 30  -0.0066619296  1.074836e-04  7.767181e-03  1.550833e-03  3.813298e-03 #> 31  -0.0016459707 -6.288963e-03  2.937757e-06  6.621989e-05  2.883455e-03 #> 32   0.0062629191 -4.047565e-03 -3.855422e-04 -1.695671e-03  3.933259e-04 #> 33   0.0038230132  4.384738e-03  2.376381e-03  1.238034e-03 -3.413686e-03 #> 34  -0.0006977500 -1.535073e-03 -8.908140e-04  1.849941e-04 -7.824040e-04 #> 35  -0.0047559313  2.071139e-04 -4.110313e-03  7.660590e-04  4.341016e-03 #> 36   0.0012735662 -8.330526e-04 -7.041249e-04 -3.277400e-03  1.453021e-03 #> 37   0.0036107059  1.464991e-04  3.897200e-03  2.545732e-03 -4.750516e-04 #> 38   0.0044517819 -2.092651e-03 -8.807647e-03 -2.322987e-03 -6.648236e-04 #> 39   0.0002980308  4.177206e-03 -6.618797e-04  3.504875e-03 -2.571945e-03 #> 40  -0.0022298219 -3.484554e-03 -2.941247e-03 -2.317565e-03  1.365277e-03 #> 41  -0.0052536901  6.157975e-03  6.057995e-03 -1.327942e-03  5.574357e-04 #> 42   0.0004683208  2.806858e-03 -1.396843e-03 -2.485051e-04  9.077763e-05 #> 43  -0.0008321646 -4.935773e-03 -8.586371e-03 -5.574636e-03  2.745150e-03 #> 44   0.0049025633  9.619602e-04 -2.079747e-03  1.905926e-03  9.969432e-04 #> 45   0.0030779516  2.340423e-03  3.207984e-03  4.358173e-03 -1.374220e-03 #> 46  -0.0014255329  7.475817e-03  1.924643e-03  3.586250e-03 -1.469858e-03 #> 47   0.0059345364  4.320517e-03  4.532590e-03  2.996889e-03 -3.431680e-03 #> 48   0.0014264648  2.259930e-03  2.173953e-03 -7.651920e-04 -8.548091e-04 #> 49  -0.0056076335 -5.737388e-03 -5.419517e-03 -1.556870e-03  2.089787e-03 #> 50  -0.0041017711 -1.355050e-03 -1.485097e-03 -3.753693e-03  4.931540e-04 #> 51   0.0042361838  1.939125e-03 -2.038063e-03  1.333255e-03 -1.445764e-03 #> 52  -0.0002177046 -7.138646e-04 -2.908194e-04  2.211972e-03  1.453625e-03 #> 53  -0.0123218448  1.666783e-03  4.621858e-03 -2.531076e-04  5.042973e-04 #> 54  -0.0045970506  1.602341e-03  3.910907e-03  5.755614e-04 -2.159489e-03 #> 55  -0.0042024523  2.236792e-04 -6.435462e-04  1.431291e-03  2.647097e-03 #> 56   0.0098555106  4.540950e-03 -2.291942e-03  6.605756e-03  2.787441e-05 #> 57   0.0008701294  2.720480e-03  6.808712e-03  1.062090e-03 -1.497009e-04 #> 58   0.0020366083 -2.212729e-03 -2.466113e-03 -9.219874e-04  2.175793e-03 #> 59   0.0078750694  9.515784e-04 -5.966085e-03  4.569270e-03 -9.744431e-07 #> 60  -0.0028606173  2.952504e-04  6.594194e-04  5.167190e-03 -3.541840e-04 #> 61   0.0030066753 -3.171620e-03  2.194285e-03  2.978770e-03 -2.965193e-03 #> 62   0.0001786653  4.309151e-03 -6.922916e-04 -7.747934e-04 -2.255208e-03 #> 63  -0.0005650901 -9.920468e-04  1.986191e-03 -4.758921e-03 -1.623675e-03 #> 64  -0.0067557578  8.349620e-04 -2.826794e-03 -7.969111e-04  2.849484e-03 #> 65   0.0057180388  3.641857e-04 -1.598558e-03  1.393402e-03  1.346402e-04 #> 66   0.0001515998 -1.015771e-03 -2.450785e-03 -8.740522e-04 -2.014380e-03 #> 67   0.0030913587 -3.851729e-05  9.161188e-04  1.519360e-03 -2.689291e-04 #> 68  -0.0013734968  2.322868e-03  2.195545e-03  1.040623e-03  1.189926e-03 #> 69  -0.0020543184  1.322184e-03 -4.840082e-03  1.436076e-03  7.372210e-04 #> 70  -0.0003051688  3.088753e-03  4.104774e-03  4.010034e-03 -1.378476e-03 #> 71   0.0011303236  2.523904e-03  3.099475e-03 -1.277389e-03  2.577325e-03 #> 72  -0.0026561470  7.608904e-04 -2.471543e-03  4.800731e-04  4.937465e-04 #> 73  -0.0007198566  6.621326e-04 -5.290187e-04  6.170000e-04 -4.849332e-04 #> 74  -0.0026191462  4.997337e-04 -1.272727e-03  3.004117e-03 -6.115528e-05 #> 75  -0.0066859370  9.645472e-04 -6.386445e-03 -2.739870e-03  2.110632e-03 #> 76  -0.0011025706  1.746248e-03  1.512009e-03 -4.716494e-05 -5.734951e-04 #> 77  -0.0013075281  6.117870e-04 -1.157521e-04 -2.423361e-05  1.199565e-03 #> 78  -0.0023292720 -5.615336e-03  4.305912e-03 -1.526740e-03  2.699881e-03 #> 79  -0.0056451002 -4.381848e-03 -4.112974e-03 -6.326315e-05  2.720532e-03 #> 80   0.0032792155 -2.026458e-03 -2.574131e-03 -3.893002e-05  1.761603e-04 #> 81   0.0091151698 -2.694058e-03  2.293748e-03  1.309254e-03  2.820775e-04 #> 82  -0.0002819509  2.338680e-04  2.689420e-05  1.995434e-04 -1.804923e-04 #> 83  -0.0038309798 -2.385621e-03  1.994574e-03 -4.443064e-03 -4.208311e-03 #> 84  -0.0016283154 -1.229236e-02 -2.945837e-03 -4.303459e-03 -1.669741e-03 #> 85  -0.0007248547  8.900011e-04  5.157844e-04 -7.321628e-04 -1.834619e-04 #> 86  -0.0017341348  2.428270e-03 -8.544174e-03  1.703494e-03  1.614078e-03 #> 87  -0.0024941170  4.025665e-05  2.537958e-03 -3.659326e-04  2.161078e-03 #> 88  -0.0069798421  1.782304e-03 -1.228765e-03  1.960317e-03 -3.483146e-03 #> 89   0.0143827727 -2.013387e-03 -2.262694e-03  1.465390e-03 -3.012073e-03 #> 90  -0.0002049785 -2.992824e-03 -5.657881e-05 -3.130727e-03  5.499877e-06 #> 91  -0.0002908697 -3.774633e-03  4.187597e-03 -4.392304e-03 -1.134706e-03 #> 92   0.0064614800  1.819895e-03 -2.171343e-03 -1.625251e-03 -2.059693e-03 #> 93   0.0018173640  3.970621e-03  9.906497e-04  6.903512e-04 -3.290308e-03 #> 94  -0.0036341151  4.706503e-03  4.903493e-03  2.726477e-03  1.806621e-03 #> 95  -0.0012421127 -2.016766e-03 -5.917935e-03 -1.689880e-03  2.109819e-03 #> 96   0.0077893472 -3.631085e-03  5.012400e-03 -1.119423e-03 -2.992666e-03 #> 97  -0.0002632122  1.790427e-04  1.706239e-06 -1.034365e-04 -2.081581e-05 #> 98  -0.0036036863 -8.080309e-05  2.731260e-03 -9.274979e-04  1.971243e-03 #> 99   0.0054601376 -5.397239e-03 -2.878807e-03 -3.930706e-03 -1.897567e-03 #> 100 -0.0014331922 -2.660796e-03  2.301187e-03 -3.885592e-04 -1.387982e-04 #> 101  0.0223183133  3.815437e-02 -1.607664e-02 -2.086335e-02  1.441297e-02 #> 102  0.0067269674  1.894101e-02 -2.132851e-03 -1.122692e-02  2.081278e-03 #> 103 -0.0033859245  4.692577e-02 -1.126004e-02 -1.111077e-02 -5.188468e-03 #> 104 -0.0061709536 -6.739878e-03 -1.975359e-02 -1.423020e-02  2.429215e-03 #> 105  0.0139123719  1.215539e-02 -1.418605e-02 -1.797560e-02  3.158544e-03 #> 106 -0.0038846715  5.582025e-03  1.088968e-03 -1.085225e-02 -2.699194e-02 #> 107  0.0187546134  1.024025e-02  4.425851e-02  3.984106e-03  1.220522e-02 #> 108  0.0006034180 -8.874097e-04 -3.536723e-02 -1.972471e-02  5.191403e-03 #> 109  0.0573922916  3.115683e-02 -1.896969e-02  9.729414e-03  2.587644e-03 #> 110 -0.0456858122  1.219112e-04  1.480693e-02  9.259467e-03  2.830075e-02 #> 111  0.0101599789 -1.731140e-02 -1.554852e-02 -2.162843e-02 -1.083027e-02 #> 112 -0.0240388422  1.244389e-02 -2.187337e-02 -1.060338e-02 -2.752979e-02 #> 113  0.0108083337 -1.233027e-02 -3.544787e-02  7.115026e-03 -9.847240e-03 #> 114 -0.0079159379  1.675358e-02  3.207278e-02  1.806584e-02 -1.136763e-02 #> 115 -0.0420514450 -1.510465e-02 -1.312442e-02 -1.060905e-04 -1.209983e-02 #> 116 -0.0431518199 -4.169111e-02 -2.502216e-02 -9.977759e-03 -1.670863e-02 #> 117  0.0458713102 -1.877753e-02 -4.302697e-03 -2.279102e-03 -2.945463e-03 #> 118  0.0147393253  2.052398e-02  1.323797e-02  1.119026e-02  1.531726e-02 #> 119 -0.0251446707 -4.846596e-03 -1.849065e-02 -3.848629e-02  4.593775e-03 #> 120  0.0334269874  1.312965e-02  7.914224e-03  1.788270e-02  1.966331e-02 #> 121  0.0130214562 -2.261845e-02  7.629331e-03 -1.981900e-03  4.527775e-03 #> 122 -0.0201636980 -6.641614e-04  1.882425e-02  2.140460e-02 -5.756560e-03 #> 123 -0.0334104318  4.688110e-03  4.941383e-02 -1.353493e-02 -1.080501e-02 #> 124  0.0059056323 -2.609214e-03 -3.669939e-02  3.345693e-03  9.538176e-03 #> 125  0.0074393307  5.008118e-02  2.409922e-02 -1.483175e-02 -2.316209e-02 #> 126  0.0179981747 -4.057429e-02 -1.219070e-02  2.490139e-02  1.339132e-02 #> 127 -0.0761239169 -1.134015e-02 -2.452106e-02  5.260992e-02  6.129739e-03 #> 128 -0.0103341163 -6.103485e-03 -1.576773e-02  1.224301e-02 -3.515773e-02 #> 129 -0.0161508568 -3.404819e-02 -8.102294e-03  8.777020e-04  1.113155e-02 #> 130 -0.0429982292 -1.602150e-03  1.836300e-03 -1.183096e-02 -1.166426e-02 #> 131  0.0547907491  9.899607e-03 -1.799510e-02  6.484614e-03 -3.219226e-02 #> 132  0.0429225561 -1.889211e-03  2.802854e-03 -1.329696e-02  1.042403e-02 #> 133  0.0321147502  2.849226e-02  2.610745e-02  1.700889e-02  5.770867e-03 #> 134 -0.0330037305  1.152873e-02 -5.218623e-03 -5.748229e-03  6.628881e-03 #> 135 -0.0272377114  1.174797e-02 -1.290406e-02  1.564367e-03 -8.181283e-03 #> 136 -0.0081060229  2.675711e-02  9.739382e-03 -4.868230e-03  7.845720e-03 #> 137  0.0218970293  1.424482e-02  1.807244e-02 -3.578980e-04 -1.157216e-02 #> 138  0.0387921918 -2.361300e-03  1.105324e-04  2.530797e-02 -1.801052e-02 #> 139  0.0257360302 -1.870984e-02 -1.121656e-03  1.546724e-02 -8.378043e-03 #> 140  0.0174038553 -2.155778e-03  2.730487e-02  9.611596e-03  1.107573e-02 #> 141 -0.0009498296  2.682287e-03 -4.769530e-02 -5.965138e-02  3.780177e-02 #> 142  0.0600131151 -2.888210e-02 -8.979844e-03  4.746774e-02  9.529807e-03 #> 143  0.0418845229 -8.832507e-03  1.012799e-02  1.942040e-02 -1.779939e-02 #> 144  0.0067069894  4.374620e-03  8.105447e-03 -1.665640e-02  2.184905e-03 #> 145 -0.0267596043  2.406936e-03 -1.876268e-02  3.251770e-02  3.911228e-02 #> 146  0.0460068393 -2.601818e-02 -8.434514e-04 -3.390675e-03 -1.070846e-02 #> 147  0.0047253269 -2.708102e-02  2.179103e-02  1.442366e-03  1.401649e-02 #> 148  0.0063375833 -1.860776e-03 -2.058644e-03 -1.498583e-02  9.402396e-03 #> 149 -0.0191954198  9.037321e-05  2.829772e-03 -1.357925e-02  1.711301e-02 #> 150 -0.0471012951 -2.275151e-02  6.958108e-03  8.735072e-03  3.006937e-02 #> 151  0.0082022161 -1.803567e-02  2.489889e-02  9.273811e-03  2.404542e-02 #> 152  0.0284976372  2.898401e-02 -1.968791e-02  1.277536e-02 -1.613431e-02 #> 153 -0.0138253685 -2.852035e-02 -6.513103e-03 -6.003254e-03 -6.268513e-03 #> 154 -0.0146381101 -2.235239e-02 -3.996863e-02  4.290040e-03 -2.830680e-02 #> 155  0.0277717771 -7.966100e-04 -1.675372e-02 -1.435133e-02 -2.065191e-02 #> 156 -0.0169183923 -3.774586e-02 -1.436188e-02  2.239680e-02 -1.292497e-02 #> 157 -0.0123944525  2.771642e-02  2.125751e-02 -1.894794e-02 -1.568171e-03 #> 158  0.0140661256 -7.567040e-03  9.416257e-03  1.153984e-03  3.252722e-02 #> 159 -0.0212969233 -2.603158e-02  1.829557e-02 -4.714914e-03 -4.333283e-02 #> 160  0.0137104103  2.328050e-02 -1.855563e-02  1.579681e-02  2.634893e-02 #> 161 -0.0027128934 -1.941570e-02  1.458956e-02  6.900140e-03 -1.065328e-02 #> 162  0.0171282155  1.017281e-02  2.765486e-02  2.205469e-03 -1.345600e-02 #> 163  0.0067378835  7.033229e-03  5.437241e-03  1.309988e-02  4.303115e-03 #> 164 -0.0222752941 -3.794056e-02 -1.877405e-02 -4.818718e-03 -1.723752e-03 #> 165  0.0323236157 -2.107072e-03 -1.258689e-02  2.299480e-03 -2.956696e-03 #> 166  0.0124057457  7.743141e-04 -1.816129e-02 -2.439008e-03 -5.425054e-03 #> 167  0.0508569057 -2.648689e-03 -3.975026e-02 -1.848623e-02  1.526769e-02 #> 168  0.0222393171 -2.631549e-02 -2.590885e-02  3.679197e-03  3.913945e-03 #> 169 -0.0153871155 -4.394587e-03 -3.994818e-02  1.254646e-02 -4.870306e-03 #> 170 -0.0164595739  9.766805e-03 -3.185290e-03 -4.751957e-03  9.468462e-03 #> 171 -0.0342558884 -2.684534e-02  2.551291e-02 -2.253144e-03 -7.167319e-03 #> 172  0.0103147670 -9.558656e-03  9.910358e-03 -5.299865e-03 -1.423789e-02 #> 173  0.0151082855  1.413816e-02 -2.295036e-03  2.179901e-03  2.810181e-02 #> 174 -0.0290218023  4.836875e-02 -7.557486e-03  1.320772e-02 -5.415585e-03 #> 175  0.0821231324 -7.586183e-02  6.517389e-02 -4.174127e-02 -7.960313e-03 #> 176 -0.0265148311 -3.780821e-03  4.805551e-03 -1.531984e-02  2.041150e-02 #> 177 -0.0059816719  5.553098e-02  8.571084e-03 -3.307170e-02 -7.326267e-03 #> 178 -0.0339859434  1.169497e-02 -2.512463e-02 -6.845128e-04 -1.724884e-02 #> 179 -0.0267761730 -6.720115e-03  4.047496e-02  7.194752e-03 -9.099929e-03 #> 180 -0.0071326845  5.441063e-02 -2.296322e-03 -1.040018e-02 -9.206056e-03 #> 181  0.0095536525  1.228057e-02 -2.666519e-02  1.306806e-02  2.608386e-03 #> 182  0.0113559010 -1.416869e-02  1.989655e-02  5.176260e-03  2.442796e-02 #> 183 -0.0233766091  5.283047e-02  5.089568e-03  2.640627e-02 -2.976992e-02 #> 184 -0.0026313581 -4.260504e-02  6.663089e-03 -8.787510e-03  7.701465e-03 #> 185 -0.0509044448 -1.314935e-02  1.572987e-02 -2.332710e-02  3.241778e-03 #> 186 -0.0109561033  7.667064e-03  5.291952e-03 -6.956955e-03  1.432994e-02 #> 187 -0.0509723064  2.528123e-04  4.132316e-02  2.994812e-03  3.214073e-02 #> 188 -0.0187169321  3.264950e-02  3.318566e-02 -1.649121e-03  8.701614e-03 #> 189 -0.0134267748 -2.248273e-02 -1.749650e-02 -1.219463e-02 -7.448659e-03 #> 190 -0.0540162838  3.231715e-03 -2.176025e-03  1.385427e-02 -4.856842e-03 #> 191  0.0043976446  1.269350e-02  6.053495e-03 -1.270814e-02 -8.892543e-03 #> 192  0.0029230534  1.822136e-03  3.084572e-03  2.378349e-02 -3.939016e-03 #> 193 -0.0249892031 -1.441321e-02 -6.800952e-03 -1.903821e-04  8.435599e-04 #> 194  0.0090178462 -7.373086e-03  1.454947e-02 -2.617598e-02 -7.943455e-03 #> 195  0.0221861600  7.584026e-03  2.406422e-02  1.569136e-02 -2.167861e-02 #> 196 -0.0252948536 -1.321317e-02  1.895843e-02 -4.629883e-03 -6.405200e-03 #> 197 -0.0095266274  1.398394e-02  2.945451e-02  6.232496e-03 -8.283827e-03 #> 198  0.0465009012  5.168146e-02 -1.167981e-02  3.342943e-03  2.854342e-02 #> 199  0.0078452120  3.577574e-03 -1.732116e-02  1.571521e-02  7.637888e-03 #> 200  0.0150048013 -2.466474e-02  9.051728e-03  1.068495e-02  1.340905e-02 #>             pc170         pc171         pc172         pc173         pc174 #> 1   -5.378471e-03  2.465143e-03 -1.741333e-03  5.341216e-04  2.704596e-04 #> 2   -5.001841e-04 -6.623618e-04  1.865866e-03 -8.956748e-04  3.068441e-04 #> 3   -1.093356e-03  3.450306e-04  2.123545e-04  3.212227e-04  5.025052e-04 #> 4    7.634611e-04 -2.716568e-03  4.419189e-04 -1.506173e-04 -5.885636e-05 #> 5   -9.912784e-04  1.448133e-04 -9.330470e-04  1.404499e-03  3.780460e-04 #> 6    1.630125e-04 -1.070108e-03  5.385369e-04  3.914342e-04 -5.190198e-04 #> 7    3.859542e-03 -3.122510e-03  2.833221e-03  7.263322e-04 -1.550084e-03 #> 8    9.130714e-04 -1.514107e-03  3.724864e-04 -2.507355e-04 -6.189893e-04 #> 9   -2.645564e-03  6.717455e-04 -4.032223e-04 -1.003238e-03  5.068663e-04 #> 10  -1.017180e-03  2.064199e-03  2.036925e-04 -1.950424e-04 -1.733702e-04 #> 11  -3.387157e-03 -2.987412e-04  4.932884e-04 -9.182323e-04  6.666981e-04 #> 12  -1.213279e-03  2.085554e-03 -1.797001e-03 -1.574868e-04  5.603765e-04 #> 13   9.958830e-05  6.509260e-05  7.268708e-05  6.406885e-06  6.247411e-06 #> 14  -1.247865e-03  8.099560e-04 -8.136113e-04  2.097937e-04  1.186894e-03 #> 15   8.754195e-04 -3.311647e-05  7.152391e-04  1.644501e-04  6.041421e-04 #> 16   1.537153e-04 -1.921251e-03 -3.650436e-04  6.307740e-05 -5.073814e-04 #> 17   1.148114e-03 -8.970417e-04  6.523288e-04 -4.335294e-04  2.282424e-04 #> 18   4.303147e-04  1.010025e-03 -2.398086e-03 -6.232126e-05  3.801141e-04 #> 19  -2.387502e-03  1.809077e-03 -1.660064e-03  1.061640e-04 -1.200684e-04 #> 20  -2.260621e-04 -1.294538e-03 -3.022016e-04 -5.910466e-04 -8.705802e-06 #> 21   8.196933e-04  2.092004e-04 -2.441954e-03  9.745872e-04  2.922348e-04 #> 22   1.649790e-03 -7.659382e-04  5.376956e-04  6.941937e-06 -6.291877e-04 #> 23  -1.802387e-03 -2.790070e-04 -3.393509e-04  1.475064e-04  2.553832e-04 #> 24  -2.103284e-03  1.343183e-06 -1.013718e-03  9.581740e-05  6.141744e-04 #> 25   1.821541e-03 -3.904453e-04  9.270261e-04 -3.884257e-05  3.394331e-04 #> 26  -2.002209e-03  1.905454e-04 -1.002714e-03  6.262404e-04 -4.849124e-04 #> 27  -4.862891e-04 -8.586127e-05  1.674073e-04  7.383131e-04 -1.524107e-03 #> 28   1.066880e-03 -2.680839e-05  1.665258e-03 -2.525956e-05 -4.532493e-05 #> 29  -3.656909e-04  1.124208e-05 -9.337065e-04  3.399304e-05 -7.989044e-04 #> 30   1.697255e-03 -1.917306e-03  2.416969e-04  2.444905e-04 -1.217544e-03 #> 31   1.520967e-03 -2.742500e-03  2.254544e-03  6.457802e-05 -5.629061e-05 #> 32   1.607058e-03  3.982625e-04 -1.611507e-03  6.979032e-04  4.099278e-06 #> 33  -8.224165e-06  1.579503e-03 -5.981450e-04 -4.887687e-04 -2.526917e-04 #> 34  -2.180979e-04 -7.514549e-04  8.776883e-04 -4.351988e-05  4.357031e-05 #> 35   6.817789e-04  5.577079e-04 -9.446494e-04  2.573393e-04 -2.787977e-05 #> 36  -1.458610e-03  1.971503e-03 -8.238695e-04 -7.814634e-04  7.971067e-04 #> 37   3.470683e-03 -8.599182e-04  7.296707e-04 -4.827408e-04 -2.515862e-04 #> 38  -1.495266e-03  5.700770e-04  4.078432e-04 -5.795191e-04  1.310159e-03 #> 39  -4.968855e-04 -2.084051e-04  6.298026e-04 -1.287919e-03  6.620150e-04 #> 40   2.199860e-04 -7.147689e-04  8.983751e-04 -2.704393e-04  6.273783e-04 #> 41  -1.005399e-03  1.148960e-03 -2.774720e-03 -2.417552e-04 -2.159053e-04 #> 42   9.191091e-05  1.205973e-04 -7.562979e-04  3.377834e-06  5.863396e-04 #> 43   1.009542e-04  8.440185e-04 -4.503764e-04  3.943732e-04  1.496189e-03 #> 44   1.988023e-03  5.225304e-04 -2.920995e-04  1.224331e-04 -3.386448e-04 #> 45   3.980394e-03  2.175649e-03 -1.058470e-03  1.120549e-03 -9.490517e-04 #> 46  -8.950579e-05  7.288973e-04 -9.917145e-04 -2.706208e-04 -2.849154e-04 #> 47   1.638048e-04  3.745941e-04 -1.294968e-03 -1.624195e-04 -3.329414e-04 #> 48  -6.463679e-04  1.259784e-03 -7.204850e-04  7.920019e-04 -1.979304e-04 #> 49  -1.058154e-03 -9.342226e-04  4.721208e-04 -3.483283e-05  6.013077e-04 #> 50  -9.590554e-04  5.652999e-04 -5.884427e-04 -2.111662e-05  3.416917e-04 #> 51   2.562212e-03  7.637468e-04 -1.506040e-03  3.449938e-04  1.405194e-04 #> 52   2.417502e-03 -3.640623e-04  8.787228e-04 -1.278320e-04 -2.348736e-04 #> 53  -1.909900e-03 -1.271429e-03  3.610691e-04 -1.132264e-04 -1.534183e-03 #> 54   1.258426e-04 -7.166660e-04  2.540964e-05 -5.101302e-04 -9.896746e-06 #> 55  -3.727944e-04  3.388208e-04  9.967519e-04  2.922659e-04 -7.396162e-04 #> 56   5.057109e-03  1.549462e-03 -5.598095e-04 -1.959274e-04 -4.422710e-05 #> 57   1.294571e-03 -2.465772e-04 -1.455169e-03  1.218367e-04 -4.317441e-04 #> 58   8.371304e-04  1.561466e-03  2.968738e-04 -1.612793e-04 -1.467923e-04 #> 59   2.258755e-03 -1.693743e-03  1.234411e-03 -6.752219e-04  7.937833e-05 #> 60  -6.265403e-04 -2.867072e-04  1.481728e-03 -6.111581e-04 -3.733008e-04 #> 61   9.143437e-04 -1.606418e-03  2.441895e-03 -1.060208e-03 -1.576746e-04 #> 62  -1.891627e-03  2.024807e-03 -1.749978e-03  2.678865e-04  2.872342e-04 #> 63  -2.142674e-03 -3.409089e-04  1.556148e-04 -4.393148e-04  6.286615e-04 #> 64   4.973259e-04 -6.219223e-04 -2.636235e-04  5.314826e-04  9.051266e-05 #> 65   2.194868e-03 -7.644649e-04  4.139956e-04  6.262192e-04 -9.125636e-04 #> 66  -2.711264e-03  4.475734e-04  1.347783e-03 -4.912933e-04  2.884653e-04 #> 67   9.485108e-04  5.821611e-04  2.167329e-04  2.574956e-04 -4.488918e-04 #> 68   3.202335e-06  7.938390e-05 -1.910154e-04  8.790294e-04 -1.075209e-03 #> 69   9.349812e-04 -9.152210e-05  1.051422e-03 -4.304632e-04  4.113726e-05 #> 70   2.690119e-04 -2.267800e-05  4.796443e-04 -5.189517e-04 -3.854971e-04 #> 71   9.880815e-05  9.383711e-04 -1.497020e-03  1.370674e-03 -7.752757e-04 #> 72  -1.915838e-03  4.868352e-04  3.535698e-04  6.559263e-04 -6.957981e-04 #> 73   3.425263e-03 -1.226048e-03 -1.432463e-05  2.421470e-04  4.102948e-04 #> 74   1.958381e-03  6.455454e-04  3.209656e-04  2.216304e-04 -3.805594e-04 #> 75  -2.585228e-03 -7.267671e-04  1.246026e-05 -1.539559e-04  1.774717e-05 #> 76   1.916513e-03  2.064358e-04 -2.142817e-03  1.171954e-04  2.653440e-04 #> 77  -9.510635e-04 -8.108969e-04  8.740779e-04 -2.627534e-04 -1.352047e-04 #> 78   1.156029e-03 -1.836831e-03  1.882646e-03 -3.914487e-04  2.850812e-04 #> 79   6.535357e-04  9.314586e-04  1.134977e-03  4.204912e-04 -3.465121e-04 #> 80  -3.360615e-04 -3.943602e-04  3.351885e-04  2.308413e-05 -1.726042e-04 #> 81   3.921654e-03 -2.023855e-03  6.939014e-04  8.761526e-05 -2.042282e-04 #> 82  -2.292165e-04 -8.347290e-05  1.852170e-05  4.987579e-05  3.223613e-05 #> 83  -6.400545e-03  8.181852e-04  8.490936e-05 -1.244100e-03  1.983823e-03 #> 84   4.593065e-04 -8.322256e-04  5.142152e-03 -5.773475e-04  1.051300e-03 #> 85  -2.660387e-03  1.062886e-03 -9.179461e-04  2.153691e-04 -1.874405e-04 #> 86  -5.683539e-05  5.150152e-04  1.459294e-03 -4.983003e-04  4.099488e-04 #> 87  -4.502816e-05 -7.123327e-05 -7.849574e-04  5.118203e-04 -8.169058e-04 #> 88  -4.356705e-03 -1.030442e-03  2.213055e-03 -9.674338e-04 -2.537529e-04 #> 89   2.218899e-03 -8.833532e-04  6.506091e-04 -3.098709e-04  1.447281e-04 #> 90  -1.020733e-03  7.879476e-04 -3.685922e-04 -3.335661e-04  2.872214e-04 #> 91  -2.698113e-03  2.633631e-04 -8.877873e-04 -2.722749e-04  2.577014e-04 #> 92  -1.009842e-04  5.579949e-04 -2.552327e-03  7.098943e-04  6.758442e-04 #> 93  -1.720504e-03 -9.432140e-05 -1.766448e-03  4.722119e-04  2.589692e-04 #> 94   1.080074e-03 -3.930790e-04 -2.662553e-04  3.709270e-04 -1.335697e-03 #> 95  -4.576629e-04  1.914989e-03  1.611046e-04  2.366669e-04  4.322653e-04 #> 96   4.189195e-04  7.367299e-04  7.123398e-05 -3.058453e-04  3.318144e-04 #> 97   6.943609e-05 -4.733508e-05  4.433336e-05  3.497288e-05 -1.273324e-05 #> 98  -2.323052e-03  1.629388e-04  6.516297e-04 -2.930592e-04 -2.172169e-04 #> 99   2.270765e-03 -6.730804e-04  6.948492e-04  2.509382e-04  1.609767e-03 #> 100  3.795097e-04 -4.730279e-04  6.327532e-04 -6.554838e-05  4.073814e-06 #> 101 -2.839507e-02 -4.184884e-03  5.601706e-03 -9.179779e-03 -4.375227e-03 #> 102  8.981815e-03  1.292670e-02  3.421497e-03 -2.186365e-03  1.843186e-02 #> 103  1.683020e-02  6.728190e-03  1.054533e-02  9.404079e-03 -2.237595e-03 #> 104  2.807716e-02  1.950643e-02 -2.076947e-03  9.647841e-04  3.326276e-03 #> 105 -7.290169e-04 -1.041940e-02 -9.090275e-04  4.352228e-03 -1.783884e-03 #> 106  9.739207e-03 -9.902934e-03 -3.038604e-03  2.150550e-03 -1.633209e-03 #> 107  8.987514e-04  2.857546e-04  1.552174e-02 -4.543883e-03 -6.862674e-03 #> 108  2.055470e-02  2.849572e-03 -1.291859e-02 -4.563312e-04 -5.969722e-03 #> 109 -6.447314e-03 -2.700554e-03  7.735513e-03  4.938092e-03 -7.901145e-04 #> 110 -1.469737e-02  1.203056e-02 -1.717660e-02  5.846879e-03 -1.980666e-03 #> 111  1.250868e-02  1.029779e-02 -1.034485e-02 -6.453125e-03  7.066383e-03 #> 112  1.569183e-02  1.011035e-02  5.239297e-03  9.830389e-03  4.843225e-03 #> 113  4.575137e-03  2.755855e-03 -1.008718e-02  5.149317e-05 -1.117398e-02 #> 114  1.303802e-02  1.126800e-02  2.255131e-03 -7.653419e-03  7.547336e-03 #> 115  4.499266e-03 -7.405536e-03  1.456994e-02 -6.478852e-03  9.619867e-04 #> 116 -4.824738e-03  1.815065e-02  4.881305e-03 -1.098149e-03  8.134922e-04 #> 117 -2.324935e-03 -1.668194e-02  2.635397e-02  1.630366e-02  1.223366e-03 #> 118  2.347289e-02 -1.491403e-02  2.254203e-02  7.501737e-03 -7.831175e-03 #> 119  2.160440e-03 -1.127502e-02 -1.144907e-02 -6.939656e-03  9.071178e-04 #> 120 -1.250842e-02  3.318193e-02 -6.052589e-03 -1.906570e-02 -2.005873e-03 #> 121  2.213850e-02  1.616746e-02 -9.196146e-03 -4.329319e-03  1.005799e-03 #> 122 -2.017910e-02 -1.852228e-02 -7.558124e-03 -3.115036e-03  3.895836e-03 #> 123 -1.291238e-02 -2.366734e-02  4.040485e-03  6.251365e-04 -1.052604e-03 #> 124  9.319259e-03  5.681573e-04 -1.484821e-02  2.340589e-03 -2.807483e-03 #> 125 -3.369710e-03  3.057338e-02  1.084442e-03  6.744498e-03 -5.941350e-04 #> 126 -9.138786e-04 -1.539188e-02 -1.082995e-02  1.625578e-02 -1.438215e-03 #> 127  5.790140e-03  1.374986e-02 -1.863307e-03  7.995686e-03  7.402077e-04 #> 128 -2.652374e-03  2.600430e-03  1.586706e-02  6.571821e-03  4.565277e-03 #> 129 -4.791234e-03 -7.390915e-03 -9.042624e-04 -8.474157e-03  3.320965e-03 #> 130  1.857365e-02 -3.821705e-03 -6.505270e-03  1.142542e-02  1.522919e-04 #> 131  7.560840e-03 -3.427941e-02 -8.993092e-03  3.384939e-03  1.813160e-03 #> 132 -3.399811e-03  2.156949e-03 -6.398766e-03  7.516717e-03  3.983885e-03 #> 133  4.371644e-03 -1.180481e-02 -2.789036e-02 -1.901677e-03  5.812844e-03 #> 134  1.514699e-02  4.831364e-03 -1.231022e-02 -4.148025e-03 -1.879157e-02 #> 135 -9.281211e-03  2.702931e-03 -6.657939e-03  1.387109e-02  2.163684e-03 #> 136  3.887051e-02 -1.437610e-02  2.251303e-02  3.276111e-03  2.155254e-04 #> 137  2.192023e-02 -4.724173e-03  1.326459e-03  5.719828e-03  3.585557e-03 #> 138  2.388201e-03 -1.347053e-02 -7.389956e-03 -2.497465e-02  7.418593e-03 #> 139 -4.934034e-03  1.009347e-02 -7.720577e-03  5.866604e-03  7.393921e-03 #> 140 -9.784937e-03  1.740217e-02 -5.550493e-03 -5.813766e-03 -1.862394e-03 #> 141 -2.190255e-02 -3.692268e-03 -1.824571e-02  3.838578e-03  3.588387e-03 #> 142  1.059499e-02  9.940545e-03 -3.466734e-03  8.073219e-04  1.257828e-03 #> 143 -4.650075e-04  1.860073e-02 -5.607357e-03  6.123536e-04 -4.105676e-03 #> 144  7.096558e-03 -1.530960e-02  7.698320e-03 -1.832233e-02 -6.563661e-03 #> 145  8.234734e-03 -1.629505e-02  2.130054e-02 -7.172535e-03 -4.679222e-03 #> 146 -1.058095e-02  5.768107e-03  6.717710e-03  3.167846e-03  2.195566e-03 #> 147  1.750028e-02 -2.722584e-02  8.839859e-03  1.155768e-02 -4.129459e-03 #> 148  8.666172e-03  2.584587e-02  1.573695e-02  8.726186e-03  4.530733e-03 #> 149  6.927191e-04 -2.345066e-02  2.592798e-03 -8.598654e-04  4.070573e-03 #> 150  9.642028e-03  1.124136e-02  2.740211e-03 -6.021277e-03 -1.550431e-03 #> 151  1.809065e-02 -1.753997e-04  1.457834e-02 -8.622835e-03 -5.991191e-03 #> 152 -2.465080e-02 -7.644931e-03  4.290810e-03 -2.225986e-03 -2.263876e-03 #> 153 -1.108922e-03  1.208946e-02  5.026720e-04  1.736249e-03 -1.864053e-04 #> 154 -1.976381e-03  8.052705e-03  2.254225e-02 -1.699560e-03 -1.878231e-03 #> 155  5.529632e-03  1.499284e-02 -7.606555e-03 -9.312812e-03 -7.407385e-03 #> 156 -1.954940e-02 -3.401696e-04  1.132093e-02 -1.584529e-03  2.624888e-03 #> 157 -1.008705e-03 -2.114101e-02 -8.536938e-03 -5.578530e-03  4.776092e-03 #> 158  2.531757e-03  9.071458e-03  1.026351e-02 -1.892490e-03 -7.420023e-04 #> 159  1.702416e-02 -1.387551e-03 -1.783218e-02 -1.208117e-02 -3.898997e-03 #> 160 -7.111181e-03 -4.167752e-03 -2.250980e-03  1.256217e-02  2.145265e-03 #> 161 -2.072143e-02 -7.572036e-04  9.784727e-03  4.390975e-03 -7.188456e-03 #> 162 -2.369067e-02 -7.205822e-03 -1.601902e-02 -8.660968e-03 -5.194873e-03 #> 163  5.747313e-03 -7.106616e-03 -1.244432e-02 -1.780473e-02  4.195013e-03 #> 164 -3.651147e-03 -1.975564e-02 -4.201880e-03  1.044127e-02 -1.982647e-03 #> 165  2.136115e-02 -4.310724e-03 -1.599342e-02  5.731017e-03 -3.194247e-03 #> 166 -2.549713e-03  4.696866e-04  4.957285e-03  1.004299e-02 -2.022630e-03 #> 167  1.830210e-02  2.728468e-02  1.631046e-02 -2.273307e-03 -3.590490e-03 #> 168 -3.765462e-03 -1.446776e-02  2.100758e-02 -9.879400e-03 -3.593195e-03 #> 169 -3.284186e-02 -9.450877e-03 -9.339061e-03  3.058130e-04  3.521835e-03 #> 170  1.841733e-02 -1.644522e-02 -4.984556e-03 -1.723568e-03  3.340425e-03 #> 171  2.905838e-02 -4.656266e-03 -2.731023e-02  7.094411e-03 -7.638857e-03 #> 172 -3.122909e-03 -3.860315e-03 -1.247423e-03 -5.281035e-03  4.357521e-04 #> 173 -7.121873e-03  9.033596e-03  3.856671e-03 -6.385429e-03 -1.631308e-03 #> 174 -1.772761e-02 -5.514438e-03  6.316486e-03 -7.516296e-04  9.607091e-03 #> 175 -2.353682e-02 -1.256062e-03  4.660953e-03  8.073286e-03 -1.688397e-03 #> 176 -7.137136e-03 -1.890718e-02  3.861446e-03 -1.407817e-02  6.521785e-03 #> 177 -6.115551e-03  2.777054e-03 -4.852785e-03 -1.325530e-04 -1.171393e-02 #> 178 -2.414247e-03  7.538748e-03 -6.167977e-03 -7.702110e-03  4.028060e-03 #> 179 -2.425115e-02  3.440823e-03  5.200573e-03  6.876631e-03  5.349391e-03 #> 180 -8.613012e-03  2.813069e-03  1.779965e-02  2.963091e-03  1.224713e-04 #> 181 -1.066729e-02 -5.537726e-03  7.386595e-03 -1.169409e-02 -2.497193e-04 #> 182  8.380572e-03 -2.120317e-03 -4.653496e-03 -7.121615e-03 -2.547474e-03 #> 183 -5.178220e-03 -5.771089e-03 -6.781126e-03 -3.734143e-03 -1.307773e-02 #> 184 -1.688538e-02  2.403367e-03 -5.325551e-03 -8.489996e-03  3.591990e-03 #> 185  2.248486e-02 -1.352630e-02  8.478955e-03 -1.460753e-02  9.833787e-03 #> 186 -3.762446e-02  3.124963e-02  2.299712e-03 -4.964019e-03  2.421533e-04 #> 187 -1.962839e-02  1.000320e-02 -2.896882e-03  2.104492e-02 -1.416995e-03 #> 188  1.101962e-02 -7.705408e-03 -6.340250e-03  1.019767e-02  5.737115e-03 #> 189 -3.516611e-03 -2.919410e-03 -7.616319e-03  4.102165e-03  2.227379e-03 #> 190 -9.843959e-03  5.367578e-03  1.612636e-02 -7.902491e-03 -6.275891e-03 #> 191 -2.426198e-02  3.388776e-03 -3.446610e-03  1.099294e-02 -1.119446e-02 #> 192 -9.527443e-03  2.813172e-03 -7.838866e-03  6.287481e-03  3.532987e-03 #> 193 -2.067063e-02 -7.384037e-03 -8.474747e-03  3.116511e-03 -1.497481e-03 #> 194 -9.103320e-03 -2.001675e-03  2.611076e-02 -3.139162e-03  2.050824e-03 #> 195  8.381208e-03 -4.870160e-03  5.011176e-03  4.957709e-04  1.588497e-03 #> 196  5.473922e-03  3.096834e-02  2.239883e-03 -2.353910e-03 -2.611433e-03 #> 197  1.901525e-02  3.120086e-02  6.614902e-03  6.132063e-03  1.061926e-02 #> 198  6.355883e-03  2.121260e-04 -1.621745e-02  2.703101e-03  8.156758e-03 #> 199 -1.174371e-02 -2.214360e-02  6.127689e-05  9.776224e-03  3.973682e-03 #> 200  1.186875e-02  6.689695e-03 -1.739086e-02  4.987917e-03 -5.468085e-04 #>             pc175         pc176         pc177         pc178         pc179 #> 1   -1.135313e-04  1.050498e-04  6.679665e-16  0.000000e+00  0.000000e+00 #> 2   -4.661912e-04 -2.855564e-05  1.363670e-15  2.300543e-32 -3.331302e-32 #> 3   -1.344010e-06  2.232168e-05  1.327699e-15  2.886687e-32 -2.781215e-32 #> 4   -3.007833e-04 -2.889146e-05  1.119593e-15  6.725575e-32  1.684975e-32 #> 5    2.072945e-04 -1.137946e-04  1.321589e-15  5.905478e-32 -6.047816e-33 #> 6    3.327345e-04 -6.563153e-05  1.865305e-15  6.823434e-32  5.782420e-33 #> 7   -4.396630e-04 -2.051367e-04  2.229976e-15  1.046898e-31  1.163705e-32 #> 8   -1.422137e-04  5.862281e-05  1.718457e-15  4.797523e-32  1.841730e-32 #> 9    4.091424e-04 -2.041456e-04  8.051852e-16  4.310416e-32  1.972399e-32 #> 10   2.882763e-04  1.121509e-04  1.452411e-15  2.737406e-32 -4.172677e-33 #> 11  -2.210358e-04 -2.179557e-04  9.091164e-16  4.444500e-32 -1.323176e-32 #> 12   4.275613e-04  1.325011e-05  1.133642e-15  3.311165e-32  1.563359e-32 #> 13  -1.303699e-05 -2.052409e-06  1.347928e-15  4.213039e-32 -4.426240e-33 #> 14   7.041672e-04  2.493220e-04  1.375853e-15 -2.263877e-32 -4.994320e-32 #> 15   5.174855e-04  6.478415e-05  1.464657e-15  5.060643e-33 -3.802728e-32 #> 16   2.680964e-04  7.063897e-05  1.535921e-15  5.651534e-32  3.150800e-32 #> 17   1.046500e-05  9.300656e-05  1.036688e-15  1.411721e-32 -1.370941e-33 #> 18   7.222023e-04  6.814767e-05  2.132607e-15  5.117402e-32  2.197429e-32 #> 19   1.827351e-05  1.600409e-04  1.424460e-15  7.067811e-33 -4.918355e-33 #> 20  -3.695625e-04 -1.180270e-04  1.069417e-15  7.750579e-32  3.260690e-32 #> 21   5.538670e-04  1.075952e-04  1.452339e-15  7.002671e-32  9.716374e-33 #> 22  -5.138171e-04 -1.121598e-04  7.788180e-16  7.754907e-32  3.611129e-32 #> 23   9.935400e-05  1.454362e-04  1.081107e-15  1.164846e-32  6.666768e-33 #> 24  -1.673567e-04  6.214494e-05  5.445115e-16  6.395004e-33 -1.566258e-32 #> 25   3.093916e-04 -4.572192e-05  1.780140e-15  4.548385e-32 -4.947980e-32 #> 26   3.439267e-04 -2.441622e-05  1.775758e-15  7.976250e-32  4.585704e-32 #> 27  -1.907383e-04  1.232794e-04  1.093325e-15  5.123051e-32  7.248518e-32 #> 28  -4.948760e-04 -5.880802e-05  1.425263e-15  2.216485e-32 -4.674237e-32 #> 29  -2.144936e-04  6.648364e-05  9.414274e-16  4.648537e-32  2.951617e-32 #> 30  -5.529991e-04 -4.126160e-05  1.562242e-15  6.539200e-32 -8.648739e-34 #> 31  -4.880890e-04 -1.880138e-05  1.380648e-15  4.272573e-32 -4.077697e-32 #> 32   1.757138e-04  1.734131e-05  1.606093e-15  4.066980e-32 -9.252523e-33 #> 33  -1.260507e-05 -6.754121e-05  1.138202e-15  5.773365e-32  2.447340e-32 #> 34  -1.594977e-04 -3.526601e-05  1.203038e-15  3.559179e-32 -3.331025e-34 #> 35   4.610342e-04  2.080703e-04  1.956610e-15  2.923607e-33 -3.340683e-32 #> 36   2.222371e-04  2.300257e-04  1.400569e-15 -4.127490e-32 -6.090457e-32 #> 37   8.209831e-05 -1.363942e-05  1.797256e-15  5.482129e-32 -1.381630e-32 #> 38   6.536856e-04  1.288776e-04  1.322217e-15 -1.529233e-32 -5.579884e-32 #> 39  -1.351713e-04 -8.653015e-05  1.647950e-15  5.050091e-32 -1.118521e-32 #> 40   2.307887e-05  1.151915e-04  1.369895e-15 -4.736757e-33 -6.747206e-32 #> 41   1.154703e-04  2.980144e-04  1.068259e-15  5.645026e-33  3.568080e-32 #> 42   3.426507e-04  1.740735e-04  1.683709e-15  2.787254e-32 -1.893149e-32 #> 43   7.586941e-04  4.716319e-04  1.502445e-15 -2.989054e-32 -7.454761e-32 #> 44   2.768851e-04  2.713889e-04  1.806034e-15  2.049447e-32 -9.972932e-34 #> 45  -2.626972e-04 -1.102978e-04  1.766975e-15  1.032189e-31  2.008016e-32 #> 46  -7.081167e-05 -2.016164e-04  1.319013e-15  8.710688e-32  5.159114e-32 #> 47   4.871153e-04 -5.662546e-05  1.396708e-15  1.090909e-31  6.064259e-32 #> 48  -3.852041e-04 -1.335656e-04  5.131643e-16  6.510632e-32  3.288422e-32 #> 49   3.967252e-04  8.868745e-05  1.742171e-15  2.209443e-32 -5.603086e-32 #> 50   4.228340e-04  1.233154e-04  1.084718e-15  2.395848e-32 -1.253310e-32 #> 51   7.076242e-04  3.708347e-05  1.750655e-15  6.590859e-32  3.826680e-33 #> 52  -3.719200e-04 -4.123684e-05  1.645634e-15  3.657439e-32 -2.927591e-32 #> 53  -1.165105e-03 -2.966618e-04  8.861458e-16  8.750699e-32  4.379705e-32 #> 54  -4.093983e-04 -1.525192e-04  1.165144e-15  7.137671e-32  4.246743e-33 #> 55  -2.161027e-04 -2.083585e-05  1.472417e-15  3.877378e-32 -4.954372e-33 #> 56   4.442714e-04 -1.108571e-04  2.655462e-15  5.668636e-32 -3.396069e-32 #> 57   2.955989e-04  8.021374e-05  1.468200e-15  8.503526e-32  4.158823e-32 #> 58  -7.210747e-05  1.619066e-04  1.648586e-15  8.704341e-33 -5.849699e-32 #> 59   2.647894e-04 -5.303046e-05  2.195156e-15  5.212439e-32 -2.711918e-32 #> 60  -4.662834e-05 -1.966985e-04  1.665852e-15  6.476460e-32 -1.633493e-32 #> 61  -8.765648e-04 -3.348762e-04  1.235943e-15  5.240225e-32 -2.691559e-32 #> 62   2.443746e-04 -8.749187e-05  1.279944e-15  3.752456e-32 -1.312883e-32 #> 63  -1.257172e-04  1.492992e-04  9.249372e-16  3.819459e-32 -1.781577e-33 #> 64  -8.449874e-05 -8.573338e-05  1.182593e-15  6.449339e-32 -1.547766e-33 #> 65   8.175548e-05  4.736860e-05  1.835069e-15  6.773302e-32  1.929266e-32 #> 66   3.768835e-06  5.926348e-05  1.205155e-15  1.909596e-32 -1.560932e-32 #> 67   1.956871e-06  3.283962e-05  1.493971e-15  3.908869e-32 -1.928141e-33 #> 68  -2.115401e-04 -4.661410e-05  1.150017e-15  7.185575e-32  4.248575e-32 #> 69  -3.035867e-04  6.748242e-05  1.768670e-15  1.835806e-32 -2.543993e-32 #> 70  -4.191621e-04 -1.529016e-04  1.354901e-15  8.257566e-32  2.066550e-32 #> 71  -3.047116e-04  1.121385e-04  6.815694e-16  4.683483e-32  4.304334e-32 #> 72  -4.632398e-04 -1.269514e-04  7.691288e-16  5.430063e-32  3.437654e-32 #> 73   2.943848e-04  1.104326e-04  1.539495e-15  5.801515e-32 -5.632329e-33 #> 74  -1.304712e-04  4.203922e-05  1.869082e-15  4.328924e-32 -1.229050e-32 #> 75   1.492109e-04  6.118552e-05  9.860659e-16  2.788942e-32  2.334654e-32 #> 76   3.986769e-04  1.042691e-04  1.364039e-15  5.481774e-32  1.049212e-32 #> 77  -5.442562e-04 -3.146598e-05  1.115988e-15  3.596556e-32  4.076063e-33 #> 78  -2.969547e-05  2.907274e-04  1.743224e-15 -1.394176e-32 -5.368695e-32 #> 79  -5.213253e-04 -2.041330e-04  1.341385e-15  3.879856e-32 -6.069157e-32 #> 80   5.637774e-05 -1.023378e-04  1.373080e-15  6.447547e-32  1.929373e-34 #> 81   1.031186e-04  8.542139e-05  1.606815e-15  4.644636e-32 -8.399612e-33 #> 82   7.878845e-06 -2.266836e-06  1.347928e-15  4.213039e-32 -4.426240e-33 #> 83  -1.609950e-04 -1.330565e-04  3.935336e-16  1.778332e-32 -2.605571e-32 #> 84  -1.307896e-03 -3.482582e-04  7.205044e-16  1.189955e-32 -1.279103e-31 #> 85   1.024277e-04  6.786091e-05  9.768716e-16  2.732838e-32  1.536979e-32 #> 86  -8.408104e-05  2.476431e-04  2.046085e-15 -9.258793e-33 -6.994198e-32 #> 87  -2.077454e-04 -1.548038e-04  8.766719e-16  5.907283e-32  3.795035e-32 #> 88  -3.873277e-04 -1.897492e-04  1.237751e-15  9.459436e-32  2.955609e-32 #> 89   9.967170e-04  8.182858e-06  2.259700e-15  7.432827e-32 -2.318457e-32 #> 90   2.180513e-05 -3.359249e-05  1.141620e-15  3.152709e-32 -1.933370e-32 #> 91  -2.514516e-04 -2.548995e-04  4.689100e-16  5.398356e-32  1.756739e-32 #> 92   8.191954e-04  9.473492e-05  1.213646e-15  5.428074e-32  2.151511e-32 #> 93   3.002679e-04 -2.675883e-04  1.243139e-15  9.793325e-32  6.114018e-32 #> 94  -1.800630e-04 -9.844888e-05  1.106341e-15  8.167247e-32  8.137019e-32 #> 95   7.896495e-05 -9.295161e-05  8.685886e-16 -3.584092e-33 -4.646535e-32 #> 96  -6.956259e-05  7.775782e-05  1.170078e-15  2.499198e-32 -2.219481e-32 #> 97  -9.485747e-06  5.754167e-06  1.347928e-15  4.213039e-32 -4.426240e-33 #> 98  -5.490376e-04  3.480532e-06  1.090092e-15  2.489079e-32 -1.677230e-32 #> 99   4.219482e-04  8.569249e-05  1.445834e-15 -3.163087e-33 -7.833524e-32 #> 100 -5.661882e-04 -2.224346e-04  8.926452e-16  6.681780e-32 -9.972108e-33 #> 101 -4.380520e-03 -7.888454e-04 -1.981503e-15 -1.506800e-31 -1.091439e-30 #> 102 -9.178560e-04  8.447846e-04 -2.261658e-15 -1.085524e-31 -7.323098e-32 #> 103 -5.756298e-03 -2.319309e-03  1.977825e-16 -1.212092e-30 -2.535211e-31 #> 104  2.080767e-03 -6.124222e-04  3.253910e-15 -1.558082e-32  1.733276e-30 #> 105  7.591982e-03 -3.000520e-03 -4.127480e-15  5.912822e-31  5.881832e-31 #> 106 -9.348719e-04  3.343610e-03  5.633556e-15  1.545533e-31  1.435495e-31 #> 107  4.178399e-03 -1.485648e-03  1.243375e-15  1.769260e-31  1.829543e-31 #> 108  3.384232e-03 -4.373876e-03  2.504033e-15 -2.165867e-31 -8.987652e-31 #> 109  6.025583e-06  1.316572e-04 -2.151069e-15  2.875552e-31 -1.376752e-30 #> 110  5.968909e-04 -1.627401e-03  2.753817e-15  1.318572e-30 -1.092764e-30 #> 111  1.015790e-03  6.308134e-04  5.754209e-15 -3.940957e-32 -4.105844e-31 #> 112  6.527136e-03 -2.246313e-03  1.217389e-15 -1.286991e-30 -4.644061e-32 #> 113 -7.149882e-03  5.589446e-04 -5.586720e-15 -1.458296e-30  1.166626e-30 #> 114  6.595878e-03 -4.535221e-03  2.747244e-15  2.985022e-31 -7.070269e-31 #> 115 -1.024427e-03  4.087661e-04  3.905234e-16  2.597632e-31 -3.916316e-31 #> 116  2.045667e-03  2.533503e-03  3.360732e-15 -4.265687e-31 -2.438966e-31 #> 117 -1.561351e-04 -3.124511e-03 -3.543494e-15  9.824887e-31 -1.166360e-30 #> 118 -1.054991e-03  2.838683e-03 -2.240649e-15 -1.874390e-31  2.857084e-31 #> 119 -1.737790e-03 -1.614500e-04 -4.358871e-16 -5.274722e-31  3.621295e-31 #> 120  1.365527e-03  2.022050e-03  6.163907e-15  3.465085e-31  1.152179e-30 #> 121 -1.530945e-03  6.243535e-04 -3.527907e-15  5.978551e-31  2.268326e-31 #> 122  1.088832e-03 -9.175338e-04  8.101863e-15 -1.037480e-30  3.805339e-31 #> 123 -6.327029e-04 -8.412659e-04 -2.048938e-15  4.232995e-31  7.920764e-32 #> 124 -3.002623e-03 -7.201904e-04 -2.780019e-16  9.134218e-31 -7.607569e-31 #> 125  5.115119e-03  3.201502e-03  3.429051e-15  5.538726e-31 -6.212518e-31 #> 126  5.907028e-04  3.318305e-03  7.205895e-15 -1.608540e-30 -1.617022e-31 #> 127 -4.937249e-03 -2.919391e-04 -7.287142e-15  1.692288e-30  6.026432e-31 #> 128  5.034134e-03  3.016969e-03  1.998769e-16 -8.386511e-31  4.355895e-31 #> 129 -5.571266e-03 -3.784207e-04  7.515014e-15  6.497704e-31 -7.048506e-31 #> 130  5.880670e-03 -7.805957e-04 -2.939226e-15  1.478129e-31 -4.816837e-31 #> 131  2.194069e-03  3.218157e-03  2.824543e-15  1.060757e-30  7.452766e-31 #> 132 -5.834630e-04 -6.544346e-04  4.546946e-15  5.412378e-31  4.980325e-32 #> 133 -4.145940e-03  4.521243e-04  3.910863e-15  2.788949e-31  6.447510e-31 #> 134  1.395919e-02 -5.411858e-04 -4.946516e-16 -2.655901e-31  3.552494e-31 #> 135 -1.208031e-02  6.342899e-04  4.771510e-17 -1.742191e-32 -3.276702e-31 #> 136  1.662348e-03  2.171813e-03  6.138330e-15 -1.823778e-31 -3.860907e-31 #> 137  1.849186e-03  3.293971e-03 -5.603357e-15  1.524509e-30 -5.867175e-31 #> 138 -6.494823e-03 -3.737803e-04 -8.279035e-15 -4.940270e-31 -6.749253e-32 #> 139  3.395320e-03 -2.000764e-04  1.590371e-14  2.684605e-31 -9.066078e-31 #> 140 -4.589148e-03 -1.535990e-03  5.223338e-15  6.464010e-31 -7.584705e-31 #> 141  2.561273e-03 -9.195674e-04 -3.943941e-15 -8.635964e-32  2.159419e-31 #> 142  2.117787e-03  5.866706e-04  5.616367e-15 -8.067796e-31 -1.454542e-31 #> 143  4.492898e-03 -1.792234e-03 -5.876222e-15  3.619183e-31 -6.781220e-31 #> 144  4.656645e-03  1.433577e-03  3.504541e-15 -9.457838e-31  5.630636e-31 #> 145  9.127550e-03  1.248039e-03 -1.220890e-16 -2.354077e-31 -2.332489e-31 #> 146  9.073276e-04  1.585363e-03 -6.194911e-15  4.357675e-31 -3.256621e-31 #> 147 -1.663072e-03  2.253296e-03  3.194167e-15 -6.610063e-31 -8.282781e-31 #> 148 -2.722355e-03 -2.501709e-03  8.755010e-15 -1.091268e-30 -9.244313e-31 #> 149 -7.927675e-03  2.993011e-03 -6.218503e-15  1.067368e-30  5.478846e-31 #> 150  7.977043e-04 -2.057341e-03  5.765976e-15  5.967216e-31  8.118712e-31 #> 151 -6.578340e-03 -4.929859e-04  8.015226e-16 -1.184466e-31 -9.713419e-32 #> 152  2.874559e-03 -1.146259e-03 -9.857265e-16 -7.761134e-31 -1.799010e-32 #> 153 -4.555028e-03  2.228590e-03  5.842177e-15  5.421708e-31 -7.110904e-31 #> 154 -3.175765e-03 -1.794570e-03  8.325455e-15  4.588225e-31  3.869137e-31 #> 155 -3.545537e-03  2.479061e-03 -5.507366e-15 -2.967075e-31 -6.903379e-31 #> 156 -4.121958e-03 -2.538890e-04 -7.392715e-15 -9.556398e-31 -3.318343e-31 #> 157  2.616928e-03  3.039936e-03  4.565026e-15 -8.999238e-31 -1.554762e-30 #> 158 -8.429157e-04 -2.041691e-03 -4.440149e-15 -1.761479e-31  1.089374e-30 #> 159 -7.425695e-03 -1.501278e-03 -1.729289e-15  2.661891e-31  4.506702e-31 #> 160  3.668984e-03  3.768393e-03 -4.146503e-15 -1.195519e-31  2.250398e-30 #> 161 -3.955022e-03 -1.857761e-03 -9.508699e-16 -1.962711e-31  3.537247e-31 #> 162 -1.904453e-05  2.794177e-03 -4.018596e-15 -5.110100e-31  3.357551e-31 #> 163  3.551556e-03  4.885113e-04  6.606621e-15  5.984016e-31  2.174123e-31 #> 164  2.330534e-04  8.299985e-05  2.000551e-15  1.969608e-31 -9.102471e-31 #> 165  3.182360e-03 -6.287138e-04  5.216702e-15  4.271607e-31  8.144778e-33 #> 166 -5.158723e-03 -2.696467e-03  5.284797e-15  1.057109e-30  1.368643e-30 #> 167 -1.324560e-03  4.372626e-03 -4.679121e-16  7.251747e-31 -2.356973e-31 #> 168  2.333305e-04 -4.200304e-03 -6.815538e-18  2.842307e-31 -1.309477e-32 #> 169  6.058045e-03  5.456425e-03  3.044247e-15  6.058959e-31  1.374827e-31 #> 170  1.154865e-03  1.001905e-03 -1.511761e-16  4.521206e-31  3.323940e-31 #> 171 -4.542064e-03 -9.965067e-04 -9.866267e-16  7.149565e-31  6.765325e-31 #> 172  3.025547e-03 -4.323182e-03  2.361293e-15  1.012640e-31  8.962258e-31 #> 173 -3.553016e-03  3.172111e-03  4.733772e-15  2.211005e-31 -6.601545e-31 #> 174  2.942713e-03 -2.059323e-03 -2.841821e-15  6.895310e-32  4.320699e-31 #> 175 -5.765698e-04 -1.293601e-03 -4.553385e-15  3.029858e-31  6.931171e-32 #> 176  3.415514e-03  3.045681e-04  4.544738e-15  7.299789e-32 -1.554572e-31 #> 177 -8.544062e-04  2.445757e-04  4.364596e-15  1.116886e-30 -6.051553e-31 #> 178 -1.273226e-03  1.264904e-03 -4.928706e-15 -2.834520e-31 -1.008488e-30 #> 179  1.015572e-02 -1.013851e-03 -2.123802e-15  2.927666e-31 -1.690115e-31 #> 180 -7.521751e-03 -4.149138e-04  9.322630e-15 -2.469890e-31  9.291880e-31 #> 181  3.925601e-03 -1.898174e-04  5.253774e-15  9.479143e-31 -7.230009e-31 #> 182 -4.657159e-03  4.397474e-04 -9.061588e-16 -1.121471e-30 -5.008418e-31 #> 183 -9.721619e-03 -1.023205e-03  1.302970e-14 -8.322722e-31 -7.691722e-31 #> 184  1.561458e-03  3.968628e-03  8.802122e-15  3.184070e-31  1.671882e-31 #> 185 -1.479047e-03 -1.744973e-03  1.117767e-15 -8.843084e-31 -1.841335e-31 #> 186 -1.811083e-03 -1.189812e-03 -5.511745e-15 -8.762391e-31  3.171928e-31 #> 187 -2.023931e-03  3.135673e-03  1.906544e-15 -1.306578e-30 -4.979171e-31 #> 188 -8.127979e-04  2.771025e-04 -4.892317e-15  4.127513e-31  1.908643e-31 #> 189  3.576360e-03 -2.931230e-03  4.949598e-15 -4.063476e-31  5.889096e-31 #> 190  2.865843e-03  5.125853e-05 -3.411077e-15  2.085894e-30 -7.490803e-31 #> 191  2.913087e-03  1.999636e-04  8.719201e-15  2.650995e-31  1.025239e-30 #> 192  4.717417e-03 -2.154757e-03 -1.349875e-15 -4.552346e-31  3.683197e-31 #> 193 -2.221547e-03 -4.521959e-04  4.648670e-15  5.105464e-31 -1.273271e-31 #> 194 -2.804689e-03  5.808134e-04  1.687556e-14  6.195058e-31  2.061991e-30 #> 195  6.575575e-03 -8.764838e-04 -1.066793e-15 -2.129362e-31  3.107811e-31 #> 196  6.432969e-03  1.780469e-03 -3.472259e-15 -7.840019e-31  4.053342e-31 #> 197 -8.013904e-03  2.424678e-03  1.390041e-15  2.201723e-31  4.963742e-31 #> 198 -3.771065e-03 -4.902673e-03 -1.509958e-16 -2.397287e-31  9.032893e-32 #> 199 -5.101914e-03 -3.607943e-03  5.306551e-15  1.658462e-31  4.141889e-31 #> 200  4.296196e-03 -2.180037e-03  9.938472e-15 -4.205553e-31 -7.241474e-31 #>     dummyVariableForColor #> 1                       1 #> 2                       1 #> 3                       1 #> 4                       1 #> 5                       1 #> 6                       1 #> 7                       1 #> 8                       1 #> 9                       1 #> 10                      1 #> 11                      1 #> 12                      1 #> 13                      1 #> 14                      1 #> 15                      1 #> 16                      1 #> 17                      1 #> 18                      1 #> 19                      1 #> 20                      1 #> 21                      1 #> 22                      1 #> 23                      1 #> 24                      1 #> 25                      1 #> 26                      1 #> 27                      1 #> 28                      1 #> 29                      1 #> 30                      1 #> 31                      1 #> 32                      1 #> 33                      1 #> 34                      1 #> 35                      1 #> 36                      1 #> 37                      1 #> 38                      1 #> 39                      1 #> 40                      1 #> 41                      1 #> 42                      1 #> 43                      1 #> 44                      1 #> 45                      1 #> 46                      1 #> 47                      1 #> 48                      1 #> 49                      1 #> 50                      1 #> 51                      1 #> 52                      1 #> 53                      1 #> 54                      1 #> 55                      1 #> 56                      1 #> 57                      1 #> 58                      1 #> 59                      1 #> 60                      1 #> 61                      1 #> 62                      1 #> 63                      1 #> 64                      1 #> 65                      1 #> 66                      1 #> 67                      1 #> 68                      1 #> 69                      1 #> 70                      1 #> 71                      1 #> 72                      1 #> 73                      1 #> 74                      1 #> 75                      1 #> 76                      1 #> 77                      1 #> 78                      1 #> 79                      1 #> 80                      1 #> 81                      1 #> 82                      1 #> 83                      1 #> 84                      1 #> 85                      1 #> 86                      1 #> 87                      1 #> 88                      1 #> 89                      1 #> 90                      1 #> 91                      1 #> 92                      1 #> 93                      1 #> 94                      1 #> 95                      1 #> 96                      1 #> 97                      1 #> 98                      1 #> 99                      1 #> 100                     1 #> 101                     1 #> 102                     1 #> 103                     1 #> 104                     1 #> 105                     1 #> 106                     1 #> 107                     1 #> 108                     1 #> 109                     1 #> 110                     1 #> 111                     1 #> 112                     1 #> 113                     1 #> 114                     1 #> 115                     1 #> 116                     1 #> 117                     1 #> 118                     1 #> 119                     1 #> 120                     1 #> 121                     1 #> 122                     1 #> 123                     1 #> 124                     1 #> 125                     1 #> 126                     1 #> 127                     1 #> 128                     1 #> 129                     1 #> 130                     1 #> 131                     1 #> 132                     1 #> 133                     1 #> 134                     1 #> 135                     1 #> 136                     1 #> 137                     1 #> 138                     1 #> 139                     1 #> 140                     1 #> 141                     1 #> 142                     1 #> 143                     1 #> 144                     1 #> 145                     1 #> 146                     1 #> 147                     1 #> 148                     1 #> 149                     1 #> 150                     1 #> 151                     1 #> 152                     1 #> 153                     1 #> 154                     1 #> 155                     1 #> 156                     1 #> 157                     1 #> 158                     1 #> 159                     1 #> 160                     1 #> 161                     1 #> 162                     1 #> 163                     1 #> 164                     1 #> 165                     1 #> 166                     1 #> 167                     1 #> 168                     1 #> 169                     1 #> 170                     1 #> 171                     1 #> 172                     1 #> 173                     1 #> 174                     1 #> 175                     1 #> 176                     1 #> 177                     1 #> 178                     1 #> 179                     1 #> 180                     1 #> 181                     1 #> 182                     1 #> 183                     1 #> 184                     1 #> 185                     1 #> 186                     1 #> 187                     1 #> 188                     1 #> 189                     1 #> 190                     1 #> 191                     1 #> 192                     1 #> 193                     1 #> 194                     1 #> 195                     1 #> 196                     1 #> 197                     1 #> 198                     1 #> 199                     1 #> 200                     1 #>  #> $pca #> **Results for the Principal Component Analysis (PCA)** #> The analysis was performed on 200 individuals, described by 180 variables #> *The results are available in the following objects: #>  #>    name               description                           #> 1  \"$eig\"             \"eigenvalues\"                         #> 2  \"$var\"             \"results for the variables\"           #> 3  \"$var$coord\"       \"coord. for the variables\"            #> 4  \"$var$cor\"         \"correlations variables - dimensions\" #> 5  \"$var$cos2\"        \"cos2 for the variables\"              #> 6  \"$var$contrib\"     \"contributions of the variables\"      #> 7  \"$ind\"             \"results for the individuals\"         #> 8  \"$ind$coord\"       \"coord. for the individuals\"          #> 9  \"$ind$cos2\"        \"cos2 for the individuals\"            #> 10 \"$ind$contrib\"     \"contributions of the individuals\"    #> 11 \"$call\"            \"summary statistics\"                  #> 12 \"$call$centre\"     \"mean of the variables\"               #> 13 \"$call$ecart.type\" \"standard error of the variables\"     #> 14 \"$call$row.w\"      \"weights for the individuals\"         #> 15 \"$call$col.w\"      \"weights for the variables\"           #>  #> $plot  #>  pcadf(mv, cols = 2:181, color = c(\"group\", \"otherGroup\"), returnData = FALSE)"},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Earth Mover's Distance between spectral histograms — pcv.emd","title":"Earth Mover's Distance between spectral histograms — pcv.emd","text":"pcv.emd can used calculate Earth Mover's Distance pairwise histograms wide dataframe multi value traits. expected used output mv_ag. See also pcv.euc euclidean distance histograms.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Earth Mover's Distance between spectral histograms — pcv.emd","text":"","code":"pcv.emd(   df,   cols = NULL,   reorder = NULL,   include = reorder,   mat = FALSE,   plot = TRUE,   parallel = getOption(\"mc.cores\", 1),   trait = \"trait\",   id = \"image\",   value = \"value\",   raiseError = TRUE,   method = \"emd\" )  pcv.euc(   df,   cols = NULL,   reorder = NULL,   include = reorder,   mat = FALSE,   plot = TRUE,   parallel = getOption(\"mc.cores\", 1),   trait = \"trait\",   id = \"image\",   value = \"value\",   raiseError = TRUE,   method = \"euc\" )"},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Earth Mover's Distance between spectral histograms — pcv.emd","text":"df Data frame use multi value traits wide format long format cols Columns use. Defaults NULL case columns used. Single strings used regex pattern column names (see examples).  vector names, positions, booleans also work.  long data taken regex pattern (full name)  use filtering trait column. reorder data reordered put similar rows together resulting plot? takes vector column names length 1 (see examples). include long dataframe returned columns added dataframe, labelled j (row positions compared histograms). matrix returned information stored row names. defaults reorder. mat Logical, data returned nrow x nrow matrix long dataframe? Default FALSE long dataframe returned. options comparable terms speed, although large datasets matrix version may slightly faster. plot Logical, plot returned? matrix made heatmap(), dataframe uses ggplot. parallel Number cores use. Defaults 1 unless \"mc.cores\" option set. trait Column name long data identify traits. defaults \"trait\". value column names data assumed long format, otherwise assumed wide format. id vector column names uniquely identifies observations data long format. Defaults \"image\". value column name values drawn long data. Defaults \"value\". raiseError Logical, warnings/errors raised potentially large output? easy ask many comparisons function goal argument catch give estimates much time something may take.  function expected take long warning error raised.   set FALSE time estimates made. method method use (one \"emd\" \"euc\"). Defaults \"emd\".","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Earth Mover's Distance between spectral histograms — pcv.emd","text":"dataframe/matrix (plot=FALSE) list dataframe/matrix \\ ggplot (plot=TRUE). returned data contains pairwise EMD values.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Earth Mover's Distance between spectral histograms — pcv.emd","text":"","code":"set.seed(123) test <- mvSim(   dists = list(     runif = list(min = 0, max = 100),     rnorm = list(mean = 90, sd = 20)   ),   n_samples = 10 ) test$meta1 <- rep(LETTERS[1:3], length.out = nrow(test)) test$meta2 <- rep(LETTERS[4:5], length.out = nrow(test))  x <- pcv.emd(   df = test, cols = \"sim\", reorder = \"group\",   include = c(\"meta1\", \"meta2\"), mat = FALSE,   plot = FALSE, parallel = 1 ) #> Estimated time of calculation is roughly 0.5 seconds using 1 cores in parallel. head(x) #>     i j   emd meta1_i meta2_i meta1_j meta2_j #> 11  1 1 0.000       B       D       B       D #> 111 1 1 0.000       B       D       B       D #> 112 1 2 1.463       B       D       C       E #> 12  2 1 1.463       C       E       B       D #> 113 1 3 0.813       B       D       A       D #> 13  3 1 0.813       A       D       B       D x2 <- pcv.emd(   df = test, cols = \"sim\", reorder = \"group\",   include = c(\"meta1\", \"meta2\"), mat = FALSE,   plot = FALSE, parallel = 1, method = \"euc\" ) #> Estimated time of calculation is roughly 0.5 seconds using 1 cores in parallel. head(x2) #>     i j        euc meta1_i meta2_i meta1_j meta2_j #> 11  1 1 0.00000000       B       D       B       D #> 111 1 1 0.00000000       B       D       B       D #> 112 1 2 0.04901020       B       D       C       E #> 12  2 1 0.04901020       C       E       B       D #> 113 1 3 0.04501111       B       D       A       D #> 13  3 1 0.04501111       A       D       B       D  # \\donttest{ tryCatch(   {     library(data.table)     file <- paste0(       \"https://media.githubusercontent.com/media/joshqsumner/\",       \"pcvrTestData/main/pcv4-multi-value-traits.csv\"     )     df1 <- read.pcv(file, \"wide\", reader = \"fread\")      df1$genotype <- substr(df1$barcode, 3, 5)     df1$genotype <- ifelse(df1$genotype == \"002\", \"B73\",       ifelse(df1$genotype == \"003\", \"W605S\",         ifelse(df1$genotype == \"004\", \"MM\", \"Mo17\")       )     )     df1$fertilizer <- substr(df1$barcode, 8, 8)     df1$fertilizer <- ifelse(df1$fertilizer == \"A\", \"100\",       ifelse(df1$fertilizer == \"B\", \"50\", \"0\")     )      w <- pcv.emd(df1,       cols = \"hue_frequencies\", reorder = c(\"fertilizer\", \"genotype\"),       mat = FALSE, plot = TRUE, parallel = 1     )   },   error = function(err) {     message(err)   } ) #> Error in .emdRaiseError(raiseError, df, parallel, trait = NULL): Stopping, estimated time of calculation is roughly 2.83 hours using 1 cores in parallel. #> If you wish to proceed then rerun this command with raiseError=FALSE  # Note on computational complexity # This scales as O^2, see the plot below for some idea # of the time for different input data sizes. emdTime <- function(x, n = 1) {   x^2 / n * 0.0023 } plot(   x = c(18, 36, 54, 72, 108, 135), y = c(0.74, 2.89, 6.86, 10.99, 26.25, 42.44),   xlab = \"N Input Images\", ylab = \"time (seconds)\" ) # benchmarked test data lines(x = 1:150, y = emdTime(1:150)) # exponential function   plot(   x = 1:1000, y = emdTime(1:1000), type = \"l\",   xlab = \"N Input Images\", ylab = \"time (seconds)\" )  # }"},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.joyplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Joyplots for multi value trait plantCV data — pcv.joyplot","title":"Make Joyplots for multi value trait plantCV data — pcv.joyplot","text":"Make Joyplots multi value trait plantCV data","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.joyplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Joyplots for multi value trait plantCV data — pcv.joyplot","text":"","code":"pcv.joyplot(   df = NULL,   index = NULL,   group = NULL,   y = NULL,   id = NULL,   bin = \"label\",   freq = \"value\",   trait = \"trait\",   fillx = TRUE )"},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.joyplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Joyplots for multi value trait plantCV data — pcv.joyplot","text":"df Data frame use. Long wide format accepted. index data long multi value trait character string must present `trait`. data wide string used find column names use wide data.  wide case include entire   trait name (ie, \"hue_frequencies\" instead \"hue_freq\"). group length 1 2 character vector. used faceting joyplot identifying groups testing. length 1 faceting done. y Optionally variable use y axis. useful three variables display. argument change faceting behavior add additional layer faceting (single length group faceted, length 2 group faceted group1 ~ group2). id Optionally variable show outline different replicates. Note ggridges::geom_density_ridges_gradient support transparency, fillx TRUE outer line show individual IDs. bin Column containing histogram (multi value trait) bins. Defaults \"label\". freq Column containing histogram counts. Defaults \"value\" trait Column containing phenotype names. Defaults \"trait\". fillx Logical, whether use ggridges::geom_density_ridges_gradient. Default T, F ggridges::geom_density_ridges used instead,  arbitrary fill. Note ggridges::geom_density_ridges_gradient  may issue message deprecated ggplot2 features.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.joyplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Joyplots for multi value trait plantCV data — pcv.joyplot","text":"Returns ggplot.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.joyplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Joyplots for multi value trait plantCV data — pcv.joyplot","text":"","code":"library(extraDistr) dists <- list(   rmixnorm = list(mean = c(70, 150), sd = c(15, 5), alpha = c(0.3, 0.7)),   rnorm = list(mean = 90, sd = 20),   rlnorm = list(meanlog = log(40), sdlog = 0.5) ) x_wide <- mvSim(   dists = dists, n_samples = 5, counts = 1000,   min_bin = 1, max_bin = 180, wide = TRUE ) pcv.joyplot(x_wide, index = \"sim\", group = \"group\")  x_long <- mvSim(   dists = dists, n_samples = 5, counts = 1000,   min_bin = 1, max_bin = 180, wide = FALSE ) x_long$trait <- \"x\" p <- pcv.joyplot(x_long, bin = \"variable\", group = \"group\") # we might want to display hues as their hue p + ggplot2::scale_fill_gradientn(colors = scales::hue_pal(l = 65)(360)) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale.  x_long$group2 <- \"example\" pcv.joyplot(x_long, bin = \"variable\", y = \"group\", fillx = FALSE)"},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.net.html","id":null,"dir":"Reference","previous_headings":"","what":"Network analysis of a distance matrix — pcv.net","title":"Network analysis of a distance matrix — pcv.net","text":"Easy igraph use pcv.emd output","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network analysis of a distance matrix — pcv.net","text":"","code":"pcv.net(   emd = NULL,   meta = NULL,   dissim = TRUE,   distCol = \"emd\",   filter = 0.5,   direction = \"greater\" )"},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network analysis of a distance matrix — pcv.net","text":"emd long dataframe returned pcv.emd. Currently function made work dataframe output, distance matrix output. meta Metadata carried pcv.emd output network, defaults NULL use metadata. Type conversion attempted columns. dissim Logical, distCol inverted make dissimilarity value? distCol name column containing distances/dissimilarities. Defaults \"emd\" compatability pcv.emd filter can either numeric (0.5) case taken filter edges values greater equal number kept character string (\"0.5\") case strongest X percentage edges kept. defaults 0.5 filtering, although considered best behavior every setting. NULL network almost always single blob, set high nodes. Note filtering happens converting dissimilarity dissim=TRUE. direction Direction filtering, can either \"greater\" \"lesser\".","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network analysis of a distance matrix — pcv.net","text":"Returns list containing three elements: nodes: dataframe node data. edges: dataframe edges nodes. graph: network igraph object","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network analysis of a distance matrix — pcv.net","text":"","code":"library(extraDistr) dists <- list(   rmixnorm = list(mean = c(70, 150), sd = c(15, 5), alpha = c(0.3, 0.7)),   rnorm = list(mean = 90, sd = 3) ) x <- mvSim(   dists = dists, n_samples = 5, counts = 1000,   min_bin = 1, max_bin = 180, wide = TRUE ) emd_df <- pcv.emd(x,   cols = \"sim\", reorder = c(\"group\"), mat = FALSE,   plot = FALSE, parallel = 1 ) #> Estimated time of calculation is roughly 0.1 seconds using 1 cores in parallel. net <- pcv.net(emd_df, meta = \"group\") net2 <- pcv.net(emd_df, meta = \"group\", filter = \"0.9\", direction = \"lesser\")"},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.plsr.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Partial Least Squares Regression on spectral data — pcv.plsr","title":"Run Partial Least Squares Regression on spectral data — pcv.plsr","text":"Partial Least Squares Regression (plsr) often used analyze spectral data.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.plsr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Partial Least Squares Regression on spectral data — pcv.plsr","text":"","code":"pcv.plsr(df, resps = NULL, spectra = NULL, train = 0.8, cv = 10, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.plsr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Partial Least Squares Regression on spectral data — pcv.plsr","text":"df Data frame containing metadata spectral histogram data resps Vector response variables. spectra Either one column name (case long data) set columns case wide data. single character string provided one column names taken pattern match set column names data use (see examples). train Proportion data use training data. cv Number cross validation iterations. ... arguments passed caret::train.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.plsr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Partial Least Squares Regression on spectral data — pcv.plsr","text":"list lists model performance, prediction target, model, plot, N components, variable influence projection components response variable.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.plsr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Partial Least Squares Regression on spectral data — pcv.plsr","text":"Note columns sum 0 training test data removed. function also uses 'pls' method pls package.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv.plsr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Partial Least Squares Regression on spectral data — pcv.plsr","text":"","code":"if (rlang::is_installed(\"pls\")) {   dists <- list(     rlnorm = list(meanlog = log(40), sdlog = 0.5),     rlnorm = list(meanlog = log(60), sdlog = 0.35)   )   mv <- mvSim(     dists = dists, n_samples = 100, counts = 1000,     min_bin = 1, max_bin = 180, wide = TRUE   )   sv <- growthSim(\"logistic\",     n = 5, t = 20,     params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5))   )   d <- cbind(sv, mv[, -1])   # note that this requires the \"pls\" package to be installed.   x <- pcv.plsr(df = d, resps = \"y\", spectra = grepl(\"^sim_\", colnames(d))) }"},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Default theme for ggplots made by pcvr functions. — pcv_theme","title":"Default theme for ggplots made by pcvr functions. — pcv_theme","text":"Default theme ggplots made pcvr functions.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default theme for ggplots made by pcvr functions. — pcv_theme","text":"","code":"pcv_theme()"},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default theme for ggplots made by pcvr functions. — pcv_theme","text":"ggplot theme","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcv_theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default theme for ggplots made by pcvr functions. — pcv_theme","text":"","code":"ggplot2::ggplot() +   pcv_theme()"},{"path":"https://danforthcenter.github.io/pcvr/reference/pcvrss-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class pcvrss for models specified in pcvr. — pcvrss-class","title":"Class pcvrss for models specified in pcvr. — pcvrss-class","text":"Models specified growthSS mvSS represented pcvrss object, contains model type, formulas, starting values priors, data model use, model backend use.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcvrss-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class pcvrss for models specified in pcvr. — pcvrss-class","text":"See methods(class = \"pcvrss\") overview available methods.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pcvrss-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class pcvrss for models specified in pcvr. — pcvrss-class","text":"formula formula used fit model. prior Priors model Bayesian model (ie using brms backend). initfun Initialization function model Bayesian model. df data used fit model. family model family, currently used brms backend. pcvrForm formula specified growthSS used pcvr functions. type model backend. model name main growth formula. call call growthSS mvSS. start Starting values frequentist models. taus Quantiles nlrq/rq models.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/reference/plot.conjugate.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a conjugate object. — plot.conjugate","title":"Plot a conjugate object. — plot.conjugate","text":"Plot conjugate object.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/plot.conjugate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a conjugate object. — plot.conjugate","text":"","code":"# S3 method for class 'conjugate' plot(x, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/plot.conjugate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a conjugate object. — plot.conjugate","text":"x object class conjugate. ... arguments, ignored.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/plot.conjugate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a conjugate object. — plot.conjugate","text":"","code":"x <- conjugate(   s1 = rnorm(10, 50, 10), s2 = rnorm(10, 60, 12), method = \"t\",   priors = list(list(mu = 40, sd = 10), list(mu = 45, sd = 8)),   rope_range = c(-5, 8), rope_ci = 0.89,   cred.int.level = 0.89, hypothesis = \"equal\" ) plot(x)"},{"path":"https://danforthcenter.github.io/pcvr/reference/plotPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"Check priors used in ease of use brms functions — plotPrior","title":"Check priors used in ease of use brms functions — plotPrior","text":"Check priors used ease use brms functions","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/plotPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check priors used in ease of use brms functions — plotPrior","text":"","code":"plotPrior(priors, type = \"density\", n = 200, t = 25)"},{"path":"https://danforthcenter.github.io/pcvr/reference/plotPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check priors used in ease of use brms functions — plotPrior","text":"priors named list means prior distributions. takes input prior argument growthSS. Alternatively, given output growthSS preform prior predictive check return plot growthPlot check ignoring arguments. Note priors must proper case (non-flat) fit likely strange looking due thick tailed default priors growthSS . type Either \"density\", default, model specified growthSS growthSim \"logistic\", \"gompertz\", \"monomolecular\", \"exponential\", \"linear\", \"power law\", \"double logistic\", \"double gompertz\". model type n draws prior simulated growth trendlines densities plotted margins distributions. n Numeric, type model many draws prior simulated? t Numeric, time passed growthSim. Defaults 25 (growthSim default).","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/plotPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check priors used in ease of use brms functions — plotPrior","text":"named list plots showing prior distributions growthSS use, optionally plot simulated growth curves using draws priors.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/reference/plotPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check priors used in ease of use brms functions — plotPrior","text":"","code":"set.seed(123) priors <- list(\"A\" = c(100, 130), \"B\" = c(10, 8), \"C\" = c(0.2, 0.1)) plotPrior(priors) #> $A  #>  #> $B  #>  #> $C  #>   plotPrior(priors, \"gompertz\")[[1]]"},{"path":"https://danforthcenter.github.io/pcvr/reference/plotVIP.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Variable Influence on Projection — plotVIP","title":"Plot Variable Influence on Projection — plotVIP","text":"function used visualize variable influence projection (vip) plsr model.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/plotVIP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Variable Influence on Projection — plotVIP","text":"","code":"plotVIP(plsrObject, i = 1, mean = FALSE, removePattern = \".*_\")"},{"path":"https://danforthcenter.github.io/pcvr/reference/plotVIP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Variable Influence on Projection — plotVIP","text":"plsrObject Output pcv.plsr index plsrObject use plsrObject contains models several outcomes. Can name position. Defaults 1. mean Logical, mean plotted (TRUE) components shown individually (FALSE, default). removePattern pattern remove make wavelength column numeric.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/plotVIP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Variable Influence on Projection — plotVIP","text":"ggplot showing variable influence projection","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/plotVIP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Variable Influence on Projection — plotVIP","text":"","code":"if (rlang::is_installed(\"pls\")) {   dists <- list(     rlnorm = list(meanlog = log(40), sdlog = 0.5),     rlnorm = list(meanlog = log(60), sdlog = 0.35)   )   mv <- mvSim(     dists = dists, n_samples = 100, counts = 1000,     min_bin = 1, max_bin = 180, wide = TRUE   )   sv <- growthSim(\"logistic\",     n = 5, t = 20,     params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5))   )   d <- cbind(sv, mv[, -1])   x <- pcv.plsr(df = d, resps = \"y\", spectra = grepl(\"^sim_\", colnames(d)))   plotVIP(x) }"},{"path":"https://danforthcenter.github.io/pcvr/reference/print.conjugate.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a conjugate object. — print.conjugate","title":"Print a conjugate object. — print.conjugate","text":"Print conjugate object.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/print.conjugate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a conjugate object. — print.conjugate","text":"","code":"# S3 method for class 'conjugate' print(x, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/print.conjugate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a conjugate object. — print.conjugate","text":"x object class conjugate. ... arguments, passed print.default.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/reference/print.conjugatesummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a conjugatesummary object. — print.conjugatesummary","title":"Print a conjugatesummary object. — print.conjugatesummary","text":"Print conjugatesummary object.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/print.conjugatesummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a conjugatesummary object. — print.conjugatesummary","text":"","code":"# S3 method for class 'conjugatesummary' print(x, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/print.conjugatesummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a conjugatesummary object. — print.conjugatesummary","text":"x object class conjugatesummary. ... arguments, currently ignored.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/reference/print.pcvrss.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a pcvrss object. — print.pcvrss","title":"Print a pcvrss object. — print.pcvrss","text":"Print pcvrss object.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/print.pcvrss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a pcvrss object. — print.pcvrss","text":"","code":"# S3 method for class 'pcvrss' print(x, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/print.pcvrss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a pcvrss object. — print.pcvrss","text":"x object class pcvrss method summary pcvrss. ... arguments, passed print.default.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/reference/print.pcvrsssummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a pcvrsssummary object. — print.pcvrsssummary","title":"Print a pcvrsssummary object. — print.pcvrsssummary","text":"Print pcvrsssummary object.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/print.pcvrsssummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a pcvrsssummary object. — print.pcvrsssummary","text":"","code":"# S3 method for class 'pcvrsssummary' print(x, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/print.pcvrsssummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a pcvrsssummary object. — print.pcvrsssummary","text":"x object class pcvrsssummary. ... arguments, currently ignored.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/reference/pwue.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pseudo water use efficiency from phenotype and watering data — pwue","title":"Calculate pseudo water use efficiency from phenotype and watering data — pwue","text":"Rate based water use efficiency (WUE) change biomass per unit water metabolized. Using image based phenotypes watering data can calculate pseudo-WUE (pwue) time. area_pixels used proxy biomass transpiration approximated using watering data. equation \\( \\frac{P_{t} - P_{t-1}}{W_{t_{end-1}}-W_{t_{start}} }\\), P phenotype W weight watering. Absolute value based WUE amount water used sustain plants biomass given period. equation \\(\\frac{P_{t}}{W_{t_{end-1}}-W_{t_{start}} }\\)","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pwue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pseudo water use efficiency from phenotype and watering data — pwue","text":"","code":"pwue(   df,   w = NULL,   pheno = \"area_pixels\",   time = \"timestamp\",   id = \"barcode\",   offset = 0,   pre_watering = \"weight_before\",   post_watering = \"weight_after\",   method = \"rate\" )"},{"path":"https://danforthcenter.github.io/pcvr/reference/pwue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pseudo water use efficiency from phenotype and watering data — pwue","text":"df Dataframe containing wide single-value phenotype data. already aggregated one row per plant per day (angles/rotations combined). w Watering data returned bw.water. pheno Phenotype column name, defaults \"area_pixels\" time Variable(s) identify plant given day. Defaults c(\"barcode\", \"DAS\"). id Variable(s) identify plant time. Defaults \"barcode\". offset Optionally can specify long imaging watering taken account. defaults 0, meaning plant watered directly imaged water counted towards WUE current image prior one. argument taken seconds. pre_watering Column containing weight watering w, defaults \"weight_before\". post_watering Column containing weight watering w, defaults \"weight_after\". method method use, options \"rate\", \"abs\", \"ndt\". \"rate\" method considers WUE change phenotype divided amount water added. \"abs\" method considers WUE amount water used plant given absolute size. \"ndt\" method calculates normalized daily transpiration, reciprocal \"abs\" method. \"rate\" method questions related efficiency using water grow \"abs\"/\"ndt\" suited questions efficient plant maintaining size given amount water much water uses given size.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pwue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate pseudo water use efficiency from phenotype and watering data — pwue","text":"data frame containing watering data     phenotype data new columns change phenotype (pheno_diff),     amount water used (total_water) interval phenotype measurements     (water added post pre phenotype measurement), start end times     interval well difference (timeLengthSeconds), pseudo water use efficiency     (pWUE).","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/pwue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate pseudo water use efficiency from phenotype and watering data — pwue","text":"","code":"set.seed(123) weight_before <- sort(round(rnorm(20, 100, 10), 0)) weight_after <- sort(round(rnorm(20, 120, 10), 0)) df <- data.frame(   time = seq_along(weight_before),   area_pixels = round(130 / (1 + exp( (12 - seq_along(weight_before))/3) ), 0),   weight_before,   weight_after,   barcode = 1,   other = \"x\" ) ex <- pwue(df, time = \"time\", method = \"rate\", id = c(\"barcode\", \"other\")) w <- df[, c(\"time\", \"weight_before\", \"weight_after\", \"barcode\")] ex2 <- pwue(df, w, time = c(\"time\", \"time\"), method = \"abs\") ex3 <- pwue(df, w, time = c(\"time\", \"time\"), method = \"ndt\")"},{"path":"https://danforthcenter.github.io/pcvr/reference/read.pcv.3.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in plantCV csv from bellwether phenotyper style experiments analyzed with plantCV versions <4. — read.pcv.3","title":"Read in plantCV csv from bellwether phenotyper style experiments analyzed with plantCV versions <4. — read.pcv.3","text":"Read plantCV csv bellwether phenotyper style experiments analyzed plantCV versions <4.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/read.pcv.3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in plantCV csv from bellwether phenotyper style experiments analyzed with plantCV versions <4. — read.pcv.3","text":"","code":"read.pcv.3(   file = NULL,   snapshotFile = NULL,   designFile = NULL,   metaCol = \"meta\",   metaForm = \"vis_view_angle_zoom_horizontal_gain_exposure_v_new_n_rep\",   joinSnapshot = \"id\",   conversions = NULL,   mode = \"long\",   ... )"},{"path":"https://danforthcenter.github.io/pcvr/reference/read.pcv.3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in plantCV csv from bellwether phenotyper style experiments analyzed with plantCV versions <4. — read.pcv.3","text":"file Path version 3 plantCV output containing phenotypes. snapshotFile path snapshot info metadata file, typically called SnapshotInfo.csv. needs column name corresponding `joinSnapshot` (defaults \"id\") can used join snapshot data phenotype data. Generally joining happen parsed section file path image present phenotype data. means including duplicate name `metaForm` overwritten parsing image paths, `metaForm` `joinSnapshot` duplicated names.  timestamp column snapshot data  converted datetime (assuming \"Y-m-d H:M:S\" format)  used calculate days starting (DAS) hours. designFile path csv file contains experimental design information (treatments, genotypes, etc) joined phenotype snapshot data shared columns. metaCol column name phenotype data read `file` argument. Generally bellwether experiments correspond image path. name split \"/\" characters last segment taken parsed number sections based `metaForm`. metaForm character string character vector column names parse `metaCol` . number names needs match length `metaCol` parsed.  character string provided assumed underscore delimited,  need underscores column name use `c(\"column_one\", \"column_two\",...)`  instead `column_one_column_two_...`. joinSnapshot Column name create phenotype data use joining snapshot data. default attempt make \"id\" column, parsed snapshot folder `metaCol` (\"/shares/sinc/data/Phenotyper/SINC1/ImagesNew/**snapshot1403**/\").  error raised column present snapshot data. conversions named list phenotypes rescaled value list. instance, zoom 1  `list(area = 13.2 * 3.7/46856)` convert pixels square cm 5MP bellwether camera. mode mode read data read.pcv. default \"long\" function built pcv3 output, generally wider format start pcv4 output. ... arguments passed read.pcv.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/read.pcv.3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in plantCV csv from bellwether phenotyper style experiments analyzed with plantCV versions <4. — read.pcv.3","text":"Returns dataframe potentially several files merged .","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/read.pcv.3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in plantCV csv from bellwether phenotyper style experiments analyzed with plantCV versions <4. — read.pcv.3","text":"","code":"# \\donttest{ tryCatch(   {     base_url <- \"https://raw.githubusercontent.com/joshqsumner/pcvrTestData/main/\"     bw <- read.pcv.3(       file = paste0(base_url, \"pcv3Phenos.csv\"),       metaCol = NULL,       reader = \"fread\"     )     bw <- read.pcv.3(       file = paste0(base_url, \"pcv3Phenos.csv\"),       metaCol = \"meta\", metaForm = \"vis_view_angle_zoom_horizontal_gain_exposure_v_new_n_rep\",       joinSnapshot = \"id\",       reader = \"fread\"     )     bw <- read.pcv.3(       file = paste0(base_url, \"pcv3Phenos.csv\"),       snapshotFile = paste0(base_url, \"pcv3Snapshot.csv\"),       designFile = paste0(base_url, \"pcv3Design.csv\"),       metaCol = \"meta\", metaForm = \"vis_view_angle_zoom_horizontal_gain_exposure_v_new_n_rep\",       joinSnapshot = \"id\", conversions = list(area = 13.2 * 3.7 / 46856),       reader = \"fread\"     )   },   error = function(e) {     message(e)   } ) # }"},{"path":"https://danforthcenter.github.io/pcvr/reference/read.pcv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in plantCV csv output in wide or long format — read.pcv","title":"Read in plantCV csv output in wide or long format — read.pcv","text":"Read plantCV csv output wide long format","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/read.pcv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in plantCV csv output in wide or long format — read.pcv","text":"","code":"read.pcv(   filepath,   mode = NULL,   traitCol = \"trait\",   labelCol = \"label\",   valueCol = \"value\",   reader = NULL,   filters = NULL,   awk = NULL,   ... )"},{"path":"https://danforthcenter.github.io/pcvr/reference/read.pcv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in plantCV csv output in wide or long format — read.pcv","text":"filepath Path csv file plantCV output. mode NULL (default) one \"wide\" \"long\", partial string matching supported. controls whether data returned long wide format. left NULL output format input format. traitCol Column phenotype names, defaults \"trait\". generally need changed default. , labelCol, valueCol used determine data long format raw state (csv file ). labelCol Column phenotype labels (units), defaults \"label\".   generally need changed default.   used traitCol mode=\"wide\" identify   unique traits since may ambiguous (ellipseCenter.x vs ellipseCenter.y, bins histograms, etc) valueCol Column phenotype values, defaults \"value\". generally need changed default. reader function use read data, defaults NULL case data.table::fread used filters place read.csv used otherwise. Note use read.csv filters place need specify header=FALSE piped output awk read correctly. fread slow needs vroom::vroom() may useful. filters large pcv output file read may desireable subset reading R, either ease use RAM limitations. filter argument works \"COLUMN VALUES\" syntax. can either character vector list character vectors. vectors needs column name, one \" \", \" \", \" = \" match string exactly, \"contains\" match awk style regex, set comma delimited values filter column (see examples). Note awk use awk pipe(). functionality work windows system. awk alternative filters direct call awk can supplied , case call used pipe(). ... arguments passed reader function. case 'fread' several defaults provided already can overwritten extra arguments.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/read.pcv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in plantCV csv output in wide or long format — read.pcv","text":"Returns data.frame wide long format.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/read.pcv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in plantCV csv output in wide or long format — read.pcv","text":"plantCV version 4 single value traits returned wide format json2csv multi value traits returned long format. Briefly plantCV data returned one long table sparked emphasis function reading data quickly parsing outside R. current plantCV output options largely unnecessary. data read using read.pcv traitCol, valueCol, labelCol arguments checked determine data long format. done keep compatibility interim versions plantcv output outputs single long format file. current implementation plantcv output can read wide long format files wide long format R. Keep mind 'mode' argument controls format returned R, format data saved csv file.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/read.pcv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in plantCV csv output in wide or long format — read.pcv","text":"","code":"# \\donttest{ tryCatch(   {     mv <- paste0(       \"https://media.githubusercontent.com/media/joshqsumner/\",       \"pcvrTestData/main/pcv4-multi-value-traits.csv\"     )     sv <- paste0(       \"https://raw.githubusercontent.com/joshqsumner/\",       \"pcvrTestData/main/pcv4-single-value-traits.csv\"     )      w2w <- read.pcv(sv, mode = \"wide\", reader = \"fread\")     dim(w2w)      w2l <- read.pcv(sv, mode = \"long\", reader = \"fread\")     dim(w2l)      l2w <- read.pcv(mv, mode = \"wide\", reader = \"fread\")     dim(l2w)      l2l <- read.pcv(mv, mode = \"long\", reader = \"fread\")     dim(l2l)   },   error = function(e) {     message(e)   } ) #> [1] 513720     21 # }"},{"path":"https://danforthcenter.github.io/pcvr/reference/relativeTolerance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate relative tolerance of some phenotype(s) relative to control — relativeTolerance","title":"Calculate relative tolerance of some phenotype(s) relative to control — relativeTolerance","text":"Often bellwether experiments curious effect treatment vs control. certain routes analysing data requires considering phenotypes relative differences compared control. Note conjugate function can also useful considering relative tolerance stress groups growth models another suggested way test relative tolerance questions.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/relativeTolerance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate relative tolerance of some phenotype(s) relative to control — relativeTolerance","text":"","code":"relativeTolerance(   df,   phenotypes = NULL,   grouping = NULL,   control = NULL,   controlGroup = NULL,   traitCol = \"trait\",   valueCol = \"value\" )"},{"path":"https://danforthcenter.github.io/pcvr/reference/relativeTolerance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate relative tolerance of some phenotype(s) relative to control — relativeTolerance","text":"df Dataframe use, can long wide format. phenotypes character vector column names phenotypes compared control. grouping character vector column names identify groups data. groups calibrated separately, exception group identifies control within greater hierarchy. Note levels grouping control group exist output NA. control column name variable used select control observations. left NULL (default) taken first string group argument. controlGroup level control variable compare groups . traitCol Column phenotype names, defaults \"trait\". generally need changed default. valueCol present colnames(df) data assumed long format. valueCol Column phenotype values, defaults \"value\". generally need changed default.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/relativeTolerance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate relative tolerance of some phenotype(s) relative to control — relativeTolerance","text":"dataframe relative tolerance columns added.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/relativeTolerance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate relative tolerance of some phenotype(s) relative to control — relativeTolerance","text":"","code":"# \\donttest{ f <- \"https://raw.githubusercontent.com/joshqsumner/pcvrTestData/main/pcv4-single-value-traits.csv\" tryCatch(   {     sv <- read.pcv(       f,       reader = \"fread\"     )     sv$genotype <- substr(sv$barcode, 3, 5)     sv$genotype <- ifelse(sv$genotype == \"002\", \"B73\",       ifelse(sv$genotype == \"003\", \"W605S\",         ifelse(sv$genotype == \"004\", \"MM\", \"Mo17\")       )     )     sv$fertilizer <- substr(sv$barcode, 8, 8)     sv$fertilizer <- ifelse(sv$fertilizer == \"A\", \"100\",       ifelse(sv$fertilizer == \"B\", \"50\", \"0\")     )      sv <- bw.time(sv,       plantingDelay = 0, phenotype = \"area_pixels\",       cutoff = 10, timeCol = \"timestamp\", group = c(\"barcode\", \"rotation\"), plot = FALSE     )     phenotypes <- colnames(sv)[19:35]     phenoForm <- paste0(\"cbind(\", paste0(phenotypes, collapse = \", \"), \")\")     groupForm <- \"DAS+DAP+barcode+genotype+fertilizer\"     form <- as.formula(paste0(phenoForm, \"~\", groupForm))     sv <- aggregate(form, data = sv, mean, na.rm = TRUE)     sv <- bw.outliers(sv,       phenotype = \"area_pixels\",       group = c(\"DAS\", \"genotype\", \"fertilizer\"),       plotgroup = c(\"barcode\")     )$data      pixels_per_cmsq <- 42.5^2 # pixel per cm^2     sv$area_cm2 <- sv$area_pixels / pixels_per_cmsq     sv$height_cm <- sv$height_pixels / 42.5      df <- sv     phenotypes <- c(\"area_cm2\", \"height_cm\")     grouping <- c(\"fertilizer\", \"genotype\", \"DAS\")     controlGroup <- \"100\"     control <- \"fertilizer\"      rt <- relativeTolerance(df, phenotypes, grouping, control, controlGroup)     head(rt)     sapply(rt, function(c) sum(is.na(c)))   },   error = function(e) {     message(e)   } ) #> Warning: 14 groupings had all observations removed #> fertilizer   genotype        DAS  phenotype     mu_rel     se_rel     mu_trt  #>          0          0          0          0         20         42          0  #>     se_trt mu_control se_control  #>         20         20         32  # }"},{"path":"https://danforthcenter.github.io/pcvr/reference/rqPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to visualize quantreg::rq general additive growth models. — rqPlot","title":"Function to visualize quantreg::rq general additive growth models. — rqPlot","text":"Models fit using growthSS inputs fitGrowth (similar models made means) can visualized easily using function. generally called growthPlot.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/rqPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to visualize quantreg::rq general additive growth models. — rqPlot","text":"","code":"rqPlot(   fit,   form,   df = NULL,   groups = NULL,   timeRange = NULL,   facetGroups = TRUE,   groupFill = FALSE,   virMaps = c(\"plasma\") )"},{"path":"https://danforthcenter.github.io/pcvr/reference/rqPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to visualize quantreg::rq general additive growth models. — rqPlot","text":"fit model fit, list model fits, returned fitGrowth type=\"nlrq\" model=\"gam\". form formula similar growthSS inputs (pcvrForm part output) specifying outcome, predictor, grouping structure data outcome ~ predictor|individual/group. individual group specified observed growth lines plotted. df dataframe use plotting observed growth curves top model. must supplied rq models. groups optional set groups keep plot. Defaults NULL case groups model plotted. timeRange optional range times use. can used view predictions future data avaiable data reached point (asymptotic size). facetGroups logical, groups separated facets? Defaults TRUE. groupFill logical, groups different colors? Defaults FALSE. TRUE viridis colormaps used order virMaps virMaps order viridis maps use. recycled necessary length. Defaults \"plasma\", generally informed growthPlot's default.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/rqPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to visualize quantreg::rq general additive growth models. — rqPlot","text":"Returns ggplot showing rq general additive model's quantiles  optionally individual growth lines.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/rqPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to visualize quantreg::rq general additive growth models. — rqPlot","text":"","code":"simdf <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ss <- growthSS(   model = \"gam\", form = y ~ time | id / group,   tau = c(0.25, 0.5, 0.75), df = simdf, start = NULL, type = \"nlrq\" ) #> Individual is not used with type = 'nlrq'. fits <- fitGrowth(ss) rqPlot(fits, form = ss$pcvrForm, df = ss$df, groupFill = TRUE)  rqPlot(fits, form = ss$pcvrForm, df = ss$df, groups = \"a\", timeRange = 1:10)   ss <- growthSS(   model = \"gam\", form = y ~ time | group,   tau = c(0.5), df = simdf, start = NULL, type = \"nlrq\" ) fit <- fitGrowth(ss) rqPlot(fit, form = ss$pcvrForm, df = ss$df, groupFill = TRUE)"},{"path":"https://danforthcenter.github.io/pcvr/reference/summary.conjugate.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a conjugate object. — summary.conjugate","title":"Summarize a conjugate object. — summary.conjugate","text":"Summarize conjugate object.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/summary.conjugate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a conjugate object. — summary.conjugate","text":"","code":"# S3 method for class 'conjugate' summary(object, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/summary.conjugate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a conjugate object. — summary.conjugate","text":"object object class conjugate. ... arguments, passed print.default.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/summary.pcvrss.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a pcvrss object. — summary.pcvrss","title":"Summarize a pcvrss object. — summary.pcvrss","text":"Summarize pcvrss object.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/summary.pcvrss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a pcvrss object. — summary.pcvrss","text":"","code":"# S3 method for class 'pcvrss' summary(object, ...)"},{"path":"https://danforthcenter.github.io/pcvr/reference/summary.pcvrss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a pcvrss object. — summary.pcvrss","text":"object object class pcvrss method summary pcvrss. ... arguments, passed print.default.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/survregPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to visualize survival::survreg models fit by fitGrowth. — survregPlot","title":"Function to visualize survival::survreg models fit by fitGrowth. — survregPlot","text":"Models fit using growthSS inputs fitGrowth (similar models made means) can visualized easily using function. generally called growthPlot.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/survregPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to visualize survival::survreg models fit by fitGrowth. — survregPlot","text":"","code":"survregPlot(   fit,   form,   groups = NULL,   df = NULL,   timeRange = NULL,   facetGroups = TRUE,   groupFill = FALSE,   virMaps = c(\"plasma\") )"},{"path":"https://danforthcenter.github.io/pcvr/reference/survregPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to visualize survival::survreg models fit by fitGrowth. — survregPlot","text":"fit model fit returned fitGrowth type=\"nls\". form formula similar growthSS inputs (pcvrForm part output) specifying outcome, predictor, grouping structure data outcome ~ predictor|individual/group. individual group specified observed growth lines plotted. groups optional set groups keep plot. Defaults NULL case groups model plotted. df dataframe use plotting observed growth curves top model. must supplied nls models. timeRange Ignored, included compatibility plotting functions. facetGroups logical, groups separated facets? Defaults TRUE. groupFill logical, groups different colors? Defaults FALSE. TRUE viridis colormaps used order virMaps virMaps order viridis maps use. recycled necessary length. Defaults \"plasma\", generally informed growthPlot's default.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/survregPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to visualize survival::survreg models fit by fitGrowth. — survregPlot","text":"Returns ggplot showing survival model's survival function.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/survregPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to visualize survival::survreg models fit by fitGrowth. — survregPlot","text":"","code":"df <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ss <- growthSS(   model = \"survival weibull\", form = y > 100 ~ time | id / group,   df = df, type = \"survreg\" ) fit <- fitGrowth(ss) survregPlot(fit, form = ss$pcvrForm, df = ss$df)  survregPlot(fit, form = ss$pcvrForm, df = ss$df, groups = \"a\")  survregPlot(fit,   form = ss$pcvrForm, df = ss$df, facetGroups = FALSE,   groupFill = TRUE, virMaps = c(\"plasma\", \"mako\") )"},{"path":"https://danforthcenter.github.io/pcvr/reference/testGrowth.html","id":null,"dir":"Reference","previous_headings":"","what":"Hypothesis testing for fitGrowth models. — testGrowth","title":"Hypothesis testing for fitGrowth models. — testGrowth","text":"Hypothesis testing fitGrowth models.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/testGrowth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hypothesis testing for fitGrowth models. — testGrowth","text":"","code":"testGrowth(ss = NULL, fit, test = \"A\")"},{"path":"https://danforthcenter.github.io/pcvr/reference/testGrowth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hypothesis testing for fitGrowth models. — testGrowth","text":"ss list output growthSS. required nls, nlme, brms models test given brms::hypothesis style written statement. fit model (list nlrq models) output fitGrowth. brms models can also data.frame draws. test description hypothesis test. can take two main forms, either parameter names vary comparing nested model (\"\", \"B\", \"C\") using anova hypothesis test/list hypothesis tests written character strings. latter method implemented nlrq models. vector parameters test model parameters vary group original model want test null model vary group. Alternatively nlrq models can comparison model terms written \"group_X|tau|par - group_Y|tau|par\", uses fat tailed T distribution make comparisons means quantile estimate. GAMs tests compare model splines either group interacting group model ignores grouping data. list hypothesis tests describe tests similar \".group1 - .group2*1.1\" can thought contrasts. brms models \"test\" argument passed brms::hypothesis, extensive documentation flexible. Note survreg survival::survdiff function used fewer hypothesis testing options available flexsurv models tested using contrasts via flexsurv::standsurv.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/testGrowth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hypothesis testing for fitGrowth models. — testGrowth","text":"list containing anova object comparing non-linear growth models null model.","code":""},{"path":"https://danforthcenter.github.io/pcvr/reference/testGrowth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hypothesis testing for fitGrowth models. — testGrowth","text":"nls nlme models anova run returned part list along null model.  nlrq models several assumptions made likelihood ratio test tau  run returned list.","code":""},{"path":[]},{"path":"https://danforthcenter.github.io/pcvr/reference/testGrowth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hypothesis testing for fitGrowth models. — testGrowth","text":"","code":"set.seed(123) simdf <- growthSim(\"logistic\",   n = 20, t = 25,   params = list(\"A\" = c(200, 160), \"B\" = c(13, 11), \"C\" = c(3, 3.5)) ) ss <- suppressMessages(growthSS(   model = \"logistic\", form = y ~ time | id / group,   df = simdf, type = \"nlrq\" )) fit <- fitGrowth(ss) testGrowth(ss, fit, \"A\") #> $`0.5` #> Model 1: y ~ A[group]/(1 + exp((B[group] - time)/C[group])) #> Model 2: y ~ A/(1 + exp((B[group] - time)/C[group])) #>   #Df  LogLik Df  Chisq Pr(>Chisq)     #> 1   6 -3899.4                          #> 2   5 -4028.2 -1 257.71  < 2.2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  testGrowth(ss, fit, \"a|0.5|A > b|0.5|A\") #>      Value Std. Error   t value Pr(>|t|) par group prob.greater #> 1 202.1163   2.817899  71.72588        0   A     a    0.9998036 #> 4 166.5326   1.252554 132.95448        0   A     b           NA  ss2 <- suppressMessages(growthSS(   model = \"logistic\", form = y ~ time | id / group,   df = simdf, type = \"nls\" )) fit2 <- fitGrowth(ss2) testGrowth(ss2, fit2, \"A\")$anova #> Analysis of Variance Table #>  #> Model 1: y ~ A/(1 + exp((B[group] - time)/C[group])) #> Model 2: y ~ A[group]/(1 + exp((B[group] - time)/C[group])) #>   Res.Df Res.Sum Sq Df Sum Sq F value    Pr(>F)     #> 1    995     204775                                 #> 2    994     171686  1  33089  191.57 < 2.2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 coef(fit2) # check options for contrast testing #>        A1        A2        B1        B2        C1        C2  #> 201.68366 165.22719  12.94484  10.80995   3.10079   3.44904  testGrowth(ss2, fit2, \"A1 - A2*1.1\") #>          Form Estimate       SE  t-value      p-value #> 1 A1 - A2*1.1 19.93375 2.523292 7.899899 7.368006e-15"},{"path":"https://danforthcenter.github.io/pcvr/news/index.html","id":"pcvr-1110","dir":"Changelog","previous_headings":"","what":"pcvr 1.1.1.0","title":"pcvr 1.1.1.0","text":"CRAN release: 2024-11-06 Fixing inelegant failure cran building bellwether vignette without wifi resubmitting cran.","code":""},{"path":"https://danforthcenter.github.io/pcvr/news/index.html","id":"pcvr-1101","dir":"Changelog","previous_headings":"","what":"pcvr 1.1.0.1","title":"pcvr 1.1.0.1","text":"Adding arguments mvSim allow easier simulation longitudinal multi-value traits growth model options supported growthSim.","code":""},{"path":"https://danforthcenter.github.io/pcvr/news/index.html","id":"pcvr-1100","dir":"Changelog","previous_headings":"","what":"pcvr 1.1.0.0","title":"pcvr 1.1.0.0","text":"Allowing multiple grouping variables used growthSS downstream functions.","code":""},{"path":"https://danforthcenter.github.io/pcvr/news/index.html","id":"pcvr-1006","dir":"Changelog","previous_headings":"","what":"pcvr 1.0.0.6","title":"pcvr 1.0.0.6","text":"Fixing growthSS behavior non-integer time options.","code":""},{"path":"https://danforthcenter.github.io/pcvr/news/index.html","id":"pcvr-1005","dir":"Changelog","previous_headings":"","what":"pcvr 1.0.0.5","title":"pcvr 1.0.0.5","text":"Added S3 class growthSS mvSS output (pcvrss) print/summary methods. Bug fixes brms models using splines without grouping variables. Bug fixes brms model plotting without grouping variables.","code":""},{"path":"https://danforthcenter.github.io/pcvr/news/index.html","id":"pcvr-1004","dir":"Changelog","previous_headings":"","what":"pcvr 1.0.0.4","title":"pcvr 1.0.0.4","text":"Added error handling examples read data github case run session without internet connection.","code":""},{"path":"https://danforthcenter.github.io/pcvr/news/index.html","id":"pcvr-1003","dir":"Changelog","previous_headings":"","what":"pcvr 1.0.0.3","title":"pcvr 1.0.0.3","text":"Changes frem allow using datetimes cases single timepoint modeled due singular grouping.","code":""},{"path":"https://danforthcenter.github.io/pcvr/news/index.html","id":"pcvr-1002","dir":"Changelog","previous_headings":"","what":"pcvr 1.0.0.2","title":"pcvr 1.0.0.2","text":"Change plotting methods avoid printing internal labels. Fixed problems growthSim simulate changepoint data incorrectly different changepoints groups Stan inv_logit function may available model prediction.","code":""},{"path":"https://danforthcenter.github.io/pcvr/news/index.html","id":"pcvr-1001","dir":"Changelog","previous_headings":"","what":"pcvr 1.0.0.1","title":"pcvr 1.0.0.1","text":"New mvSS function simplified interface modeling multi-value traits via growthSS, either longitudinally one timepoint.","code":""},{"path":"https://danforthcenter.github.io/pcvr/news/index.html","id":"pcvr-100","dir":"Changelog","previous_headings":"","what":"pcvr 1.0.0","title":"pcvr 1.0.0","text":"CRAN release: 2024-09-05 Initial CRAN submission.","code":""}]
